{"version":3,"sources":["webpack:///js/3.755852ebafebd67d5aa2.js","webpack:///./src/views/charts/keyboard.vue","webpack:///./~/zrender/lib/core/util.js?10f4**","webpack:///./~/echarts/lib/echarts.js?68a2**","webpack:///./~/echarts/lib/util/graphic.js?e267**","webpack:///./~/echarts/lib/util/number.js?43e3**","webpack:///./~/zrender/lib/core/vector.js?6654**","webpack:///./~/zrender/lib/graphic/Path.js?c119**","webpack:///./~/zrender/lib/core/env.js?9ccc**","webpack:///./~/echarts/lib/util/format.js?7f72**","webpack:///./~/echarts/lib/util/model.js?e2bd**","webpack:///./~/zrender/lib/core/BoundingRect.js?76f6**","webpack:///./~/echarts/lib/model/Model.js?f4df**","webpack:///./~/echarts/lib/util/clazz.js?3e66**","webpack:///./~/echarts/lib/model/Component.js?0e02**","webpack:///./~/echarts/lib/util/layout.js?2b1e**","webpack:///./~/zrender/lib/core/curve.js?9511**","webpack:///./~/zrender/lib/tool/color.js?284f**","webpack:///./~/zrender/lib/mixin/Eventful.js?223b**","webpack:///./~/zrender/lib/contain/text.js?3a43**","webpack:///./~/zrender/lib/core/event.js?24ff**","webpack:///./~/echarts/lib/scale/Scale.js?c922**","webpack:///./~/zrender/lib/config.js?2861**","webpack:///./~/zrender/lib/container/Group.js?8d57**","webpack:///./~/zrender/lib/core/PathProxy.js?69e9**","webpack:///./~/zrender/lib/core/matrix.js?97a2**","webpack:///./~/echarts/lib/model/mixin/makeStyleMapper.js?e2b1**","webpack:///./~/echarts/lib/CoordinateSystem.js?2b30**","webpack:///./~/echarts/lib/coord/axisHelper.js?4730**","webpack:///./~/echarts/lib/scale/Interval.js?08e9**","webpack:///./~/echarts/lib/util/component.js?cc72**","webpack:///./~/zrender/lib/core/timsort.js?0a74**","webpack:///./~/zrender/lib/graphic/Displayable.js?5c45**","webpack:///./~/zrender/lib/graphic/Gradient.js?5165**","webpack:///./~/echarts/lib/model/Series.js?186c**","webpack:///./~/echarts/lib/data/List.js?b096**","webpack:///./~/echarts/lib/chart/helper/Symbol.js?9fa3**","webpack:///./~/echarts/lib/coord/cartesian/AxisModel.js?0573**","webpack:///./~/echarts/lib/model/mixin/colorPalette.js?b454**","webpack:///./~/echarts/lib/util/symbol.js?be2c**","webpack:///./~/echarts/lib/view/Chart.js?72f3**","webpack:///./~/zrender/lib/Element.js?325b**","webpack:///./~/zrender/lib/animation/Animator.js?d2b9**","webpack:///./~/zrender/lib/animation/requestAnimationFrame.js?6d88**","webpack:///./~/zrender/lib/contain/util.js?0031**","webpack:///./~/zrender/lib/core/LRU.js?018e**","webpack:///./~/zrender/lib/core/guid.js?f0e4**","webpack:///./~/zrender/lib/core/log.js?26a2**","webpack:///./~/zrender/lib/graphic/Image.js?bf1b**","webpack:///./~/zrender/lib/graphic/Pattern.js?a97e**","webpack:///./~/zrender/lib/graphic/Style.js?22d9**","webpack:///./~/zrender/lib/graphic/helper/poly.js?788c**","webpack:///./~/echarts/lib/chart/helper/createListFromArray.js?e3fc**","webpack:///./~/echarts/lib/component/grid.js?5897**","webpack:///./~/echarts/lib/coord/cartesian/Grid.js?f167**","webpack:///./~/echarts/lib/util/throttle.js?56b3**","webpack:///./~/echarts/lib/visual/VisualMapping.js?299e","webpack:///./~/zrender/lib/graphic/LinearGradient.js?4250**","webpack:///./~/echarts/lib/chart/helper/SymbolDraw.js?6b79**","webpack:///./~/echarts/lib/component/tooltip.js?b491**","webpack:///./~/echarts/lib/view/Component.js?415a**","webpack:///./~/echarts/lib/ExtensionAPI.js?e283**","webpack:///./~/echarts/lib/chart/line.js?f251**","webpack:///./~/echarts/lib/chart/line/LineSeries.js?6f66**","webpack:///./~/echarts/lib/chart/line/LineView.js?018e**","webpack:///./~/echarts/lib/chart/line/lineAnimationDiff.js?8da6**","webpack:///./~/echarts/lib/chart/line/poly.js?c760**","webpack:///./~/echarts/lib/component/axis.js?8a87**","webpack:///./~/echarts/lib/component/axis/AxisBuilder.js?6417**","webpack:///./~/echarts/lib/component/axis/AxisView.js?f854**","webpack:///./~/echarts/lib/component/tooltip/TooltipContent.js?2c54**","webpack:///./~/echarts/lib/component/tooltip/TooltipModel.js?19ac**","webpack:///./~/echarts/lib/component/tooltip/TooltipView.js?ae52**","webpack:///./~/echarts/lib/coord/Axis.js?736c**","webpack:///./~/echarts/lib/coord/axisDefault.js?4492**","webpack:///./~/echarts/lib/coord/axisModelCommonMixin.js?a8d0**","webpack:///./~/echarts/lib/coord/axisModelCreator.js?34e4**","webpack:///./~/echarts/lib/coord/cartesian/Axis2D.js?9345**","webpack:///./~/echarts/lib/coord/cartesian/Cartesian.js?9246**","webpack:///./~/echarts/lib/coord/cartesian/Cartesian2D.js?103b**","webpack:///./~/echarts/lib/coord/cartesian/GridModel.js?1817**","webpack:///./~/echarts/lib/coord/cartesian/axisLabelInterval.js?b017**","webpack:///./~/echarts/lib/data/DataDiffer.js?f330**","webpack:///./~/echarts/lib/data/helper/completeDimensions.js?9c9e**","webpack:///./~/echarts/lib/layout/points.js?4302**","webpack:///./~/echarts/lib/loading/default.js?8a5f**","webpack:///./~/echarts/lib/model/Global.js?b9d3**","webpack:///./~/echarts/lib/model/OptionManager.js?a7a5**","webpack:///./~/echarts/lib/model/globalDefault.js?fd54**","webpack:///./~/echarts/lib/model/mixin/areaStyle.js?4e41**","webpack:///./~/echarts/lib/model/mixin/boxLayout.js?92d7**","webpack:///./~/echarts/lib/model/mixin/itemStyle.js?9011**","webpack:///./~/echarts/lib/model/mixin/lineStyle.js?3579**","webpack:///./~/echarts/lib/model/mixin/textStyle.js?e4c8**","webpack:///./~/echarts/lib/preprocessor/backwardCompat.js?f171**","webpack:///./~/echarts/lib/preprocessor/helper/compatStyle.js?aff6**","webpack:///./~/echarts/lib/processor/dataSample.js?6fcd**","webpack:///./~/echarts/lib/scale/Log.js?0ad0**","webpack:///./~/echarts/lib/scale/Ordinal.js?3a6b**","webpack:///./~/echarts/lib/scale/Time.js?6fdf**","webpack:///./~/echarts/lib/visual/seriesColor.js?4b6a**","webpack:///./~/echarts/lib/visual/symbol.js?518b**","webpack:///./~/zrender/lib/Handler.js?fbeb**","webpack:///./~/zrender/lib/Layer.js?f586**","webpack:///./~/zrender/lib/Painter.js?ee99**","webpack:///./~/zrender/lib/Storage.js?7e93**","webpack:///./~/zrender/lib/animation/Animation.js?8743**","webpack:///./~/zrender/lib/animation/Clip.js?fef9**","webpack:///./~/zrender/lib/animation/easing.js?64b6**","webpack:///./~/zrender/lib/contain/arc.js?7367**","webpack:///./~/zrender/lib/contain/cubic.js?b90e**","webpack:///./~/zrender/lib/contain/line.js?4326**","webpack:///./~/zrender/lib/contain/path.js?2e7f**","webpack:///./~/zrender/lib/contain/quadratic.js?f589**","webpack:///./~/zrender/lib/contain/windingLine.js?625a**","webpack:///./~/zrender/lib/core/GestureMgr.js?00fd**","webpack:///./~/zrender/lib/core/bbox.js?1b56**","webpack:///./~/zrender/lib/dom/HandlerProxy.js?2fc7**","webpack:///./~/zrender/lib/graphic/CompoundPath.js?8636**","webpack:///./~/zrender/lib/graphic/RadialGradient.js?895e**","webpack:///./~/zrender/lib/graphic/Text.js?3244**","webpack:///./~/zrender/lib/graphic/helper/roundRect.js?418d**","webpack:///./~/zrender/lib/graphic/helper/smoothBezier.js?2713**","webpack:///./~/zrender/lib/graphic/helper/smoothSpline.js?a17c**","webpack:///./~/zrender/lib/graphic/mixin/RectText.js?94ea**","webpack:///./~/zrender/lib/graphic/shape/Arc.js?2994**","webpack:///./~/zrender/lib/graphic/shape/BezierCurve.js?f5c4**","webpack:///./~/zrender/lib/graphic/shape/Circle.js?076e**","webpack:///./~/zrender/lib/graphic/shape/Line.js?7728**","webpack:///./~/zrender/lib/graphic/shape/Polygon.js?d37d**","webpack:///./~/zrender/lib/graphic/shape/Polyline.js?3cdb**","webpack:///./~/zrender/lib/graphic/shape/Rect.js?3b3d**","webpack:///./~/zrender/lib/graphic/shape/Ring.js?b71c**","webpack:///./~/zrender/lib/graphic/shape/Sector.js?9767**","webpack:///./~/zrender/lib/mixin/Animatable.js?35cb**","webpack:///./~/zrender/lib/mixin/Draggable.js?fbca**","webpack:///./~/zrender/lib/mixin/Transformable.js?f61b**","webpack:///./~/zrender/lib/tool/path.js?dc4b**","webpack:///./~/zrender/lib/tool/transformPath.js?ddb2**","webpack:///./~/zrender/lib/zrender.js?5dcd**","webpack:///./~/echarts/lib/chart/bar.js?931c**","webpack:///./~/echarts/lib/chart/bar/BarSeries.js?61cd**","webpack:///./~/echarts/lib/chart/bar/BarView.js?20fc**","webpack:///./~/echarts/lib/chart/bar/BaseBarSeries.js?72f5**","webpack:///./~/echarts/lib/chart/bar/barItemStyle.js?15d9**","webpack:///./~/echarts/lib/chart/bar/helper.js?25d2**","webpack:///./~/echarts/lib/component/title.js?e263*","webpack:///./~/echarts/lib/layout/barGrid.js?d23e**","webpack:///./~/echarts/lib/component/helper/sliderMove.js?10f2*","webpack:///./~/echarts/lib/component/visualMap/VisualMapModel.js?d82d","webpack:///./~/echarts/lib/component/visualMap/VisualMapView.js?c96c","webpack:///./~/echarts/lib/component/visualMap/helper.js?36ff","webpack:///./~/echarts/lib/component/visualMap/preprocessor.js?2b64","webpack:///./~/echarts/lib/component/visualMap/typeDefaulter.js?a2de","webpack:///./~/echarts/lib/component/visualMap/visualEncoding.js?1481","webpack:///./~/echarts/lib/component/visualMap/visualMapAction.js?ef4a","webpack:///./~/echarts/lib/visual/visualDefault.js?ab56","webpack:///./~/echarts/lib/visual/visualSolution.js?b636","webpack:///./~/echarts/lib/component/visualMap.js?3d8c","webpack:///./~/echarts/lib/component/visualMap/ContinuousModel.js?f81d","webpack:///./~/echarts/lib/component/visualMap/ContinuousView.js?4372","webpack:///./~/echarts/lib/component/visualMap/PiecewiseModel.js?722a","webpack:///./~/echarts/lib/component/visualMap/PiecewiseView.js?c929","webpack:///./~/echarts/lib/component/visualMapContinuous.js?50e4","webpack:///./~/echarts/lib/component/visualMapPiecewise.js?f0a3","webpack:///keyboard.vue","webpack:///keyboard.vue?c187","webpack:///./src/views/charts/keyboard.vue?f7ad","webpack:///./src/views/charts/keyboard.vue?019b","webpack:///./src/components/Charts/keyboard.vue","webpack:///./src/components/Charts/keyboard.vue?65e9","webpack:///./src/views/charts/keyboard.vue?68f2"],"names":["webpackJsonp","Array","concat","module","exports","__webpack_require__","injectStyle","ssrContext","Component","clone","source","result","typeStr","objToString","call","i","len","length","TYPED_ARRAY","constructor","from","BUILTIN_OBJECT","isPrimitive","isDom","key","hasOwnProperty","merge","target","overwrite","isObject","targetProp","sourceProp","isArray","isBuiltInObject","mergeAll","targetAndSources","extend","defaults","overlay","createCanvas","document","createElement","getContext","_ctx","util","indexOf","array","value","inherits","clazz","baseClazz","F","clazzPrototype","prototype","prop","superClass","mixin","isArrayLike","data","each","obj","cb","context","forEach","nativeForEach","map","nativeMap","push","reduce","memo","nativeReduce","filter","nativeFilter","find","bind","func","args","nativeSlice","arguments","apply","curry","this","isFunction","isString","type","nodeType","ownerDocument","eqNaN","retrieve","values","slice","Function","assert","condition","message","Error","setAsPrimitive","primitiveKey","HashMap","createHashMap","[object Function]","[object RegExp]","[object Date]","[object Error]","[object CanvasGradient]","[object CanvasPattern]","[object Image]","[object Canvas]","[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]","Object","toString","arrayProto","get","set","prefixedKey","removeKey","noop","global","createRegisterEventWithLowercaseName","method","eventName","handler","toLowerCase","Eventful","MessageCenter","ECharts","dom","theme","opts","prioritySortFunc","a","b","prio","themeStorage","id","group","_dom","zr","_zr","zrender","init","renderer","devicePixelRatio","width","height","_throttledZrFlush","throttle","zrUtil","flush","_theme","_chartsViews","_chartsMap","_componentsViews","_componentsMap","_api","ExtensionAPI","_coordSysMgr","CoordinateSystemManager","_messageCenter","_initEvents","resize","_pendingActions","timsort","visualFuncs","dataProcessorFuncs","animation","on","_onframe","doConvertPixel","methodName","finder","ecModel","_model","coordSysList","getCoordinateSystems","modelUtil","parseFinder","coordSys","__DEV__","console","warn","updateDirectly","ecIns","payload","mainType","subType","query","eachComponent","model","index","view","__viewId","__alive","doDispatchAction","silent","payloadType","actionWrap","actions","actionInfo","cptType","update","split","updateMethod","pop","parseClassType","IN_MAIN_PROCESS","payloads","batched","batch","item","eventObj","eventObjBatch","isHighDown","batchItem","action","event","main","sub","OPTION_UPDATED","updateMethods","prepareAndUpdate","trigger","flushPendingActions","pendingActions","shift","triggerUpdatedEvent","invokeUpdateMethod","api","component","componentModel","__model","updateZ","eachSeries","seriesModel","idx","chart","updateProgressiveAndBlend","updateHoverLayerStatus","prepareView","isComponent","viewList","viewMap","componentType","viewId","classType","Clazz","ComponentView","getClass","ChartView","add","__id","remove","dispose","splice","processData","process","stackSeriesData","stackedDataMap","series","stack","getData","previousStack","stackedOn","doLayout","visual","isLayout","doVisualEncoding","excludesLayout","clearColorPalette","doRender","componentView","render","chartView","storage","elCount","traverse","el","isGroup","env","node","useHoverLayer","ignore","frameDrawNum","needProgressive","progressive","Math","floor","stopAnimation","blendMode","canvasSupported","setStyle","z","zlevel","enableConnect","updateConnectedChartsStatus","charts","status","STATUS_KEY","eventActionMap","actionType","eventType","connectedGroups","makeActionFromEvent","otherCharts","instances","otherChart","dispatchAction","window","GlobalModel","OptionManager","ComponentModel","SeriesModel","graphic","colorTool","ACTION_REG","off","one","echartsProto","getDom","getZr","setOption","option","notMerge","lazyUpdate","optionManager","__lastOnlyGraphic","o","optionPreprocessorFuncs","setTheme","log","getModel","getOption","getWidth","getHeight","getRenderedCanvas","pixelRatio","backgroundColor","list","getDisplayList","painter","getDataURL","excludeComponents","excludesComponentViews","self","url","toDataURL","getConnectedDataURL","groupId","mathMin","min","mathMax","max","left","Infinity","top","right","bottom","canvasList","dpr","canvas","boundingRect","getBoundingClientRect","targetCanvas","img","Image","style","x","y","image","refreshImmediately","convertToPixel","convertFromPixel","containPixel","models","coordinateSystem","containPoint","getVisual","visualType","defaultMainType","dataIndexInside","indexOfRawIndex","dataIndex","getItemVisual","coordSysMgr","restoreData","create","isSingleCanvas","configLayer","clearColor","colorArr","parse","stringify","colorStops","background","updateView","clearAllVisual","updateVisual","updateLayout","optionChanged","resetOption","_loadingFX","showLoading","name","cfg","hideLoading","loadingEffects","opt","browser","weChat","MOUSE_EVENT_NAMES","eveName","e","params","dataModel","getSeriesByIndex","seriesIndex","getDataParams","dataType","eventData","isDisposed","_disposed","clear","idBase","Date","groupIdBase","echarts","version","dependencies","replace","nodeName","toUpperCase","clientWidth","clientHeight","setAttribute","connect","disConnect","getInstanceByDom","getAttribute","getInstanceById","registerTheme","registerPreprocessor","preprocessorFunc","registerProcessor","priority","processorFunc","isNaN","registerAction","test","registerCoordinateSystem","CoordinateSystem","register","registerLayout","layoutFunc","registerVisual","visualFunc","registerLoading","loadingFx","extendComponentModel","extendComponentView","extendSeriesModel","extendChartView","setCanvasCreator","creator","List","Model","number","format","matrix","vector","color","PRIORITY","PROCESSOR","FILTER","STATISTIC","VISUAL","LAYOUT","GLOBAL","CHART","COMPONENT","BRUSH","hasFillOrStroke","fillOrStroke","liftColor","lift","cacheElementStl","__hoverStlDirty","stroke","fill","hoverStyle","__hoverStl","normalStyle","__normalStl","doSingleEnterHover","__isHover","__zr","addHover","z2","doSingleLeaveHover","normalStl","removeHover","doEnterHover","child","doLeaveHover","setElementHoverStl","hoverStl","onElementMouseOver","__hoverSilentOnTouch","zrByTouch","__isEmphasis","onElementMouseOut","enterEmphasis","leaveEmphasis","animateOrSetProps","isUpdate","props","animatableModel","isAnimationEnabled","postfix","duration","getShallow","animationEasing","animationDelay","getAnimationDelayParams","animateTo","attr","pathTool","round","Path","Group","Text","Circle","Sector","Ring","Polygon","Polyline","Rect","Line","BezierCurve","Arc","CompoundPath","LinearGradient","RadialGradient","BoundingRect","extendShape","extendPath","pathData","extendFromString","makePath","rect","layout","path","createFromString","getBoundingRect","aspect","cx","cy","resizePath","mergePath","applyTransform","pathRect","m","calculateTransform","subPixelOptimizeLine","param","subPixelOptimize","shape","lineWidth","x1","x2","y1","y2","subPixelOptimizeRect","originX","originY","originWidth","originHeight","position","positiveOrNegative","doubledPosition","setHoverStyle","hoverSilentOnTouch","setText","textStyle","labelModel","labelPosition","labelOffset","labelColor","textStyleModel","textDistance","textFont","getFont","textPosition","textOffset","textFill","getTextColor","updateProps","initProps","getTransform","ancestor","mat","identity","mul","getLocalTransform","parent","vertex","transform","invert","transformDirection","direction","hBase","abs","vBase","groupTransition","g1","g2","getAnimatableProps","rotation","elMap1","g","elMap","anid","oldEl","newProp","_trim","str","linearMap","val","domain","range","clamp","subDomain","subRange","parsePercent","percent","all","match","parseFloat","NaN","precision","toFixed","asc","arr","sort","getPrecision","count","getPrecisionSafe","dotIndex","getPixelPrecision","dataExtent","pixelExtent","LN10","dataQuantity","sizeQuantity","isFinite","MAX_SAFE_INTEGER","remRadian","radian","pi2","PI","isRadianAroundZero","parseDate","ret","quantity","pow","nice","exp10","f","reformIntervals","littleThan","lg","interval","close","curr","currClose","isNumeric","v","ArrayCtor","Float32Array","out","copy","v1","v2","scaleAndAdd","sqrt","lenSquare","div","dot","scale","s","normalize","d","distance","distanceSquare","negate","lerp","t","lengthSquare","dist","distSquare","Displayable","PathProxy","pathContain","Pattern","getCanvasPattern","pathProxyForDraw","__dirtyPath","strokeContainThreshold","brush","ctx","prevEl","hasStroke","hasFill","hasFillGradient","hasStrokeGradient","hasFillPattern","hasStrokePattern","setTransform","__dirty","_fillGradient","getGradient","_strokeGradient","fillStyle","strokeStyle","lineDash","lineDashOffset","ctxLineDash","setLineDash","getGlobalScale","setScale","beginPath","setLineDashOffset","buildPath","rebuildPath","restoreTransform","text","drawRectText","shapeCfg","inBundle","createPathProxy","_rect","needsUpdateRect","rectWithStroke","_rectWithStroke","w","lineScale","strokeNoScale","getLineScale","contain","localPos","transformCoordToLocal","containStroke","dirty","dirtyPath","refresh","__clipTarget","animateShape","loop","animate","attrKV","setShape","Sub","extendFrom","defaultShape","thisShape","navigator","os","ua","firefox","ie","edge","touchEventsSupported","pointerEventsSupported","userAgent","numberUtil","textContain","formatUtil","addCommas","toCamelCase","upperCaseFirst","group1","charAt","normalizeCssArray","encodeHTML","String","TPL_VAR_ALIAS","wrapVar","varName","seriesIdx","formatTpl","tpl","paramsList","encode","seriesLen","$vars","alias","k","s2d","formatTime","date","getFullYear","M","getMonth","getDate","h","getHours","getMinutes","getSeconds","capitalFirst","substr","truncateText","has","nubmerUtil","normalizeToArray","defaultEmphasis","subOpts","emphasisOpt","emphasis","normalOpt","normal","subOptName","LABEL_OPTIONS","getDataItemValue","dataItem","isDataItemOption","converDataValue","dimInfo","dimType","createDataFormatModel","dataFormatMixin","seriesName","rawValue","getRawValue","rawDataIndex","getRawIndex","getName","itemOpt","getRawDataItem","componentSubType","seriesType","getFormattedLabel","dimIndex","itemModel","getItemModel","formatter","formatTooltip","mappingToExists","exists","newCptOptions","exist","cptOption","isIdInner","makeIdAndName","mapResult","idMap","existCpt","keyInfo","idNum","compressBatches","batchA","batchB","makeMap","sourceBatch","otherMap","seriesId","dataIndices","otherDataIndices","j","lenj","mapToArray","isData","mapA","mapB","queryDataIndex","indexOfName","parsedKey","queryType","queryParam","queryComponents","vec2","v2ApplyTransform","union","other","lt","rb","lb","rt","maxX","maxY","sx","sy","translate","intersect","ax0","ax1","ay0","ay1","bx0","bx1","by0","by1","plain","parentModel","doGet","pathArr","getParent","getParentMethod","clazzUtil","mergeOption","ignoreParent","parsePath","thisParentModel","isEmpty","Ctor","setReadOnly","properties","customizeGetParent","enableClassExtend","checkClassType","superCall","superApply","IS_CONTAINER","host","hasOwn","RootClass","mandatoryMethods","$constructor","proto","ExtendedClass","enableClassManagement","entity","options","makeContainer","container","registerClass","componentMainType","throwWhenNotFound","getClassesByMainType","hasClass","getAllClassMainTypes","types","hasSubTypes","registerWhenExtend","originalExtend","getDependencies","deps","arrayPush","componentUtil","componentIndex","defaultOption","dependentModels","uid","layoutMode","extraOpt","getUID","mergeDefaultAndTheme","inputPositionParams","getLayoutParams","themeModel","getTheme","getDefaultOption","mergeLayoutParam","optionUpdated","newCptOption","isInit","optList","Class","getReferringComponents","enableSubTypeDefaulter","enableTopologicalTravel","boxLayout","orient","gap","maxWidth","maxHeight","currentLineMaxSize","eachChild","nextX","nextY","nextChild","childAt","nextChildRect","moveX","newline","moveY","LOCATION_PARAMS","box","vbox","hbox","getAvailableSize","positionInfo","containerRect","margin","containerWidth","containerHeight","getLayoutRect","verticalMargin","horizontalMargin","positionElement","hv","boundingMode","needLocalTransform","elPos","dx","dy","targetOption","newOption","names","newParams","newValueCount","merged","mergedValueCount","enoughParamNumber","ignoreSize","hasProp","hasValue","hNames","vNames","hResult","vResult","copyLayoutParams","isAroundZero","EPSILON","isNotAroundZero","cubicAt","p0","p1","p2","p3","onet","cubicDerivativeAt","cubicRootAt","roots","c","A","B","C","n","t1","disc","K","t2","discSqrt","mathSqrt","Y1","Y2","mathPow","ONE_THIRD","T","theta","acos","ASqrt","tmp","cos","THREE_SQRT","sin","t3","cubicExtrema","extrema","cubicSubdivide","p01","p12","p23","p012","p123","p0123","cubicProjectPoint","x0","y0","x3","y3","prev","next","d1","d2","_v0","_t","_v1","v2DistSquare","EPSILON_NUMERIC","_v2","quadraticAt","quadraticDerivativeAt","quadraticRootAt","quadraticExtremum","divider","quadraticSubdivide","quadraticProjectPoint","v2Create","clampCssByte","clampCssAngle","clampCssFloat","parseCssInt","parseInt","parseCssFloat","cssHueToRgb","m1","m2","p","setRgba","r","copyRgba","putToCache","colorStr","rgbaArr","lastRemovedArr","colorCache","put","cached","kCSSColorTable","op","ep","fname","alpha","hsla2rgba","iv","hsla","rgba","l","rgba2hsla","H","S","R","G","vMin","vMax","delta","L","deltaR","deltaG","deltaB","level","toHex","fastMapToColor","normalizedValue","colors","leftIndex","rightIndex","ceil","leftColor","rightColor","dv","mapToColor","fullOutput","modifyHSL","modifyAlpha","arrColor","LRU","transparent","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","arrySlice","_$handlers","_h","isSilent","newList","argLen","triggerWithContext","getTextWidth","textWidthCache","textLines","measureText","textWidthCacheCounter","TEXT_CACHE_MAX","getTextRect","textAlign","textBaseline","textLineLen","lineHeight","adjustTextPositionOnRect","textRect","textHeight","halfHeight","ellipsis","maxIterations","minChar","cnCharWidth","ascCharWidth","placeholder","contentWidth","ellipsisWidth","textLine","subLength","estimateLength","join","charCode","charCodeAt","font","clientToLocal","calculate","defaultGetZrXY","layerX","offsetX","zrX","zrY","layerY","offsetY","clientX","clientY","normalizeEvent","touch","targetTouches","changedTouches","zrDelta","wheelDelta","detail","addEventListener","isDomLevel2","attachEvent","removeEventListener","detachEvent","stop","preventDefault","stopPropagation","cancelBubble","returnValue","Dispatcher","Scale","_extent","_interval","scaleProto","extent","unionExtent","unionExtentFromData","dim","getDataExtent","getExtent","setExtent","start","end","thisExtent","getTicksLabels","labels","ticks","getTicks","getLabel","config","debugMode","Element","_children","__storage","children","childOfName","childCount","_doAdd","addBefore","nextSibling","addToStorage","addChildrenToStorage","delFromStorage","delChildrenFromStorage","removeAll","includeChildren","tmpRect","tmpMat","invisible","childRect","curve","bbox","CMD","Q","Z","min2","max2","mathCos","mathSin","mathAbs","hasTypedArray","notSaveData","_saveData","_xi","_yi","_x0","_y0","_ux","_uy","_len","_lineDash","_dashOffset","_dashIdx","_dashSum","moveTo","addData","lineTo","exceedUnit","_needsDash","_dashedLineTo","bezierCurveTo","_dashedBezierTo","quadraticCurveTo","_dashedQuadraticTo","arc","startAngle","endAngle","anticlockwise","arcTo","radius","closePath","toStatic","lineDashSum","offset","setData","appendPath","appendSize","appendPathData","cmd","_expandData","_prevCmd","newData","dash","dashSum","nDash","bezierLen","tmpLen","Number","MAX_VALUE","xi","yi","fromLine","fromCubic","fromQuadratic","rx","ry","fromArc","ux","uy","dTheta","psi","fs","scaleX","scaleY","isEllipse","rotate","out0","out1","out2","out3","out4","out5","rad","aa","ac","atx","ab","ad","aty","st","ct","vx","vy","det","excludes","propName","_coordinateSystems","coordinateSystemCreators","coordinateSystems","creater","coordinateSystemCreator","OrdinalScale","IntervalScale","axisHelper","getScaleExtent","axis","axisDataLen","boundaryGap","span","scaleType","getMin","getMax","fixMin","fixMax","originalExtent","setBlank","getNeedCrossZero","niceScaleExtent","splitNumber","base","niceExtent","minInterval","getInterval","intervalScale","origin","setInterval","createScaleByModel","axisType","getCategories","ifAxisCrossZero","getAxisLabelInterval","tickCoords","isAxisHorizontal","textSpaceTakenRect","autoLabelInterval","accumulatedLabelInterval","step","tickCoord","getFormattedLabels","labelFormatter","tick","mathFloor","mathCeil","roundingErrorFix","niceTicks","_niceExtent","reverse","expandSize","random","subTypeDefaulters","registerSubTypeDefaulter","defaulter","determineSubType","componentTypeMain","dependencyGetter","makeDepndencyGraph","fullNameList","graph","noEntryList","thisItem","createDependencyGraphItem","originalDeps","availableDeps","getAvailableDependencies","entryCount","dependentName","predecessor","thatItem","successor","dep","topologicalTravel","targetNameList","callback","removeEdge","succComponentType","removeEdgeAndAdd","targetNameSet","currComponentType","currVertex","isInTargetNameSet","minRunLength","DEFAULT_MIN_MERGE","makeAscendingRun","lo","hi","compare","runHi","reverseRun","binaryInsertionSort","mid","pivot","gallopLeft","hint","lastOffset","maxOffset","gallopRight","TimSort","pushRun","_runStart","_runLength","runStart","stackSize","runLength","mergeRuns","mergeAt","forceMergeRuns","start1","length1","start2","length2","mergeLow","mergeHigh","cursor1","cursor2","dest","count1","count2","exit","_minGallop","minGallop","DEFAULT_MIN_GALLOPING","customCursor","customDest","remaining","ts","minRun","force","Style","__clipPaths","RectText","draggable","dragging","culling","cursor","rectHover","beforeBrush","afterBrush","rectContain","coord","animateStyle","useStyle","Gradient","addColorStop","classUtil","colorPaletteMixin","legendDataProvider","visualColorAccessPath","getInitialData","label","fillDataTextStyle","newSeriesOption","cloneShallow","getLinkedData","getRawData","coordDimToDataDim","coordDim","dataDimToCoordDim","dataDim","getBaseAxis","multipleSeries","formattedValue","valStr","getDimensionInfo","colorEl","animationEnabled","getColorFromPalette","scope","getAxisTooltipDataIndex","getTooltipPosition","normalizeDimensions","dimensions","cloneListForMapAndSample","original","excludeDimensions","allDimensions","hostModel","transferProperties","_storage","originalStorage","dimStore","globalObj","Float64Array","Int32Array","dataCtors","float","int","ordinal","time","DataDiffer","TRANSFERABLE_PROPERTIES","__wrappedMethods","dimensionInfos","dimensionNames","dimensionName","dimensionInfo","stackable","_dimensionInfos","indices","_nameList","_idList","_optionModels","_visual","_layout","_itemVisuals","_itemLayouts","_graphicEls","_rawData","listProto","hasItemOption","getDimension","initData","nameList","dimValueGetter","size","dimensionInfoMap","idList","nameRepeatCount","DataCtor","dimName","stackedValue","getValues","dimData","dimExtent","getSum","sum","rawIndex","indexOfNearest","maxDistance","nearestIdx","minDist","diff","rawIdx","getId","dims","dimSize","filterSelf","newIndices","keep","mapArray","tmpRetValue","retValue","downSample","dimension","rate","sampleValue","sampleIndex","targetStorage","originalIndices","frameValues","frameIndices","frameSize","otherList","otherIdList","setVisual","setLayout","getLayout","getItemLayout","setItemLayout","clearItemLayouts","itemVisual","setItemVisual","setItemDataAndSeriesIndex","setItemGraphicEl","getItemGraphicEl","eachItemGraphicEl","dimensionInfoList","wrapMethod","injectFunction","originalMethod","res","TRANSFERABLE_METHODS","CHANGABLE_METHODS","getSymbolSize","symbolSize","getScale","Symbol","seriesScope","updateData","driftSymbol","drift","symbolUtil","symbolProto","_createSymbol","symbolType","symbolPath","createSymbol","_symbolType","stopSymbolAnimation","toLastFrame","getSymbolPath","highlight","downplay","setZ","setDraggable","_updateCommon","_seriesModel","normalStyleAccessPath","emphasisStyleAccessPath","normalLabelAccessPath","emphasisLabelAccessPath","itemStyle","hoverItemStyle","symbolRotate","symbolOffset","hoverLabelModel","hoverAnimation","getItemStyle","elStyle","setColor","opacity","valueDim","onEmphasis","ratio","onNormal","fadeOut","getAxisType","axisDim","axisModelCreator","AxisModel","resetRange","getCoordSysModel","gridIndex","gridId","extraOption","colorIdx","colorNameMap","colorPalette","Triangle","Diamond","Pin","angle","asin","tanX","tanY","cpLen","cpLen2","Arrow","symbolCtors","line","roundRect","square","circle","diamond","pin","arrow","triangle","symbolShapeMakers","symbolBuildProxies","textVerticalAlign","proxySymbol","symbolPathSetColor","symbolStyle","symbolShape","__isEmptyBrush","Chart","elSetState","state","toggleHighlight","dataIdx","chartProto","guid","Transformable","Animatable","clipPath","decomposeTransform","beforeUpdate","afterUpdate","updateTransform","hide","show","setClipPath","addSelfToZr","removeClipPath","removeSelfFromZr","animators","addAnimator","removeAnimator","defaultGetter","defaultSetter","interpolateNumber","interpolateString","interpolateArray","arrDim","len2","fillArr","arr0","arr1","arr0Len","arr1Len","arraySlice","isArraySame","catmullRomInterpolateArray","catmullRomInterpolate","v0","cloneValue","rgba2String","createTrackClip","animator","easing","oneTrackDone","keyframes","getter","_getter","setter","_setter","useSpline","trackLen","trackMaxTime","firstVal","isValueArray","isValueColor","isValueString","kfPercents","kfValues","prevValue","isAllValueEqual","colorArray","lastValue","_target","lastFrame","lastFramePercent","onframe","frame","clip","Clip","life","_loop","delay","_delay","ondestroy","Animator","_tracks","_clipCount","_doneList","_onframeList","_clipList","when","tracks","during","pause","_paused","resume","isPaused","_doneCallback","doneList","lastClip","clipCount","addClip","oldOnFrame","forwardToLast","clipList","removeClip","done","getClips","requestAnimationFrame","msRequestAnimationFrame","mozRequestAnimationFrame","webkitRequestAnimationFrame","setTimeout","PI2","normalizeRadian","LinkedList","head","tail","linkedListProto","insert","entry","Entry","insertEntry","maxSize","_list","_map","_maxSize","_lastRemovedEntry","LRUProto","removed","leastUsedEntry","idStart","ZImage","globalImageCache","src","_image","cachedImgObj","onload","pending","sWidth","sHeight","drawImage","repeat","createPattern","createLinearGradient","createRadialGradient","STYLE_COMMON_PROPS","shadowBlur","shadowOffsetX","shadowOffsetY","textStroke","textShadowBlur","textShadowOffsetX","textShadowOffsetY","textTransform","textRotation","blend","prevStyle","firstDraw","styleName","globalAlpha","globalCompositeOperation","otherStyle","newStyle","canvasGradient","styleProto","smoothSpline","smoothBezier","points","smooth","controlPoints","smoothConstraint","cp1","cp2","firstDataNotNull","ifNeedCompleteOrdinalData","sampleItem","createListFromArray","coordSysName","creators","registeredCoordSys","axesInfo","completeDimensions","categoryIndex","createNameList","categories","categoryAxesModels","isStackable","getDimTypeByAxis","categoryAxisModel","categoryDim","dataLen","cartesian2d","axesModels","xAxisModel","yAxisModel","xAxisType","yAxisType","isXAxisCateogry","isYAxisCategory","singleAxis","singleAxisModel","singleAxisType","isCategory","single","polar","polarModel","angleAxisModel","findAxisModel","radiusAxisModel","radiusAxisType","angleAxisType","isAngleAxisCateogry","isRadiusAxisCateogry","geo","gridModel","getRect","xAxis","yAxis","grid","isAxisUsedInTheGrid","axisModel","getLabelUnionRect","labelCount","isLabelIgnored","singleRect","Grid","_coordsMap","_coordsList","_axesMap","_axesList","_initCartesian","updateAxisTransfrom","coordBase","axisExtent","axisExtentSum","toGlobalCoord","toLocalCoord","findAxesModels","axesTypes","isCartesian2D","Cartesian2D","Axis2D","gridProto","ifAxisCanNotOnZero","otherAxisDim","axes","axesMap","_updateScale","onZero","adjustAxes","axesList","isHorizontal","gridRect","inverse","getBoxLayoutParams","labelUnionRect","getAxis","axisIndex","axesMapOnDim","getCartesian","xAxisIndex","yAxisIndex","coordList","_findConvertTarget","cartesian","dataToPoint","dataToCoord","pointToData","coordToData","coordsList","point","createAxisCreator","axisPosition","axisPositionUsed","onBand","axesCount","addAxis","grids","lib","ORIGIN_METHOD","RATE","fn","debounce","exec","lastExec","getTime","timer","currCall","lastCall","clearTimeout","createOrUpdate","fnAttr","throttleType","originFn","lastThrottleType","preprocessForPiecewise","thisOption","pieceList","hasSpecialVisual","piece","originIndex","preprocessForSpecifiedCategory","categoryMap","cate","visualArr","CATEGORY_DEFAULT_VISUAL_INDEX","normalizeVisualRange","doNotNeedPair","symbol","makePartialColorVisualHandler","applyValue","applyVisual","mapValueToVisual","_doMap","makeDoMap","doMapToArray","normalized","makeApplyVisual","doMapCategory","doMapFixed","sourceExtent","linear","category","piecewise","getSpecifiedVisual","fixed","pieceIndex","VisualMapping","findPieceIndex","zrColor","mappingMethod","_normalizeData","normalizers","visualHandler","visualHandlers","getColorMapper","getNormalizer","parsedVisual","isNormalized","returnRGBArray","colorHue","colorSaturation","colorLightness","colorAlpha","symbolCfg","listVisualTypes","visualTypes","addVisualHandler","isValidType","eachVisual","mapVisual","isPrimary","newVisual","newVal","retrieveVisuals","hasVisual","prepareVisualTypes","type1","type2","dependsOn","visualType1","visualType2","findClosestWhenOutside","updatePossible","newAbs","possibleI","pieceValue","globalCoord","SymbolDraw","symbolCtor","_symbolCtor","symbolNeedsDraw","isIgnore","symbolDrawProto","oldData","_data","SymbolCtor","newIdx","symbolEl","oldIdx","execute","enableAnimation","componentProto","chartInstance","echartsAPIList","legendHoverLink","clipOverflow","lineStyle","smoothMonotone","showSymbol","showAllSymbol","connectNulls","sampling","hoverLayerThreshold","isPointsSame","points1","points2","getSmooth","getAxisExtentWithGap","getGlobalExtent","halfBandWidth","getBandWidth","dir","sign","getStackedOnPoints","baseAxis","valueAxis","getOtherAxis","valueStart","baseDataOffset","stackedOnSameSign","stackedData","createGridClipShape","hasAnimation","xExtent","yExtent","createPolarClipShape","angleAxis","getAngleAxis","radiusAxis","getRadiusAxis","radiusExtent","angleExtent","RADIAN","r0","clockwise","createClipShape","turnPointsIntoStep","stepTurnAt","baseIndex","stepPoints","nextPt","pt","stepPt","middle","stepPt2","getVisualGradient","visualMetaList","visualMeta","stops","stopLen","outerColors","minCoord","maxCoord","coordSpan","unshift","gradient","lineAnimationDiff","polyHelper","lineGroup","symbolDraw","_symbolDraw","_lineGroup","lineStyleModel","areaStyleModel","isCoordSysPolar","prevCoordSys","_coordSys","polyline","_polyline","polygon","_polygon","isAreaChart","stackedOnPoints","isSymbolIgnore","_getSymbolIgnoreFunc","__temp","_step","_newPolygon","_stackedOnPoints","_points","_updateAnimation","_newPolyline","visualColor","getLineStyle","lineJoin","stackedOnSmooth","getAreaStyle","categoryAxis","getAxesByScale","current","stackedOnCurrent","stackedOnNext","__points","updatedDataInfo","diffStatus","idx1","ptIdx","getStackedOnPoint","diffData","diffResult","oldStackedOnPoints","newStackedOnPoints","oldCoordSys","newCoordSys","currPoints","nextPoints","currStackedPoints","nextStackedPoints","sortedIndices","rawIndices","diffItem","pointAdded","currentPt","sortedCurrPoints","sortedNextPoints","sortedCurrStackedPoints","sortedNextStackedPoints","sortedStatus","isPointNull","drawSegment","segLen","allLen","smoothMin","smoothMax","prevIdx","v2Copy","cp0","nextIdx","nextP","ratioNextSeg","prevP","lenPrevSeg","lenNextSeg","vec2Min","vec2Max","getBoundingBox","ptMin","ptMax","stackedOnBBox","makeAxisEventDataBase","innerTextLayout","verticalAlign","rotationDiff","endTextLayout","textRotate","onLeft","tooltipOpt","AxisBuilder","nameDirection","tickDirection","labelDirection","dumbGroup","_transform","_dumbGroup","hasBuilder","builders","getGroup","axisLine","pt1","pt2","lineCap","axisTick","isBlank","tickModel","tickLen","tickInterval","labelInterval","ticksCoords","getTicksCoords","ifIgnoreOnTick","axisLabel","isTwoLabelOverlapped","firstRect","nextRect","axisLabelShow","labelMargin","labelRotation","labelLayout","categoryData","textEls","triggerEvent","tickVal","itemTextStyleModel","textColor","pos","labelBeforeFormat","textEl","targetType","firstLabel","lastLabel","axisName","nameLocation","gapSignal","nameRotation","axisNameAvailableWidth","truncateOpt","truncatedText","formatterParams","__fullText","__truncatedText","tooltip","content","rawTick","layoutAxis","getZero","theAxis","rawAxisPosition","rectBound","axisOffset","posMap","dirMap","getLabelInterval","axisBuilderAttrs","selfBuilderAttrs","AxisView","oldAxisGroup","_axisGroup","axisBuilder","_splitLine","splitLineModel","lineColors","lineInterval","lineCount","colorIndex","_splitArea","splitAreaModel","areaColors","prevX","prevY","areaInterval","areaStyle","assembleTransition","transitionText","vendors","vendorPrefix","assembleFont","cssText","fontSize","assembleCssText","tooltipModel","transitionDuration","padding","borderName","camelCase","TooltipContent","_x","_y","appendChild","_container","_show","_hideTimeout","onmouseenter","enterable","_inContent","onmousemove","eventUtil","dispatch","onmouseleave","hideLater","_hideDelay","stl","currentStyle","defaultView","getComputedStyle","domStyle","display","innerHTML","setContent","isShow","showContent","triggerOn","alwaysShowContent","confine","showDelay","hideDelay","borderColor","borderRadius","borderWidth","extraCssText","axisPointer","animationDurationUpdate","animationEasingUpdate","crossStyle","shadowStyle","dataEqual","makeLineShape","makeRectShape","makeSectorShape","refixTooltipPosition","viewWidth","viewHeight","confineTooltipPosition","calcTooltipPosition","domWidth","domHeight","rectWidth","rectHeight","updatePosition","positionExpr","ifSeriesSupportAxisTrigger","_axisPointers","tooltipContent","_tooltipContent","_tooltipModel","_ecModel","_lastHover","_alwaysShowContent","_seriesGroupByAxis","_prepareAxisTriggerData","crossText","_crossText","_lastX","_lastY","_refreshUpdateTimeout","manuallyShowTip","_tryShow","_mousemove","_hide","_showTimeout","seriesHaveDataOnIndex","_series","isTriggerAxis","findHover","manuallyHideTip","seriesGroupByAxis","globalTrigger","_showAxisTooltip","_ticket","_hideAxisPointer","_resetLastHover","_showItemTooltipContent","subTooltipModel","defaultHtml","asyncTicket","_showTooltipContent","axisPointerModel","axisPointerType","_showAxisPointer","allNotShow","seriesCoordSysSameAxis","allCoordSys","contentNotChange","lastHover","valIndex","_showSinglePointer","_showPolarPointer","_showCartesianPointer","_dispatchAndShowSeriesTooltipContent","moveGridLine","otherExtent","targetShape","pointerEl","_getPointerElement","moveAnimation","moveGridShadow","bandWidth","_updateCrossText","otherAxis","movePolarLine","mouseCoord","pointToCoord","coordToPoint","movePolarShadow","crossStyleModel","pointerModel","initShape","axisPointers","pointerType","styleModel","isShadow","elementType","seriesList","rootTooltipModel","baseDimIndex","sampleSeriesIndex","payloadBatch","firstDataIndex","firstLine","seriesTooltipModel","html","ticket","cbTicket","fixExtentWithBands","nTick","normalizedExtent","Axis","containData","alignWithLabel","bands","getBands","coords","getLabelsCoords","_isBlank","nameRotate","nameTruncate","nameTextStyle","nameGap","inside","splitLine","splitArea","timeAxis","logAxis","logBase","rangeStart","rangeEnd","setRange","axisDefault","AXIS_TYPES","BaseAxisModelClass","axisTypeDefaulter","extraDefaultOption","axisLabelInterval","coordExtent","_labelInterval","dimAxisMapper","_axes","Cartesian","_dimList","getAxes","_dataCoordConvert","input","dimList","output","axisX","axisY","dataToPoints","containLabel","defaultKeyGetter","oldArr","newArr","oldKeyGetter","newKeyGetter","_old","_new","_oldKeyGetter","_newKeyGetter","initIndexMap","keyArr","keyGetter","existence","_add","_update","_remove","oldDataIndexMap","newDataIndexMap","oldDataKeyArr","newDataKeyArr","defaultNames","extraPrefix","value0","retrieveValue","guessOrdinal","eachSeriesByType","maskColor","mask","labelRect","mergeTheme","themeItem","initBase","baseOption","OPTION_INNER_KEY","_seriesIndices","globalDefault","getComponentsByTypes","componentsMap","existComponent","createSeriesIndices","seriesModels","filterBySubType","components","cpt","assertSeriesInitialized","_optionManager","mountOption","timelineOption","getTimelineOption","mediaOptions","getMediaOption","mediaOption","visitComponent","newCptOptionList","resultItem","ComponentModelClass","newCptTypes","componentOption","getComponent","cpts","isIdArray","isNameArray","findComponents","queryCond","q","indexAttr","idAttr","nameAttr","queryResult","getSeriesByName","oneSeries","getSeriesByType","getSeries","rawSeriesIndex","eachRawSeries","eachRawSeriesByType","isSeriesFiltered","filterSeries","filteredSeries","componentTypes","_timelineOptions","_mediaList","_mediaDefault","_currentMediaIndices","_optionBackup","_newBaseOption","parseRawOption","rawOption","isNew","mediaDefault","timelineOptions","mediaList","timelineOpt","timeline","media","singleMedia","preProcess","applyMediaQuery","ecWidth","ecHeight","realMap","aspectratio","applicatable","matched","QUERY_REG","operator","realAttr","real","expect","indicesEquals","indices1","indices2","oldOption","newCptOpt","oldCptOpt","oldOptionBackup","newParsedOption","isRecreate","optionBackup","timelineModel","getCurrentIndex","platform","fontFamily","fontStyle","fontWeight","animationDuration","animationThreshold","progressiveThreshold","getBorderLineDash","lineType","getLineDash","dotSize","dashSize","gTextStyleModel","compatLayoutProperties","LAYOUT_PROPERTIES","compatStyle","COMPATITABLE_COMPONENTS","COMPATITABLE_SERIES","seriesOpt","clockWise","pointerColor","dataRange","visualMap","componentName","compatItemStyle","itemStyleOpt","POSSIBLE_STYLES","normalItemStyleOpt","emphasisItemStyleOpt","markPoint","markLine","mpData","mlData","samplers","average","nearest","indexSampler","sampler","fixRoundingError","originalVal","intervalScaleProto","mathLog","LogScale","_originalScale","originalScale","powVal","__fixMin","__fixMax","approxTickNum","err","rank","bisect","TimeScale","stepLvl","_stepLvl","ONE_HOUR","approxInterval","scaleLevelsLen","scaleLevels","yearSpan","ONE_SECOND","ONE_MINUTE","ONE_DAY","encodeColor","colorAccessPath","defaultSymbolType","legendSymbol","itemSymbolType","itemSymbolSize","makeEventPacket","eveType","targetInfo","topTarget","gestureEvent","pinchX","pinchY","pinchScale","EmptyProxy","isHover","displayable","SILENT","Draggable","handlerNames","Handler","proxy","painterRoot","_hovered","_lastTouchMoment","mousemove","lastHovered","hovered","hoveredTarget","lastHoveredTarget","setCursor","dispatchToElement","mouseout","innerDom","element","toElement","relatedTarget","parentNode","eventArgs","setCursorStyle","cursorStyle","eventHandler","eventPacket","eachOtherLayer","layer","exclude","hoverCheckResult","_downel","_upel","returnFalse","createDom","newDom","newDomStyle","Layer","onselectstart","domBack","ctxBack","motionBlur","lastFrameAlpha","initContext","createBackBuffer","clearAll","haveMotionBLur","clearRect","clearColorGradientOrPattern","__canvasGradient","save","fillRect","restore","parseInt10","isLayerValid","__builtin__","preProcessLayer","__unusedCount","postProcessLayer","isDisplayableCulled","viewRect","isClipPathChanged","clipPaths","prevClipPaths","doClip","createRoot","domRoot","Painter","root","singleCanvas","_opts","_singleCanvas","rootStyle","zlevelList","_zlevelList","layers","_layers","_layerConfig","_width","_height","mainLayer","_domRoot","_getSize","_progressiveLayers","_hoverlayer","_hoverElements","getViewportRoot","paintAll","_paintList","refreshHover","_startProgessive","__hoverMir","elMirror","__from","hoverElements","clearHover","hoverLayer","displayableSortFunc","getLayer","originalEl","invTransform","_doPaintEl","token","_progressiveToken","_doPaintList","_furtherProgressive","_progress","_clearProgressive","_updateLayerStatus","eachBuiltinLayer","flushProgressiveLayer","currentLayer","currentZLevel","currentProgressiveLayer","layerProgress","progressiveLayerIdx","elZLevel","elFrame","__frame","MAX_PROGRESSIVE_LAYER_NUMBER","renderScope","__progress","__maxProgress","__nextIdxNotProg","forcePaint","prevClipLayer","prevElClipPaths","insertLayer","layersMap","prevLayer","virtual","prevDom","insertBefore","firstChild","eachLayer","getLayers","progressiveLayers","elCountsLastFrame","progressiveElCountsLastFrame","lastProgressiveKey","progressiveLayerCount","frameCount","elProgress","_clearLayer","layerConfig","delLayer","removeChild","clearLayer","imageLayer","displayList","whIdx","wh","cwh","plt","prb","pathToImage","shadowBlurSize","leftMargin","rightMargin","topMargin","bottomMargin","pathTransform","ImageShape","imgShape","shapeCompareFunc","Storage","_roots","_displayList","_displayListLen","includeIgnore","updateDisplayList","_updateAndAddDisplayable","userSetClipPath","currentClipPath","parentClipPath","addRoot","delRoot","_renderList","Animation","stage","_clips","_running","_time","_pausedTime","_pauseStart","clips","deferredEvents","deferredClips","_needsRemove","fire","_startLoop","_life","_initialized","onrestart","easingFuncs","globalTime","deltaTime","_startTime","easingFunc","schedule","restart","remainder","arg","quadraticIn","quadraticOut","quadraticInOut","cubicIn","cubicOut","cubicInOut","quarticIn","quarticOut","quarticInOut","quinticIn","quinticOut","quinticInOut","sinusoidalIn","sinusoidalOut","sinusoidalInOut","exponentialIn","exponentialOut","exponentialInOut","circularIn","circularOut","circularInOut","elasticIn","elasticOut","elasticInOut","backIn","backOut","backInOut","bounceIn","bounceOut","bounceInOut","_l","atan2","_a","_b","isAroundEqual","swapExtrema","windingCubic","nRoots","y0_","y1_","nExtrema","unit","windingQuadratic","y_","x_","windingArc","containPath","isStroke","windingLine","cubic","quadratic","pointPair","center","GestureMgr","_track","recognize","_doTrack","_recognize","touches","trackItem","recognizers","gestureInfo","pinch","track","pinchEnd","pinchPre","pinchCenter","extremity","fromPoints","xDim","yDim","tx","ty","eventNameFix","processGesture","gestureMgr","_gestureMgr","setTouchTimer","instance","_touching","_touchTimer","isPointerFromTouch","initDomHandler","makeMouseHandler","touchHandlerNames","_handlers","domHandlers","pointerHandlerNames","mouseHandlerNames","HandlerDomProxy","mountHandlers","eventTool","pointerEventNames","pointerdown","pointerup","pointermove","pointerout","nm","touchstart","mousedown","touchmove","touchend","mouseup","click","handlerDomProxyProto","paths","_updatePathDirty","strokeText","fillText","r1","r2","r3","r4","total","v2Min","v2Max","v2Scale","v2Distance","v2Add","isLoop","constraint","prevPoint","nextPoint","cps","d0","interpolate","segs","w2","w3","maxValue","lastIndexOf","align","baseline","shadowColor","textShadowColor","unitX","unitY","someVectorAt","isTangent","cpx2","cpy2","cpx1","cpy1","curveTool","pointAt","tangentAt","roundRectHelper","shadowTemp","modified","animatingShape","pathSplitted","_animateToShallow","objShallow","propertyCount","_dragStart","_drag","_dragEnd","draggingTarget","_draggingTarget","dropTarget","lastDropTarget","_dropTarget","mIdentity","transformableProto","parentHasTransform","tmpTransform","transformCoordToGlobal","processArc","fa","psiDeg","xp","yp","lambda","cxp","cyp","vAngle","u","vRatio","createPathProxyFromString","cs","cc","RegExp","prevCmd","cpx","cpy","ctlPtx","ctlPty","createPathOptions","pathProxy","transformPath","vMag","pathEls","pathList","pathEl","pathBundle","nPoint","mathAtan2","delInstance","HandlerProxy","useVML","painterCtors","ZRender","getInstance","registerPainter","rendererType","vml","handerProxy","_needsRefresh","oldDelFromStorage","oldAddToStorage","zLevel","_needsRefreshHover","refreshHoverImmediately","clearAnimation","barLayoutGrid","brushSelector","createRect","animationModel","rectShape","animateProperty","animateTarget","removeRect","getRectItemLayout","fixedLineWidth","getLineWidth","signX","signY","updateStyle","itemStyleModel","getBarItemStyle","labelPositionOutside","helper","setLabel","rawLayout","BAR_BORDER_WIDTH_QUERY","BarView","_renderOnCartesian","newIndex","oldIndex","getMarkerPosition","barMinHeight","labelText","subtext","subtarget","itemGap","subtextStyle","titleModel","subtextStyleModel","subText","subTextEl","link","sublink","open","groupRect","layoutOption","layoutRect","alignStyle","getSeriesStackId","getAxisKey","calBarWidthAndOffset","barSeries","columnsMap","columnsOnAxis","remainedWidth","autoWidthCount","categoryGap","stacks","stackId","barWidth","barMaxWidth","barGap","barCategoryGap","barGapPercent","autoWidth","column","lastColumn","widthSum","barWidthAndOffset","lastStackCoords","lastStackCoordsOrigin","columnLayoutInfo","columnOffset","columnWidth","valueAxisStart","lastCoord","lastCoordOrigin","handleEnds","mode","handleIndex","getRealDelta","handleMinMax","visualDefault","visualSolution","DEFAULT_COLOR","VisualMapModel","stateList","replacableOptionKeys","dataBound","inRange","outOfRange","itemWidth","itemHeight","contentColor","inactiveColor","textGap","_dataExtent","targetVisuals","controllerVisuals","itemSize","realtime","replaceVisualOption","resetItemSize","completeVisualOption","resetVisual","supplementVisualOption","createVisualMappings","controller","resetTargetSeries","allSeriesIndex","eachTargetSeries","isTargetSeries","is","formatValueText","edgeSymbols","isMinMax","textValue","resetExtent","getDataDimension","optDim","completeSingle","defa","completeInactive","stateExist","stateAbsent","optExist","optAbsent","visualData","completeController","symbolExists","symbolSizeExists","visuals","setSelected","getValueState","getVisualMeta","autoPositionValues","visualMapModel","renderBackground","getControllerVisual","targetValue","visualCluster","visualObj","forceState","defaultColor","mappings","visualMapping","convertOpacityToAlpha","__alphaForOpacity","positionGroup","getItemAlign","modelOption","itemAlign","ecSize","realIndex","paramsSet","reals","fakeValue","layoutInput","rParam","convertDataIndex","pieces","splitList","calculable","processSingleVisualMap","prepareVisualMeta","getColorVisual","valueState","resultVisual","mapping","selected","active","inactive","hasKeys","createMappings","Creater","__hidden","visualMappings","mappingOption","keys","eachItem","valueOrIndex","rawDataItem","visualTypesMap","getColorStopValues","stopValues","DEFAULT_BAR_BOUND","ContinuousModel","hoverLink","hoverLinkDataSize","hoverLinkOnHandle","_resetRange","_orient","auto","getSelected","dataInterval","findTargetDataIndices","setStop","oVals","iVals","iIdx","oIdx","iLen","oLen","first","stopsLen","createPolygon","onDrift","onDragEnd","ondragend","createHandlePoints","textSize","createIndicatorPoints","isRange","halfHoverLinkSize","extentMax","HOVER_LINK_OUT","getHalfHoverLinkSize","sizeExtent","HOVER_LINK_SIZE","useHoverLinkOnHandle","VisualMapView","sliderMove","ContinuousView","_shapes","_dataInterval","_handleEnds","_useHandle","_hoverLinkDataIndices","_dragging","_hovering","_buildView","thisGroup","_resetInterval","_renderBar","dataRangeText","_renderEndsText","_updateView","_enableHoverLinkToSeries","_enableHoverLinkFromSeries","endsIndex","barGroup","_applyTransform","targetGroup","shapes","useHandle","_createBarGroup","_dragHandle","handleThumbs","handleLabels","handleLabelPoints","_createHandle","_createIndicator","handleThumb","handleLabel","handleLabelPoint","indicator","indicatorLabel","indicatorLabelPoint","isEnd","_updateInterval","visualMapId","_clearHoverLinkToSeries","_doHoverLinkToSeries","forSketch","outOfRangeHandleEnds","inRangeHandleEnds","visualInRange","_createBarVisual","visualOutOfRange","barColor","barPoints","_updateHandle","_makeColorGradient","symbolSizes","_createBarPoints","handlesColor","currValue","textPoint","_showIndicator","cursorValue","rangeSymbol","_hoverLinkFromSeriesMouseOver","_hideIndicator","_clearHoverLinkFromSeries","cursorPos","hoverOnBar","hoverRange","valueRange","oldBatch","newBatch","resultBatches","_dispatchHighDown","normalizeReverse","PiecewiseModel","minOpen","maxOpen","itemSymbol","selectedMode","showLabel","_pieceList","_mode","_determineMode","resetMethods","_resetSelected","visualTypesInPieces","getSelectedMapKey","hasSel","getPieceList","getRepresentValue","representValue","pieceInterval","splitStep","pieceListItem","closeList","infinityList","useMinMax","symbolCreators","PiecewiseVisualMapView","renderItem","itemGroup","onclick","_onItemClick","_enableHoverLink","indexInModelPieceList","_createItemSymbol","visualState","_getItemAlign","viewData","_getViewData","endsText","viewPieceList","onHoverLink","shapeParam","newKey","defineProperty","default","className","mounted","initBar","methods","getElementById","xAxisData","barBorderRadius","animationDelayUpdate","_keyboard","_keyboard2","__esModule","keyboardChart","sources","file","sourcesContent","sourceRoot","locals","_vm","$createElement","_self","_c","class","attrs","staticRenderFns","staticClass","staticStyle"],"mappings":"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CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CAEH,SAAUliH,EAAQC,EAASC,GuK3xmCjCD,EAAAD,EAAAC,QAAAC,EAAA,SAKAD,EAAA+D,MAAAhE,EAAAY,EAAA,6EAAoG,IAAQma,QAAA,EAAAgoG,SAAA,0EAAA5jF,SAAAg3E,SAAA,8CAAA6M,KAAA,eAAAC,gBAAA,0GAAkTC,WAAA,OvKmymCrZ,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CAEH,SAAUljH,EAAQC,EAASC,GwK/1mCjC,GAAA24E,GAAA34E,EAAA,IACA,iBAAA24E,SAAA74E,EAAAY,EAAAi4E,EAAA,MACAA,EAAAsqC,SAAAnjH,EAAAC,QAAA44E,EAAAsqC,OAEAjjH,GAAA,gBAAA24E,GAAA,IxKu2mCS,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CAEH,SAAU74E,EAAQC,EAASC,GyKh4mCjC,GAAAG,GAAAH,EAAA,GAEAA,EAAA,KAEAA,EAAA,KAEA,KAEA,KAEA,KAGAF,GAAAC,QAAAI,EAAAJ,SzKs4mCS,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CAEH,SAAUD,EAAQC,G0Kt8mCxBD,EAAAC,SAAgBmR,OAAA,WAAmB,GAAAgyG,GAAAt+G,KAAawsC,EAAA8xE,EAAAC,cAChD,QAD0ED,EAAAE,MAAAC,IAAAjyE,GAC1E,OACAkyE,MAAAJ,EAAAjB,UACAjrG,OACA7N,OAAA+5G,EAAA/5G,OACAD,MAAAg6G,EAAAh6G,OAEAq6G,OACA96G,GAAAy6G,EAAAz6G,OAGC+6G,qB1K28mCQ,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CACA,CAEH,SAAU1jH,EAAQC,G2Kn+mCxBD,EAAAC,SAAgBmR,OAAA,WAAmB,GAAAgyG,GAAAt+G,KAAawsC,EAAA8xE,EAAAC,eAA0BE,EAAAH,EAAAE,MAAAC,IAAAjyE,CAC1E,OAAAiyE,GAAA,OACAI,YAAA,uBACAC,aACAv6G,OAAA,WAEGk6G,EAAA,OACHI,YAAA,oBACGJ,EAAA,iBACHE,OACAp6G,OAAA,OACAD,MAAA,WAEG,MACFs6G","file":"js/3.755852ebafebd67d5aa2.js","sourcesContent":["webpackJsonp([3],Array(287).concat([\n/* 287 */\n/***/ (function(module, exports, __webpack_require__) {\n\nfunction injectStyle (ssrContext) {\n  __webpack_require__(692)\n}\nvar Component = __webpack_require__(1)(\n  /* script */\n  __webpack_require__(556),\n  /* template */\n  __webpack_require__(774),\n  /* styles */\n  injectStyle,\n  /* scopeId */\n  \"data-v-cc70f942\",\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n/***/ }),\n/* 288 */,\n/* 289 */,\n/* 290 */,\n/* 291 */,\n/* 292 */,\n/* 293 */,\n/* 294 */,\n/* 295 */,\n/* 296 */,\n/* 297 */,\n/* 298 */,\n/* 299 */,\n/* 300 */,\n/* 301 */,\n/* 302 */,\n/* 303 */,\n/* 304 */,\n/* 305 */,\n/* 306 */,\n/* 307 */,\n/* 308 */,\n/* 309 */,\n/* 310 */,\n/* 311 */,\n/* 312 */,\n/* 313 */,\n/* 314 */,\n/* 315 */\n/***/ (function(module, exports) {\n\n/**\n * @module zrender/core/util\n */\n\n\n    // 用于处理merge时无法遍历Date等对象的问题\n    var BUILTIN_OBJECT = {\n        '[object Function]': 1,\n        '[object RegExp]': 1,\n        '[object Date]': 1,\n        '[object Error]': 1,\n        '[object CanvasGradient]': 1,\n        '[object CanvasPattern]': 1,\n        // For node-canvas\n        '[object Image]': 1,\n        '[object Canvas]': 1\n    };\n\n    var TYPED_ARRAY = {\n        '[object Int8Array]': 1,\n        '[object Uint8Array]': 1,\n        '[object Uint8ClampedArray]': 1,\n        '[object Int16Array]': 1,\n        '[object Uint16Array]': 1,\n        '[object Int32Array]': 1,\n        '[object Uint32Array]': 1,\n        '[object Float32Array]': 1,\n        '[object Float64Array]': 1\n    };\n\n    var objToString = Object.prototype.toString;\n\n    var arrayProto = Array.prototype;\n    var nativeForEach = arrayProto.forEach;\n    var nativeFilter = arrayProto.filter;\n    var nativeSlice = arrayProto.slice;\n    var nativeMap = arrayProto.map;\n    var nativeReduce = arrayProto.reduce;\n\n    /**\n     * Those data types can be cloned:\n     *     Plain object, Array, TypedArray, number, string, null, undefined.\n     * Those data types will be assgined using the orginal data:\n     *     BUILTIN_OBJECT\n     * Instance of user defined class will be cloned to a plain object, without\n     * properties in prototype.\n     * Other data types is not supported (not sure what will happen).\n     *\n     * Caution: do not support clone Date, for performance consideration.\n     * (There might be a large number of date in `series.data`).\n     * So date should not be modified in and out of echarts.\n     *\n     * @param {*} source\n     * @return {*} new\n     */\n    function clone(source) {\n        if (source == null || typeof source != 'object') {\n            return source;\n        }\n\n        var result = source;\n        var typeStr = objToString.call(source);\n\n        if (typeStr === '[object Array]') {\n            result = [];\n            for (var i = 0, len = source.length; i < len; i++) {\n                result[i] = clone(source[i]);\n            }\n        }\n        else if (TYPED_ARRAY[typeStr]) {\n            result = source.constructor.from(source);\n        }\n        else if (!BUILTIN_OBJECT[typeStr] && !isPrimitive(source) && !isDom(source)) {\n            result = {};\n            for (var key in source) {\n                if (source.hasOwnProperty(key)) {\n                    result[key] = clone(source[key]);\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * @memberOf module:zrender/core/util\n     * @param {*} target\n     * @param {*} source\n     * @param {boolean} [overwrite=false]\n     */\n    function merge(target, source, overwrite) {\n        // We should escapse that source is string\n        // and enter for ... in ...\n        if (!isObject(source) || !isObject(target)) {\n            return overwrite ? clone(source) : target;\n        }\n\n        for (var key in source) {\n            if (source.hasOwnProperty(key)) {\n                var targetProp = target[key];\n                var sourceProp = source[key];\n\n                if (isObject(sourceProp)\n                    && isObject(targetProp)\n                    && !isArray(sourceProp)\n                    && !isArray(targetProp)\n                    && !isDom(sourceProp)\n                    && !isDom(targetProp)\n                    && !isBuiltInObject(sourceProp)\n                    && !isBuiltInObject(targetProp)\n                    && !isPrimitive(sourceProp)\n                    && !isPrimitive(targetProp)\n                ) {\n                    // 如果需要递归覆盖，就递归调用merge\n                    merge(targetProp, sourceProp, overwrite);\n                }\n                else if (overwrite || !(key in target)) {\n                    // 否则只处理overwrite为true，或者在目标对象中没有此属性的情况\n                    // NOTE，在 target[key] 不存在的时候也是直接覆盖\n                    target[key] = clone(source[key], true);\n                }\n            }\n        }\n\n        return target;\n    }\n\n    /**\n     * @param {Array} targetAndSources The first item is target, and the rests are source.\n     * @param {boolean} [overwrite=false]\n     * @return {*} target\n     */\n    function mergeAll(targetAndSources, overwrite) {\n        var result = targetAndSources[0];\n        for (var i = 1, len = targetAndSources.length; i < len; i++) {\n            result = merge(result, targetAndSources[i], overwrite);\n        }\n        return result;\n    }\n\n    /**\n     * @param {*} target\n     * @param {*} source\n     * @memberOf module:zrender/core/util\n     */\n    function extend(target, source) {\n        for (var key in source) {\n            if (source.hasOwnProperty(key)) {\n                target[key] = source[key];\n            }\n        }\n        return target;\n    }\n\n    /**\n     * @param {*} target\n     * @param {*} source\n     * @param {boolen} [overlay=false]\n     * @memberOf module:zrender/core/util\n     */\n    function defaults(target, source, overlay) {\n        for (var key in source) {\n            if (source.hasOwnProperty(key)\n                && (overlay ? source[key] != null : target[key] == null)\n            ) {\n                target[key] = source[key];\n            }\n        }\n        return target;\n    }\n\n    function createCanvas() {\n        return document.createElement('canvas');\n    }\n    // FIXME\n    var _ctx;\n    function getContext() {\n        if (!_ctx) {\n            // Use util.createCanvas instead of createCanvas\n            // because createCanvas may be overwritten in different environment\n            _ctx = util.createCanvas().getContext('2d');\n        }\n        return _ctx;\n    }\n\n    /**\n     * 查询数组中元素的index\n     * @memberOf module:zrender/core/util\n     */\n    function indexOf(array, value) {\n        if (array) {\n            if (array.indexOf) {\n                return array.indexOf(value);\n            }\n            for (var i = 0, len = array.length; i < len; i++) {\n                if (array[i] === value) {\n                    return i;\n                }\n            }\n        }\n        return -1;\n    }\n\n    /**\n     * 构造类继承关系\n     *\n     * @memberOf module:zrender/core/util\n     * @param {Function} clazz 源类\n     * @param {Function} baseClazz 基类\n     */\n    function inherits(clazz, baseClazz) {\n        var clazzPrototype = clazz.prototype;\n        function F() {}\n        F.prototype = baseClazz.prototype;\n        clazz.prototype = new F();\n\n        for (var prop in clazzPrototype) {\n            clazz.prototype[prop] = clazzPrototype[prop];\n        }\n        clazz.prototype.constructor = clazz;\n        clazz.superClass = baseClazz;\n    }\n\n    /**\n     * @memberOf module:zrender/core/util\n     * @param {Object|Function} target\n     * @param {Object|Function} sorce\n     * @param {boolean} overlay\n     */\n    function mixin(target, source, overlay) {\n        target = 'prototype' in target ? target.prototype : target;\n        source = 'prototype' in source ? source.prototype : source;\n\n        defaults(target, source, overlay);\n    }\n\n    /**\n     * Consider typed array.\n     * @param {Array|TypedArray} data\n     */\n    function isArrayLike(data) {\n        if (! data) {\n            return;\n        }\n        if (typeof data == 'string') {\n            return false;\n        }\n        return typeof data.length == 'number';\n    }\n\n    /**\n     * 数组或对象遍历\n     * @memberOf module:zrender/core/util\n     * @param {Object|Array} obj\n     * @param {Function} cb\n     * @param {*} [context]\n     */\n    function each(obj, cb, context) {\n        if (!(obj && cb)) {\n            return;\n        }\n        if (obj.forEach && obj.forEach === nativeForEach) {\n            obj.forEach(cb, context);\n        }\n        else if (obj.length === +obj.length) {\n            for (var i = 0, len = obj.length; i < len; i++) {\n                cb.call(context, obj[i], i, obj);\n            }\n        }\n        else {\n            for (var key in obj) {\n                if (obj.hasOwnProperty(key)) {\n                    cb.call(context, obj[key], key, obj);\n                }\n            }\n        }\n    }\n\n    /**\n     * 数组映射\n     * @memberOf module:zrender/core/util\n     * @param {Array} obj\n     * @param {Function} cb\n     * @param {*} [context]\n     * @return {Array}\n     */\n    function map(obj, cb, context) {\n        if (!(obj && cb)) {\n            return;\n        }\n        if (obj.map && obj.map === nativeMap) {\n            return obj.map(cb, context);\n        }\n        else {\n            var result = [];\n            for (var i = 0, len = obj.length; i < len; i++) {\n                result.push(cb.call(context, obj[i], i, obj));\n            }\n            return result;\n        }\n    }\n\n    /**\n     * @memberOf module:zrender/core/util\n     * @param {Array} obj\n     * @param {Function} cb\n     * @param {Object} [memo]\n     * @param {*} [context]\n     * @return {Array}\n     */\n    function reduce(obj, cb, memo, context) {\n        if (!(obj && cb)) {\n            return;\n        }\n        if (obj.reduce && obj.reduce === nativeReduce) {\n            return obj.reduce(cb, memo, context);\n        }\n        else {\n            for (var i = 0, len = obj.length; i < len; i++) {\n                memo = cb.call(context, memo, obj[i], i, obj);\n            }\n            return memo;\n        }\n    }\n\n    /**\n     * 数组过滤\n     * @memberOf module:zrender/core/util\n     * @param {Array} obj\n     * @param {Function} cb\n     * @param {*} [context]\n     * @return {Array}\n     */\n    function filter(obj, cb, context) {\n        if (!(obj && cb)) {\n            return;\n        }\n        if (obj.filter && obj.filter === nativeFilter) {\n            return obj.filter(cb, context);\n        }\n        else {\n            var result = [];\n            for (var i = 0, len = obj.length; i < len; i++) {\n                if (cb.call(context, obj[i], i, obj)) {\n                    result.push(obj[i]);\n                }\n            }\n            return result;\n        }\n    }\n\n    /**\n     * 数组项查找\n     * @memberOf module:zrender/core/util\n     * @param {Array} obj\n     * @param {Function} cb\n     * @param {*} [context]\n     * @return {Array}\n     */\n    function find(obj, cb, context) {\n        if (!(obj && cb)) {\n            return;\n        }\n        for (var i = 0, len = obj.length; i < len; i++) {\n            if (cb.call(context, obj[i], i, obj)) {\n                return obj[i];\n            }\n        }\n    }\n\n    /**\n     * @memberOf module:zrender/core/util\n     * @param {Function} func\n     * @param {*} context\n     * @return {Function}\n     */\n    function bind(func, context) {\n        var args = nativeSlice.call(arguments, 2);\n        return function () {\n            return func.apply(context, args.concat(nativeSlice.call(arguments)));\n        };\n    }\n\n    /**\n     * @memberOf module:zrender/core/util\n     * @param {Function} func\n     * @return {Function}\n     */\n    function curry(func) {\n        var args = nativeSlice.call(arguments, 1);\n        return function () {\n            return func.apply(this, args.concat(nativeSlice.call(arguments)));\n        };\n    }\n\n    /**\n     * @memberOf module:zrender/core/util\n     * @param {*} value\n     * @return {boolean}\n     */\n    function isArray(value) {\n        return objToString.call(value) === '[object Array]';\n    }\n\n    /**\n     * @memberOf module:zrender/core/util\n     * @param {*} value\n     * @return {boolean}\n     */\n    function isFunction(value) {\n        return typeof value === 'function';\n    }\n\n    /**\n     * @memberOf module:zrender/core/util\n     * @param {*} value\n     * @return {boolean}\n     */\n    function isString(value) {\n        return objToString.call(value) === '[object String]';\n    }\n\n    /**\n     * @memberOf module:zrender/core/util\n     * @param {*} value\n     * @return {boolean}\n     */\n    function isObject(value) {\n        // Avoid a V8 JIT bug in Chrome 19-20.\n        // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.\n        var type = typeof value;\n        return type === 'function' || (!!value && type == 'object');\n    }\n\n    /**\n     * @memberOf module:zrender/core/util\n     * @param {*} value\n     * @return {boolean}\n     */\n    function isBuiltInObject(value) {\n        return !!BUILTIN_OBJECT[objToString.call(value)];\n    }\n\n    /**\n     * @memberOf module:zrender/core/util\n     * @param {*} value\n     * @return {boolean}\n     */\n    function isDom(value) {\n        return typeof value === 'object'\n            && typeof value.nodeType === 'number'\n            && typeof value.ownerDocument === 'object';\n    }\n\n    /**\n     * Whether is exactly NaN. Notice isNaN('a') returns true.\n     * @param {*} value\n     * @return {boolean}\n     */\n    function eqNaN(value) {\n        return value !== value;\n    }\n\n    /**\n     * If value1 is not null, then return value1, otherwise judget rest of values.\n     * @memberOf module:zrender/core/util\n     * @return {*} Final value\n     */\n    function retrieve(values) {\n        for (var i = 0, len = arguments.length; i < len; i++) {\n            if (arguments[i] != null) {\n                return arguments[i];\n            }\n        }\n    }\n\n    /**\n     * @memberOf module:zrender/core/util\n     * @param {Array} arr\n     * @param {number} startIndex\n     * @param {number} endIndex\n     * @return {Array}\n     */\n    function slice() {\n        return Function.call.apply(nativeSlice, arguments);\n    }\n\n    /**\n     * @memberOf module:zrender/core/util\n     * @param {boolean} condition\n     * @param {string} message\n     */\n    function assert(condition, message) {\n        if (!condition) {\n            throw new Error(message);\n        }\n    }\n\n    var primitiveKey = '__ec_primitive__';\n    /**\n     * Set an object as primitive to be ignored traversing children in clone or merge\n     */\n    function setAsPrimitive(obj) {\n        obj[primitiveKey] = true;\n    }\n\n    function isPrimitive(obj) {\n        return obj[primitiveKey];\n    }\n\n    /**\n     * @constructor\n     */\n    function HashMap(obj) {\n        obj && extend(this, obj);\n    }\n\n    // Add prefix to avoid conflict with Object.prototype.\n    var HASH_MAP_PREFIX = '_ec_';\n    var HASH_MAP_PREFIX_LENGTH = 4;\n\n    HashMap.prototype = {\n        constructor: HashMap,\n        // Do not provide `has` method to avoid defining what is `has`.\n        // (We usually treat `null` and `undefined` as the same, different\n        // from ES6 Map).\n        get: function (key) {\n            return this[HASH_MAP_PREFIX + key];\n        },\n        set: function (key, value) {\n            this[HASH_MAP_PREFIX + key] = value;\n            // Comparing with invocation chaining, `return value` is more commonly\n            // used in this case: `var someVal = map.set('a', genVal());`\n            return value;\n        },\n        // Although util.each can be performed on this hashMap directly, user\n        // should not use the exposed keys, who are prefixed.\n        each: function (cb, context) {\n            context !== void 0 && (cb = bind(cb, context));\n            for (var prefixedKey in this) {\n                this.hasOwnProperty(prefixedKey)\n                    && cb(this[prefixedKey], prefixedKey.slice(HASH_MAP_PREFIX_LENGTH));\n            }\n        },\n        // Do not use this method if performance sensitive.\n        removeKey: function (key) {\n            delete this[key];\n        }\n    };\n\n    function createHashMap() {\n        return new HashMap();\n    }\n\n    var util = {\n        inherits: inherits,\n        mixin: mixin,\n        clone: clone,\n        merge: merge,\n        mergeAll: mergeAll,\n        extend: extend,\n        defaults: defaults,\n        getContext: getContext,\n        createCanvas: createCanvas,\n        indexOf: indexOf,\n        slice: slice,\n        find: find,\n        isArrayLike: isArrayLike,\n        each: each,\n        map: map,\n        reduce: reduce,\n        filter: filter,\n        bind: bind,\n        curry: curry,\n        isArray: isArray,\n        isString: isString,\n        isObject: isObject,\n        isFunction: isFunction,\n        isBuiltInObject: isBuiltInObject,\n        isDom: isDom,\n        eqNaN: eqNaN,\n        retrieve: retrieve,\n        assert: assert,\n        setAsPrimitive: setAsPrimitive,\n        createHashMap: createHashMap,\n        noop: function () {}\n    };\n    module.exports = util;\n\n\n\n/***/ }),\n/* 316 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(global) {// Enable DEV mode when using source code without build. which has no __DEV__ variable\n// In build process 'typeof __DEV__' will be replace with 'boolean'\n// So this code will be removed or disabled anyway after built.\nif (typeof __DEV__ === 'undefined') {\n    // In browser\n    if (typeof window !== 'undefined') {\n        window.__DEV__ = true;\n    }\n    // In node\n    else if (typeof global !== 'undefined') {\n        global.__DEV__ = true;\n    }\n}\n\n/*!\n * ECharts, a javascript interactive chart library.\n *\n * Copyright (c) 2015, Baidu Inc.\n * All rights reserved.\n *\n * LICENSE\n * https://github.com/ecomfe/echarts/blob/master/LICENSE.txt\n */\n\n/**\n * @module echarts\n */\n\n\n    var env = __webpack_require__(321);\n\n    var GlobalModel = __webpack_require__(401);\n    var ExtensionAPI = __webpack_require__(376);\n    var CoordinateSystemManager = __webpack_require__(340);\n    var OptionManager = __webpack_require__(402);\n\n    var ComponentModel = __webpack_require__(327);\n    var SeriesModel = __webpack_require__(347);\n\n    var ComponentView = __webpack_require__(375);\n    var ChartView = __webpack_require__(354);\n    var graphic = __webpack_require__(317);\n    var modelUtil = __webpack_require__(323);\n    var throttle = __webpack_require__(369);\n\n    var zrender = __webpack_require__(454);\n    var zrUtil = __webpack_require__(315);\n    var colorTool = __webpack_require__(330);\n    var Eventful = __webpack_require__(331);\n    var timsort = __webpack_require__(344);\n\n    var each = zrUtil.each;\n    var parseClassType = ComponentModel.parseClassType;\n\n    var PRIORITY_PROCESSOR_FILTER = 1000;\n    var PRIORITY_PROCESSOR_STATISTIC = 5000;\n\n\n    var PRIORITY_VISUAL_LAYOUT = 1000;\n    var PRIORITY_VISUAL_GLOBAL = 2000;\n    var PRIORITY_VISUAL_CHART = 3000;\n    var PRIORITY_VISUAL_COMPONENT = 4000;\n    // FIXME\n    // necessary?\n    var PRIORITY_VISUAL_BRUSH = 5000;\n\n    // Main process have three entries: `setOption`, `dispatchAction` and `resize`,\n    // where they must not be invoked nestedly, except the only case: invoke\n    // dispatchAction with updateMethod \"none\" in main process.\n    // This flag is used to carry out this rule.\n    // All events will be triggered out side main process (i.e. when !this[IN_MAIN_PROCESS]).\n    var IN_MAIN_PROCESS = '__flagInMainProcess';\n    var HAS_GRADIENT_OR_PATTERN_BG = '__hasGradientOrPatternBg';\n    var OPTION_UPDATED = '__optionUpdated';\n    var ACTION_REG = /^[a-zA-Z0-9_]+$/;\n\n    function createRegisterEventWithLowercaseName(method) {\n        return function (eventName, handler, context) {\n            // Event name is all lowercase\n            eventName = eventName && eventName.toLowerCase();\n            Eventful.prototype[method].call(this, eventName, handler, context);\n        };\n    }\n\n    /**\n     * @module echarts~MessageCenter\n     */\n    function MessageCenter() {\n        Eventful.call(this);\n    }\n    MessageCenter.prototype.on = createRegisterEventWithLowercaseName('on');\n    MessageCenter.prototype.off = createRegisterEventWithLowercaseName('off');\n    MessageCenter.prototype.one = createRegisterEventWithLowercaseName('one');\n    zrUtil.mixin(MessageCenter, Eventful);\n\n    /**\n     * @module echarts~ECharts\n     */\n    function ECharts (dom, theme, opts) {\n        opts = opts || {};\n\n        // Get theme by name\n        if (typeof theme === 'string') {\n            theme = themeStorage[theme];\n        }\n\n        /**\n         * @type {string}\n         */\n        this.id;\n        /**\n         * Group id\n         * @type {string}\n         */\n        this.group;\n        /**\n         * @type {HTMLDomElement}\n         * @private\n         */\n        this._dom = dom;\n        /**\n         * @type {module:zrender/ZRender}\n         * @private\n         */\n        var zr = this._zr = zrender.init(dom, {\n            renderer: opts.renderer || 'canvas',\n            devicePixelRatio: opts.devicePixelRatio,\n            width: opts.width,\n            height: opts.height\n        });\n\n        /**\n         * Expect 60 pfs.\n         * @type {Function}\n         * @private\n         */\n        this._throttledZrFlush = throttle.throttle(zrUtil.bind(zr.flush, zr), 17);\n\n        /**\n         * @type {Object}\n         * @private\n         */\n        this._theme = zrUtil.clone(theme);\n\n        /**\n         * @type {Array.<module:echarts/view/Chart>}\n         * @private\n         */\n        this._chartsViews = [];\n\n        /**\n         * @type {Object.<string, module:echarts/view/Chart>}\n         * @private\n         */\n        this._chartsMap = {};\n\n        /**\n         * @type {Array.<module:echarts/view/Component>}\n         * @private\n         */\n        this._componentsViews = [];\n\n        /**\n         * @type {Object.<string, module:echarts/view/Component>}\n         * @private\n         */\n        this._componentsMap = {};\n\n        /**\n         * @type {module:echarts/ExtensionAPI}\n         * @private\n         */\n        this._api = new ExtensionAPI(this);\n\n        /**\n         * @type {module:echarts/CoordinateSystem}\n         * @private\n         */\n        this._coordSysMgr = new CoordinateSystemManager();\n\n        Eventful.call(this);\n\n        /**\n         * @type {module:echarts~MessageCenter}\n         * @private\n         */\n        this._messageCenter = new MessageCenter();\n\n        // Init mouse events\n        this._initEvents();\n\n        // In case some people write `window.onresize = chart.resize`\n        this.resize = zrUtil.bind(this.resize, this);\n\n        // Can't dispatch action during rendering procedure\n        this._pendingActions = [];\n        // Sort on demand\n        function prioritySortFunc(a, b) {\n            return a.prio - b.prio;\n        }\n        timsort(visualFuncs, prioritySortFunc);\n        timsort(dataProcessorFuncs, prioritySortFunc);\n\n        zr.animation.on('frame', this._onframe, this);\n    }\n\n    var echartsProto = ECharts.prototype;\n\n    echartsProto._onframe = function () {\n        // Lazy update\n        if (this[OPTION_UPDATED]) {\n            var silent = this[OPTION_UPDATED].silent;\n\n            this[IN_MAIN_PROCESS] = true;\n\n            updateMethods.prepareAndUpdate.call(this);\n\n            this[IN_MAIN_PROCESS] = false;\n\n            this[OPTION_UPDATED] = false;\n\n            flushPendingActions.call(this, silent);\n\n            triggerUpdatedEvent.call(this, silent);\n        }\n    };\n    /**\n     * @return {HTMLDomElement}\n     */\n    echartsProto.getDom = function () {\n        return this._dom;\n    };\n\n    /**\n     * @return {module:zrender~ZRender}\n     */\n    echartsProto.getZr = function () {\n        return this._zr;\n    };\n\n    /**\n     * Usage:\n     * chart.setOption(option, notMerge, lazyUpdate);\n     * chart.setOption(option, {\n     *     notMerge: ...,\n     *     lazyUpdate: ...,\n     *     silent: ...\n     * });\n     *\n     * @param {Object} option\n     * @param {Object|boolean} [opts] opts or notMerge.\n     * @param {boolean} [opts.notMerge=false]\n     * @param {boolean} [opts.lazyUpdate=false] Useful when setOption frequently.\n     */\n    echartsProto.setOption = function (option, notMerge, lazyUpdate) {\n        if (__DEV__) {\n            zrUtil.assert(!this[IN_MAIN_PROCESS], '`setOption` should not be called during main process.');\n        }\n\n        var silent;\n        if (zrUtil.isObject(notMerge)) {\n            lazyUpdate = notMerge.lazyUpdate;\n            silent = notMerge.silent;\n            notMerge = notMerge.notMerge;\n        }\n\n        this[IN_MAIN_PROCESS] = true;\n\n        if (!this._model || notMerge) {\n            var optionManager = new OptionManager(this._api);\n            var theme = this._theme;\n            var ecModel = this._model = new GlobalModel(null, null, theme, optionManager);\n            ecModel.init(null, null, theme, optionManager);\n        }\n\n        // FIXME\n        // ugly\n        this.__lastOnlyGraphic = !!(option && option.graphic);\n        zrUtil.each(option, function (o, mainType) {\n            mainType !== 'graphic' && (this.__lastOnlyGraphic = false);\n        }, this);\n\n        this._model.setOption(option, optionPreprocessorFuncs);\n\n        if (lazyUpdate) {\n            this[OPTION_UPDATED] = {silent: silent};\n            this[IN_MAIN_PROCESS] = false;\n        }\n        else {\n            updateMethods.prepareAndUpdate.call(this);\n            // Ensure zr refresh sychronously, and then pixel in canvas can be\n            // fetched after `setOption`.\n            this._zr.flush();\n\n            this[OPTION_UPDATED] = false;\n            this[IN_MAIN_PROCESS] = false;\n\n            flushPendingActions.call(this, silent);\n            triggerUpdatedEvent.call(this, silent);\n        }\n    };\n\n    /**\n     * @DEPRECATED\n     */\n    echartsProto.setTheme = function () {\n        console.log('ECharts#setTheme() is DEPRECATED in ECharts 3.0');\n    };\n\n    /**\n     * @return {module:echarts/model/Global}\n     */\n    echartsProto.getModel = function () {\n        return this._model;\n    };\n\n    /**\n     * @return {Object}\n     */\n    echartsProto.getOption = function () {\n        return this._model && this._model.getOption();\n    };\n\n    /**\n     * @return {number}\n     */\n    echartsProto.getWidth = function () {\n        return this._zr.getWidth();\n    };\n\n    /**\n     * @return {number}\n     */\n    echartsProto.getHeight = function () {\n        return this._zr.getHeight();\n    };\n\n    /**\n     * Get canvas which has all thing rendered\n     * @param {Object} opts\n     * @param {string} [opts.backgroundColor]\n     */\n    echartsProto.getRenderedCanvas = function (opts) {\n        if (!env.canvasSupported) {\n            return;\n        }\n        opts = opts || {};\n        opts.pixelRatio = opts.pixelRatio || 1;\n        opts.backgroundColor = opts.backgroundColor\n            || this._model.get('backgroundColor');\n        var zr = this._zr;\n        var list = zr.storage.getDisplayList();\n        // Stop animations\n        zrUtil.each(list, function (el) {\n            el.stopAnimation(true);\n        });\n        return zr.painter.getRenderedCanvas(opts);\n    };\n    /**\n     * @return {string}\n     * @param {Object} opts\n     * @param {string} [opts.type='png']\n     * @param {string} [opts.pixelRatio=1]\n     * @param {string} [opts.backgroundColor]\n     * @param {string} [opts.excludeComponents]\n     */\n    echartsProto.getDataURL = function (opts) {\n        opts = opts || {};\n        var excludeComponents = opts.excludeComponents;\n        var ecModel = this._model;\n        var excludesComponentViews = [];\n        var self = this;\n\n        each(excludeComponents, function (componentType) {\n            ecModel.eachComponent({\n                mainType: componentType\n            }, function (component) {\n                var view = self._componentsMap[component.__viewId];\n                if (!view.group.ignore) {\n                    excludesComponentViews.push(view);\n                    view.group.ignore = true;\n                }\n            });\n        });\n\n        var url = this.getRenderedCanvas(opts).toDataURL(\n            'image/' + (opts && opts.type || 'png')\n        );\n\n        each(excludesComponentViews, function (view) {\n            view.group.ignore = false;\n        });\n        return url;\n    };\n\n\n    /**\n     * @return {string}\n     * @param {Object} opts\n     * @param {string} [opts.type='png']\n     * @param {string} [opts.pixelRatio=1]\n     * @param {string} [opts.backgroundColor]\n     */\n    echartsProto.getConnectedDataURL = function (opts) {\n        if (!env.canvasSupported) {\n            return;\n        }\n        var groupId = this.group;\n        var mathMin = Math.min;\n        var mathMax = Math.max;\n        var MAX_NUMBER = Infinity;\n        if (connectedGroups[groupId]) {\n            var left = MAX_NUMBER;\n            var top = MAX_NUMBER;\n            var right = -MAX_NUMBER;\n            var bottom = -MAX_NUMBER;\n            var canvasList = [];\n            var dpr = (opts && opts.pixelRatio) || 1;\n\n            zrUtil.each(instances, function (chart, id) {\n                if (chart.group === groupId) {\n                    var canvas = chart.getRenderedCanvas(\n                        zrUtil.clone(opts)\n                    );\n                    var boundingRect = chart.getDom().getBoundingClientRect();\n                    left = mathMin(boundingRect.left, left);\n                    top = mathMin(boundingRect.top, top);\n                    right = mathMax(boundingRect.right, right);\n                    bottom = mathMax(boundingRect.bottom, bottom);\n                    canvasList.push({\n                        dom: canvas,\n                        left: boundingRect.left,\n                        top: boundingRect.top\n                    });\n                }\n            });\n\n            left *= dpr;\n            top *= dpr;\n            right *= dpr;\n            bottom *= dpr;\n            var width = right - left;\n            var height = bottom - top;\n            var targetCanvas = zrUtil.createCanvas();\n            targetCanvas.width = width;\n            targetCanvas.height = height;\n            var zr = zrender.init(targetCanvas);\n\n            each(canvasList, function (item) {\n                var img = new graphic.Image({\n                    style: {\n                        x: item.left * dpr - left,\n                        y: item.top * dpr - top,\n                        image: item.dom\n                    }\n                });\n                zr.add(img);\n            });\n            zr.refreshImmediately();\n\n            return targetCanvas.toDataURL('image/' + (opts && opts.type || 'png'));\n        }\n        else {\n            return this.getDataURL(opts);\n        }\n    };\n\n    /**\n     * Convert from logical coordinate system to pixel coordinate system.\n     * See CoordinateSystem#convertToPixel.\n     * @param {string|Object} finder\n     *        If string, e.g., 'geo', means {geoIndex: 0}.\n     *        If Object, could contain some of these properties below:\n     *        {\n     *            seriesIndex / seriesId / seriesName,\n     *            geoIndex / geoId, geoName,\n     *            bmapIndex / bmapId / bmapName,\n     *            xAxisIndex / xAxisId / xAxisName,\n     *            yAxisIndex / yAxisId / yAxisName,\n     *            gridIndex / gridId / gridName,\n     *            ... (can be extended)\n     *        }\n     * @param {Array|number} value\n     * @return {Array|number} result\n     */\n    echartsProto.convertToPixel = zrUtil.curry(doConvertPixel, 'convertToPixel');\n\n    /**\n     * Convert from pixel coordinate system to logical coordinate system.\n     * See CoordinateSystem#convertFromPixel.\n     * @param {string|Object} finder\n     *        If string, e.g., 'geo', means {geoIndex: 0}.\n     *        If Object, could contain some of these properties below:\n     *        {\n     *            seriesIndex / seriesId / seriesName,\n     *            geoIndex / geoId / geoName,\n     *            bmapIndex / bmapId / bmapName,\n     *            xAxisIndex / xAxisId / xAxisName,\n     *            yAxisIndex / yAxisId / yAxisName\n     *            gridIndex / gridId / gridName,\n     *            ... (can be extended)\n     *        }\n     * @param {Array|number} value\n     * @return {Array|number} result\n     */\n    echartsProto.convertFromPixel = zrUtil.curry(doConvertPixel, 'convertFromPixel');\n\n    function doConvertPixel(methodName, finder, value) {\n        var ecModel = this._model;\n        var coordSysList = this._coordSysMgr.getCoordinateSystems();\n        var result;\n\n        finder = modelUtil.parseFinder(ecModel, finder);\n\n        for (var i = 0; i < coordSysList.length; i++) {\n            var coordSys = coordSysList[i];\n            if (coordSys[methodName]\n                && (result = coordSys[methodName](ecModel, finder, value)) != null\n            ) {\n                return result;\n            }\n        }\n\n        if (__DEV__) {\n            console.warn(\n                'No coordinate system that supports ' + methodName + ' found by the given finder.'\n            );\n        }\n    }\n\n    /**\n     * Is the specified coordinate systems or components contain the given pixel point.\n     * @param {string|Object} finder\n     *        If string, e.g., 'geo', means {geoIndex: 0}.\n     *        If Object, could contain some of these properties below:\n     *        {\n     *            seriesIndex / seriesId / seriesName,\n     *            geoIndex / geoId / geoName,\n     *            bmapIndex / bmapId / bmapName,\n     *            xAxisIndex / xAxisId / xAxisName,\n     *            yAxisIndex / yAxisId / yAxisName\n     *            gridIndex / gridId / gridName,\n     *            ... (can be extended)\n     *        }\n     * @param {Array|number} value\n     * @return {boolean} result\n     */\n    echartsProto.containPixel = function (finder, value) {\n        var ecModel = this._model;\n        var result;\n\n        finder = modelUtil.parseFinder(ecModel, finder);\n\n        zrUtil.each(finder, function (models, key) {\n            key.indexOf('Models') >= 0 && zrUtil.each(models, function (model) {\n                var coordSys = model.coordinateSystem;\n                if (coordSys && coordSys.containPoint) {\n                    result |= !!coordSys.containPoint(value);\n                }\n                else if (key === 'seriesModels') {\n                    var view = this._chartsMap[model.__viewId];\n                    if (view && view.containPoint) {\n                        result |= view.containPoint(value, model);\n                    }\n                    else {\n                        if (__DEV__) {\n                            console.warn(key + ': ' + (view\n                                ? 'The found component do not support containPoint.'\n                                : 'No view mapping to the found component.'\n                            ));\n                        }\n                    }\n                }\n                else {\n                    if (__DEV__) {\n                        console.warn(key + ': containPoint is not supported');\n                    }\n                }\n            }, this);\n        }, this);\n\n        return !!result;\n    };\n\n    /**\n     * Get visual from series or data.\n     * @param {string|Object} finder\n     *        If string, e.g., 'series', means {seriesIndex: 0}.\n     *        If Object, could contain some of these properties below:\n     *        {\n     *            seriesIndex / seriesId / seriesName,\n     *            dataIndex / dataIndexInside\n     *        }\n     *        If dataIndex is not specified, series visual will be fetched,\n     *        but not data item visual.\n     *        If all of seriesIndex, seriesId, seriesName are not specified,\n     *        visual will be fetched from first series.\n     * @param {string} visualType 'color', 'symbol', 'symbolSize'\n     */\n    echartsProto.getVisual = function (finder, visualType) {\n        var ecModel = this._model;\n\n        finder = modelUtil.parseFinder(ecModel, finder, {defaultMainType: 'series'});\n\n        var seriesModel = finder.seriesModel;\n\n        if (__DEV__) {\n            if (!seriesModel) {\n                console.warn('There is no specified seires model');\n            }\n        }\n\n        var data = seriesModel.getData();\n\n        var dataIndexInside = finder.hasOwnProperty('dataIndexInside')\n            ? finder.dataIndexInside\n            : finder.hasOwnProperty('dataIndex')\n            ? data.indexOfRawIndex(finder.dataIndex)\n            : null;\n\n        return dataIndexInside != null\n            ? data.getItemVisual(dataIndexInside, visualType)\n            : data.getVisual(visualType);\n    };\n\n\n    var updateMethods = {\n\n        /**\n         * @param {Object} payload\n         * @private\n         */\n        update: function (payload) {\n            // console.time && console.time('update');\n\n            var ecModel = this._model;\n            var api = this._api;\n            var coordSysMgr = this._coordSysMgr;\n            var zr = this._zr;\n            // update before setOption\n            if (!ecModel) {\n                return;\n            }\n\n            // Fixme First time update ?\n            ecModel.restoreData();\n\n            // TODO\n            // Save total ecModel here for undo/redo (after restoring data and before processing data).\n            // Undo (restoration of total ecModel) can be carried out in 'action' or outside API call.\n\n            // Create new coordinate system each update\n            // In LineView may save the old coordinate system and use it to get the orignal point\n            coordSysMgr.create(this._model, this._api);\n\n            processData.call(this, ecModel, api);\n\n            stackSeriesData.call(this, ecModel);\n\n            coordSysMgr.update(ecModel, api);\n\n            doVisualEncoding.call(this, ecModel, payload);\n\n            doRender.call(this, ecModel, payload);\n\n            // Set background\n            var backgroundColor = ecModel.get('backgroundColor') || 'transparent';\n\n            var painter = zr.painter;\n            // TODO all use clearColor ?\n            if (painter.isSingleCanvas && painter.isSingleCanvas()) {\n                zr.configLayer(0, {\n                    clearColor: backgroundColor\n                });\n            }\n            else {\n                // In IE8\n                if (!env.canvasSupported) {\n                    var colorArr = colorTool.parse(backgroundColor);\n                    backgroundColor = colorTool.stringify(colorArr, 'rgb');\n                    if (colorArr[3] === 0) {\n                        backgroundColor = 'transparent';\n                    }\n                }\n                if (backgroundColor.colorStops || backgroundColor.image) {\n                    // Gradient background\n                    // FIXME Fixed layer？\n                    zr.configLayer(0, {\n                        clearColor: backgroundColor\n                    });\n                    this[HAS_GRADIENT_OR_PATTERN_BG] = true;\n\n                    this._dom.style.background = 'transparent';\n                }\n                else {\n                    if (this[HAS_GRADIENT_OR_PATTERN_BG]) {\n                        zr.configLayer(0, {\n                            clearColor: null\n                        });\n                    }\n                    this[HAS_GRADIENT_OR_PATTERN_BG] = false;\n\n                    this._dom.style.background = backgroundColor;\n                }\n            }\n\n            // console.time && console.timeEnd('update');\n        },\n\n        /**\n         * @param {Object} payload\n         * @private\n         */\n        updateView: function (payload) {\n            var ecModel = this._model;\n\n            // update before setOption\n            if (!ecModel) {\n                return;\n            }\n\n            ecModel.eachSeries(function (seriesModel) {\n                seriesModel.getData().clearAllVisual();\n            });\n\n            doVisualEncoding.call(this, ecModel, payload);\n\n            invokeUpdateMethod.call(this, 'updateView', ecModel, payload);\n        },\n\n        /**\n         * @param {Object} payload\n         * @private\n         */\n        updateVisual: function (payload) {\n            var ecModel = this._model;\n\n            // update before setOption\n            if (!ecModel) {\n                return;\n            }\n\n            ecModel.eachSeries(function (seriesModel) {\n                seriesModel.getData().clearAllVisual();\n            });\n\n            doVisualEncoding.call(this, ecModel, payload, true);\n\n            invokeUpdateMethod.call(this, 'updateVisual', ecModel, payload);\n        },\n\n        /**\n         * @param {Object} payload\n         * @private\n         */\n        updateLayout: function (payload) {\n            var ecModel = this._model;\n\n            // update before setOption\n            if (!ecModel) {\n                return;\n            }\n\n            doLayout.call(this, ecModel, payload);\n\n            invokeUpdateMethod.call(this, 'updateLayout', ecModel, payload);\n        },\n\n        /**\n         * @param {Object} payload\n         * @private\n         */\n        prepareAndUpdate: function (payload) {\n            var ecModel = this._model;\n\n            prepareView.call(this, 'component', ecModel);\n\n            prepareView.call(this, 'chart', ecModel);\n\n            // FIXME\n            // ugly\n            if (this.__lastOnlyGraphic) {\n                each(this._componentsViews, function (componentView) {\n                    var componentModel = componentView.__model;\n                    if (componentModel && componentModel.mainType === 'graphic') {\n                        componentView.render(componentModel, ecModel, this._api, payload);\n                        updateZ(componentModel, componentView);\n                    }\n                }, this);\n                this.__lastOnlyGraphic = false;\n            }\n            else {\n                updateMethods.update.call(this, payload);\n            }\n        }\n    };\n\n    /**\n     * @private\n     */\n    function updateDirectly(ecIns, method, payload, mainType, subType) {\n        var ecModel = ecIns._model;\n        var query = {};\n        query[mainType + 'Id'] = payload[mainType + 'Id'];\n        query[mainType + 'Index'] = payload[mainType + 'Index'];\n        query[mainType + 'Name'] = payload[mainType + 'Name'];\n\n        var condition = {mainType: mainType, query: query};\n        subType && (condition.subType = subType); // subType may be '' by parseClassType;\n\n        // If dispatchAction before setOption, do nothing.\n        ecModel && ecModel.eachComponent(condition, function (model, index) {\n            var view = ecIns[\n                mainType === 'series' ? '_chartsMap' : '_componentsMap'\n            ][model.__viewId];\n            if (view && view.__alive) {\n                view[method](model, ecModel, ecIns._api, payload);\n            }\n        }, ecIns);\n    }\n\n    /**\n     * Resize the chart\n     * @param {Object} opts\n     * @param {number} [opts.width] Can be 'auto' (the same as null/undefined)\n     * @param {number} [opts.height] Can be 'auto' (the same as null/undefined)\n     * @param {boolean} [opts.silent=false]\n     */\n    echartsProto.resize = function (opts) {\n        if (__DEV__) {\n            zrUtil.assert(!this[IN_MAIN_PROCESS], '`resize` should not be called during main process.');\n        }\n\n        this[IN_MAIN_PROCESS] = true;\n\n        this._zr.resize(opts);\n\n        var optionChanged = this._model && this._model.resetOption('media');\n        var updateMethod = optionChanged ? 'prepareAndUpdate' : 'update';\n\n        updateMethods[updateMethod].call(this);\n\n        // Resize loading effect\n        this._loadingFX && this._loadingFX.resize();\n\n        this[IN_MAIN_PROCESS] = false;\n\n        var silent = opts && opts.silent;\n\n        flushPendingActions.call(this, silent);\n\n        triggerUpdatedEvent.call(this, silent);\n    };\n\n    /**\n     * Show loading effect\n     * @param  {string} [name='default']\n     * @param  {Object} [cfg]\n     */\n    echartsProto.showLoading = function (name, cfg) {\n        if (zrUtil.isObject(name)) {\n            cfg = name;\n            name = '';\n        }\n        name = name || 'default';\n\n        this.hideLoading();\n        if (!loadingEffects[name]) {\n            if (__DEV__) {\n                console.warn('Loading effects ' + name + ' not exists.');\n            }\n            return;\n        }\n        var el = loadingEffects[name](this._api, cfg);\n        var zr = this._zr;\n        this._loadingFX = el;\n\n        zr.add(el);\n    };\n\n    /**\n     * Hide loading effect\n     */\n    echartsProto.hideLoading = function () {\n        this._loadingFX && this._zr.remove(this._loadingFX);\n        this._loadingFX = null;\n    };\n\n    /**\n     * @param {Object} eventObj\n     * @return {Object}\n     */\n    echartsProto.makeActionFromEvent = function (eventObj) {\n        var payload = zrUtil.extend({}, eventObj);\n        payload.type = eventActionMap[eventObj.type];\n        return payload;\n    };\n\n    /**\n     * @pubilc\n     * @param {Object} payload\n     * @param {string} [payload.type] Action type\n     * @param {Object|boolean} [opt] If pass boolean, means opt.silent\n     * @param {boolean} [opt.silent=false] Whether trigger events.\n     * @param {boolean} [opt.flush=undefined]\n     *                  true: Flush immediately, and then pixel in canvas can be fetched\n     *                      immediately. Caution: it might affect performance.\n     *                  false: Not not flush.\n     *                  undefined: Auto decide whether perform flush.\n     */\n    echartsProto.dispatchAction = function (payload, opt) {\n        if (!zrUtil.isObject(opt)) {\n            opt = {silent: !!opt};\n        }\n\n        if (!actions[payload.type]) {\n            return;\n        }\n\n        // if (__DEV__) {\n        //     zrUtil.assert(\n        //         !this[IN_MAIN_PROCESS],\n        //         '`dispatchAction` should not be called during main process.'\n        //         + 'unless updateMathod is \"none\".'\n        //     );\n        // }\n\n        // May dispatchAction in rendering procedure\n        if (this[IN_MAIN_PROCESS]) {\n            this._pendingActions.push(payload);\n            return;\n        }\n\n        doDispatchAction.call(this, payload, opt.silent);\n\n        if (opt.flush) {\n            this._zr.flush(true);\n        }\n        else if (opt.flush !== false && env.browser.weChat) {\n            // In WeChat embeded browser, `requestAnimationFrame` and `setInterval`\n            // hang when sliding page (on touch event), which cause that zr does not\n            // refresh util user interaction finished, which is not expected.\n            // But `dispatchAction` may be called too frequently when pan on touch\n            // screen, which impacts performance if do not throttle them.\n            this._throttledZrFlush();\n        }\n\n        flushPendingActions.call(this, opt.silent);\n\n        triggerUpdatedEvent.call(this, opt.silent);\n    };\n\n    function doDispatchAction(payload, silent) {\n        var payloadType = payload.type;\n        var actionWrap = actions[payloadType];\n        var actionInfo = actionWrap.actionInfo;\n\n        var cptType = (actionInfo.update || 'update').split(':');\n        var updateMethod = cptType.pop();\n        cptType = cptType[0] && parseClassType(cptType[0]);\n\n        this[IN_MAIN_PROCESS] = true;\n\n        var payloads = [payload];\n        var batched = false;\n        // Batch action\n        if (payload.batch) {\n            batched = true;\n            payloads = zrUtil.map(payload.batch, function (item) {\n                item = zrUtil.defaults(zrUtil.extend({}, item), payload);\n                item.batch = null;\n                return item;\n            });\n        }\n\n        var eventObjBatch = [];\n        var eventObj;\n        var isHighDown = payloadType === 'highlight' || payloadType === 'downplay';\n\n        for (var i = 0; i < payloads.length; i++) {\n            var batchItem = payloads[i];\n            // Action can specify the event by return it.\n            eventObj = actionWrap.action(batchItem, this._model);\n            // Emit event outside\n            eventObj = eventObj || zrUtil.extend({}, batchItem);\n            // Convert type to eventType\n            eventObj.type = actionInfo.event || eventObj.type;\n            eventObjBatch.push(eventObj);\n\n            // light update does not perform data process, layout and visual.\n            if (isHighDown) {\n                // method, payload, mainType, subType\n                updateDirectly(this, updateMethod, batchItem, 'series');\n            }\n            else if (cptType) {\n                updateDirectly(this, updateMethod, batchItem, cptType.main, cptType.sub);\n            }\n        }\n\n        if (updateMethod !== 'none' && !isHighDown && !cptType) {\n            // Still dirty\n            if (this[OPTION_UPDATED]) {\n                // FIXME Pass payload ?\n                updateMethods.prepareAndUpdate.call(this, payload);\n                this[OPTION_UPDATED] = false;\n            }\n            else {\n                updateMethods[updateMethod].call(this, payload);\n            }\n        }\n\n        // Follow the rule of action batch\n        if (batched) {\n            eventObj = {\n                type: actionInfo.event || payloadType,\n                batch: eventObjBatch\n            };\n        }\n        else {\n            eventObj = eventObjBatch[0];\n        }\n\n        this[IN_MAIN_PROCESS] = false;\n\n        !silent && this._messageCenter.trigger(eventObj.type, eventObj);\n    }\n\n    function flushPendingActions(silent) {\n        var pendingActions = this._pendingActions;\n        while (pendingActions.length) {\n            var payload = pendingActions.shift();\n            doDispatchAction.call(this, payload, silent);\n        }\n    }\n\n    function triggerUpdatedEvent(silent) {\n        !silent && this.trigger('updated');\n    }\n\n    /**\n     * Register event\n     * @method\n     */\n    echartsProto.on = createRegisterEventWithLowercaseName('on');\n    echartsProto.off = createRegisterEventWithLowercaseName('off');\n    echartsProto.one = createRegisterEventWithLowercaseName('one');\n\n    /**\n     * @param {string} methodName\n     * @private\n     */\n    function invokeUpdateMethod(methodName, ecModel, payload) {\n        var api = this._api;\n\n        // Update all components\n        each(this._componentsViews, function (component) {\n            var componentModel = component.__model;\n            component[methodName](componentModel, ecModel, api, payload);\n\n            updateZ(componentModel, component);\n        }, this);\n\n        // Upate all charts\n        ecModel.eachSeries(function (seriesModel, idx) {\n            var chart = this._chartsMap[seriesModel.__viewId];\n            chart[methodName](seriesModel, ecModel, api, payload);\n\n            updateZ(seriesModel, chart);\n\n            updateProgressiveAndBlend(seriesModel, chart);\n        }, this);\n\n        // If use hover layer\n        updateHoverLayerStatus(this._zr, ecModel);\n    }\n\n    /**\n     * Prepare view instances of charts and components\n     * @param  {module:echarts/model/Global} ecModel\n     * @private\n     */\n    function prepareView(type, ecModel) {\n        var isComponent = type === 'component';\n        var viewList = isComponent ? this._componentsViews : this._chartsViews;\n        var viewMap = isComponent ? this._componentsMap : this._chartsMap;\n        var zr = this._zr;\n\n        for (var i = 0; i < viewList.length; i++) {\n            viewList[i].__alive = false;\n        }\n\n        ecModel[isComponent ? 'eachComponent' : 'eachSeries'](function (componentType, model) {\n            if (isComponent) {\n                if (componentType === 'series') {\n                    return;\n                }\n            }\n            else {\n                model = componentType;\n            }\n\n            // Consider: id same and type changed.\n            var viewId = model.id + '_' + model.type;\n            var view = viewMap[viewId];\n            if (!view) {\n                var classType = parseClassType(model.type);\n                var Clazz = isComponent\n                    ? ComponentView.getClass(classType.main, classType.sub)\n                    : ChartView.getClass(classType.sub);\n                if (Clazz) {\n                    view = new Clazz();\n                    view.init(ecModel, this._api);\n                    viewMap[viewId] = view;\n                    viewList.push(view);\n                    zr.add(view.group);\n                }\n                else {\n                    // Error\n                    return;\n                }\n            }\n\n            model.__viewId = viewId;\n            view.__alive = true;\n            view.__id = viewId;\n            view.__model = model;\n        }, this);\n\n        for (var i = 0; i < viewList.length;) {\n            var view = viewList[i];\n            if (!view.__alive) {\n                zr.remove(view.group);\n                view.dispose(ecModel, this._api);\n                viewList.splice(i, 1);\n                delete viewMap[view.__id];\n            }\n            else {\n                i++;\n            }\n        }\n    }\n\n    /**\n     * Processor data in each series\n     *\n     * @param {module:echarts/model/Global} ecModel\n     * @private\n     */\n    function processData(ecModel, api) {\n        each(dataProcessorFuncs, function (process) {\n            process.func(ecModel, api);\n        });\n    }\n\n    /**\n     * @private\n     */\n    function stackSeriesData(ecModel) {\n        var stackedDataMap = {};\n        ecModel.eachSeries(function (series) {\n            var stack = series.get('stack');\n            var data = series.getData();\n            if (stack && data.type === 'list') {\n                var previousStack = stackedDataMap[stack];\n                if (previousStack) {\n                    data.stackedOn = previousStack;\n                }\n                stackedDataMap[stack] = data;\n            }\n        });\n    }\n\n    /**\n     * Layout before each chart render there series, special visual encoding stage\n     *\n     * @param {module:echarts/model/Global} ecModel\n     * @private\n     */\n    function doLayout(ecModel, payload) {\n        var api = this._api;\n        each(visualFuncs, function (visual) {\n            if (visual.isLayout) {\n                visual.func(ecModel, api, payload);\n            }\n        });\n    }\n\n    /**\n     * Encode visual infomation from data after data processing\n     *\n     * @param {module:echarts/model/Global} ecModel\n     * @param {object} layout\n     * @param {boolean} [excludesLayout]\n     * @private\n     */\n    function doVisualEncoding(ecModel, payload, excludesLayout) {\n        var api = this._api;\n        ecModel.clearColorPalette();\n        ecModel.eachSeries(function (seriesModel) {\n            seriesModel.clearColorPalette();\n        });\n        each(visualFuncs, function (visual) {\n            (!excludesLayout || !visual.isLayout)\n                && visual.func(ecModel, api, payload);\n        });\n    }\n\n    /**\n     * Render each chart and component\n     * @private\n     */\n    function doRender(ecModel, payload) {\n        var api = this._api;\n        // Render all components\n        each(this._componentsViews, function (componentView) {\n            var componentModel = componentView.__model;\n            componentView.render(componentModel, ecModel, api, payload);\n\n            updateZ(componentModel, componentView);\n        }, this);\n\n        each(this._chartsViews, function (chart) {\n            chart.__alive = false;\n        }, this);\n\n        // Render all charts\n        ecModel.eachSeries(function (seriesModel, idx) {\n            var chartView = this._chartsMap[seriesModel.__viewId];\n            chartView.__alive = true;\n            chartView.render(seriesModel, ecModel, api, payload);\n\n            chartView.group.silent = !!seriesModel.get('silent');\n\n            updateZ(seriesModel, chartView);\n\n            updateProgressiveAndBlend(seriesModel, chartView);\n\n        }, this);\n\n        // If use hover layer\n        updateHoverLayerStatus(this._zr, ecModel);\n\n        // Remove groups of unrendered charts\n        each(this._chartsViews, function (chart) {\n            if (!chart.__alive) {\n                chart.remove(ecModel, api);\n            }\n        }, this);\n    }\n\n    var MOUSE_EVENT_NAMES = [\n        'click', 'dblclick', 'mouseover', 'mouseout', 'mousemove',\n        'mousedown', 'mouseup', 'globalout', 'contextmenu'\n    ];\n    /**\n     * @private\n     */\n    echartsProto._initEvents = function () {\n        each(MOUSE_EVENT_NAMES, function (eveName) {\n            this._zr.on(eveName, function (e) {\n                var ecModel = this.getModel();\n                var el = e.target;\n                var params;\n\n                // no e.target when 'globalout'.\n                if (eveName === 'globalout') {\n                    params = {};\n                }\n                else if (el && el.dataIndex != null) {\n                    var dataModel = el.dataModel || ecModel.getSeriesByIndex(el.seriesIndex);\n                    params = dataModel && dataModel.getDataParams(el.dataIndex, el.dataType) || {};\n                }\n                // If element has custom eventData of components\n                else if (el && el.eventData) {\n                    params = zrUtil.extend({}, el.eventData);\n                }\n\n                if (params) {\n                    params.event = e;\n                    params.type = eveName;\n                    this.trigger(eveName, params);\n                }\n\n            }, this);\n        }, this);\n\n        each(eventActionMap, function (actionType, eventType) {\n            this._messageCenter.on(eventType, function (event) {\n                this.trigger(eventType, event);\n            }, this);\n        }, this);\n    };\n\n    /**\n     * @return {boolean}\n     */\n    echartsProto.isDisposed = function () {\n        return this._disposed;\n    };\n\n    /**\n     * Clear\n     */\n    echartsProto.clear = function () {\n        this.setOption({ series: [] }, true);\n    };\n    /**\n     * Dispose instance\n     */\n    echartsProto.dispose = function () {\n        if (this._disposed) {\n            if (__DEV__) {\n                console.warn('Instance ' + this.id + ' has been disposed');\n            }\n            return;\n        }\n        this._disposed = true;\n\n        var api = this._api;\n        var ecModel = this._model;\n\n        each(this._componentsViews, function (component) {\n            component.dispose(ecModel, api);\n        });\n        each(this._chartsViews, function (chart) {\n            chart.dispose(ecModel, api);\n        });\n\n        // Dispose after all views disposed\n        this._zr.dispose();\n\n        delete instances[this.id];\n    };\n\n    zrUtil.mixin(ECharts, Eventful);\n\n    function updateHoverLayerStatus(zr, ecModel) {\n        var storage = zr.storage;\n        var elCount = 0;\n        storage.traverse(function (el) {\n            if (!el.isGroup) {\n                elCount++;\n            }\n        });\n        if (elCount > ecModel.get('hoverLayerThreshold') && !env.node) {\n            storage.traverse(function (el) {\n                if (!el.isGroup) {\n                    el.useHoverLayer = true;\n                }\n            });\n        }\n    }\n    /**\n     * Update chart progressive and blend.\n     * @param {module:echarts/model/Series|module:echarts/model/Component} model\n     * @param {module:echarts/view/Component|module:echarts/view/Chart} view\n     */\n    function updateProgressiveAndBlend(seriesModel, chartView) {\n        // Progressive configuration\n        var elCount = 0;\n        chartView.group.traverse(function (el) {\n            if (el.type !== 'group' && !el.ignore) {\n                elCount++;\n            }\n        });\n        var frameDrawNum = +seriesModel.get('progressive');\n        var needProgressive = elCount > seriesModel.get('progressiveThreshold') && frameDrawNum && !env.node;\n        if (needProgressive) {\n            chartView.group.traverse(function (el) {\n                // FIXME marker and other components\n                if (!el.isGroup) {\n                    el.progressive = needProgressive ?\n                        Math.floor(elCount++ / frameDrawNum) : -1;\n                    if (needProgressive) {\n                        el.stopAnimation(true);\n                    }\n                }\n            });\n        }\n\n        // Blend configration\n        var blendMode = seriesModel.get('blendMode') || null;\n        if (__DEV__) {\n            if (!env.canvasSupported && blendMode && blendMode !== 'source-over') {\n                console.warn('Only canvas support blendMode');\n            }\n        }\n        chartView.group.traverse(function (el) {\n            // FIXME marker and other components\n            if (!el.isGroup) {\n                el.setStyle('blend', blendMode);\n            }\n        });\n    }\n    /**\n     * @param {module:echarts/model/Series|module:echarts/model/Component} model\n     * @param {module:echarts/view/Component|module:echarts/view/Chart} view\n     */\n    function updateZ(model, view) {\n        var z = model.get('z');\n        var zlevel = model.get('zlevel');\n        // Set z and zlevel\n        view.group.traverse(function (el) {\n            if (el.type !== 'group') {\n                z != null && (el.z = z);\n                zlevel != null && (el.zlevel = zlevel);\n            }\n        });\n    }\n    /**\n     * @type {Array.<Function>}\n     * @inner\n     */\n    var actions = [];\n\n    /**\n     * Map eventType to actionType\n     * @type {Object}\n     */\n    var eventActionMap = {};\n\n    /**\n     * Data processor functions of each stage\n     * @type {Array.<Object.<string, Function>>}\n     * @inner\n     */\n    var dataProcessorFuncs = [];\n\n    /**\n     * @type {Array.<Function>}\n     * @inner\n     */\n    var optionPreprocessorFuncs = [];\n\n    /**\n     * Visual encoding functions of each stage\n     * @type {Array.<Object.<string, Function>>}\n     * @inner\n     */\n    var visualFuncs = [];\n    /**\n     * Theme storage\n     * @type {Object.<key, Object>}\n     */\n    var themeStorage = {};\n    /**\n     * Loading effects\n     */\n    var loadingEffects = {};\n\n\n    var instances = {};\n    var connectedGroups = {};\n\n    var idBase = new Date() - 0;\n    var groupIdBase = new Date() - 0;\n    var DOM_ATTRIBUTE_KEY = '_echarts_instance_';\n    /**\n     * @alias module:echarts\n     */\n    var echarts = {\n        /**\n         * @type {number}\n         */\n        version: '3.4.0',\n        dependencies: {\n            zrender: '3.3.0'\n        }\n    };\n\n    function enableConnect(chart) {\n\n        var STATUS_PENDING = 0;\n        var STATUS_UPDATING = 1;\n        var STATUS_UPDATED = 2;\n        var STATUS_KEY = '__connectUpdateStatus';\n        function updateConnectedChartsStatus(charts, status) {\n            for (var i = 0; i < charts.length; i++) {\n                var otherChart = charts[i];\n                otherChart[STATUS_KEY] = status;\n            }\n        }\n        zrUtil.each(eventActionMap, function (actionType, eventType) {\n            chart._messageCenter.on(eventType, function (event) {\n                if (connectedGroups[chart.group] && chart[STATUS_KEY] !== STATUS_PENDING) {\n                    var action = chart.makeActionFromEvent(event);\n                    var otherCharts = [];\n\n                    zrUtil.each(instances, function (otherChart) {\n                        if (otherChart !== chart && otherChart.group === chart.group) {\n                            otherCharts.push(otherChart);\n                        }\n                    });\n\n                    updateConnectedChartsStatus(otherCharts, STATUS_PENDING);\n                    each(otherCharts, function (otherChart) {\n                        if (otherChart[STATUS_KEY] !== STATUS_UPDATING) {\n                            otherChart.dispatchAction(action);\n                        }\n                    });\n                    updateConnectedChartsStatus(otherCharts, STATUS_UPDATED);\n                }\n            });\n        });\n\n    }\n    /**\n     * @param {HTMLDomElement} dom\n     * @param {Object} [theme]\n     * @param {Object} opts\n     * @param {number} [opts.devicePixelRatio] Use window.devicePixelRatio by default\n     * @param {string} [opts.renderer] Currently only 'canvas' is supported.\n     * @param {number} [opts.width] Use clientWidth of the input `dom` by default.\n     *                              Can be 'auto' (the same as null/undefined)\n     * @param {number} [opts.height] Use clientHeight of the input `dom` by default.\n     *                               Can be 'auto' (the same as null/undefined)\n     */\n    echarts.init = function (dom, theme, opts) {\n        if (__DEV__) {\n            // Check version\n            if ((zrender.version.replace('.', '') - 0) < (echarts.dependencies.zrender.replace('.', '') - 0)) {\n                throw new Error(\n                    'ZRender ' + zrender.version\n                    + ' is too old for ECharts ' + echarts.version\n                    + '. Current version need ZRender '\n                    + echarts.dependencies.zrender + '+'\n                );\n            }\n            if (!dom) {\n                throw new Error('Initialize failed: invalid dom.');\n            }\n            if (zrUtil.isDom(dom) && dom.nodeName.toUpperCase() !== 'CANVAS' && (!dom.clientWidth || !dom.clientHeight)) {\n                console.warn('Can\\'t get dom width or height');\n            }\n        }\n\n        var chart = new ECharts(dom, theme, opts);\n        chart.id = 'ec_' + idBase++;\n        instances[chart.id] = chart;\n\n        dom.setAttribute &&\n            dom.setAttribute(DOM_ATTRIBUTE_KEY, chart.id);\n\n        enableConnect(chart);\n\n        return chart;\n    };\n\n    /**\n     * @return {string|Array.<module:echarts~ECharts>} groupId\n     */\n    echarts.connect = function (groupId) {\n        // Is array of charts\n        if (zrUtil.isArray(groupId)) {\n            var charts = groupId;\n            groupId = null;\n            // If any chart has group\n            zrUtil.each(charts, function (chart) {\n                if (chart.group != null) {\n                    groupId = chart.group;\n                }\n            });\n            groupId = groupId || ('g_' + groupIdBase++);\n            zrUtil.each(charts, function (chart) {\n                chart.group = groupId;\n            });\n        }\n        connectedGroups[groupId] = true;\n        return groupId;\n    };\n\n    /**\n     * @return {string} groupId\n     */\n    echarts.disConnect = function (groupId) {\n        connectedGroups[groupId] = false;\n    };\n\n    /**\n     * Dispose a chart instance\n     * @param  {module:echarts~ECharts|HTMLDomElement|string} chart\n     */\n    echarts.dispose = function (chart) {\n        if (zrUtil.isDom(chart)) {\n            chart = echarts.getInstanceByDom(chart);\n        }\n        else if (typeof chart === 'string') {\n            chart = instances[chart];\n        }\n        if ((chart instanceof ECharts) && !chart.isDisposed()) {\n            chart.dispose();\n        }\n    };\n\n    /**\n     * @param  {HTMLDomElement} dom\n     * @return {echarts~ECharts}\n     */\n    echarts.getInstanceByDom = function (dom) {\n        var key = dom.getAttribute(DOM_ATTRIBUTE_KEY);\n        return instances[key];\n    };\n    /**\n     * @param {string} key\n     * @return {echarts~ECharts}\n     */\n    echarts.getInstanceById = function (key) {\n        return instances[key];\n    };\n\n    /**\n     * Register theme\n     */\n    echarts.registerTheme = function (name, theme) {\n        themeStorage[name] = theme;\n    };\n\n    /**\n     * Register option preprocessor\n     * @param {Function} preprocessorFunc\n     */\n    echarts.registerPreprocessor = function (preprocessorFunc) {\n        optionPreprocessorFuncs.push(preprocessorFunc);\n    };\n\n    /**\n     * @param {number} [priority=1000]\n     * @param {Function} processorFunc\n     */\n    echarts.registerProcessor = function (priority, processorFunc) {\n        if (typeof priority === 'function') {\n            processorFunc = priority;\n            priority = PRIORITY_PROCESSOR_FILTER;\n        }\n        if (__DEV__) {\n            if (isNaN(priority)) {\n                throw new Error('Unkown processor priority');\n            }\n        }\n        dataProcessorFuncs.push({\n            prio: priority,\n            func: processorFunc\n        });\n    };\n\n    /**\n     * Usage:\n     * registerAction('someAction', 'someEvent', function () { ... });\n     * registerAction('someAction', function () { ... });\n     * registerAction(\n     *     {type: 'someAction', event: 'someEvent', update: 'updateView'},\n     *     function () { ... }\n     * );\n     *\n     * @param {(string|Object)} actionInfo\n     * @param {string} actionInfo.type\n     * @param {string} [actionInfo.event]\n     * @param {string} [actionInfo.update]\n     * @param {string} [eventName]\n     * @param {Function} action\n     */\n    echarts.registerAction = function (actionInfo, eventName, action) {\n        if (typeof eventName === 'function') {\n            action = eventName;\n            eventName = '';\n        }\n        var actionType = zrUtil.isObject(actionInfo)\n            ? actionInfo.type\n            : ([actionInfo, actionInfo = {\n                event: eventName\n            }][0]);\n\n        // Event name is all lowercase\n        actionInfo.event = (actionInfo.event || actionType).toLowerCase();\n        eventName = actionInfo.event;\n\n        // Validate action type and event name.\n        zrUtil.assert(ACTION_REG.test(actionType) && ACTION_REG.test(eventName));\n\n        if (!actions[actionType]) {\n            actions[actionType] = {action: action, actionInfo: actionInfo};\n        }\n        eventActionMap[eventName] = actionType;\n    };\n\n    /**\n     * @param {string} type\n     * @param {*} CoordinateSystem\n     */\n    echarts.registerCoordinateSystem = function (type, CoordinateSystem) {\n        CoordinateSystemManager.register(type, CoordinateSystem);\n    };\n\n    /**\n     * Layout is a special stage of visual encoding\n     * Most visual encoding like color are common for different chart\n     * But each chart has it's own layout algorithm\n     *\n     * @param {number} [priority=1000]\n     * @param {Function} layoutFunc\n     */\n    echarts.registerLayout = function (priority, layoutFunc) {\n        if (typeof priority === 'function') {\n            layoutFunc = priority;\n            priority = PRIORITY_VISUAL_LAYOUT;\n        }\n        if (__DEV__) {\n            if (isNaN(priority)) {\n                throw new Error('Unkown layout priority');\n            }\n        }\n        visualFuncs.push({\n            prio: priority,\n            func: layoutFunc,\n            isLayout: true\n        });\n    };\n\n    /**\n     * @param {number} [priority=3000]\n     * @param {Function} visualFunc\n     */\n    echarts.registerVisual = function (priority, visualFunc) {\n        if (typeof priority === 'function') {\n            visualFunc = priority;\n            priority = PRIORITY_VISUAL_CHART;\n        }\n        if (__DEV__) {\n            if (isNaN(priority)) {\n                throw new Error('Unkown visual priority');\n            }\n        }\n        visualFuncs.push({\n            prio: priority,\n            func: visualFunc\n        });\n    };\n\n    /**\n     * @param {string} name\n     */\n    echarts.registerLoading = function (name, loadingFx) {\n        loadingEffects[name] = loadingFx;\n    };\n\n    /**\n     * @param {Object} opts\n     * @param {string} [superClass]\n     */\n    echarts.extendComponentModel = function (opts/*, superClass*/) {\n        // var Clazz = ComponentModel;\n        // if (superClass) {\n        //     var classType = parseClassType(superClass);\n        //     Clazz = ComponentModel.getClass(classType.main, classType.sub, true);\n        // }\n        return ComponentModel.extend(opts);\n    };\n\n    /**\n     * @param {Object} opts\n     * @param {string} [superClass]\n     */\n    echarts.extendComponentView = function (opts/*, superClass*/) {\n        // var Clazz = ComponentView;\n        // if (superClass) {\n        //     var classType = parseClassType(superClass);\n        //     Clazz = ComponentView.getClass(classType.main, classType.sub, true);\n        // }\n        return ComponentView.extend(opts);\n    };\n\n    /**\n     * @param {Object} opts\n     * @param {string} [superClass]\n     */\n    echarts.extendSeriesModel = function (opts/*, superClass*/) {\n        // var Clazz = SeriesModel;\n        // if (superClass) {\n        //     superClass = 'series.' + superClass.replace('series.', '');\n        //     var classType = parseClassType(superClass);\n        //     Clazz = ComponentModel.getClass(classType.main, classType.sub, true);\n        // }\n        return SeriesModel.extend(opts);\n    };\n\n    /**\n     * @param {Object} opts\n     * @param {string} [superClass]\n     */\n    echarts.extendChartView = function (opts/*, superClass*/) {\n        // var Clazz = ChartView;\n        // if (superClass) {\n        //     superClass = superClass.replace('series.', '');\n        //     var classType = parseClassType(superClass);\n        //     Clazz = ChartView.getClass(classType.main, true);\n        // }\n        return ChartView.extend(opts);\n    };\n\n    /**\n     * ZRender need a canvas context to do measureText.\n     * But in node environment canvas may be created by node-canvas.\n     * So we need to specify how to create a canvas instead of using document.createElement('canvas')\n     *\n     * Be careful of using it in the browser.\n     *\n     * @param {Function} creator\n     * @example\n     *     var Canvas = require('canvas');\n     *     var echarts = require('echarts');\n     *     echarts.setCanvasCreator(function () {\n     *         // Small size is enough.\n     *         return new Canvas(32, 32);\n     *     });\n     */\n    echarts.setCanvasCreator = function (creator) {\n        zrUtil.createCanvas = creator;\n    };\n\n    echarts.registerVisual(PRIORITY_VISUAL_GLOBAL, __webpack_require__(415));\n    echarts.registerPreprocessor(__webpack_require__(409));\n    echarts.registerLoading('default', __webpack_require__(400));\n\n    // Default action\n    echarts.registerAction({\n        type: 'highlight',\n        event: 'highlight',\n        update: 'highlight'\n    }, zrUtil.noop);\n    echarts.registerAction({\n        type: 'downplay',\n        event: 'downplay',\n        update: 'downplay'\n    }, zrUtil.noop);\n\n\n    // --------\n    // Exports\n    // --------\n    //\n    echarts.List = __webpack_require__(349);\n    echarts.Model = __webpack_require__(325);\n\n    echarts.graphic = __webpack_require__(317);\n    echarts.number = __webpack_require__(318);\n    echarts.format = __webpack_require__(322);\n    echarts.throttle = throttle.throttle;\n    echarts.matrix = __webpack_require__(338);\n    echarts.vector = __webpack_require__(319);\n    echarts.color = __webpack_require__(330);\n\n    echarts.util = {};\n    each([\n            'map', 'each', 'filter', 'indexOf', 'inherits', 'reduce', 'filter',\n            'bind', 'curry', 'isArray', 'isString', 'isObject', 'isFunction',\n            'extend', 'defaults', 'clone'\n        ],\n        function (name) {\n            echarts.util[name] = zrUtil[name];\n        }\n    );\n\n    // PRIORITY\n    echarts.PRIORITY = {\n        PROCESSOR: {\n            FILTER: PRIORITY_PROCESSOR_FILTER,\n            STATISTIC: PRIORITY_PROCESSOR_STATISTIC\n        },\n        VISUAL: {\n            LAYOUT: PRIORITY_VISUAL_LAYOUT,\n            GLOBAL: PRIORITY_VISUAL_GLOBAL,\n            CHART: PRIORITY_VISUAL_CHART,\n            COMPONENT: PRIORITY_VISUAL_COMPONENT,\n            BRUSH: PRIORITY_VISUAL_BRUSH\n        }\n    };\n\n    module.exports = echarts;\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(62)))\n\n/***/ }),\n/* 317 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n\n    var zrUtil = __webpack_require__(315);\n\n    var pathTool = __webpack_require__(452);\n    var round = Math.round;\n    var Path = __webpack_require__(320);\n    var colorTool = __webpack_require__(330);\n    var matrix = __webpack_require__(338);\n    var vector = __webpack_require__(319);\n\n    var graphic = {};\n\n    graphic.Group = __webpack_require__(336);\n\n    graphic.Image = __webpack_require__(362);\n\n    graphic.Text = __webpack_require__(435);\n\n    graphic.Circle = __webpack_require__(442);\n\n    graphic.Sector = __webpack_require__(448);\n\n    graphic.Ring = __webpack_require__(447);\n\n    graphic.Polygon = __webpack_require__(444);\n\n    graphic.Polyline = __webpack_require__(445);\n\n    graphic.Rect = __webpack_require__(446);\n\n    graphic.Line = __webpack_require__(443);\n\n    graphic.BezierCurve = __webpack_require__(441);\n\n    graphic.Arc = __webpack_require__(440);\n\n    graphic.CompoundPath = __webpack_require__(433);\n\n    graphic.LinearGradient = __webpack_require__(371);\n\n    graphic.RadialGradient = __webpack_require__(434);\n\n    graphic.BoundingRect = __webpack_require__(324);\n\n    /**\n     * Extend shape with parameters\n     */\n    graphic.extendShape = function (opts) {\n        return Path.extend(opts);\n    };\n\n    /**\n     * Extend path\n     */\n    graphic.extendPath = function (pathData, opts) {\n        return pathTool.extendFromString(pathData, opts);\n    };\n\n    /**\n     * Create a path element from path data string\n     * @param {string} pathData\n     * @param {Object} opts\n     * @param {module:zrender/core/BoundingRect} rect\n     * @param {string} [layout=cover] 'center' or 'cover'\n     */\n    graphic.makePath = function (pathData, opts, rect, layout) {\n        var path = pathTool.createFromString(pathData, opts);\n        var boundingRect = path.getBoundingRect();\n        if (rect) {\n            var aspect = boundingRect.width / boundingRect.height;\n\n            if (layout === 'center') {\n                // Set rect to center, keep width / height ratio.\n                var width = rect.height * aspect;\n                var height;\n                if (width <= rect.width) {\n                    height = rect.height;\n                }\n                else {\n                    width = rect.width;\n                    height = width / aspect;\n                }\n                var cx = rect.x + rect.width / 2;\n                var cy = rect.y + rect.height / 2;\n\n                rect.x = cx - width / 2;\n                rect.y = cy - height / 2;\n                rect.width = width;\n                rect.height = height;\n            }\n\n            graphic.resizePath(path, rect);\n        }\n        return path;\n    };\n\n    graphic.mergePath = pathTool.mergePath,\n\n    /**\n     * Resize a path to fit the rect\n     * @param {module:zrender/graphic/Path} path\n     * @param {Object} rect\n     */\n    graphic.resizePath = function (path, rect) {\n        if (!path.applyTransform) {\n            return;\n        }\n\n        var pathRect = path.getBoundingRect();\n\n        var m = pathRect.calculateTransform(rect);\n\n        path.applyTransform(m);\n    };\n\n    /**\n     * Sub pixel optimize line for canvas\n     *\n     * @param {Object} param\n     * @param {Object} [param.shape]\n     * @param {number} [param.shape.x1]\n     * @param {number} [param.shape.y1]\n     * @param {number} [param.shape.x2]\n     * @param {number} [param.shape.y2]\n     * @param {Object} [param.style]\n     * @param {number} [param.style.lineWidth]\n     * @return {Object} Modified param\n     */\n    graphic.subPixelOptimizeLine = function (param) {\n        var subPixelOptimize = graphic.subPixelOptimize;\n        var shape = param.shape;\n        var lineWidth = param.style.lineWidth;\n\n        if (round(shape.x1 * 2) === round(shape.x2 * 2)) {\n            shape.x1 = shape.x2 = subPixelOptimize(shape.x1, lineWidth, true);\n        }\n        if (round(shape.y1 * 2) === round(shape.y2 * 2)) {\n            shape.y1 = shape.y2 = subPixelOptimize(shape.y1, lineWidth, true);\n        }\n        return param;\n    };\n\n    /**\n     * Sub pixel optimize rect for canvas\n     *\n     * @param {Object} param\n     * @param {Object} [param.shape]\n     * @param {number} [param.shape.x]\n     * @param {number} [param.shape.y]\n     * @param {number} [param.shape.width]\n     * @param {number} [param.shape.height]\n     * @param {Object} [param.style]\n     * @param {number} [param.style.lineWidth]\n     * @return {Object} Modified param\n     */\n    graphic.subPixelOptimizeRect = function (param) {\n        var subPixelOptimize = graphic.subPixelOptimize;\n        var shape = param.shape;\n        var lineWidth = param.style.lineWidth;\n        var originX = shape.x;\n        var originY = shape.y;\n        var originWidth = shape.width;\n        var originHeight = shape.height;\n        shape.x = subPixelOptimize(shape.x, lineWidth, true);\n        shape.y = subPixelOptimize(shape.y, lineWidth, true);\n        shape.width = Math.max(\n            subPixelOptimize(originX + originWidth, lineWidth, false) - shape.x,\n            originWidth === 0 ? 0 : 1\n        );\n        shape.height = Math.max(\n            subPixelOptimize(originY + originHeight, lineWidth, false) - shape.y,\n            originHeight === 0 ? 0 : 1\n        );\n        return param;\n    };\n\n    /**\n     * Sub pixel optimize for canvas\n     *\n     * @param {number} position Coordinate, such as x, y\n     * @param {number} lineWidth Should be nonnegative integer.\n     * @param {boolean=} positiveOrNegative Default false (negative).\n     * @return {number} Optimized position.\n     */\n    graphic.subPixelOptimize = function (position, lineWidth, positiveOrNegative) {\n        // Assure that (position + lineWidth / 2) is near integer edge,\n        // otherwise line will be fuzzy in canvas.\n        var doubledPosition = round(position * 2);\n        return (doubledPosition + round(lineWidth)) % 2 === 0\n            ? doubledPosition / 2\n            : (doubledPosition + (positiveOrNegative ? 1 : -1)) / 2;\n    };\n\n    function hasFillOrStroke(fillOrStroke) {\n        return fillOrStroke != null && fillOrStroke != 'none';\n    }\n\n    function liftColor(color) {\n        return typeof color === 'string' ? colorTool.lift(color, -0.1) : color;\n    }\n\n    /**\n     * @private\n     */\n    function cacheElementStl(el) {\n        if (el.__hoverStlDirty) {\n            var stroke = el.style.stroke;\n            var fill = el.style.fill;\n\n            // Create hoverStyle on mouseover\n            var hoverStyle = el.__hoverStl;\n            hoverStyle.fill = hoverStyle.fill\n                || (hasFillOrStroke(fill) ? liftColor(fill) : null);\n            hoverStyle.stroke = hoverStyle.stroke\n                || (hasFillOrStroke(stroke) ? liftColor(stroke) : null);\n\n            var normalStyle = {};\n            for (var name in hoverStyle) {\n                if (hoverStyle.hasOwnProperty(name)) {\n                    normalStyle[name] = el.style[name];\n                }\n            }\n\n            el.__normalStl = normalStyle;\n\n            el.__hoverStlDirty = false;\n        }\n    }\n\n    /**\n     * @private\n     */\n    function doSingleEnterHover(el) {\n        if (el.__isHover) {\n            return;\n        }\n\n        cacheElementStl(el);\n\n        if (el.useHoverLayer) {\n            el.__zr && el.__zr.addHover(el, el.__hoverStl);\n        }\n        else {\n            el.setStyle(el.__hoverStl);\n            el.z2 += 1;\n        }\n\n        el.__isHover = true;\n    }\n\n    /**\n     * @inner\n     */\n    function doSingleLeaveHover(el) {\n        if (!el.__isHover) {\n            return;\n        }\n\n        var normalStl = el.__normalStl;\n        if (el.useHoverLayer) {\n            el.__zr && el.__zr.removeHover(el);\n        }\n        else {\n            normalStl && el.setStyle(normalStl);\n            el.z2 -= 1;\n        }\n\n        el.__isHover = false;\n    }\n\n    /**\n     * @inner\n     */\n    function doEnterHover(el) {\n        el.type === 'group'\n            ? el.traverse(function (child) {\n                if (child.type !== 'group') {\n                    doSingleEnterHover(child);\n                }\n            })\n            : doSingleEnterHover(el);\n    }\n\n    function doLeaveHover(el) {\n        el.type === 'group'\n            ? el.traverse(function (child) {\n                if (child.type !== 'group') {\n                    doSingleLeaveHover(child);\n                }\n            })\n            : doSingleLeaveHover(el);\n    }\n\n    /**\n     * @inner\n     */\n    function setElementHoverStl(el, hoverStl) {\n        // If element has sepcified hoverStyle, then use it instead of given hoverStyle\n        // Often used when item group has a label element and it's hoverStyle is different\n        el.__hoverStl = el.hoverStyle || hoverStl || {};\n        el.__hoverStlDirty = true;\n\n        if (el.__isHover) {\n            cacheElementStl(el);\n        }\n    }\n\n    /**\n     * @inner\n     */\n    function onElementMouseOver(e) {\n        if (this.__hoverSilentOnTouch && e.zrByTouch) {\n            return;\n        }\n\n        // Only if element is not in emphasis status\n        !this.__isEmphasis && doEnterHover(this);\n    }\n\n    /**\n     * @inner\n     */\n    function onElementMouseOut(e) {\n        if (this.__hoverSilentOnTouch && e.zrByTouch) {\n            return;\n        }\n\n        // Only if element is not in emphasis status\n        !this.__isEmphasis && doLeaveHover(this);\n    }\n\n    /**\n     * @inner\n     */\n    function enterEmphasis() {\n        this.__isEmphasis = true;\n        doEnterHover(this);\n    }\n\n    /**\n     * @inner\n     */\n    function leaveEmphasis() {\n        this.__isEmphasis = false;\n        doLeaveHover(this);\n    }\n\n    /**\n     * Set hover style of element\n     * @param {module:zrender/Element} el\n     * @param {Object} [hoverStyle]\n     * @param {Object} [opt]\n     * @param {boolean} [opt.hoverSilentOnTouch=false]\n     *        In touch device, mouseover event will be trigger on touchstart event\n     *        (see module:zrender/dom/HandlerProxy). By this mechanism, we can\n     *        conviniently use hoverStyle when tap on touch screen without additional\n     *        code for compatibility.\n     *        But if the chart/component has select feature, which usually also use\n     *        hoverStyle, there might be conflict between 'select-highlight' and\n     *        'hover-highlight' especially when roam is enabled (see geo for example).\n     *        In this case, hoverSilentOnTouch should be used to disable hover-highlight\n     *        on touch device.\n     */\n    graphic.setHoverStyle = function (el, hoverStyle, opt) {\n        el.__hoverSilentOnTouch = opt && opt.hoverSilentOnTouch;\n\n        el.type === 'group'\n            ? el.traverse(function (child) {\n                if (child.type !== 'group') {\n                    setElementHoverStl(child, hoverStyle);\n                }\n            })\n            : setElementHoverStl(el, hoverStyle);\n\n        // Duplicated function will be auto-ignored, see Eventful.js.\n        el.on('mouseover', onElementMouseOver)\n          .on('mouseout', onElementMouseOut);\n\n        // Emphasis, normal can be triggered manually\n        el.on('emphasis', enterEmphasis)\n          .on('normal', leaveEmphasis);\n    };\n\n    /**\n     * Set text option in the style\n     * @param {Object} textStyle\n     * @param {module:echarts/model/Model} labelModel\n     * @param {string} color\n     */\n    graphic.setText = function (textStyle, labelModel, color) {\n        var labelPosition = labelModel.getShallow('position') || 'inside';\n        var labelOffset = labelModel.getShallow('offset');\n        var labelColor = labelPosition.indexOf('inside') >= 0 ? 'white' : color;\n        var textStyleModel = labelModel.getModel('textStyle');\n        zrUtil.extend(textStyle, {\n            textDistance: labelModel.getShallow('distance') || 5,\n            textFont: textStyleModel.getFont(),\n            textPosition: labelPosition,\n            textOffset: labelOffset,\n            textFill: textStyleModel.getTextColor() || labelColor\n        });\n    };\n\n    function animateOrSetProps(isUpdate, el, props, animatableModel, dataIndex, cb) {\n        if (typeof dataIndex === 'function') {\n            cb = dataIndex;\n            dataIndex = null;\n        }\n        // Do not check 'animation' property directly here. Consider this case:\n        // animation model is an `itemModel`, whose does not have `isAnimationEnabled`\n        // but its parent model (`seriesModel`) does.\n        var animationEnabled = animatableModel && animatableModel.isAnimationEnabled();\n\n        if (animationEnabled) {\n            var postfix = isUpdate ? 'Update' : '';\n            var duration = animatableModel.getShallow('animationDuration' + postfix);\n            var animationEasing = animatableModel.getShallow('animationEasing' + postfix);\n            var animationDelay = animatableModel.getShallow('animationDelay' + postfix);\n            if (typeof animationDelay === 'function') {\n                animationDelay = animationDelay(\n                    dataIndex,\n                    animatableModel.getAnimationDelayParams\n                        ? animatableModel.getAnimationDelayParams(el, dataIndex)\n                        : null\n                );\n            }\n            if (typeof duration === 'function') {\n                duration = duration(dataIndex);\n            }\n\n            duration > 0\n                ? el.animateTo(props, duration, animationDelay || 0, animationEasing, cb)\n                : (el.attr(props), cb && cb());\n        }\n        else {\n            el.attr(props);\n            cb && cb();\n        }\n    }\n\n    /**\n     * Update graphic element properties with or without animation according to the configuration in series\n     * @param {module:zrender/Element} el\n     * @param {Object} props\n     * @param {module:echarts/model/Model} [animatableModel]\n     * @param {number} [dataIndex]\n     * @param {Function} [cb]\n     * @example\n     *     graphic.updateProps(el, {\n     *         position: [100, 100]\n     *     }, seriesModel, dataIndex, function () { console.log('Animation done!'); });\n     *     // Or\n     *     graphic.updateProps(el, {\n     *         position: [100, 100]\n     *     }, seriesModel, function () { console.log('Animation done!'); });\n     */\n    graphic.updateProps = function (el, props, animatableModel, dataIndex, cb) {\n        animateOrSetProps(true, el, props, animatableModel, dataIndex, cb);\n    };\n\n    /**\n     * Init graphic element properties with or without animation according to the configuration in series\n     * @param {module:zrender/Element} el\n     * @param {Object} props\n     * @param {module:echarts/model/Model} [animatableModel]\n     * @param {number} [dataIndex]\n     * @param {Function} cb\n     */\n    graphic.initProps = function (el, props, animatableModel, dataIndex, cb) {\n        animateOrSetProps(false, el, props, animatableModel, dataIndex, cb);\n    };\n\n    /**\n     * Get transform matrix of target (param target),\n     * in coordinate of its ancestor (param ancestor)\n     *\n     * @param {module:zrender/mixin/Transformable} target\n     * @param {module:zrender/mixin/Transformable} [ancestor]\n     */\n    graphic.getTransform = function (target, ancestor) {\n        var mat = matrix.identity([]);\n\n        while (target && target !== ancestor) {\n            matrix.mul(mat, target.getLocalTransform(), mat);\n            target = target.parent;\n        }\n\n        return mat;\n    };\n\n    /**\n     * Apply transform to an vertex.\n     * @param {Array.<number>} vertex [x, y]\n     * @param {Array.<number>} transform Transform matrix: like [1, 0, 0, 1, 0, 0]\n     * @param {boolean=} invert Whether use invert matrix.\n     * @return {Array.<number>} [x, y]\n     */\n    graphic.applyTransform = function (vertex, transform, invert) {\n        if (invert) {\n            transform = matrix.invert([], transform);\n        }\n        return vector.applyTransform([], vertex, transform);\n    };\n\n    /**\n     * @param {string} direction 'left' 'right' 'top' 'bottom'\n     * @param {Array.<number>} transform Transform matrix: like [1, 0, 0, 1, 0, 0]\n     * @param {boolean=} invert Whether use invert matrix.\n     * @return {string} Transformed direction. 'left' 'right' 'top' 'bottom'\n     */\n    graphic.transformDirection = function (direction, transform, invert) {\n\n        // Pick a base, ensure that transform result will not be (0, 0).\n        var hBase = (transform[4] === 0 || transform[5] === 0 || transform[0] === 0)\n            ? 1 : Math.abs(2 * transform[4] / transform[0]);\n        var vBase = (transform[4] === 0 || transform[5] === 0 || transform[2] === 0)\n            ? 1 : Math.abs(2 * transform[4] / transform[2]);\n\n        var vertex = [\n            direction === 'left' ? -hBase : direction === 'right' ? hBase : 0,\n            direction === 'top' ? -vBase : direction === 'bottom' ? vBase : 0\n        ];\n\n        vertex = graphic.applyTransform(vertex, transform, invert);\n\n        return Math.abs(vertex[0]) > Math.abs(vertex[1])\n            ? (vertex[0] > 0 ? 'right' : 'left')\n            : (vertex[1] > 0 ? 'bottom' : 'top');\n    };\n\n    /**\n     * Apply group transition animation from g1 to g2\n     */\n    graphic.groupTransition = function (g1, g2, animatableModel, cb) {\n        if (!g1 || !g2) {\n            return;\n        }\n\n        function getElMap(g) {\n            var elMap = {};\n            g.traverse(function (el) {\n                if (!el.isGroup && el.anid) {\n                    elMap[el.anid] = el;\n                }\n            });\n            return elMap;\n        }\n        function getAnimatableProps(el) {\n            var obj = {\n                position: vector.clone(el.position),\n                rotation: el.rotation\n            };\n            if (el.shape) {\n                obj.shape = zrUtil.extend({}, el.shape);\n            }\n            return obj;\n        }\n        var elMap1 = getElMap(g1);\n\n        g2.traverse(function (el) {\n            if (!el.isGroup && el.anid) {\n                var oldEl = elMap1[el.anid];\n                if (oldEl) {\n                    var newProp = getAnimatableProps(el);\n                    el.attr(getAnimatableProps(oldEl));\n                    graphic.updateProps(el, newProp, animatableModel, el.dataIndex);\n                }\n                // else {\n                //     if (el.previousProps) {\n                //         graphic.updateProps\n                //     }\n                // }\n            }\n        });\n    };\n\n    module.exports = graphic;\n\n\n\n/***/ }),\n/* 318 */\n/***/ (function(module, exports) {\n\n/**\n * 数值处理模块\n * @module echarts/util/number\n */\n\n\n\n    var number = {};\n\n    var RADIAN_EPSILON = 1e-4;\n\n    function _trim(str) {\n        return str.replace(/^\\s+/, '').replace(/\\s+$/, '');\n    }\n\n    /**\n     * Linear mapping a value from domain to range\n     * @memberOf module:echarts/util/number\n     * @param  {(number|Array.<number>)} val\n     * @param  {Array.<number>} domain Domain extent domain[0] can be bigger than domain[1]\n     * @param  {Array.<number>} range  Range extent range[0] can be bigger than range[1]\n     * @param  {boolean} clamp\n     * @return {(number|Array.<number>}\n     */\n    number.linearMap = function (val, domain, range, clamp) {\n        var subDomain = domain[1] - domain[0];\n        var subRange = range[1] - range[0];\n\n        if (subDomain === 0) {\n            return subRange === 0\n                ? range[0]\n                : (range[0] + range[1]) / 2;\n        }\n\n        // Avoid accuracy problem in edge, such as\n        // 146.39 - 62.83 === 83.55999999999999.\n        // See echarts/test/ut/spec/util/number.js#linearMap#accuracyError\n        // It is a little verbose for efficiency considering this method\n        // is a hotspot.\n        if (clamp) {\n            if (subDomain > 0) {\n                if (val <= domain[0]) {\n                    return range[0];\n                }\n                else if (val >= domain[1]) {\n                    return range[1];\n                }\n            }\n            else {\n                if (val >= domain[0]) {\n                    return range[0];\n                }\n                else if (val <= domain[1]) {\n                    return range[1];\n                }\n            }\n        }\n        else {\n            if (val === domain[0]) {\n                return range[0];\n            }\n            if (val === domain[1]) {\n                return range[1];\n            }\n        }\n\n        return (val - domain[0]) / subDomain * subRange + range[0];\n    };\n\n    /**\n     * Convert a percent string to absolute number.\n     * Returns NaN if percent is not a valid string or number\n     * @memberOf module:echarts/util/number\n     * @param {string|number} percent\n     * @param {number} all\n     * @return {number}\n     */\n    number.parsePercent = function(percent, all) {\n        switch (percent) {\n            case 'center':\n            case 'middle':\n                percent = '50%';\n                break;\n            case 'left':\n            case 'top':\n                percent = '0%';\n                break;\n            case 'right':\n            case 'bottom':\n                percent = '100%';\n                break;\n        }\n        if (typeof percent === 'string') {\n            if (_trim(percent).match(/%$/)) {\n                return parseFloat(percent) / 100 * all;\n            }\n\n            return parseFloat(percent);\n        }\n\n        return percent == null ? NaN : +percent;\n    };\n\n    /**\n     * Fix rounding error of float numbers\n     * @param {number} x\n     * @return {number}\n     */\n    number.round = function (x, precision) {\n        if (precision == null) {\n            precision = 10;\n        }\n        // Avoid range error\n        precision = Math.min(Math.max(0, precision), 20);\n        return +(+x).toFixed(precision);\n    };\n\n    number.asc = function (arr) {\n        arr.sort(function (a, b) {\n            return a - b;\n        });\n        return arr;\n    };\n\n    /**\n     * Get precision\n     * @param {number} val\n     */\n    number.getPrecision = function (val) {\n        val = +val;\n        if (isNaN(val)) {\n            return 0;\n        }\n        // It is much faster than methods converting number to string as follows\n        //      var tmp = val.toString();\n        //      return tmp.length - 1 - tmp.indexOf('.');\n        // especially when precision is low\n        var e = 1;\n        var count = 0;\n        while (Math.round(val * e) / e !== val) {\n            e *= 10;\n            count++;\n        }\n        return count;\n    };\n\n    number.getPrecisionSafe = function (val) {\n        var str = val.toString();\n        var dotIndex = str.indexOf('.');\n        if (dotIndex < 0) {\n            return 0;\n        }\n        return str.length - 1 - dotIndex;\n    };\n\n    /**\n     * Minimal dicernible data precisioin according to a single pixel.\n     * @param {Array.<number>} dataExtent\n     * @param {Array.<number>} pixelExtent\n     * @return {number} precision\n     */\n    number.getPixelPrecision = function (dataExtent, pixelExtent) {\n        var log = Math.log;\n        var LN10 = Math.LN10;\n        var dataQuantity = Math.floor(log(dataExtent[1] - dataExtent[0]) / LN10);\n        var sizeQuantity = Math.round(log(Math.abs(pixelExtent[1] - pixelExtent[0])) / LN10);\n        // toFixed() digits argument must be between 0 and 20.\n        var precision = Math.min(Math.max(-dataQuantity + sizeQuantity, 0), 20);\n        return !isFinite(precision) ? 20 : precision;\n    };\n\n    // Number.MAX_SAFE_INTEGER, ie do not support.\n    number.MAX_SAFE_INTEGER = 9007199254740991;\n\n    /**\n     * To 0 - 2 * PI, considering negative radian.\n     * @param {number} radian\n     * @return {number}\n     */\n    number.remRadian = function (radian) {\n        var pi2 = Math.PI * 2;\n        return (radian % pi2 + pi2) % pi2;\n    };\n\n    /**\n     * @param {type} radian\n     * @return {boolean}\n     */\n    number.isRadianAroundZero = function (val) {\n        return val > -RADIAN_EPSILON && val < RADIAN_EPSILON;\n    };\n\n    /**\n     * @param {string|Date|number} value\n     * @return {Date} date\n     */\n    number.parseDate = function (value) {\n        if (value instanceof Date) {\n            return value;\n        }\n        else if (typeof value === 'string') {\n            // Treat as ISO format. See issue #3623\n            var ret = new Date(value);\n            if (isNaN(+ret)) {\n                // FIXME new Date('1970-01-01') is UTC, new Date('1970/01/01') is local\n                ret = new Date(new Date(value.replace(/-/g, '/')) - new Date('1970/01/01'));\n            }\n            return ret;\n        }\n\n        return new Date(Math.round(value));\n    };\n\n    /**\n     * Quantity of a number. e.g. 0.1, 1, 10, 100\n     * @param  {number} val\n     * @return {number}\n     */\n    number.quantity = function (val) {\n        return Math.pow(10, Math.floor(Math.log(val) / Math.LN10));\n    };\n\n    // \"Nice Numbers for Graph Labels\" of Graphic Gems\n    /**\n     * find a “nice” number approximately equal to x. Round the number if round = true, take ceiling if round = false\n     * The primary observation is that the “nicest” numbers in decimal are 1, 2, and 5, and all power-of-ten multiples of these numbers.\n     * @param  {number} val\n     * @param  {boolean} round\n     * @return {number}\n     */\n    number.nice = function (val, round) {\n        var exp10 = number.quantity(val);\n        var f = val / exp10; // between 1 and 10\n        var nf;\n        if (round) {\n            if (f < 1.5) { nf = 1; }\n            else if (f < 2.5) { nf = 2; }\n            else if (f < 4) { nf = 3; }\n            else if (f < 7) { nf = 5; }\n            else { nf = 10; }\n        }\n        else {\n            if (f < 1) { nf = 1; }\n            else if (f < 2) { nf = 2; }\n            else if (f < 3) { nf = 3; }\n            else if (f < 5) { nf = 5; }\n            else { nf = 10; }\n        }\n        return nf * exp10;\n    };\n\n    /**\n     * Order intervals asc, and split them when overlap.\n     * expect(numberUtil.reformIntervals([\n     *     {interval: [18, 62], close: [1, 1]},\n     *     {interval: [-Infinity, -70], close: [0, 0]},\n     *     {interval: [-70, -26], close: [1, 1]},\n     *     {interval: [-26, 18], close: [1, 1]},\n     *     {interval: [62, 150], close: [1, 1]},\n     *     {interval: [106, 150], close: [1, 1]},\n     *     {interval: [150, Infinity], close: [0, 0]}\n     * ])).toEqual([\n     *     {interval: [-Infinity, -70], close: [0, 0]},\n     *     {interval: [-70, -26], close: [1, 1]},\n     *     {interval: [-26, 18], close: [0, 1]},\n     *     {interval: [18, 62], close: [0, 1]},\n     *     {interval: [62, 150], close: [0, 1]},\n     *     {interval: [150, Infinity], close: [0, 0]}\n     * ]);\n     * @param {Array.<Object>} list, where `close` mean open or close\n     *        of the interval, and Infinity can be used.\n     * @return {Array.<Object>} The origin list, which has been reformed.\n     */\n    number.reformIntervals = function (list) {\n        list.sort(function (a, b) {\n            return littleThan(a, b, 0) ? -1 : 1;\n        });\n\n        var curr = -Infinity;\n        var currClose = 1;\n        for (var i = 0; i < list.length;) {\n            var interval = list[i].interval;\n            var close = list[i].close;\n\n            for (var lg = 0; lg < 2; lg++) {\n                if (interval[lg] <= curr) {\n                    interval[lg] = curr;\n                    close[lg] = !lg ? 1 - currClose : 1;\n                }\n                curr = interval[lg];\n                currClose = close[lg];\n            }\n\n            if (interval[0] === interval[1] && close[0] * close[1] !== 1) {\n                list.splice(i, 1);\n            }\n            else {\n                i++;\n            }\n        }\n\n        return list;\n\n        function littleThan(a, b, lg) {\n            return a.interval[lg] < b.interval[lg]\n                || (\n                    a.interval[lg] === b.interval[lg]\n                    && (\n                        (a.close[lg] - b.close[lg] === (!lg ? 1 : -1))\n                        || (!lg && littleThan(a, b, 1))\n                    )\n                );\n        }\n    };\n\n    /**\n     * parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n     * ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n     * subtraction forces infinities to NaN\n     * @param {*} v\n     * @return {boolean}\n     */\n    number.isNumeric = function (v) {\n        return v - parseFloat(v) >= 0;\n    };\n\n    module.exports = number;\n\n\n/***/ }),\n/* 319 */\n/***/ (function(module, exports) {\n\n\n    var ArrayCtor = typeof Float32Array === 'undefined'\n        ? Array\n        : Float32Array;\n\n    /**\n     * @typedef {Float32Array|Array.<number>} Vector2\n     */\n    /**\n     * 二维向量类\n     * @exports zrender/tool/vector\n     */\n    var vector = {\n        /**\n         * 创建一个向量\n         * @param {number} [x=0]\n         * @param {number} [y=0]\n         * @return {Vector2}\n         */\n        create: function (x, y) {\n            var out = new ArrayCtor(2);\n            if (x == null) {\n                x = 0;\n            }\n            if (y == null) {\n                y = 0;\n            }\n            out[0] = x;\n            out[1] = y;\n            return out;\n        },\n\n        /**\n         * 复制向量数据\n         * @param {Vector2} out\n         * @param {Vector2} v\n         * @return {Vector2}\n         */\n        copy: function (out, v) {\n            out[0] = v[0];\n            out[1] = v[1];\n            return out;\n        },\n\n        /**\n         * 克隆一个向量\n         * @param {Vector2} v\n         * @return {Vector2}\n         */\n        clone: function (v) {\n            var out = new ArrayCtor(2);\n            out[0] = v[0];\n            out[1] = v[1];\n            return out;\n        },\n\n        /**\n         * 设置向量的两个项\n         * @param {Vector2} out\n         * @param {number} a\n         * @param {number} b\n         * @return {Vector2} 结果\n         */\n        set: function (out, a, b) {\n            out[0] = a;\n            out[1] = b;\n            return out;\n        },\n\n        /**\n         * 向量相加\n         * @param {Vector2} out\n         * @param {Vector2} v1\n         * @param {Vector2} v2\n         */\n        add: function (out, v1, v2) {\n            out[0] = v1[0] + v2[0];\n            out[1] = v1[1] + v2[1];\n            return out;\n        },\n\n        /**\n         * 向量缩放后相加\n         * @param {Vector2} out\n         * @param {Vector2} v1\n         * @param {Vector2} v2\n         * @param {number} a\n         */\n        scaleAndAdd: function (out, v1, v2, a) {\n            out[0] = v1[0] + v2[0] * a;\n            out[1] = v1[1] + v2[1] * a;\n            return out;\n        },\n\n        /**\n         * 向量相减\n         * @param {Vector2} out\n         * @param {Vector2} v1\n         * @param {Vector2} v2\n         */\n        sub: function (out, v1, v2) {\n            out[0] = v1[0] - v2[0];\n            out[1] = v1[1] - v2[1];\n            return out;\n        },\n\n        /**\n         * 向量长度\n         * @param {Vector2} v\n         * @return {number}\n         */\n        len: function (v) {\n            return Math.sqrt(this.lenSquare(v));\n        },\n\n        /**\n         * 向量长度平方\n         * @param {Vector2} v\n         * @return {number}\n         */\n        lenSquare: function (v) {\n            return v[0] * v[0] + v[1] * v[1];\n        },\n\n        /**\n         * 向量乘法\n         * @param {Vector2} out\n         * @param {Vector2} v1\n         * @param {Vector2} v2\n         */\n        mul: function (out, v1, v2) {\n            out[0] = v1[0] * v2[0];\n            out[1] = v1[1] * v2[1];\n            return out;\n        },\n\n        /**\n         * 向量除法\n         * @param {Vector2} out\n         * @param {Vector2} v1\n         * @param {Vector2} v2\n         */\n        div: function (out, v1, v2) {\n            out[0] = v1[0] / v2[0];\n            out[1] = v1[1] / v2[1];\n            return out;\n        },\n\n        /**\n         * 向量点乘\n         * @param {Vector2} v1\n         * @param {Vector2} v2\n         * @return {number}\n         */\n        dot: function (v1, v2) {\n            return v1[0] * v2[0] + v1[1] * v2[1];\n        },\n\n        /**\n         * 向量缩放\n         * @param {Vector2} out\n         * @param {Vector2} v\n         * @param {number} s\n         */\n        scale: function (out, v, s) {\n            out[0] = v[0] * s;\n            out[1] = v[1] * s;\n            return out;\n        },\n\n        /**\n         * 向量归一化\n         * @param {Vector2} out\n         * @param {Vector2} v\n         */\n        normalize: function (out, v) {\n            var d = vector.len(v);\n            if (d === 0) {\n                out[0] = 0;\n                out[1] = 0;\n            }\n            else {\n                out[0] = v[0] / d;\n                out[1] = v[1] / d;\n            }\n            return out;\n        },\n\n        /**\n         * 计算向量间距离\n         * @param {Vector2} v1\n         * @param {Vector2} v2\n         * @return {number}\n         */\n        distance: function (v1, v2) {\n            return Math.sqrt(\n                (v1[0] - v2[0]) * (v1[0] - v2[0])\n                + (v1[1] - v2[1]) * (v1[1] - v2[1])\n            );\n        },\n\n        /**\n         * 向量距离平方\n         * @param {Vector2} v1\n         * @param {Vector2} v2\n         * @return {number}\n         */\n        distanceSquare: function (v1, v2) {\n            return (v1[0] - v2[0]) * (v1[0] - v2[0])\n                + (v1[1] - v2[1]) * (v1[1] - v2[1]);\n        },\n\n        /**\n         * 求负向量\n         * @param {Vector2} out\n         * @param {Vector2} v\n         */\n        negate: function (out, v) {\n            out[0] = -v[0];\n            out[1] = -v[1];\n            return out;\n        },\n\n        /**\n         * 插值两个点\n         * @param {Vector2} out\n         * @param {Vector2} v1\n         * @param {Vector2} v2\n         * @param {number} t\n         */\n        lerp: function (out, v1, v2, t) {\n            out[0] = v1[0] + t * (v2[0] - v1[0]);\n            out[1] = v1[1] + t * (v2[1] - v1[1]);\n            return out;\n        },\n\n        /**\n         * 矩阵左乘向量\n         * @param {Vector2} out\n         * @param {Vector2} v\n         * @param {Vector2} m\n         */\n        applyTransform: function (out, v, m) {\n            var x = v[0];\n            var y = v[1];\n            out[0] = m[0] * x + m[2] * y + m[4];\n            out[1] = m[1] * x + m[3] * y + m[5];\n            return out;\n        },\n        /**\n         * 求两个向量最小值\n         * @param  {Vector2} out\n         * @param  {Vector2} v1\n         * @param  {Vector2} v2\n         */\n        min: function (out, v1, v2) {\n            out[0] = Math.min(v1[0], v2[0]);\n            out[1] = Math.min(v1[1], v2[1]);\n            return out;\n        },\n        /**\n         * 求两个向量最大值\n         * @param  {Vector2} out\n         * @param  {Vector2} v1\n         * @param  {Vector2} v2\n         */\n        max: function (out, v1, v2) {\n            out[0] = Math.max(v1[0], v2[0]);\n            out[1] = Math.max(v1[1], v2[1]);\n            return out;\n        }\n    };\n\n    vector.length = vector.len;\n    vector.lengthSquare = vector.lenSquare;\n    vector.dist = vector.distance;\n    vector.distSquare = vector.distanceSquare;\n\n    module.exports = vector;\n\n\n\n/***/ }),\n/* 320 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * Path element\n * @module zrender/graphic/Path\n */\n\n\n\n    var Displayable = __webpack_require__(345);\n    var zrUtil = __webpack_require__(315);\n    var PathProxy = __webpack_require__(337);\n    var pathContain = __webpack_require__(427);\n\n    var Pattern = __webpack_require__(363);\n    var getCanvasPattern = Pattern.prototype.getCanvasPattern;\n\n    var abs = Math.abs;\n\n    var pathProxyForDraw = new PathProxy(true);\n    /**\n     * @alias module:zrender/graphic/Path\n     * @extends module:zrender/graphic/Displayable\n     * @constructor\n     * @param {Object} opts\n     */\n    function Path(opts) {\n        Displayable.call(this, opts);\n\n        /**\n         * @type {module:zrender/core/PathProxy}\n         * @readOnly\n         */\n        this.path = null;\n    }\n\n    Path.prototype = {\n\n        constructor: Path,\n\n        type: 'path',\n\n        __dirtyPath: true,\n\n        strokeContainThreshold: 5,\n\n        brush: function (ctx, prevEl) {\n            var style = this.style;\n            var path = this.path || pathProxyForDraw;\n            var hasStroke = style.hasStroke();\n            var hasFill = style.hasFill();\n            var fill = style.fill;\n            var stroke = style.stroke;\n            var hasFillGradient = hasFill && !!(fill.colorStops);\n            var hasStrokeGradient = hasStroke && !!(stroke.colorStops);\n            var hasFillPattern = hasFill && !!(fill.image);\n            var hasStrokePattern = hasStroke && !!(stroke.image);\n\n            style.bind(ctx, this, prevEl);\n            this.setTransform(ctx);\n\n            if (this.__dirty) {\n                var rect;\n                // Update gradient because bounding rect may changed\n                if (hasFillGradient) {\n                    rect = rect || this.getBoundingRect();\n                    this._fillGradient = style.getGradient(ctx, fill, rect);\n                }\n                if (hasStrokeGradient) {\n                    rect = rect || this.getBoundingRect();\n                    this._strokeGradient = style.getGradient(ctx, stroke, rect);\n                }\n            }\n            // Use the gradient or pattern\n            if (hasFillGradient) {\n                // PENDING If may have affect the state\n                ctx.fillStyle = this._fillGradient;\n            }\n            else if (hasFillPattern) {\n                ctx.fillStyle = getCanvasPattern.call(fill, ctx);\n            }\n            if (hasStrokeGradient) {\n                ctx.strokeStyle = this._strokeGradient;\n            }\n            else if (hasStrokePattern) {\n                ctx.strokeStyle = getCanvasPattern.call(stroke, ctx);\n            }\n\n            var lineDash = style.lineDash;\n            var lineDashOffset = style.lineDashOffset;\n\n            var ctxLineDash = !!ctx.setLineDash;\n\n            // Update path sx, sy\n            var scale = this.getGlobalScale();\n            path.setScale(scale[0], scale[1]);\n\n            // Proxy context\n            // Rebuild path in following 2 cases\n            // 1. Path is dirty\n            // 2. Path needs javascript implemented lineDash stroking.\n            //    In this case, lineDash information will not be saved in PathProxy\n            if (this.__dirtyPath\n                || (lineDash && !ctxLineDash && hasStroke)\n            ) {\n                path.beginPath(ctx);\n\n                // Setting line dash before build path\n                if (lineDash && !ctxLineDash) {\n                    path.setLineDash(lineDash);\n                    path.setLineDashOffset(lineDashOffset);\n                }\n\n                this.buildPath(path, this.shape, false);\n\n                // Clear path dirty flag\n                if (this.path) {\n                    this.__dirtyPath = false;\n                }\n            }\n            else {\n                // Replay path building\n                ctx.beginPath();\n                this.path.rebuildPath(ctx);\n            }\n\n            hasFill && path.fill(ctx);\n\n            if (lineDash && ctxLineDash) {\n                ctx.setLineDash(lineDash);\n                ctx.lineDashOffset = lineDashOffset;\n            }\n\n            hasStroke && path.stroke(ctx);\n\n            if (lineDash && ctxLineDash) {\n                // PENDING\n                // Remove lineDash\n                ctx.setLineDash([]);\n            }\n\n\n            this.restoreTransform(ctx);\n\n            // Draw rect text\n            if (style.text != null) {\n                // var rect = this.getBoundingRect();\n                this.drawRectText(ctx, this.getBoundingRect());\n            }\n        },\n\n        // When bundling path, some shape may decide if use moveTo to begin a new subpath or closePath\n        // Like in circle\n        buildPath: function (ctx, shapeCfg, inBundle) {},\n\n        createPathProxy: function () {\n            this.path = new PathProxy();\n        },\n\n        getBoundingRect: function () {\n            var rect = this._rect;\n            var style = this.style;\n            var needsUpdateRect = !rect;\n            if (needsUpdateRect) {\n                var path = this.path;\n                if (!path) {\n                    // Create path on demand.\n                    path = this.path = new PathProxy();\n                }\n                if (this.__dirtyPath) {\n                    path.beginPath();\n                    this.buildPath(path, this.shape, false);\n                }\n                rect = path.getBoundingRect();\n            }\n            this._rect = rect;\n\n            if (style.hasStroke()) {\n                // Needs update rect with stroke lineWidth when\n                // 1. Element changes scale or lineWidth\n                // 2. Shape is changed\n                var rectWithStroke = this._rectWithStroke || (this._rectWithStroke = rect.clone());\n                if (this.__dirty || needsUpdateRect) {\n                    rectWithStroke.copy(rect);\n                    // FIXME Must after updateTransform\n                    var w = style.lineWidth;\n                    // PENDING, Min line width is needed when line is horizontal or vertical\n                    var lineScale = style.strokeNoScale ? this.getLineScale() : 1;\n\n                    // Only add extra hover lineWidth when there are no fill\n                    if (!style.hasFill()) {\n                        w = Math.max(w, this.strokeContainThreshold || 4);\n                    }\n                    // Consider line width\n                    // Line scale can't be 0;\n                    if (lineScale > 1e-10) {\n                        rectWithStroke.width += w / lineScale;\n                        rectWithStroke.height += w / lineScale;\n                        rectWithStroke.x -= w / lineScale / 2;\n                        rectWithStroke.y -= w / lineScale / 2;\n                    }\n                }\n\n                // Return rect with stroke\n                return rectWithStroke;\n            }\n\n            return rect;\n        },\n\n        contain: function (x, y) {\n            var localPos = this.transformCoordToLocal(x, y);\n            var rect = this.getBoundingRect();\n            var style = this.style;\n            x = localPos[0];\n            y = localPos[1];\n\n            if (rect.contain(x, y)) {\n                var pathData = this.path.data;\n                if (style.hasStroke()) {\n                    var lineWidth = style.lineWidth;\n                    var lineScale = style.strokeNoScale ? this.getLineScale() : 1;\n                    // Line scale can't be 0;\n                    if (lineScale > 1e-10) {\n                        // Only add extra hover lineWidth when there are no fill\n                        if (!style.hasFill()) {\n                            lineWidth = Math.max(lineWidth, this.strokeContainThreshold);\n                        }\n                        if (pathContain.containStroke(\n                            pathData, lineWidth / lineScale, x, y\n                        )) {\n                            return true;\n                        }\n                    }\n                }\n                if (style.hasFill()) {\n                    return pathContain.contain(pathData, x, y);\n                }\n            }\n            return false;\n        },\n\n        /**\n         * @param  {boolean} dirtyPath\n         */\n        dirty: function (dirtyPath) {\n            if (dirtyPath == null) {\n                dirtyPath = true;\n            }\n            // Only mark dirty, not mark clean\n            if (dirtyPath) {\n                this.__dirtyPath = dirtyPath;\n                this._rect = null;\n            }\n\n            this.__dirty = true;\n\n            this.__zr && this.__zr.refresh();\n\n            // Used as a clipping path\n            if (this.__clipTarget) {\n                this.__clipTarget.dirty();\n            }\n        },\n\n        /**\n         * Alias for animate('shape')\n         * @param {boolean} loop\n         */\n        animateShape: function (loop) {\n            return this.animate('shape', loop);\n        },\n\n        // Overwrite attrKV\n        attrKV: function (key, value) {\n            // FIXME\n            if (key === 'shape') {\n                this.setShape(value);\n                this.__dirtyPath = true;\n                this._rect = null;\n            }\n            else {\n                Displayable.prototype.attrKV.call(this, key, value);\n            }\n        },\n\n        /**\n         * @param {Object|string} key\n         * @param {*} value\n         */\n        setShape: function (key, value) {\n            var shape = this.shape;\n            // Path from string may not have shape\n            if (shape) {\n                if (zrUtil.isObject(key)) {\n                    for (var name in key) {\n                        if (key.hasOwnProperty(name)) {\n                            shape[name] = key[name];\n                        }\n                    }\n                }\n                else {\n                    shape[key] = value;\n                }\n                this.dirty(true);\n            }\n            return this;\n        },\n\n        getLineScale: function () {\n            var m = this.transform;\n            // Get the line scale.\n            // Determinant of `m` means how much the area is enlarged by the\n            // transformation. So its square root can be used as a scale factor\n            // for width.\n            return m && abs(m[0] - 1) > 1e-10 && abs(m[3] - 1) > 1e-10\n                ? Math.sqrt(abs(m[0] * m[3] - m[2] * m[1]))\n                : 1;\n        }\n    };\n\n    /**\n     * 扩展一个 Path element, 比如星形，圆等。\n     * Extend a path element\n     * @param {Object} props\n     * @param {string} props.type Path type\n     * @param {Function} props.init Initialize\n     * @param {Function} props.buildPath Overwrite buildPath method\n     * @param {Object} [props.style] Extended default style config\n     * @param {Object} [props.shape] Extended default shape config\n     */\n    Path.extend = function (defaults) {\n        var Sub = function (opts) {\n            Path.call(this, opts);\n\n            if (defaults.style) {\n                // Extend default style\n                this.style.extendFrom(defaults.style, false);\n            }\n\n            // Extend default shape\n            var defaultShape = defaults.shape;\n            if (defaultShape) {\n                this.shape = this.shape || {};\n                var thisShape = this.shape;\n                for (var name in defaultShape) {\n                    if (\n                        ! thisShape.hasOwnProperty(name)\n                        && defaultShape.hasOwnProperty(name)\n                    ) {\n                        thisShape[name] = defaultShape[name];\n                    }\n                }\n            }\n\n            defaults.init && defaults.init.call(this, opts);\n        };\n\n        zrUtil.inherits(Sub, Path);\n\n        // FIXME 不能 extend position, rotation 等引用对象\n        for (var name in defaults) {\n            // Extending prototype values and methods\n            if (name !== 'style' && name !== 'shape') {\n                Sub.prototype[name] = defaults[name];\n            }\n        }\n\n        return Sub;\n    };\n\n    zrUtil.inherits(Path, Displayable);\n\n    module.exports = Path;\n\n\n/***/ }),\n/* 321 */\n/***/ (function(module, exports) {\n\n/**\n * echarts设备环境识别\n *\n * @desc echarts基于Canvas，纯Javascript图表库，提供直观，生动，可交互，可个性化定制的数据统计图表。\n * @author firede[firede@firede.us]\n * @desc thanks zepto.\n */\n\n    var env = {};\n    if (typeof navigator === 'undefined') {\n        // In node\n        env = {\n            browser: {},\n            os: {},\n            node: true,\n            // Assume canvas is supported\n            canvasSupported: true\n        };\n    }\n    else {\n        env = detect(navigator.userAgent);\n    }\n\n    module.exports = env;\n\n    // Zepto.js\n    // (c) 2010-2013 Thomas Fuchs\n    // Zepto.js may be freely distributed under the MIT license.\n\n    function detect(ua) {\n        var os = {};\n        var browser = {};\n        // var webkit = ua.match(/Web[kK]it[\\/]{0,1}([\\d.]+)/);\n        // var android = ua.match(/(Android);?[\\s\\/]+([\\d.]+)?/);\n        // var ipad = ua.match(/(iPad).*OS\\s([\\d_]+)/);\n        // var ipod = ua.match(/(iPod)(.*OS\\s([\\d_]+))?/);\n        // var iphone = !ipad && ua.match(/(iPhone\\sOS)\\s([\\d_]+)/);\n        // var webos = ua.match(/(webOS|hpwOS)[\\s\\/]([\\d.]+)/);\n        // var touchpad = webos && ua.match(/TouchPad/);\n        // var kindle = ua.match(/Kindle\\/([\\d.]+)/);\n        // var silk = ua.match(/Silk\\/([\\d._]+)/);\n        // var blackberry = ua.match(/(BlackBerry).*Version\\/([\\d.]+)/);\n        // var bb10 = ua.match(/(BB10).*Version\\/([\\d.]+)/);\n        // var rimtabletos = ua.match(/(RIM\\sTablet\\sOS)\\s([\\d.]+)/);\n        // var playbook = ua.match(/PlayBook/);\n        // var chrome = ua.match(/Chrome\\/([\\d.]+)/) || ua.match(/CriOS\\/([\\d.]+)/);\n        var firefox = ua.match(/Firefox\\/([\\d.]+)/);\n        // var safari = webkit && ua.match(/Mobile\\//) && !chrome;\n        // var webview = ua.match(/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/) && !chrome;\n        var ie = ua.match(/MSIE\\s([\\d.]+)/)\n            // IE 11 Trident/7.0; rv:11.0\n            || ua.match(/Trident\\/.+?rv:(([\\d.]+))/);\n        var edge = ua.match(/Edge\\/([\\d.]+)/); // IE 12 and 12+\n\n        var weChat = (/micromessenger/i).test(ua);\n\n        // Todo: clean this up with a better OS/browser seperation:\n        // - discern (more) between multiple browsers on android\n        // - decide if kindle fire in silk mode is android or not\n        // - Firefox on Android doesn't specify the Android version\n        // - possibly devide in os, device and browser hashes\n\n        // if (browser.webkit = !!webkit) browser.version = webkit[1];\n\n        // if (android) os.android = true, os.version = android[2];\n        // if (iphone && !ipod) os.ios = os.iphone = true, os.version = iphone[2].replace(/_/g, '.');\n        // if (ipad) os.ios = os.ipad = true, os.version = ipad[2].replace(/_/g, '.');\n        // if (ipod) os.ios = os.ipod = true, os.version = ipod[3] ? ipod[3].replace(/_/g, '.') : null;\n        // if (webos) os.webos = true, os.version = webos[2];\n        // if (touchpad) os.touchpad = true;\n        // if (blackberry) os.blackberry = true, os.version = blackberry[2];\n        // if (bb10) os.bb10 = true, os.version = bb10[2];\n        // if (rimtabletos) os.rimtabletos = true, os.version = rimtabletos[2];\n        // if (playbook) browser.playbook = true;\n        // if (kindle) os.kindle = true, os.version = kindle[1];\n        // if (silk) browser.silk = true, browser.version = silk[1];\n        // if (!silk && os.android && ua.match(/Kindle Fire/)) browser.silk = true;\n        // if (chrome) browser.chrome = true, browser.version = chrome[1];\n        if (firefox) {\n            browser.firefox = true;\n            browser.version = firefox[1];\n        }\n        // if (safari && (ua.match(/Safari/) || !!os.ios)) browser.safari = true;\n        // if (webview) browser.webview = true;\n\n        if (ie) {\n            browser.ie = true;\n            browser.version = ie[1];\n        }\n\n        if (edge) {\n            browser.edge = true;\n            browser.version = edge[1];\n        }\n\n        // It is difficult to detect WeChat in Win Phone precisely, because ua can\n        // not be set on win phone. So we do not consider Win Phone.\n        if (weChat) {\n            browser.weChat = true;\n        }\n\n        // os.tablet = !!(ipad || playbook || (android && !ua.match(/Mobile/)) ||\n        //     (firefox && ua.match(/Tablet/)) || (ie && !ua.match(/Phone/) && ua.match(/Touch/)));\n        // os.phone  = !!(!os.tablet && !os.ipod && (android || iphone || webos ||\n        //     (chrome && ua.match(/Android/)) || (chrome && ua.match(/CriOS\\/([\\d.]+)/)) ||\n        //     (firefox && ua.match(/Mobile/)) || (ie && ua.match(/Touch/))));\n\n        return {\n            browser: browser,\n            os: os,\n            node: false,\n            // 原生canvas支持，改极端点了\n            // canvasSupported : !(browser.ie && parseFloat(browser.version) < 9)\n            canvasSupported : document.createElement('canvas').getContext ? true : false,\n            // @see <http://stackoverflow.com/questions/4817029/whats-the-best-way-to-detect-a-touch-screen-device-using-javascript>\n            // works on most browsers\n            // IE10/11 does not support touch event, and MS Edge supports them but not by\n            // default, so we dont check navigator.maxTouchPoints for them here.\n            touchEventsSupported: 'ontouchstart' in window && !browser.ie && !browser.edge,\n            // <http://caniuse.com/#search=pointer%20event>.\n            pointerEventsSupported: 'onpointerdown' in window\n                // Firefox supports pointer but not by default, only MS browsers are reliable on pointer\n                // events currently. So we dont use that on other browsers unless tested sufficiently.\n                // Although IE 10 supports pointer event, it use old style and is different from the\n                // standard. So we exclude that. (IE 10 is hardly used on touch device)\n                && (browser.edge || (browser.ie && browser.version >= 11))\n        };\n    }\n\n\n/***/ }),\n/* 322 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var zrUtil = __webpack_require__(315);\n    var numberUtil = __webpack_require__(318);\n    var textContain = __webpack_require__(332);\n\n    var formatUtil = {};\n    /**\n     * 每三位默认加,格式化\n     * @type {string|number} x\n     */\n    formatUtil.addCommas = function (x) {\n        if (isNaN(x)) {\n            return '-';\n        }\n        x = (x + '').split('.');\n        return x[0].replace(/(\\d{1,3})(?=(?:\\d{3})+(?!\\d))/g,'$1,')\n               + (x.length > 1 ? ('.' + x[1]) : '');\n    };\n\n    /**\n     * @param {string} str\n     * @param {boolean} [upperCaseFirst=false]\n     * @return {string} str\n     */\n    formatUtil.toCamelCase = function (str, upperCaseFirst) {\n        str = (str || '').toLowerCase().replace(/-(.)/g, function(match, group1) {\n            return group1.toUpperCase();\n        });\n\n        if (upperCaseFirst && str) {\n            str = str.charAt(0).toUpperCase() + str.slice(1);\n        }\n\n        return str;\n    };\n\n    /**\n     * Normalize css liked array configuration\n     * e.g.\n     *  3 => [3, 3, 3, 3]\n     *  [4, 2] => [4, 2, 4, 2]\n     *  [4, 3, 2] => [4, 3, 2, 3]\n     * @param {number|Array.<number>} val\n     */\n    formatUtil.normalizeCssArray = function (val) {\n        var len = val.length;\n        if (typeof (val) === 'number') {\n            return [val, val, val, val];\n        }\n        else if (len === 2) {\n            // vertical | horizontal\n            return [val[0], val[1], val[0], val[1]];\n        }\n        else if (len === 3) {\n            // top | horizontal | bottom\n            return [val[0], val[1], val[2], val[1]];\n        }\n        return val;\n    };\n\n    var encodeHTML = formatUtil.encodeHTML = function (source) {\n        return String(source)\n            .replace(/&/g, '&amp;')\n            .replace(/</g, '&lt;')\n            .replace(/>/g, '&gt;')\n            .replace(/\"/g, '&quot;')\n            .replace(/'/g, '&#39;');\n    };\n\n    var TPL_VAR_ALIAS = ['a', 'b', 'c', 'd', 'e', 'f', 'g'];\n\n    var wrapVar = function (varName, seriesIdx) {\n        return '{' + varName + (seriesIdx == null ? '' : seriesIdx) + '}';\n    };\n\n    /**\n     * Template formatter\n     * @param {string} tpl\n     * @param {Array.<Object>|Object} paramsList\n     * @param {boolean} [encode=false]\n     * @return {string}\n     */\n    formatUtil.formatTpl = function (tpl, paramsList, encode) {\n        if (!zrUtil.isArray(paramsList)) {\n            paramsList = [paramsList];\n        }\n        var seriesLen = paramsList.length;\n        if (!seriesLen) {\n            return '';\n        }\n\n        var $vars = paramsList[0].$vars || [];\n        for (var i = 0; i < $vars.length; i++) {\n            var alias = TPL_VAR_ALIAS[i];\n            var val = wrapVar(alias, 0);\n            tpl = tpl.replace(wrapVar(alias), encode ? encodeHTML(val) : val);\n        }\n        for (var seriesIdx = 0; seriesIdx < seriesLen; seriesIdx++) {\n            for (var k = 0; k < $vars.length; k++) {\n                var val = paramsList[seriesIdx][$vars[k]];\n                tpl = tpl.replace(\n                    wrapVar(TPL_VAR_ALIAS[k], seriesIdx),\n                    encode ? encodeHTML(val) : val\n                );\n            }\n        }\n\n        return tpl;\n    };\n\n\n    /**\n     * @param {string} str\n     * @return {string}\n     * @inner\n     */\n    var s2d = function (str) {\n        return str < 10 ? ('0' + str) : str;\n    };\n\n    /**\n     * ISO Date format\n     * @param {string} tpl\n     * @param {number} value\n     * @inner\n     */\n    formatUtil.formatTime = function (tpl, value) {\n        if (tpl === 'week'\n            || tpl === 'month'\n            || tpl === 'quarter'\n            || tpl === 'half-year'\n            || tpl === 'year'\n        ) {\n            tpl = 'MM-dd\\nyyyy';\n        }\n\n        var date = numberUtil.parseDate(value);\n        var y = date.getFullYear();\n        var M = date.getMonth() + 1;\n        var d = date.getDate();\n        var h = date.getHours();\n        var m = date.getMinutes();\n        var s = date.getSeconds();\n\n        tpl = tpl.replace('MM', s2d(M))\n            .toLowerCase()\n            .replace('yyyy', y)\n            .replace('yy', y % 100)\n            .replace('dd', s2d(d))\n            .replace('d', d)\n            .replace('hh', s2d(h))\n            .replace('h', h)\n            .replace('mm', s2d(m))\n            .replace('m', m)\n            .replace('ss', s2d(s))\n            .replace('s', s);\n\n        return tpl;\n    };\n\n    /**\n     * Capital first\n     * @param {string} str\n     * @return {string}\n     */\n    formatUtil.capitalFirst = function (str) {\n        return str ? str.charAt(0).toUpperCase() + str.substr(1) : str;\n    };\n\n    formatUtil.truncateText = textContain.truncateText;\n\n    module.exports = formatUtil;\n\n\n/***/ }),\n/* 323 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var formatUtil = __webpack_require__(322);\n    var nubmerUtil = __webpack_require__(318);\n    var Model = __webpack_require__(325);\n    var zrUtil = __webpack_require__(315);\n    var each = zrUtil.each;\n    var isObject = zrUtil.isObject;\n\n    var modelUtil = {};\n\n    /**\n     * If value is not array, then translate it to array.\n     * @param  {*} value\n     * @return {Array} [value] or value\n     */\n    modelUtil.normalizeToArray = function (value) {\n        return value instanceof Array\n            ? value\n            : value == null\n            ? []\n            : [value];\n    };\n\n    /**\n     * Sync default option between normal and emphasis like `position` and `show`\n     * In case some one will write code like\n     *     label: {\n     *         normal: {\n     *             show: false,\n     *             position: 'outside',\n     *             textStyle: {\n     *                 fontSize: 18\n     *             }\n     *         },\n     *         emphasis: {\n     *             show: true\n     *         }\n     *     }\n     * @param {Object} opt\n     * @param {Array.<string>} subOpts\n     */\n     modelUtil.defaultEmphasis = function (opt, subOpts) {\n        if (opt) {\n            var emphasisOpt = opt.emphasis = opt.emphasis || {};\n            var normalOpt = opt.normal = opt.normal || {};\n\n            // Default emphasis option from normal\n            each(subOpts, function (subOptName) {\n                var val = zrUtil.retrieve(emphasisOpt[subOptName], normalOpt[subOptName]);\n                if (val != null) {\n                    emphasisOpt[subOptName] = val;\n                }\n            });\n        }\n    };\n\n    modelUtil.LABEL_OPTIONS = ['position', 'offset', 'show', 'textStyle', 'distance', 'formatter'];\n\n    /**\n     * data could be [12, 2323, {value: 223}, [1221, 23], {value: [2, 23]}]\n     * This helper method retieves value from data.\n     * @param {string|number|Date|Array|Object} dataItem\n     * @return {number|string|Date|Array.<number|string|Date>}\n     */\n    modelUtil.getDataItemValue = function (dataItem) {\n        // Performance sensitive.\n        return dataItem && (dataItem.value == null ? dataItem : dataItem.value);\n    };\n\n    /**\n     * data could be [12, 2323, {value: 223}, [1221, 23], {value: [2, 23]}]\n     * This helper method determine if dataItem has extra option besides value\n     * @param {string|number|Date|Array|Object} dataItem\n     */\n    modelUtil.isDataItemOption = function (dataItem) {\n        return isObject(dataItem)\n            && !(dataItem instanceof Array);\n            // // markLine data can be array\n            // && !(dataItem[0] && isObject(dataItem[0]) && !(dataItem[0] instanceof Array));\n    };\n\n    /**\n     * This helper method convert value in data.\n     * @param {string|number|Date} value\n     * @param {Object|string} [dimInfo] If string (like 'x'), dimType defaults 'number'.\n     */\n    modelUtil.converDataValue = function (value, dimInfo) {\n        // Performance sensitive.\n        var dimType = dimInfo && dimInfo.type;\n        if (dimType === 'ordinal') {\n            return value;\n        }\n\n        if (dimType === 'time' && !isFinite(value) && value != null && value !== '-') {\n            value = +nubmerUtil.parseDate(value);\n        }\n\n        // dimType defaults 'number'.\n        // If dimType is not ordinal and value is null or undefined or NaN or '-',\n        // parse to NaN.\n        return (value == null || value === '')\n            ? NaN : +value; // If string (like '-'), using '+' parse to NaN\n    };\n\n    /**\n     * Create a model proxy to be used in tooltip for edge data, markLine data, markPoint data.\n     * @param {module:echarts/data/List} data\n     * @param {Object} opt\n     * @param {string} [opt.seriesIndex]\n     * @param {Object} [opt.name]\n     * @param {Object} [opt.mainType]\n     * @param {Object} [opt.subType]\n     */\n    modelUtil.createDataFormatModel = function (data, opt) {\n        var model = new Model();\n        zrUtil.mixin(model, modelUtil.dataFormatMixin);\n        model.seriesIndex = opt.seriesIndex;\n        model.name = opt.name || '';\n        model.mainType = opt.mainType;\n        model.subType = opt.subType;\n\n        model.getData = function () {\n            return data;\n        };\n        return model;\n    };\n\n    // PENDING A little ugly\n    modelUtil.dataFormatMixin = {\n        /**\n         * Get params for formatter\n         * @param {number} dataIndex\n         * @param {string} [dataType]\n         * @return {Object}\n         */\n        getDataParams: function (dataIndex, dataType) {\n            var data = this.getData(dataType);\n\n            var seriesIndex = this.seriesIndex;\n            var seriesName = this.name;\n\n            var rawValue = this.getRawValue(dataIndex, dataType);\n            var rawDataIndex = data.getRawIndex(dataIndex);\n            var name = data.getName(dataIndex, true);\n            var itemOpt = data.getRawDataItem(dataIndex);\n\n            return {\n                componentType: this.mainType,\n                componentSubType: this.subType,\n                seriesType: this.mainType === 'series' ? this.subType : null,\n                seriesIndex: seriesIndex,\n                seriesName: seriesName,\n                name: name,\n                dataIndex: rawDataIndex,\n                data: itemOpt,\n                dataType: dataType,\n                value: rawValue,\n                color: data.getItemVisual(dataIndex, 'color'),\n\n                // Param name list for mapping `a`, `b`, `c`, `d`, `e`\n                $vars: ['seriesName', 'name', 'value']\n            };\n        },\n\n        /**\n         * Format label\n         * @param {number} dataIndex\n         * @param {string} [status='normal'] 'normal' or 'emphasis'\n         * @param {string} [dataType]\n         * @param {number} [dimIndex]\n         * @return {string}\n         */\n        getFormattedLabel: function (dataIndex, status, dataType, dimIndex) {\n            status = status || 'normal';\n            var data = this.getData(dataType);\n            var itemModel = data.getItemModel(dataIndex);\n\n            var params = this.getDataParams(dataIndex, dataType);\n            if (dimIndex != null && (params.value instanceof Array)) {\n                params.value = params.value[dimIndex];\n            }\n\n            var formatter = itemModel.get(['label', status, 'formatter']);\n\n            if (typeof formatter === 'function') {\n                params.status = status;\n                return formatter(params);\n            }\n            else if (typeof formatter === 'string') {\n                return formatUtil.formatTpl(formatter, params);\n            }\n        },\n\n        /**\n         * Get raw value in option\n         * @param {number} idx\n         * @param {string} [dataType]\n         * @return {Object}\n         */\n        getRawValue: function (idx, dataType) {\n            var data = this.getData(dataType);\n            var dataItem = data.getRawDataItem(idx);\n            if (dataItem != null) {\n                return (isObject(dataItem) && !(dataItem instanceof Array))\n                    ? dataItem.value : dataItem;\n            }\n        },\n\n        /**\n         * Should be implemented.\n         * @param {number} dataIndex\n         * @param {boolean} [multipleSeries=false]\n         * @param {number} [dataType]\n         * @return {string} tooltip string\n         */\n        formatTooltip: zrUtil.noop\n    };\n\n    /**\n     * Mapping to exists for merge.\n     *\n     * @public\n     * @param {Array.<Object>|Array.<module:echarts/model/Component>} exists\n     * @param {Object|Array.<Object>} newCptOptions\n     * @return {Array.<Object>} Result, like [{exist: ..., option: ...}, {}],\n     *                          index of which is the same as exists.\n     */\n    modelUtil.mappingToExists = function (exists, newCptOptions) {\n        // Mapping by the order by original option (but not order of\n        // new option) in merge mode. Because we should ensure\n        // some specified index (like xAxisIndex) is consistent with\n        // original option, which is easy to understand, espatially in\n        // media query. And in most case, merge option is used to\n        // update partial option but not be expected to change order.\n        newCptOptions = (newCptOptions || []).slice();\n\n        var result = zrUtil.map(exists || [], function (obj, index) {\n            return {exist: obj};\n        });\n\n        // Mapping by id or name if specified.\n        each(newCptOptions, function (cptOption, index) {\n            if (!isObject(cptOption)) {\n                return;\n            }\n\n            // id has highest priority.\n            for (var i = 0; i < result.length; i++) {\n                if (!result[i].option // Consider name: two map to one.\n                    && cptOption.id != null\n                    && result[i].exist.id === cptOption.id + ''\n                ) {\n                    result[i].option = cptOption;\n                    newCptOptions[index] = null;\n                    return;\n                }\n            }\n\n            for (var i = 0; i < result.length; i++) {\n                var exist = result[i].exist;\n                if (!result[i].option // Consider name: two map to one.\n                    // Can not match when both ids exist but different.\n                    && (exist.id == null || cptOption.id == null)\n                    && cptOption.name != null\n                    && !modelUtil.isIdInner(cptOption)\n                    && !modelUtil.isIdInner(exist)\n                    && exist.name === cptOption.name + ''\n                ) {\n                    result[i].option = cptOption;\n                    newCptOptions[index] = null;\n                    return;\n                }\n            }\n        });\n\n        // Otherwise mapping by index.\n        each(newCptOptions, function (cptOption, index) {\n            if (!isObject(cptOption)) {\n                return;\n            }\n\n            var i = 0;\n            for (; i < result.length; i++) {\n                var exist = result[i].exist;\n                if (!result[i].option\n                    // Existing model that already has id should be able to\n                    // mapped to (because after mapping performed model may\n                    // be assigned with a id, whish should not affect next\n                    // mapping), except those has inner id.\n                    && !modelUtil.isIdInner(exist)\n                    // Caution:\n                    // Do not overwrite id. But name can be overwritten,\n                    // because axis use name as 'show label text'.\n                    // 'exist' always has id and name and we dont\n                    // need to check it.\n                    && cptOption.id == null\n                ) {\n                    result[i].option = cptOption;\n                    break;\n                }\n            }\n\n            if (i >= result.length) {\n                result.push({option: cptOption});\n            }\n        });\n\n        return result;\n    };\n\n    /**\n     * Make id and name for mapping result (result of mappingToExists)\n     * into `keyInfo` field.\n     *\n     * @public\n     * @param {Array.<Object>} Result, like [{exist: ..., option: ...}, {}],\n     *                          which order is the same as exists.\n     * @return {Array.<Object>} The input.\n     */\n    modelUtil.makeIdAndName = function (mapResult) {\n        // We use this id to hash component models and view instances\n        // in echarts. id can be specified by user, or auto generated.\n\n        // The id generation rule ensures new view instance are able\n        // to mapped to old instance when setOption are called in\n        // no-merge mode. So we generate model id by name and plus\n        // type in view id.\n\n        // name can be duplicated among components, which is convenient\n        // to specify multi components (like series) by one name.\n\n        // Ensure that each id is distinct.\n        var idMap = {};\n\n        each(mapResult, function (item, index) {\n            var existCpt = item.exist;\n            existCpt && (idMap[existCpt.id] = item);\n        });\n\n        each(mapResult, function (item, index) {\n            var opt = item.option;\n\n            zrUtil.assert(\n                !opt || opt.id == null || !idMap[opt.id] || idMap[opt.id] === item,\n                'id duplicates: ' + (opt && opt.id)\n            );\n\n            opt && opt.id != null && (idMap[opt.id] = item);\n            !item.keyInfo && (item.keyInfo = {});\n        });\n\n        // Make name and id.\n        each(mapResult, function (item, index) {\n            var existCpt = item.exist;\n            var opt = item.option;\n            var keyInfo = item.keyInfo;\n\n            if (!isObject(opt)) {\n                return;\n            }\n\n            // name can be overwitten. Consider case: axis.name = '20km'.\n            // But id generated by name will not be changed, which affect\n            // only in that case: setOption with 'not merge mode' and view\n            // instance will be recreated, which can be accepted.\n            keyInfo.name = opt.name != null\n                ? opt.name + ''\n                : existCpt\n                ? existCpt.name\n                : '\\0-';\n\n            if (existCpt) {\n                keyInfo.id = existCpt.id;\n            }\n            else if (opt.id != null) {\n                keyInfo.id = opt.id + '';\n            }\n            else {\n                // Consider this situatoin:\n                //  optionA: [{name: 'a'}, {name: 'a'}, {..}]\n                //  optionB [{..}, {name: 'a'}, {name: 'a'}]\n                // Series with the same name between optionA and optionB\n                // should be mapped.\n                var idNum = 0;\n                do {\n                    keyInfo.id = '\\0' + keyInfo.name + '\\0' + idNum++;\n                }\n                while (idMap[keyInfo.id]);\n            }\n\n            idMap[keyInfo.id] = item;\n        });\n    };\n\n    /**\n     * @public\n     * @param {Object} cptOption\n     * @return {boolean}\n     */\n    modelUtil.isIdInner = function (cptOption) {\n        return isObject(cptOption)\n            && cptOption.id\n            && (cptOption.id + '').indexOf('\\0_ec_\\0') === 0;\n    };\n\n    /**\n     * A helper for removing duplicate items between batchA and batchB,\n     * and in themselves, and categorize by series.\n     *\n     * @param {Array.<Object>} batchA Like: [{seriesId: 2, dataIndex: [32, 4, 5]}, ...]\n     * @param {Array.<Object>} batchB Like: [{seriesId: 2, dataIndex: [32, 4, 5]}, ...]\n     * @return {Array.<Array.<Object>, Array.<Object>>} result: [resultBatchA, resultBatchB]\n     */\n    modelUtil.compressBatches = function (batchA, batchB) {\n        var mapA = {};\n        var mapB = {};\n\n        makeMap(batchA || [], mapA);\n        makeMap(batchB || [], mapB, mapA);\n\n        return [mapToArray(mapA), mapToArray(mapB)];\n\n        function makeMap(sourceBatch, map, otherMap) {\n            for (var i = 0, len = sourceBatch.length; i < len; i++) {\n                var seriesId = sourceBatch[i].seriesId;\n                var dataIndices = modelUtil.normalizeToArray(sourceBatch[i].dataIndex);\n                var otherDataIndices = otherMap && otherMap[seriesId];\n\n                for (var j = 0, lenj = dataIndices.length; j < lenj; j++) {\n                    var dataIndex = dataIndices[j];\n\n                    if (otherDataIndices && otherDataIndices[dataIndex]) {\n                        otherDataIndices[dataIndex] = null;\n                    }\n                    else {\n                        (map[seriesId] || (map[seriesId] = {}))[dataIndex] = 1;\n                    }\n                }\n            }\n        }\n\n        function mapToArray(map, isData) {\n            var result = [];\n            for (var i in map) {\n                if (map.hasOwnProperty(i) && map[i] != null) {\n                    if (isData) {\n                        result.push(+i);\n                    }\n                    else {\n                        var dataIndices = mapToArray(map[i], true);\n                        dataIndices.length && result.push({seriesId: i, dataIndex: dataIndices});\n                    }\n                }\n            }\n            return result;\n        }\n    };\n\n    /**\n     * @param {module:echarts/data/List} data\n     * @param {Object} payload Contains dataIndex (means rawIndex) / dataIndexInside / name\n     *                         each of which can be Array or primary type.\n     * @return {number|Array.<number>} dataIndex If not found, return undefined/null.\n     */\n    modelUtil.queryDataIndex = function (data, payload) {\n        if (payload.dataIndexInside != null) {\n            return payload.dataIndexInside;\n        }\n        else if (payload.dataIndex != null) {\n            return zrUtil.isArray(payload.dataIndex)\n                ? zrUtil.map(payload.dataIndex, function (value) {\n                    return data.indexOfRawIndex(value);\n                })\n                : data.indexOfRawIndex(payload.dataIndex);\n        }\n        else if (payload.name != null) {\n            return zrUtil.isArray(payload.name)\n                ? zrUtil.map(payload.name, function (value) {\n                    return data.indexOfName(value);\n                })\n                : data.indexOfName(payload.name);\n        }\n    };\n\n    /**\n     * @param {module:echarts/model/Global} ecModel\n     * @param {string|Object} finder\n     *        If string, e.g., 'geo', means {geoIndex: 0}.\n     *        If Object, could contain some of these properties below:\n     *        {\n     *            seriesIndex, seriesId, seriesName,\n     *            geoIndex, geoId, goeName,\n     *            bmapIndex, bmapId, bmapName,\n     *            xAxisIndex, xAxisId, xAxisName,\n     *            yAxisIndex, yAxisId, yAxisName,\n     *            gridIndex, gridId, gridName,\n     *            ... (can be extended)\n     *        }\n     *        Each properties can be number|string|Array.<number>|Array.<string>\n     *        For example, a finder could be\n     *        {\n     *            seriesIndex: 3,\n     *            geoId: ['aa', 'cc'],\n     *            gridName: ['xx', 'rr']\n     *        }\n     * @param {Object} [opt]\n     * @param {string} [opt.defaultMainType]\n     * @return {Object} result like:\n     *        {\n     *            seriesModels: [seriesModel1, seriesModel2],\n     *            seriesModel: seriesModel1, // The first model\n     *            geoModels: [geoModel1, geoModel2],\n     *            geoModel: geoModel1, // The first model\n     *            ...\n     *        }\n     */\n    modelUtil.parseFinder = function (ecModel, finder, opt) {\n        if (zrUtil.isString(finder)) {\n            var obj = {};\n            obj[finder + 'Index'] = 0;\n            finder = obj;\n        }\n\n        var defaultMainType = opt && opt.defaultMainType;\n        if (defaultMainType\n            && !has(finder, defaultMainType + 'Index')\n            && !has(finder, defaultMainType + 'Id')\n            && !has(finder, defaultMainType + 'Name')\n        ) {\n            finder[defaultMainType + 'Index'] = 0;\n        }\n\n        var result = {};\n\n        each(finder, function (value, key) {\n            var value = finder[key];\n\n            // Exclude 'dataIndex' and other illgal keys.\n            if (key === 'dataIndex' || key === 'dataIndexInside') {\n                result[key] = value;\n                return;\n            }\n\n            var parsedKey = key.match(/^(\\w+)(Index|Id|Name)$/) || [];\n            var mainType = parsedKey[1];\n            var queryType = parsedKey[2];\n\n            if (!mainType || !queryType) {\n                return;\n            }\n\n            var queryParam = {mainType: mainType};\n            queryParam[queryType.toLowerCase()] = value;\n            var models = ecModel.queryComponents(queryParam);\n            result[mainType + 'Models'] = models;\n            result[mainType + 'Model'] = models[0];\n        });\n\n        return result;\n    };\n\n    function has(obj, prop) {\n        return obj && obj.hasOwnProperty(prop);\n    }\n\n    module.exports = modelUtil;\n\n\n/***/ }),\n/* 324 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * @module echarts/core/BoundingRect\n */\n\n\n    var vec2 = __webpack_require__(319);\n    var matrix = __webpack_require__(338);\n\n    var v2ApplyTransform = vec2.applyTransform;\n    var mathMin = Math.min;\n    var mathMax = Math.max;\n    /**\n     * @alias module:echarts/core/BoundingRect\n     */\n    function BoundingRect(x, y, width, height) {\n\n        if (width < 0) {\n            x = x + width;\n            width = -width;\n        }\n        if (height < 0) {\n            y = y + height;\n            height = -height;\n        }\n\n        /**\n         * @type {number}\n         */\n        this.x = x;\n        /**\n         * @type {number}\n         */\n        this.y = y;\n        /**\n         * @type {number}\n         */\n        this.width = width;\n        /**\n         * @type {number}\n         */\n        this.height = height;\n    }\n\n    BoundingRect.prototype = {\n\n        constructor: BoundingRect,\n\n        /**\n         * @param {module:echarts/core/BoundingRect} other\n         */\n        union: function (other) {\n            var x = mathMin(other.x, this.x);\n            var y = mathMin(other.y, this.y);\n\n            this.width = mathMax(\n                    other.x + other.width,\n                    this.x + this.width\n                ) - x;\n            this.height = mathMax(\n                    other.y + other.height,\n                    this.y + this.height\n                ) - y;\n            this.x = x;\n            this.y = y;\n        },\n\n        /**\n         * @param {Array.<number>} m\n         * @methods\n         */\n        applyTransform: (function () {\n            var lt = [];\n            var rb = [];\n            var lb = [];\n            var rt = [];\n            return function (m) {\n                // In case usage like this\n                // el.getBoundingRect().applyTransform(el.transform)\n                // And element has no transform\n                if (!m) {\n                    return;\n                }\n                lt[0] = lb[0] = this.x;\n                lt[1] = rt[1] = this.y;\n                rb[0] = rt[0] = this.x + this.width;\n                rb[1] = lb[1] = this.y + this.height;\n\n                v2ApplyTransform(lt, lt, m);\n                v2ApplyTransform(rb, rb, m);\n                v2ApplyTransform(lb, lb, m);\n                v2ApplyTransform(rt, rt, m);\n\n                this.x = mathMin(lt[0], rb[0], lb[0], rt[0]);\n                this.y = mathMin(lt[1], rb[1], lb[1], rt[1]);\n                var maxX = mathMax(lt[0], rb[0], lb[0], rt[0]);\n                var maxY = mathMax(lt[1], rb[1], lb[1], rt[1]);\n                this.width = maxX - this.x;\n                this.height = maxY - this.y;\n            };\n        })(),\n\n        /**\n         * Calculate matrix of transforming from self to target rect\n         * @param  {module:zrender/core/BoundingRect} b\n         * @return {Array.<number>}\n         */\n        calculateTransform: function (b) {\n            var a = this;\n            var sx = b.width / a.width;\n            var sy = b.height / a.height;\n\n            var m = matrix.create();\n\n            // 矩阵右乘\n            matrix.translate(m, m, [-a.x, -a.y]);\n            matrix.scale(m, m, [sx, sy]);\n            matrix.translate(m, m, [b.x, b.y]);\n\n            return m;\n        },\n\n        /**\n         * @param {(module:echarts/core/BoundingRect|Object)} b\n         * @return {boolean}\n         */\n        intersect: function (b) {\n            if (!b) {\n                return false;\n            }\n\n            if (!(b instanceof BoundingRect)) {\n                // Normalize negative width/height.\n                b = BoundingRect.create(b);\n            }\n\n            var a = this;\n            var ax0 = a.x;\n            var ax1 = a.x + a.width;\n            var ay0 = a.y;\n            var ay1 = a.y + a.height;\n\n            var bx0 = b.x;\n            var bx1 = b.x + b.width;\n            var by0 = b.y;\n            var by1 = b.y + b.height;\n\n            return ! (ax1 < bx0 || bx1 < ax0 || ay1 < by0 || by1 < ay0);\n        },\n\n        contain: function (x, y) {\n            var rect = this;\n            return x >= rect.x\n                && x <= (rect.x + rect.width)\n                && y >= rect.y\n                && y <= (rect.y + rect.height);\n        },\n\n        /**\n         * @return {module:echarts/core/BoundingRect}\n         */\n        clone: function () {\n            return new BoundingRect(this.x, this.y, this.width, this.height);\n        },\n\n        /**\n         * Copy from another rect\n         */\n        copy: function (other) {\n            this.x = other.x;\n            this.y = other.y;\n            this.width = other.width;\n            this.height = other.height;\n        },\n\n        plain: function () {\n            return {\n                x: this.x,\n                y: this.y,\n                width: this.width,\n                height: this.height\n            };\n        }\n    };\n\n    /**\n     * @param {Object|module:zrender/core/BoundingRect} rect\n     * @param {number} rect.x\n     * @param {number} rect.y\n     * @param {number} rect.width\n     * @param {number} rect.height\n     * @return {module:zrender/core/BoundingRect}\n     */\n    BoundingRect.create = function (rect) {\n        return new BoundingRect(rect.x, rect.y, rect.width, rect.height);\n    };\n\n    module.exports = BoundingRect;\n\n\n/***/ }),\n/* 325 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * @module echarts/model/Model\n */\n\n\n    var zrUtil = __webpack_require__(315);\n    var clazzUtil = __webpack_require__(326);\n    var env = __webpack_require__(321);\n\n    /**\n     * @alias module:echarts/model/Model\n     * @constructor\n     * @param {Object} option\n     * @param {module:echarts/model/Model} [parentModel]\n     * @param {module:echarts/model/Global} [ecModel]\n     */\n    function Model(option, parentModel, ecModel) {\n        /**\n         * @type {module:echarts/model/Model}\n         * @readOnly\n         */\n        this.parentModel = parentModel;\n\n        /**\n         * @type {module:echarts/model/Global}\n         * @readOnly\n         */\n        this.ecModel = ecModel;\n\n        /**\n         * @type {Object}\n         * @protected\n         */\n        this.option = option;\n\n        // Simple optimization\n        // if (this.init) {\n        //     if (arguments.length <= 4) {\n        //         this.init(option, parentModel, ecModel, extraOpt);\n        //     }\n        //     else {\n        //         this.init.apply(this, arguments);\n        //     }\n        // }\n    }\n\n    Model.prototype = {\n\n        constructor: Model,\n\n        /**\n         * Model 的初始化函数\n         * @param {Object} option\n         */\n        init: null,\n\n        /**\n         * 从新的 Option merge\n         */\n        mergeOption: function (option) {\n            zrUtil.merge(this.option, option, true);\n        },\n\n        /**\n         * @param {string|Array.<string>} path\n         * @param {boolean} [ignoreParent=false]\n         * @return {*}\n         */\n        get: function (path, ignoreParent) {\n            if (path == null) {\n                return this.option;\n            }\n\n            return doGet(\n                this.option,\n                this.parsePath(path),\n                !ignoreParent && getParent(this, path)\n            );\n        },\n\n        /**\n         * @param {string} key\n         * @param {boolean} [ignoreParent=false]\n         * @return {*}\n         */\n        getShallow: function (key, ignoreParent) {\n            var option = this.option;\n\n            var val = option == null ? option : option[key];\n            var parentModel = !ignoreParent && getParent(this, key);\n            if (val == null && parentModel) {\n                val = parentModel.getShallow(key);\n            }\n            return val;\n        },\n\n        /**\n         * @param {string|Array.<string>} path\n         * @param {module:echarts/model/Model} [parentModel]\n         * @return {module:echarts/model/Model}\n         */\n        getModel: function (path, parentModel) {\n            var obj = path == null\n                ? this.option\n                : doGet(this.option, path = this.parsePath(path));\n\n            var thisParentModel;\n            parentModel = parentModel || (\n                (thisParentModel = getParent(this, path))\n                    && thisParentModel.getModel(path)\n            );\n\n            return new Model(obj, parentModel, this.ecModel);\n        },\n\n        /**\n         * If model has option\n         */\n        isEmpty: function () {\n            return this.option == null;\n        },\n\n        restoreData: function () {},\n\n        // Pending\n        clone: function () {\n            var Ctor = this.constructor;\n            return new Ctor(zrUtil.clone(this.option));\n        },\n\n        setReadOnly: function (properties) {\n            clazzUtil.setReadOnly(this, properties);\n        },\n\n        // If path is null/undefined, return null/undefined.\n        parsePath: function(path) {\n            if (typeof path === 'string') {\n                path = path.split('.');\n            }\n            return path;\n        },\n\n        /**\n         * @param {Function} getParentMethod\n         *        param {Array.<string>|string} path\n         *        return {module:echarts/model/Model}\n         */\n        customizeGetParent: function (getParentMethod) {\n            clazzUtil.set(this, 'getParent', getParentMethod);\n        },\n\n        isAnimationEnabled: function () {\n            if (!env.node) {\n                if (this.option.animation != null) {\n                    return !!this.option.animation;\n                }\n                else if (this.parentModel) {\n                    return this.parentModel.isAnimationEnabled();\n                }\n            }\n        }\n    };\n\n    function doGet(obj, pathArr, parentModel) {\n        for (var i = 0; i < pathArr.length; i++) {\n            // Ignore empty\n            if (!pathArr[i]) {\n                continue;\n            }\n            // obj could be number/string/... (like 0)\n            obj = (obj && typeof obj === 'object') ? obj[pathArr[i]] : null;\n            if (obj == null) {\n                break;\n            }\n        }\n        if (obj == null && parentModel) {\n            obj = parentModel.get(pathArr);\n        }\n        return obj;\n    }\n\n    function getParent(model, path) {\n        var getParentMethod = clazzUtil.get(model, 'getParent');\n        return getParentMethod ? getParentMethod.call(model, path) : model.parentModel;\n    }\n\n    // Enable Model.extend.\n    clazzUtil.enableClassExtend(Model);\n\n    var mixin = zrUtil.mixin;\n    mixin(Model, __webpack_require__(407));\n    mixin(Model, __webpack_require__(404));\n    mixin(Model, __webpack_require__(408));\n    mixin(Model, __webpack_require__(406));\n\n    module.exports = Model;\n\n\n/***/ }),\n/* 326 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var zrUtil = __webpack_require__(315);\n\n    var clazz = {};\n\n    var TYPE_DELIMITER = '.';\n    var IS_CONTAINER = '___EC__COMPONENT__CONTAINER___';\n    var MEMBER_PRIFIX = '\\0ec_\\0';\n\n    /**\n     * Hide private class member.\n     * The same behavior as `host[name] = value;` (can be right-value)\n     * @public\n     */\n    clazz.set = function (host, name, value) {\n        return (host[MEMBER_PRIFIX + name] = value);\n    };\n\n    /**\n     * Hide private class member.\n     * The same behavior as `host[name];`\n     * @public\n     */\n    clazz.get = function (host, name) {\n        return host[MEMBER_PRIFIX + name];\n    };\n\n    /**\n     * For hidden private class member.\n     * The same behavior as `host.hasOwnProperty(name);`\n     * @public\n     */\n    clazz.hasOwn = function (host, name) {\n        return host.hasOwnProperty(MEMBER_PRIFIX + name);\n    };\n\n    /**\n     * @public\n     */\n    var parseClassType = clazz.parseClassType = function (componentType) {\n        var ret = {main: '', sub: ''};\n        if (componentType) {\n            componentType = componentType.split(TYPE_DELIMITER);\n            ret.main = componentType[0] || '';\n            ret.sub = componentType[1] || '';\n        }\n        return ret;\n    };\n\n    /**\n     * @public\n     */\n    function checkClassType(componentType) {\n        zrUtil.assert(\n            /^[a-zA-Z0-9_]+([.][a-zA-Z0-9_]+)?$/.test(componentType),\n            'componentType \"' + componentType + '\" illegal'\n        );\n    }\n\n    /**\n     * @public\n     */\n    clazz.enableClassExtend = function (RootClass, mandatoryMethods) {\n\n        RootClass.$constructor = RootClass;\n        RootClass.extend = function (proto) {\n\n            if (__DEV__) {\n                zrUtil.each(mandatoryMethods, function (method) {\n                    if (!proto[method]) {\n                        console.warn(\n                            'Method `' + method + '` should be implemented'\n                            + (proto.type ? ' in ' + proto.type : '') + '.'\n                        );\n                    }\n                });\n            }\n\n            var superClass = this;\n            var ExtendedClass = function () {\n                if (!proto.$constructor) {\n                    superClass.apply(this, arguments);\n                }\n                else {\n                    proto.$constructor.apply(this, arguments);\n                }\n            };\n\n            zrUtil.extend(ExtendedClass.prototype, proto);\n\n            ExtendedClass.extend = this.extend;\n            ExtendedClass.superCall = superCall;\n            ExtendedClass.superApply = superApply;\n            zrUtil.inherits(ExtendedClass, this);\n            ExtendedClass.superClass = superClass;\n\n            return ExtendedClass;\n        };\n    };\n\n    // superCall should have class info, which can not be fetch from 'this'.\n    // Consider this case:\n    // class A has method f,\n    // class B inherits class A, overrides method f, f call superApply('f'),\n    // class C inherits class B, do not overrides method f,\n    // then when method of class C is called, dead loop occured.\n    function superCall(context, methodName) {\n        var args = zrUtil.slice(arguments, 2);\n        return this.superClass.prototype[methodName].apply(context, args);\n    }\n\n    function superApply(context, methodName, args) {\n        return this.superClass.prototype[methodName].apply(context, args);\n    }\n\n    /**\n     * @param {Object} entity\n     * @param {Object} options\n     * @param {boolean} [options.registerWhenExtend]\n     * @public\n     */\n    clazz.enableClassManagement = function (entity, options) {\n        options = options || {};\n\n        /**\n         * Component model classes\n         * key: componentType,\n         * value:\n         *     componentClass, when componentType is 'xxx'\n         *     or Object.<subKey, componentClass>, when componentType is 'xxx.yy'\n         * @type {Object}\n         */\n        var storage = {};\n\n        entity.registerClass = function (Clazz, componentType) {\n            if (componentType) {\n                checkClassType(componentType);\n                componentType = parseClassType(componentType);\n\n                if (!componentType.sub) {\n                    if (__DEV__) {\n                        if (storage[componentType.main]) {\n                            console.warn(componentType.main + ' exists.');\n                        }\n                    }\n                    storage[componentType.main] = Clazz;\n                }\n                else if (componentType.sub !== IS_CONTAINER) {\n                    var container = makeContainer(componentType);\n                    container[componentType.sub] = Clazz;\n                }\n            }\n            return Clazz;\n        };\n\n        entity.getClass = function (componentMainType, subType, throwWhenNotFound) {\n            var Clazz = storage[componentMainType];\n\n            if (Clazz && Clazz[IS_CONTAINER]) {\n                Clazz = subType ? Clazz[subType] : null;\n            }\n\n            if (throwWhenNotFound && !Clazz) {\n                throw new Error(\n                    !subType\n                        ? componentMainType + '.' + 'type should be specified.'\n                        : 'Component ' + componentMainType + '.' + (subType || '') + ' not exists. Load it first.'\n                );\n            }\n\n            return Clazz;\n        };\n\n        entity.getClassesByMainType = function (componentType) {\n            componentType = parseClassType(componentType);\n\n            var result = [];\n            var obj = storage[componentType.main];\n\n            if (obj && obj[IS_CONTAINER]) {\n                zrUtil.each(obj, function (o, type) {\n                    type !== IS_CONTAINER && result.push(o);\n                });\n            }\n            else {\n                result.push(obj);\n            }\n\n            return result;\n        };\n\n        entity.hasClass = function (componentType) {\n            // Just consider componentType.main.\n            componentType = parseClassType(componentType);\n            return !!storage[componentType.main];\n        };\n\n        /**\n         * @return {Array.<string>} Like ['aa', 'bb'], but can not be ['aa.xx']\n         */\n        entity.getAllClassMainTypes = function () {\n            var types = [];\n            zrUtil.each(storage, function (obj, type) {\n                types.push(type);\n            });\n            return types;\n        };\n\n        /**\n         * If a main type is container and has sub types\n         * @param  {string}  mainType\n         * @return {boolean}\n         */\n        entity.hasSubTypes = function (componentType) {\n            componentType = parseClassType(componentType);\n            var obj = storage[componentType.main];\n            return obj && obj[IS_CONTAINER];\n        };\n\n        entity.parseClassType = parseClassType;\n\n        function makeContainer(componentType) {\n            var container = storage[componentType.main];\n            if (!container || !container[IS_CONTAINER]) {\n                container = storage[componentType.main] = {};\n                container[IS_CONTAINER] = true;\n            }\n            return container;\n        }\n\n        if (options.registerWhenExtend) {\n            var originalExtend = entity.extend;\n            if (originalExtend) {\n                entity.extend = function (proto) {\n                    var ExtendedClass = originalExtend.call(this, proto);\n                    return entity.registerClass(ExtendedClass, proto.type);\n                };\n            }\n        }\n\n        return entity;\n    };\n\n    /**\n     * @param {string|Array.<string>} properties\n     */\n    clazz.setReadOnly = function (obj, properties) {\n        // FIXME It seems broken in IE8 simulation of IE11\n        // if (!zrUtil.isArray(properties)) {\n        //     properties = properties != null ? [properties] : [];\n        // }\n        // zrUtil.each(properties, function (prop) {\n        //     var value = obj[prop];\n\n        //     Object.defineProperty\n        //         && Object.defineProperty(obj, prop, {\n        //             value: value, writable: false\n        //         });\n        //     zrUtil.isArray(obj[prop])\n        //         && Object.freeze\n        //         && Object.freeze(obj[prop]);\n        // });\n    };\n\n    module.exports = clazz;\n\n\n/***/ }),\n/* 327 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * Component model\n *\n * @module echarts/model/Component\n */\n\n\n    var Model = __webpack_require__(325);\n    var zrUtil = __webpack_require__(315);\n    var arrayPush = Array.prototype.push;\n    var componentUtil = __webpack_require__(343);\n    var clazzUtil = __webpack_require__(326);\n    var layout = __webpack_require__(328);\n\n    /**\n     * @alias module:echarts/model/Component\n     * @constructor\n     * @param {Object} option\n     * @param {module:echarts/model/Model} parentModel\n     * @param {module:echarts/model/Model} ecModel\n     */\n    var ComponentModel = Model.extend({\n\n        type: 'component',\n\n        /**\n         * @readOnly\n         * @type {string}\n         */\n        id: '',\n\n        /**\n         * @readOnly\n         */\n        name: '',\n\n        /**\n         * @readOnly\n         * @type {string}\n         */\n        mainType: '',\n\n        /**\n         * @readOnly\n         * @type {string}\n         */\n        subType: '',\n\n        /**\n         * @readOnly\n         * @type {number}\n         */\n        componentIndex: 0,\n\n        /**\n         * @type {Object}\n         * @protected\n         */\n        defaultOption: null,\n\n        /**\n         * @type {module:echarts/model/Global}\n         * @readOnly\n         */\n        ecModel: null,\n\n        /**\n         * key: componentType\n         * value:  Component model list, can not be null.\n         * @type {Object.<string, Array.<module:echarts/model/Model>>}\n         * @readOnly\n         */\n        dependentModels: [],\n\n        /**\n         * @type {string}\n         * @readOnly\n         */\n        uid: null,\n\n        /**\n         * Support merge layout params.\n         * Only support 'box' now (left/right/top/bottom/width/height).\n         * @type {string|Object} Object can be {ignoreSize: true}\n         * @readOnly\n         */\n        layoutMode: null,\n\n        $constructor: function (option, parentModel, ecModel, extraOpt) {\n            Model.call(this, option, parentModel, ecModel, extraOpt);\n\n            this.uid = componentUtil.getUID('componentModel');\n        },\n\n\n        init: function (option, parentModel, ecModel, extraOpt) {\n            this.mergeDefaultAndTheme(option, ecModel);\n        },\n\n        mergeDefaultAndTheme: function (option, ecModel) {\n            var layoutMode = this.layoutMode;\n            var inputPositionParams = layoutMode\n                ? layout.getLayoutParams(option) : {};\n\n            var themeModel = ecModel.getTheme();\n            zrUtil.merge(option, themeModel.get(this.mainType));\n            zrUtil.merge(option, this.getDefaultOption());\n\n            if (layoutMode) {\n                layout.mergeLayoutParam(option, inputPositionParams, layoutMode);\n            }\n        },\n\n        mergeOption: function (option, extraOpt) {\n            zrUtil.merge(this.option, option, true);\n\n            var layoutMode = this.layoutMode;\n            if (layoutMode) {\n                layout.mergeLayoutParam(this.option, option, layoutMode);\n            }\n        },\n\n        // Hooker after init or mergeOption\n        optionUpdated: function (newCptOption, isInit) {},\n\n        getDefaultOption: function () {\n            if (!clazzUtil.hasOwn(this, '__defaultOption')) {\n                var optList = [];\n                var Class = this.constructor;\n                while (Class) {\n                    var opt = Class.prototype.defaultOption;\n                    opt && optList.push(opt);\n                    Class = Class.superClass;\n                }\n\n                var defaultOption = {};\n                for (var i = optList.length - 1; i >= 0; i--) {\n                    defaultOption = zrUtil.merge(defaultOption, optList[i], true);\n                }\n                clazzUtil.set(this, '__defaultOption', defaultOption);\n            }\n            return clazzUtil.get(this, '__defaultOption');\n        },\n\n        getReferringComponents: function (mainType) {\n            return this.ecModel.queryComponents({\n                mainType: mainType,\n                index: this.get(mainType + 'Index', true),\n                id: this.get(mainType + 'Id', true)\n            });\n        }\n\n    });\n\n    // Reset ComponentModel.extend, add preConstruct.\n    // clazzUtil.enableClassExtend(\n    //     ComponentModel,\n    //     function (option, parentModel, ecModel, extraOpt) {\n    //         // Set dependentModels, componentIndex, name, id, mainType, subType.\n    //         zrUtil.extend(this, extraOpt);\n\n    //         this.uid = componentUtil.getUID('componentModel');\n\n    //         // this.setReadOnly([\n    //         //     'type', 'id', 'uid', 'name', 'mainType', 'subType',\n    //         //     'dependentModels', 'componentIndex'\n    //         // ]);\n    //     }\n    // );\n\n    // Add capability of registerClass, getClass, hasClass, registerSubTypeDefaulter and so on.\n    clazzUtil.enableClassManagement(\n        ComponentModel, {registerWhenExtend: true}\n    );\n    componentUtil.enableSubTypeDefaulter(ComponentModel);\n\n    // Add capability of ComponentModel.topologicalTravel.\n    componentUtil.enableTopologicalTravel(ComponentModel, getDependencies);\n\n    function getDependencies(componentType) {\n        var deps = [];\n        zrUtil.each(ComponentModel.getClassesByMainType(componentType), function (Clazz) {\n            arrayPush.apply(deps, Clazz.prototype.dependencies || []);\n        });\n        // Ensure main type\n        return zrUtil.map(deps, function (type) {\n            return clazzUtil.parseClassType(type).main;\n        });\n    }\n\n    zrUtil.mixin(ComponentModel, __webpack_require__(405));\n\n    module.exports = ComponentModel;\n\n\n/***/ }),\n/* 328 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n// Layout helpers for each component positioning\n\n\n    var zrUtil = __webpack_require__(315);\n    var BoundingRect = __webpack_require__(324);\n    var numberUtil = __webpack_require__(318);\n    var formatUtil = __webpack_require__(322);\n    var parsePercent = numberUtil.parsePercent;\n    var each = zrUtil.each;\n\n    var layout = {};\n\n    var LOCATION_PARAMS = layout.LOCATION_PARAMS = [\n        'left', 'right', 'top', 'bottom', 'width', 'height'\n    ];\n\n    function boxLayout(orient, group, gap, maxWidth, maxHeight) {\n        var x = 0;\n        var y = 0;\n        if (maxWidth == null) {\n            maxWidth = Infinity;\n        }\n        if (maxHeight == null) {\n            maxHeight = Infinity;\n        }\n        var currentLineMaxSize = 0;\n        group.eachChild(function (child, idx) {\n            var position = child.position;\n            var rect = child.getBoundingRect();\n            var nextChild = group.childAt(idx + 1);\n            var nextChildRect = nextChild && nextChild.getBoundingRect();\n            var nextX;\n            var nextY;\n            if (orient === 'horizontal') {\n                var moveX = rect.width + (nextChildRect ? (-nextChildRect.x + rect.x) : 0);\n                nextX = x + moveX;\n                // Wrap when width exceeds maxWidth or meet a `newline` group\n                if (nextX > maxWidth || child.newline) {\n                    x = 0;\n                    nextX = moveX;\n                    y += currentLineMaxSize + gap;\n                    currentLineMaxSize = rect.height;\n                }\n                else {\n                    currentLineMaxSize = Math.max(currentLineMaxSize, rect.height);\n                }\n            }\n            else {\n                var moveY = rect.height + (nextChildRect ? (-nextChildRect.y + rect.y) : 0);\n                nextY = y + moveY;\n                // Wrap when width exceeds maxHeight or meet a `newline` group\n                if (nextY > maxHeight || child.newline) {\n                    x += currentLineMaxSize + gap;\n                    y = 0;\n                    nextY = moveY;\n                    currentLineMaxSize = rect.width;\n                }\n                else {\n                    currentLineMaxSize = Math.max(currentLineMaxSize, rect.width);\n                }\n            }\n\n            if (child.newline) {\n                return;\n            }\n\n            position[0] = x;\n            position[1] = y;\n\n            orient === 'horizontal'\n                ? (x = nextX + gap)\n                : (y = nextY + gap);\n        });\n    }\n\n    /**\n     * VBox or HBox layouting\n     * @param {string} orient\n     * @param {module:zrender/container/Group} group\n     * @param {number} gap\n     * @param {number} [width=Infinity]\n     * @param {number} [height=Infinity]\n     */\n    layout.box = boxLayout;\n\n    /**\n     * VBox layouting\n     * @param {module:zrender/container/Group} group\n     * @param {number} gap\n     * @param {number} [width=Infinity]\n     * @param {number} [height=Infinity]\n     */\n    layout.vbox = zrUtil.curry(boxLayout, 'vertical');\n\n    /**\n     * HBox layouting\n     * @param {module:zrender/container/Group} group\n     * @param {number} gap\n     * @param {number} [width=Infinity]\n     * @param {number} [height=Infinity]\n     */\n    layout.hbox = zrUtil.curry(boxLayout, 'horizontal');\n\n    /**\n     * If x or x2 is not specified or 'center' 'left' 'right',\n     * the width would be as long as possible.\n     * If y or y2 is not specified or 'middle' 'top' 'bottom',\n     * the height would be as long as possible.\n     *\n     * @param {Object} positionInfo\n     * @param {number|string} [positionInfo.x]\n     * @param {number|string} [positionInfo.y]\n     * @param {number|string} [positionInfo.x2]\n     * @param {number|string} [positionInfo.y2]\n     * @param {Object} containerRect\n     * @param {string|number} margin\n     * @return {Object} {width, height}\n     */\n    layout.getAvailableSize = function (positionInfo, containerRect, margin) {\n        var containerWidth = containerRect.width;\n        var containerHeight = containerRect.height;\n\n        var x = parsePercent(positionInfo.x, containerWidth);\n        var y = parsePercent(positionInfo.y, containerHeight);\n        var x2 = parsePercent(positionInfo.x2, containerWidth);\n        var y2 = parsePercent(positionInfo.y2, containerHeight);\n\n        (isNaN(x) || isNaN(parseFloat(positionInfo.x))) && (x = 0);\n        (isNaN(x2) || isNaN(parseFloat(positionInfo.x2))) && (x2 = containerWidth);\n        (isNaN(y) || isNaN(parseFloat(positionInfo.y))) && (y = 0);\n        (isNaN(y2) || isNaN(parseFloat(positionInfo.y2))) && (y2 = containerHeight);\n\n        margin = formatUtil.normalizeCssArray(margin || 0);\n\n        return {\n            width: Math.max(x2 - x - margin[1] - margin[3], 0),\n            height: Math.max(y2 - y - margin[0] - margin[2], 0)\n        };\n    };\n\n    /**\n     * Parse position info.\n     *\n     * @param {Object} positionInfo\n     * @param {number|string} [positionInfo.left]\n     * @param {number|string} [positionInfo.top]\n     * @param {number|string} [positionInfo.right]\n     * @param {number|string} [positionInfo.bottom]\n     * @param {number|string} [positionInfo.width]\n     * @param {number|string} [positionInfo.height]\n     * @param {number|string} [positionInfo.aspect] Aspect is width / height\n     * @param {Object} containerRect\n     * @param {string|number} [margin]\n     *\n     * @return {module:zrender/core/BoundingRect}\n     */\n    layout.getLayoutRect = function (\n        positionInfo, containerRect, margin\n    ) {\n        margin = formatUtil.normalizeCssArray(margin || 0);\n\n        var containerWidth = containerRect.width;\n        var containerHeight = containerRect.height;\n\n        var left = parsePercent(positionInfo.left, containerWidth);\n        var top = parsePercent(positionInfo.top, containerHeight);\n        var right = parsePercent(positionInfo.right, containerWidth);\n        var bottom = parsePercent(positionInfo.bottom, containerHeight);\n        var width = parsePercent(positionInfo.width, containerWidth);\n        var height = parsePercent(positionInfo.height, containerHeight);\n\n        var verticalMargin = margin[2] + margin[0];\n        var horizontalMargin = margin[1] + margin[3];\n        var aspect = positionInfo.aspect;\n\n        // If width is not specified, calculate width from left and right\n        if (isNaN(width)) {\n            width = containerWidth - right - horizontalMargin - left;\n        }\n        if (isNaN(height)) {\n            height = containerHeight - bottom - verticalMargin - top;\n        }\n\n        // If width and height are not given\n        // 1. Graph should not exceeds the container\n        // 2. Aspect must be keeped\n        // 3. Graph should take the space as more as possible\n        if (isNaN(width) && isNaN(height)) {\n            if (aspect > containerWidth / containerHeight) {\n                width = containerWidth * 0.8;\n            }\n            else {\n                height = containerHeight * 0.8;\n            }\n        }\n\n        if (aspect != null) {\n            // Calculate width or height with given aspect\n            if (isNaN(width)) {\n                width = aspect * height;\n            }\n            if (isNaN(height)) {\n                height = width / aspect;\n            }\n        }\n\n        // If left is not specified, calculate left from right and width\n        if (isNaN(left)) {\n            left = containerWidth - right - width - horizontalMargin;\n        }\n        if (isNaN(top)) {\n            top = containerHeight - bottom - height - verticalMargin;\n        }\n\n        // Align left and top\n        switch (positionInfo.left || positionInfo.right) {\n            case 'center':\n                left = containerWidth / 2 - width / 2 - margin[3];\n                break;\n            case 'right':\n                left = containerWidth - width - horizontalMargin;\n                break;\n        }\n        switch (positionInfo.top || positionInfo.bottom) {\n            case 'middle':\n            case 'center':\n                top = containerHeight / 2 - height / 2 - margin[0];\n                break;\n            case 'bottom':\n                top = containerHeight - height - verticalMargin;\n                break;\n        }\n        // If something is wrong and left, top, width, height are calculated as NaN\n        left = left || 0;\n        top = top || 0;\n        if (isNaN(width)) {\n            // Width may be NaN if only one value is given except width\n            width = containerWidth - left - (right || 0);\n        }\n        if (isNaN(height)) {\n            // Height may be NaN if only one value is given except height\n            height = containerHeight - top - (bottom || 0);\n        }\n\n        var rect = new BoundingRect(left + margin[3], top + margin[0], width, height);\n        rect.margin = margin;\n        return rect;\n    };\n\n\n    /**\n     * Position a zr element in viewport\n     *  Group position is specified by either\n     *  {left, top}, {right, bottom}\n     *  If all properties exists, right and bottom will be igonred.\n     *\n     * Logic:\n     *     1. Scale (against origin point in parent coord)\n     *     2. Rotate (against origin point in parent coord)\n     *     3. Traslate (with el.position by this method)\n     * So this method only fixes the last step 'Traslate', which does not affect\n     * scaling and rotating.\n     *\n     * If be called repeatly with the same input el, the same result will be gotten.\n     *\n     * @param {module:zrender/Element} el Should have `getBoundingRect` method.\n     * @param {Object} positionInfo\n     * @param {number|string} [positionInfo.left]\n     * @param {number|string} [positionInfo.top]\n     * @param {number|string} [positionInfo.right]\n     * @param {number|string} [positionInfo.bottom]\n     * @param {Object} containerRect\n     * @param {string|number} margin\n     * @param {Object} [opt]\n     * @param {Array.<number>} [opt.hv=[1,1]] Only horizontal or only vertical.\n     * @param {Array.<number>} [opt.boundingMode='all']\n     *        Specify how to calculate boundingRect when locating.\n     *        'all': Position the boundingRect that is transformed and uioned\n     *               both itself and its descendants.\n     *               This mode simplies confine the elements in the bounding\n     *               of their container (e.g., using 'right: 0').\n     *        'raw': Position the boundingRect that is not transformed and only itself.\n     *               This mode is useful when you want a element can overflow its\n     *               container. (Consider a rotated circle needs to be located in a corner.)\n     *               In this mode positionInfo.width/height can only be number.\n     */\n    layout.positionElement = function (el, positionInfo, containerRect, margin, opt) {\n        var h = !opt || !opt.hv || opt.hv[0];\n        var v = !opt || !opt.hv || opt.hv[1];\n        var boundingMode = opt && opt.boundingMode || 'all';\n\n        if (!h && !v) {\n            return;\n        }\n\n        var rect;\n        if (boundingMode === 'raw') {\n            rect = el.type === 'group'\n                ? new BoundingRect(0, 0, +positionInfo.width || 0, +positionInfo.height || 0)\n                : el.getBoundingRect();\n        }\n        else {\n            rect = el.getBoundingRect();\n            if (el.needLocalTransform()) {\n                var transform = el.getLocalTransform();\n                // Notice: raw rect may be inner object of el,\n                // which should not be modified.\n                rect = rect.clone();\n                rect.applyTransform(transform);\n            }\n        }\n\n        positionInfo = layout.getLayoutRect(\n            zrUtil.defaults(\n                {width: rect.width, height: rect.height},\n                positionInfo\n            ),\n            containerRect,\n            margin\n        );\n\n        // Because 'tranlate' is the last step in transform\n        // (see zrender/core/Transformable#getLocalTransfrom),\n        // we can just only modify el.position to get final result.\n        var elPos = el.position;\n        var dx = h ? positionInfo.x - rect.x : 0;\n        var dy = v ? positionInfo.y - rect.y : 0;\n\n        el.attr('position', boundingMode === 'raw' ? [dx, dy] : [elPos[0] + dx, elPos[1] + dy]);\n    };\n\n    /**\n     * Consider Case:\n     * When defulat option has {left: 0, width: 100}, and we set {right: 0}\n     * through setOption or media query, using normal zrUtil.merge will cause\n     * {right: 0} does not take effect.\n     *\n     * @example\n     * ComponentModel.extend({\n     *     init: function () {\n     *         ...\n     *         var inputPositionParams = layout.getLayoutParams(option);\n     *         this.mergeOption(inputPositionParams);\n     *     },\n     *     mergeOption: function (newOption) {\n     *         newOption && zrUtil.merge(thisOption, newOption, true);\n     *         layout.mergeLayoutParam(thisOption, newOption);\n     *     }\n     * });\n     *\n     * @param {Object} targetOption\n     * @param {Object} newOption\n     * @param {Object|string} [opt]\n     * @param {boolean} [opt.ignoreSize=false] Some component must has width and height.\n     */\n    layout.mergeLayoutParam = function (targetOption, newOption, opt) {\n        !zrUtil.isObject(opt) && (opt = {});\n        var hNames = ['width', 'left', 'right']; // Order by priority.\n        var vNames = ['height', 'top', 'bottom']; // Order by priority.\n        var hResult = merge(hNames);\n        var vResult = merge(vNames);\n\n        copy(hNames, targetOption, hResult);\n        copy(vNames, targetOption, vResult);\n\n        function merge(names) {\n            var newParams = {};\n            var newValueCount = 0;\n            var merged = {};\n            var mergedValueCount = 0;\n            var enoughParamNumber = opt.ignoreSize ? 1 : 2;\n\n            each(names, function (name) {\n                merged[name] = targetOption[name];\n            });\n            each(names, function (name) {\n                // Consider case: newOption.width is null, which is\n                // set by user for removing width setting.\n                hasProp(newOption, name) && (newParams[name] = merged[name] = newOption[name]);\n                hasValue(newParams, name) && newValueCount++;\n                hasValue(merged, name) && mergedValueCount++;\n            });\n\n            // Case: newOption: {width: ..., right: ...},\n            // or targetOption: {right: ...} and newOption: {width: ...},\n            // There is no conflict when merged only has params count\n            // little than enoughParamNumber.\n            if (mergedValueCount === enoughParamNumber || !newValueCount) {\n                return merged;\n            }\n            // Case: newOption: {width: ..., right: ...},\n            // Than we can make sure user only want those two, and ignore\n            // all origin params in targetOption.\n            else if (newValueCount >= enoughParamNumber) {\n                return newParams;\n            }\n            else {\n                // Chose another param from targetOption by priority.\n                // When 'ignoreSize', enoughParamNumber is 1 and those will not happen.\n                for (var i = 0; i < names.length; i++) {\n                    var name = names[i];\n                    if (!hasProp(newParams, name) && hasProp(targetOption, name)) {\n                        newParams[name] = targetOption[name];\n                        break;\n                    }\n                }\n                return newParams;\n            }\n        }\n\n        function hasProp(obj, name) {\n            return obj.hasOwnProperty(name);\n        }\n\n        function hasValue(obj, name) {\n            return obj[name] != null && obj[name] !== 'auto';\n        }\n\n        function copy(names, target, source) {\n            each(names, function (name) {\n                target[name] = source[name];\n            });\n        }\n    };\n\n    /**\n     * Retrieve 'left', 'right', 'top', 'bottom', 'width', 'height' from object.\n     * @param {Object} source\n     * @return {Object} Result contains those props.\n     */\n    layout.getLayoutParams = function (source) {\n        return layout.copyLayoutParams({}, source);\n    };\n\n    /**\n     * Retrieve 'left', 'right', 'top', 'bottom', 'width', 'height' from object.\n     * @param {Object} source\n     * @return {Object} Result contains those props.\n     */\n    layout.copyLayoutParams = function (target, source) {\n        source && target && each(LOCATION_PARAMS, function (name) {\n            source.hasOwnProperty(name) && (target[name] = source[name]);\n        });\n        return target;\n    };\n\n    module.exports = layout;\n\n\n/***/ }),\n/* 329 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * 曲线辅助模块\n * @module zrender/core/curve\n * @author pissang(https://www.github.com/pissang)\n */\n\n\n    var vec2 = __webpack_require__(319);\n    var v2Create = vec2.create;\n    var v2DistSquare = vec2.distSquare;\n    var mathPow = Math.pow;\n    var mathSqrt = Math.sqrt;\n\n    var EPSILON = 1e-8;\n    var EPSILON_NUMERIC = 1e-4;\n\n    var THREE_SQRT = mathSqrt(3);\n    var ONE_THIRD = 1 / 3;\n\n    // 临时变量\n    var _v0 = v2Create();\n    var _v1 = v2Create();\n    var _v2 = v2Create();\n    // var _v3 = vec2.create();\n\n    function isAroundZero(val) {\n        return val > -EPSILON && val < EPSILON;\n    }\n    function isNotAroundZero(val) {\n        return val > EPSILON || val < -EPSILON;\n    }\n    /**\n     * 计算三次贝塞尔值\n     * @memberOf module:zrender/core/curve\n     * @param  {number} p0\n     * @param  {number} p1\n     * @param  {number} p2\n     * @param  {number} p3\n     * @param  {number} t\n     * @return {number}\n     */\n    function cubicAt(p0, p1, p2, p3, t) {\n        var onet = 1 - t;\n        return onet * onet * (onet * p0 + 3 * t * p1)\n             + t * t * (t * p3 + 3 * onet * p2);\n    }\n\n    /**\n     * 计算三次贝塞尔导数值\n     * @memberOf module:zrender/core/curve\n     * @param  {number} p0\n     * @param  {number} p1\n     * @param  {number} p2\n     * @param  {number} p3\n     * @param  {number} t\n     * @return {number}\n     */\n    function cubicDerivativeAt(p0, p1, p2, p3, t) {\n        var onet = 1 - t;\n        return 3 * (\n            ((p1 - p0) * onet + 2 * (p2 - p1) * t) * onet\n            + (p3 - p2) * t * t\n        );\n    }\n\n    /**\n     * 计算三次贝塞尔方程根，使用盛金公式\n     * @memberOf module:zrender/core/curve\n     * @param  {number} p0\n     * @param  {number} p1\n     * @param  {number} p2\n     * @param  {number} p3\n     * @param  {number} val\n     * @param  {Array.<number>} roots\n     * @return {number} 有效根数目\n     */\n    function cubicRootAt(p0, p1, p2, p3, val, roots) {\n        // Evaluate roots of cubic functions\n        var a = p3 + 3 * (p1 - p2) - p0;\n        var b = 3 * (p2 - p1 * 2 + p0);\n        var c = 3 * (p1  - p0);\n        var d = p0 - val;\n\n        var A = b * b - 3 * a * c;\n        var B = b * c - 9 * a * d;\n        var C = c * c - 3 * b * d;\n\n        var n = 0;\n\n        if (isAroundZero(A) && isAroundZero(B)) {\n            if (isAroundZero(b)) {\n                roots[0] = 0;\n            }\n            else {\n                var t1 = -c / b;  //t1, t2, t3, b is not zero\n                if (t1 >= 0 && t1 <= 1) {\n                    roots[n++] = t1;\n                }\n            }\n        }\n        else {\n            var disc = B * B - 4 * A * C;\n\n            if (isAroundZero(disc)) {\n                var K = B / A;\n                var t1 = -b / a + K;  // t1, a is not zero\n                var t2 = -K / 2;  // t2, t3\n                if (t1 >= 0 && t1 <= 1) {\n                    roots[n++] = t1;\n                }\n                if (t2 >= 0 && t2 <= 1) {\n                    roots[n++] = t2;\n                }\n            }\n            else if (disc > 0) {\n                var discSqrt = mathSqrt(disc);\n                var Y1 = A * b + 1.5 * a * (-B + discSqrt);\n                var Y2 = A * b + 1.5 * a * (-B - discSqrt);\n                if (Y1 < 0) {\n                    Y1 = -mathPow(-Y1, ONE_THIRD);\n                }\n                else {\n                    Y1 = mathPow(Y1, ONE_THIRD);\n                }\n                if (Y2 < 0) {\n                    Y2 = -mathPow(-Y2, ONE_THIRD);\n                }\n                else {\n                    Y2 = mathPow(Y2, ONE_THIRD);\n                }\n                var t1 = (-b - (Y1 + Y2)) / (3 * a);\n                if (t1 >= 0 && t1 <= 1) {\n                    roots[n++] = t1;\n                }\n            }\n            else {\n                var T = (2 * A * b - 3 * a * B) / (2 * mathSqrt(A * A * A));\n                var theta = Math.acos(T) / 3;\n                var ASqrt = mathSqrt(A);\n                var tmp = Math.cos(theta);\n\n                var t1 = (-b - 2 * ASqrt * tmp) / (3 * a);\n                var t2 = (-b + ASqrt * (tmp + THREE_SQRT * Math.sin(theta))) / (3 * a);\n                var t3 = (-b + ASqrt * (tmp - THREE_SQRT * Math.sin(theta))) / (3 * a);\n                if (t1 >= 0 && t1 <= 1) {\n                    roots[n++] = t1;\n                }\n                if (t2 >= 0 && t2 <= 1) {\n                    roots[n++] = t2;\n                }\n                if (t3 >= 0 && t3 <= 1) {\n                    roots[n++] = t3;\n                }\n            }\n        }\n        return n;\n    }\n\n    /**\n     * 计算三次贝塞尔方程极限值的位置\n     * @memberOf module:zrender/core/curve\n     * @param  {number} p0\n     * @param  {number} p1\n     * @param  {number} p2\n     * @param  {number} p3\n     * @param  {Array.<number>} extrema\n     * @return {number} 有效数目\n     */\n    function cubicExtrema(p0, p1, p2, p3, extrema) {\n        var b = 6 * p2 - 12 * p1 + 6 * p0;\n        var a = 9 * p1 + 3 * p3 - 3 * p0 - 9 * p2;\n        var c = 3 * p1 - 3 * p0;\n\n        var n = 0;\n        if (isAroundZero(a)) {\n            if (isNotAroundZero(b)) {\n                var t1 = -c / b;\n                if (t1 >= 0 && t1 <=1) {\n                    extrema[n++] = t1;\n                }\n            }\n        }\n        else {\n            var disc = b * b - 4 * a * c;\n            if (isAroundZero(disc)) {\n                extrema[0] = -b / (2 * a);\n            }\n            else if (disc > 0) {\n                var discSqrt = mathSqrt(disc);\n                var t1 = (-b + discSqrt) / (2 * a);\n                var t2 = (-b - discSqrt) / (2 * a);\n                if (t1 >= 0 && t1 <= 1) {\n                    extrema[n++] = t1;\n                }\n                if (t2 >= 0 && t2 <= 1) {\n                    extrema[n++] = t2;\n                }\n            }\n        }\n        return n;\n    }\n\n    /**\n     * 细分三次贝塞尔曲线\n     * @memberOf module:zrender/core/curve\n     * @param  {number} p0\n     * @param  {number} p1\n     * @param  {number} p2\n     * @param  {number} p3\n     * @param  {number} t\n     * @param  {Array.<number>} out\n     */\n    function cubicSubdivide(p0, p1, p2, p3, t, out) {\n        var p01 = (p1 - p0) * t + p0;\n        var p12 = (p2 - p1) * t + p1;\n        var p23 = (p3 - p2) * t + p2;\n\n        var p012 = (p12 - p01) * t + p01;\n        var p123 = (p23 - p12) * t + p12;\n\n        var p0123 = (p123 - p012) * t + p012;\n        // Seg0\n        out[0] = p0;\n        out[1] = p01;\n        out[2] = p012;\n        out[3] = p0123;\n        // Seg1\n        out[4] = p0123;\n        out[5] = p123;\n        out[6] = p23;\n        out[7] = p3;\n    }\n\n    /**\n     * 投射点到三次贝塞尔曲线上，返回投射距离。\n     * 投射点有可能会有一个或者多个，这里只返回其中距离最短的一个。\n     * @param {number} x0\n     * @param {number} y0\n     * @param {number} x1\n     * @param {number} y1\n     * @param {number} x2\n     * @param {number} y2\n     * @param {number} x3\n     * @param {number} y3\n     * @param {number} x\n     * @param {number} y\n     * @param {Array.<number>} [out] 投射点\n     * @return {number}\n     */\n    function cubicProjectPoint(\n        x0, y0, x1, y1, x2, y2, x3, y3,\n        x, y, out\n    ) {\n        // http://pomax.github.io/bezierinfo/#projections\n        var t;\n        var interval = 0.005;\n        var d = Infinity;\n        var prev;\n        var next;\n        var d1;\n        var d2;\n\n        _v0[0] = x;\n        _v0[1] = y;\n\n        // 先粗略估计一下可能的最小距离的 t 值\n        // PENDING\n        for (var _t = 0; _t < 1; _t += 0.05) {\n            _v1[0] = cubicAt(x0, x1, x2, x3, _t);\n            _v1[1] = cubicAt(y0, y1, y2, y3, _t);\n            d1 = v2DistSquare(_v0, _v1);\n            if (d1 < d) {\n                t = _t;\n                d = d1;\n            }\n        }\n        d = Infinity;\n\n        // At most 32 iteration\n        for (var i = 0; i < 32; i++) {\n            if (interval < EPSILON_NUMERIC) {\n                break;\n            }\n            prev = t - interval;\n            next = t + interval;\n            // t - interval\n            _v1[0] = cubicAt(x0, x1, x2, x3, prev);\n            _v1[1] = cubicAt(y0, y1, y2, y3, prev);\n\n            d1 = v2DistSquare(_v1, _v0);\n\n            if (prev >= 0 && d1 < d) {\n                t = prev;\n                d = d1;\n            }\n            else {\n                // t + interval\n                _v2[0] = cubicAt(x0, x1, x2, x3, next);\n                _v2[1] = cubicAt(y0, y1, y2, y3, next);\n                d2 = v2DistSquare(_v2, _v0);\n\n                if (next <= 1 && d2 < d) {\n                    t = next;\n                    d = d2;\n                }\n                else {\n                    interval *= 0.5;\n                }\n            }\n        }\n        // t\n        if (out) {\n            out[0] = cubicAt(x0, x1, x2, x3, t);\n            out[1] = cubicAt(y0, y1, y2, y3, t);\n        }\n        // console.log(interval, i);\n        return mathSqrt(d);\n    }\n\n    /**\n     * 计算二次方贝塞尔值\n     * @param  {number} p0\n     * @param  {number} p1\n     * @param  {number} p2\n     * @param  {number} t\n     * @return {number}\n     */\n    function quadraticAt(p0, p1, p2, t) {\n        var onet = 1 - t;\n        return onet * (onet * p0 + 2 * t * p1) + t * t * p2;\n    }\n\n    /**\n     * 计算二次方贝塞尔导数值\n     * @param  {number} p0\n     * @param  {number} p1\n     * @param  {number} p2\n     * @param  {number} t\n     * @return {number}\n     */\n    function quadraticDerivativeAt(p0, p1, p2, t) {\n        return 2 * ((1 - t) * (p1 - p0) + t * (p2 - p1));\n    }\n\n    /**\n     * 计算二次方贝塞尔方程根\n     * @param  {number} p0\n     * @param  {number} p1\n     * @param  {number} p2\n     * @param  {number} t\n     * @param  {Array.<number>} roots\n     * @return {number} 有效根数目\n     */\n    function quadraticRootAt(p0, p1, p2, val, roots) {\n        var a = p0 - 2 * p1 + p2;\n        var b = 2 * (p1 - p0);\n        var c = p0 - val;\n\n        var n = 0;\n        if (isAroundZero(a)) {\n            if (isNotAroundZero(b)) {\n                var t1 = -c / b;\n                if (t1 >= 0 && t1 <= 1) {\n                    roots[n++] = t1;\n                }\n            }\n        }\n        else {\n            var disc = b * b - 4 * a * c;\n            if (isAroundZero(disc)) {\n                var t1 = -b / (2 * a);\n                if (t1 >= 0 && t1 <= 1) {\n                    roots[n++] = t1;\n                }\n            }\n            else if (disc > 0) {\n                var discSqrt = mathSqrt(disc);\n                var t1 = (-b + discSqrt) / (2 * a);\n                var t2 = (-b - discSqrt) / (2 * a);\n                if (t1 >= 0 && t1 <= 1) {\n                    roots[n++] = t1;\n                }\n                if (t2 >= 0 && t2 <= 1) {\n                    roots[n++] = t2;\n                }\n            }\n        }\n        return n;\n    }\n\n    /**\n     * 计算二次贝塞尔方程极限值\n     * @memberOf module:zrender/core/curve\n     * @param  {number} p0\n     * @param  {number} p1\n     * @param  {number} p2\n     * @return {number}\n     */\n    function quadraticExtremum(p0, p1, p2) {\n        var divider = p0 + p2 - 2 * p1;\n        if (divider === 0) {\n            // p1 is center of p0 and p2\n            return 0.5;\n        }\n        else {\n            return (p0 - p1) / divider;\n        }\n    }\n\n    /**\n     * 细分二次贝塞尔曲线\n     * @memberOf module:zrender/core/curve\n     * @param  {number} p0\n     * @param  {number} p1\n     * @param  {number} p2\n     * @param  {number} t\n     * @param  {Array.<number>} out\n     */\n    function quadraticSubdivide(p0, p1, p2, t, out) {\n        var p01 = (p1 - p0) * t + p0;\n        var p12 = (p2 - p1) * t + p1;\n        var p012 = (p12 - p01) * t + p01;\n\n        // Seg0\n        out[0] = p0;\n        out[1] = p01;\n        out[2] = p012;\n\n        // Seg1\n        out[3] = p012;\n        out[4] = p12;\n        out[5] = p2;\n    }\n\n    /**\n     * 投射点到二次贝塞尔曲线上，返回投射距离。\n     * 投射点有可能会有一个或者多个，这里只返回其中距离最短的一个。\n     * @param {number} x0\n     * @param {number} y0\n     * @param {number} x1\n     * @param {number} y1\n     * @param {number} x2\n     * @param {number} y2\n     * @param {number} x\n     * @param {number} y\n     * @param {Array.<number>} out 投射点\n     * @return {number}\n     */\n    function quadraticProjectPoint(\n        x0, y0, x1, y1, x2, y2,\n        x, y, out\n    ) {\n        // http://pomax.github.io/bezierinfo/#projections\n        var t;\n        var interval = 0.005;\n        var d = Infinity;\n\n        _v0[0] = x;\n        _v0[1] = y;\n\n        // 先粗略估计一下可能的最小距离的 t 值\n        // PENDING\n        for (var _t = 0; _t < 1; _t += 0.05) {\n            _v1[0] = quadraticAt(x0, x1, x2, _t);\n            _v1[1] = quadraticAt(y0, y1, y2, _t);\n            var d1 = v2DistSquare(_v0, _v1);\n            if (d1 < d) {\n                t = _t;\n                d = d1;\n            }\n        }\n        d = Infinity;\n\n        // At most 32 iteration\n        for (var i = 0; i < 32; i++) {\n            if (interval < EPSILON_NUMERIC) {\n                break;\n            }\n            var prev = t - interval;\n            var next = t + interval;\n            // t - interval\n            _v1[0] = quadraticAt(x0, x1, x2, prev);\n            _v1[1] = quadraticAt(y0, y1, y2, prev);\n\n            var d1 = v2DistSquare(_v1, _v0);\n\n            if (prev >= 0 && d1 < d) {\n                t = prev;\n                d = d1;\n            }\n            else {\n                // t + interval\n                _v2[0] = quadraticAt(x0, x1, x2, next);\n                _v2[1] = quadraticAt(y0, y1, y2, next);\n                var d2 = v2DistSquare(_v2, _v0);\n                if (next <= 1 && d2 < d) {\n                    t = next;\n                    d = d2;\n                }\n                else {\n                    interval *= 0.5;\n                }\n            }\n        }\n        // t\n        if (out) {\n            out[0] = quadraticAt(x0, x1, x2, t);\n            out[1] = quadraticAt(y0, y1, y2, t);\n        }\n        // console.log(interval, i);\n        return mathSqrt(d);\n    }\n\n    module.exports = {\n\n        cubicAt: cubicAt,\n\n        cubicDerivativeAt: cubicDerivativeAt,\n\n        cubicRootAt: cubicRootAt,\n\n        cubicExtrema: cubicExtrema,\n\n        cubicSubdivide: cubicSubdivide,\n\n        cubicProjectPoint: cubicProjectPoint,\n\n        quadraticAt: quadraticAt,\n\n        quadraticDerivativeAt: quadraticDerivativeAt,\n\n        quadraticRootAt: quadraticRootAt,\n\n        quadraticExtremum: quadraticExtremum,\n\n        quadraticSubdivide: quadraticSubdivide,\n\n        quadraticProjectPoint: quadraticProjectPoint\n    };\n\n\n/***/ }),\n/* 330 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * @module zrender/tool/color\n */\n\n\n    var LRU = __webpack_require__(359);\n\n    var kCSSColorTable = {\n        'transparent': [0,0,0,0], 'aliceblue': [240,248,255,1],\n        'antiquewhite': [250,235,215,1], 'aqua': [0,255,255,1],\n        'aquamarine': [127,255,212,1], 'azure': [240,255,255,1],\n        'beige': [245,245,220,1], 'bisque': [255,228,196,1],\n        'black': [0,0,0,1], 'blanchedalmond': [255,235,205,1],\n        'blue': [0,0,255,1], 'blueviolet': [138,43,226,1],\n        'brown': [165,42,42,1], 'burlywood': [222,184,135,1],\n        'cadetblue': [95,158,160,1], 'chartreuse': [127,255,0,1],\n        'chocolate': [210,105,30,1], 'coral': [255,127,80,1],\n        'cornflowerblue': [100,149,237,1], 'cornsilk': [255,248,220,1],\n        'crimson': [220,20,60,1], 'cyan': [0,255,255,1],\n        'darkblue': [0,0,139,1], 'darkcyan': [0,139,139,1],\n        'darkgoldenrod': [184,134,11,1], 'darkgray': [169,169,169,1],\n        'darkgreen': [0,100,0,1], 'darkgrey': [169,169,169,1],\n        'darkkhaki': [189,183,107,1], 'darkmagenta': [139,0,139,1],\n        'darkolivegreen': [85,107,47,1], 'darkorange': [255,140,0,1],\n        'darkorchid': [153,50,204,1], 'darkred': [139,0,0,1],\n        'darksalmon': [233,150,122,1], 'darkseagreen': [143,188,143,1],\n        'darkslateblue': [72,61,139,1], 'darkslategray': [47,79,79,1],\n        'darkslategrey': [47,79,79,1], 'darkturquoise': [0,206,209,1],\n        'darkviolet': [148,0,211,1], 'deeppink': [255,20,147,1],\n        'deepskyblue': [0,191,255,1], 'dimgray': [105,105,105,1],\n        'dimgrey': [105,105,105,1], 'dodgerblue': [30,144,255,1],\n        'firebrick': [178,34,34,1], 'floralwhite': [255,250,240,1],\n        'forestgreen': [34,139,34,1], 'fuchsia': [255,0,255,1],\n        'gainsboro': [220,220,220,1], 'ghostwhite': [248,248,255,1],\n        'gold': [255,215,0,1], 'goldenrod': [218,165,32,1],\n        'gray': [128,128,128,1], 'green': [0,128,0,1],\n        'greenyellow': [173,255,47,1], 'grey': [128,128,128,1],\n        'honeydew': [240,255,240,1], 'hotpink': [255,105,180,1],\n        'indianred': [205,92,92,1], 'indigo': [75,0,130,1],\n        'ivory': [255,255,240,1], 'khaki': [240,230,140,1],\n        'lavender': [230,230,250,1], 'lavenderblush': [255,240,245,1],\n        'lawngreen': [124,252,0,1], 'lemonchiffon': [255,250,205,1],\n        'lightblue': [173,216,230,1], 'lightcoral': [240,128,128,1],\n        'lightcyan': [224,255,255,1], 'lightgoldenrodyellow': [250,250,210,1],\n        'lightgray': [211,211,211,1], 'lightgreen': [144,238,144,1],\n        'lightgrey': [211,211,211,1], 'lightpink': [255,182,193,1],\n        'lightsalmon': [255,160,122,1], 'lightseagreen': [32,178,170,1],\n        'lightskyblue': [135,206,250,1], 'lightslategray': [119,136,153,1],\n        'lightslategrey': [119,136,153,1], 'lightsteelblue': [176,196,222,1],\n        'lightyellow': [255,255,224,1], 'lime': [0,255,0,1],\n        'limegreen': [50,205,50,1], 'linen': [250,240,230,1],\n        'magenta': [255,0,255,1], 'maroon': [128,0,0,1],\n        'mediumaquamarine': [102,205,170,1], 'mediumblue': [0,0,205,1],\n        'mediumorchid': [186,85,211,1], 'mediumpurple': [147,112,219,1],\n        'mediumseagreen': [60,179,113,1], 'mediumslateblue': [123,104,238,1],\n        'mediumspringgreen': [0,250,154,1], 'mediumturquoise': [72,209,204,1],\n        'mediumvioletred': [199,21,133,1], 'midnightblue': [25,25,112,1],\n        'mintcream': [245,255,250,1], 'mistyrose': [255,228,225,1],\n        'moccasin': [255,228,181,1], 'navajowhite': [255,222,173,1],\n        'navy': [0,0,128,1], 'oldlace': [253,245,230,1],\n        'olive': [128,128,0,1], 'olivedrab': [107,142,35,1],\n        'orange': [255,165,0,1], 'orangered': [255,69,0,1],\n        'orchid': [218,112,214,1], 'palegoldenrod': [238,232,170,1],\n        'palegreen': [152,251,152,1], 'paleturquoise': [175,238,238,1],\n        'palevioletred': [219,112,147,1], 'papayawhip': [255,239,213,1],\n        'peachpuff': [255,218,185,1], 'peru': [205,133,63,1],\n        'pink': [255,192,203,1], 'plum': [221,160,221,1],\n        'powderblue': [176,224,230,1], 'purple': [128,0,128,1],\n        'red': [255,0,0,1], 'rosybrown': [188,143,143,1],\n        'royalblue': [65,105,225,1], 'saddlebrown': [139,69,19,1],\n        'salmon': [250,128,114,1], 'sandybrown': [244,164,96,1],\n        'seagreen': [46,139,87,1], 'seashell': [255,245,238,1],\n        'sienna': [160,82,45,1], 'silver': [192,192,192,1],\n        'skyblue': [135,206,235,1], 'slateblue': [106,90,205,1],\n        'slategray': [112,128,144,1], 'slategrey': [112,128,144,1],\n        'snow': [255,250,250,1], 'springgreen': [0,255,127,1],\n        'steelblue': [70,130,180,1], 'tan': [210,180,140,1],\n        'teal': [0,128,128,1], 'thistle': [216,191,216,1],\n        'tomato': [255,99,71,1], 'turquoise': [64,224,208,1],\n        'violet': [238,130,238,1], 'wheat': [245,222,179,1],\n        'white': [255,255,255,1], 'whitesmoke': [245,245,245,1],\n        'yellow': [255,255,0,1], 'yellowgreen': [154,205,50,1]\n    };\n\n    function clampCssByte(i) {  // Clamp to integer 0 .. 255.\n        i = Math.round(i);  // Seems to be what Chrome does (vs truncation).\n        return i < 0 ? 0 : i > 255 ? 255 : i;\n    }\n\n    function clampCssAngle(i) {  // Clamp to integer 0 .. 360.\n        i = Math.round(i);  // Seems to be what Chrome does (vs truncation).\n        return i < 0 ? 0 : i > 360 ? 360 : i;\n    }\n\n    function clampCssFloat(f) {  // Clamp to float 0.0 .. 1.0.\n        return f < 0 ? 0 : f > 1 ? 1 : f;\n    }\n\n    function parseCssInt(str) {  // int or percentage.\n        if (str.length && str.charAt(str.length - 1) === '%') {\n            return clampCssByte(parseFloat(str) / 100 * 255);\n        }\n        return clampCssByte(parseInt(str, 10));\n    }\n\n    function parseCssFloat(str) {  // float or percentage.\n        if (str.length && str.charAt(str.length - 1) === '%') {\n            return clampCssFloat(parseFloat(str) / 100);\n        }\n        return clampCssFloat(parseFloat(str));\n    }\n\n    function cssHueToRgb(m1, m2, h) {\n        if (h < 0) {\n            h += 1;\n        }\n        else if (h > 1) {\n            h -= 1;\n        }\n\n        if (h * 6 < 1) {\n            return m1 + (m2 - m1) * h * 6;\n        }\n        if (h * 2 < 1) {\n            return m2;\n        }\n        if (h * 3 < 2) {\n            return m1 + (m2 - m1) * (2/3 - h) * 6;\n        }\n        return m1;\n    }\n\n    function lerp(a, b, p) {\n        return a + (b - a) * p;\n    }\n\n    function setRgba(out, r, g, b, a) {\n        out[0] = r; out[1] = g; out[2] = b; out[3] = a;\n        return out;\n    }\n    function copyRgba(out, a) {\n        out[0] = a[0]; out[1] = a[1]; out[2] = a[2]; out[3] = a[3];\n        return out;\n    }\n    var colorCache = new LRU(20);\n    var lastRemovedArr = null;\n    function putToCache(colorStr, rgbaArr) {\n        // Reuse removed array\n        if (lastRemovedArr) {\n            copyRgba(lastRemovedArr, rgbaArr);\n        }\n        lastRemovedArr = colorCache.put(colorStr, lastRemovedArr || (rgbaArr.slice()));\n    }\n    /**\n     * @param {string} colorStr\n     * @param {Array.<number>} out\n     * @return {Array.<number>}\n     * @memberOf module:zrender/util/color\n     */\n    function parse(colorStr, rgbaArr) {\n        if (!colorStr) {\n            return;\n        }\n        rgbaArr = rgbaArr || [];\n\n        var cached = colorCache.get(colorStr);\n        if (cached) {\n            return copyRgba(rgbaArr, cached);\n        }\n\n        // colorStr may be not string\n        colorStr = colorStr + '';\n        // Remove all whitespace, not compliant, but should just be more accepting.\n        var str = colorStr.replace(/ /g, '').toLowerCase();\n\n        // Color keywords (and transparent) lookup.\n        if (str in kCSSColorTable) {\n            copyRgba(rgbaArr, kCSSColorTable[str]);\n            putToCache(colorStr, rgbaArr);\n            return rgbaArr;\n        }\n\n        // #abc and #abc123 syntax.\n        if (str.charAt(0) === '#') {\n            if (str.length === 4) {\n                var iv = parseInt(str.substr(1), 16);  // TODO(deanm): Stricter parsing.\n                if (!(iv >= 0 && iv <= 0xfff)) {\n                    setRgba(rgbaArr, 0, 0, 0, 1);\n                    return;  // Covers NaN.\n                }\n                setRgba(rgbaArr,\n                    ((iv & 0xf00) >> 4) | ((iv & 0xf00) >> 8),\n                    (iv & 0xf0) | ((iv & 0xf0) >> 4),\n                    (iv & 0xf) | ((iv & 0xf) << 4),\n                    1\n                );\n                putToCache(colorStr, rgbaArr);\n                return rgbaArr;\n            }\n            else if (str.length === 7) {\n                var iv = parseInt(str.substr(1), 16);  // TODO(deanm): Stricter parsing.\n                if (!(iv >= 0 && iv <= 0xffffff)) {\n                    setRgba(rgbaArr, 0, 0, 0, 1);\n                    return;  // Covers NaN.\n                }\n                setRgba(rgbaArr,\n                    (iv & 0xff0000) >> 16,\n                    (iv & 0xff00) >> 8,\n                    iv & 0xff,\n                    1\n                );\n                putToCache(colorStr, rgbaArr);\n                return rgbaArr;\n            }\n\n            return;\n        }\n        var op = str.indexOf('('), ep = str.indexOf(')');\n        if (op !== -1 && ep + 1 === str.length) {\n            var fname = str.substr(0, op);\n            var params = str.substr(op + 1, ep - (op + 1)).split(',');\n            var alpha = 1;  // To allow case fallthrough.\n            switch (fname) {\n                case 'rgba':\n                    if (params.length !== 4) {\n                        setRgba(rgbaArr, 0, 0, 0, 1);\n                        return;\n                    }\n                    alpha = parseCssFloat(params.pop()); // jshint ignore:line\n                // Fall through.\n                case 'rgb':\n                    if (params.length !== 3) {\n                        setRgba(rgbaArr, 0, 0, 0, 1);\n                        return;\n                    }\n                    setRgba(rgbaArr,\n                        parseCssInt(params[0]),\n                        parseCssInt(params[1]),\n                        parseCssInt(params[2]),\n                        alpha\n                    );\n                    putToCache(colorStr, rgbaArr);\n                    return rgbaArr;\n                case 'hsla':\n                    if (params.length !== 4) {\n                        setRgba(rgbaArr, 0, 0, 0, 1);\n                        return;\n                    }\n                    params[3] = parseCssFloat(params[3]);\n                    hsla2rgba(params, rgbaArr);\n                    putToCache(colorStr, rgbaArr);\n                    return rgbaArr;\n                case 'hsl':\n                    if (params.length !== 3) {\n                        setRgba(rgbaArr, 0, 0, 0, 1);\n                        return;\n                    }\n                    hsla2rgba(params, rgbaArr);\n                    putToCache(colorStr, rgbaArr);\n                    return rgbaArr;\n                default:\n                    return;\n            }\n        }\n\n        setRgba(rgbaArr, 0, 0, 0, 1);\n        return;\n    }\n\n    /**\n     * @param {Array.<number>} hsla\n     * @param {Array.<number>} rgba\n     * @return {Array.<number>} rgba\n     */\n    function hsla2rgba(hsla, rgba) {\n        var h = (((parseFloat(hsla[0]) % 360) + 360) % 360) / 360;  // 0 .. 1\n        // NOTE(deanm): According to the CSS spec s/l should only be\n        // percentages, but we don't bother and let float or percentage.\n        var s = parseCssFloat(hsla[1]);\n        var l = parseCssFloat(hsla[2]);\n        var m2 = l <= 0.5 ? l * (s + 1) : l + s - l * s;\n        var m1 = l * 2 - m2;\n\n        rgba = rgba || [];\n        setRgba(rgba,\n            clampCssByte(cssHueToRgb(m1, m2, h + 1 / 3) * 255),\n            clampCssByte(cssHueToRgb(m1, m2, h) * 255),\n            clampCssByte(cssHueToRgb(m1, m2, h - 1 / 3) * 255),\n            1\n        );\n\n        if (hsla.length === 4) {\n            rgba[3] = hsla[3];\n        }\n\n        return rgba;\n    }\n\n    /**\n     * @param {Array.<number>} rgba\n     * @return {Array.<number>} hsla\n     */\n    function rgba2hsla(rgba) {\n        if (!rgba) {\n            return;\n        }\n\n        // RGB from 0 to 255\n        var R = rgba[0] / 255;\n        var G = rgba[1] / 255;\n        var B = rgba[2] / 255;\n\n        var vMin = Math.min(R, G, B); // Min. value of RGB\n        var vMax = Math.max(R, G, B); // Max. value of RGB\n        var delta = vMax - vMin; // Delta RGB value\n\n        var L = (vMax + vMin) / 2;\n        var H;\n        var S;\n        // HSL results from 0 to 1\n        if (delta === 0) {\n            H = 0;\n            S = 0;\n        }\n        else {\n            if (L < 0.5) {\n                S = delta / (vMax + vMin);\n            }\n            else {\n                S = delta / (2 - vMax - vMin);\n            }\n\n            var deltaR = (((vMax - R) / 6) + (delta / 2)) / delta;\n            var deltaG = (((vMax - G) / 6) + (delta / 2)) / delta;\n            var deltaB = (((vMax - B) / 6) + (delta / 2)) / delta;\n\n            if (R === vMax) {\n                H = deltaB - deltaG;\n            }\n            else if (G === vMax) {\n                H = (1 / 3) + deltaR - deltaB;\n            }\n            else if (B === vMax) {\n                H = (2 / 3) + deltaG - deltaR;\n            }\n\n            if (H < 0) {\n                H += 1;\n            }\n\n            if (H > 1) {\n                H -= 1;\n            }\n        }\n\n        var hsla = [H * 360, S, L];\n\n        if (rgba[3] != null) {\n            hsla.push(rgba[3]);\n        }\n\n        return hsla;\n    }\n\n    /**\n     * @param {string} color\n     * @param {number} level\n     * @return {string}\n     * @memberOf module:zrender/util/color\n     */\n    function lift(color, level) {\n        var colorArr = parse(color);\n        if (colorArr) {\n            for (var i = 0; i < 3; i++) {\n                if (level < 0) {\n                    colorArr[i] = colorArr[i] * (1 - level) | 0;\n                }\n                else {\n                    colorArr[i] = ((255 - colorArr[i]) * level + colorArr[i]) | 0;\n                }\n            }\n            return stringify(colorArr, colorArr.length === 4 ? 'rgba' : 'rgb');\n        }\n    }\n\n    /**\n     * @param {string} color\n     * @return {string}\n     * @memberOf module:zrender/util/color\n     */\n    function toHex(color, level) {\n        var colorArr = parse(color);\n        if (colorArr) {\n            return ((1 << 24) + (colorArr[0] << 16) + (colorArr[1] << 8) + (+colorArr[2])).toString(16).slice(1);\n        }\n    }\n\n    /**\n     * Map value to color. Faster than mapToColor methods because color is represented by rgba array.\n     * @param {number} normalizedValue A float between 0 and 1.\n     * @param {Array.<Array.<number>>} colors List of rgba color array\n     * @param {Array.<number>} [out] Mapped gba color array\n     * @return {Array.<number>} will be null/undefined if input illegal.\n     */\n    function fastMapToColor(normalizedValue, colors, out) {\n        if (!(colors && colors.length)\n            || !(normalizedValue >= 0 && normalizedValue <= 1)\n        ) {\n            return;\n        }\n\n        out = out || [];\n\n        var value = normalizedValue * (colors.length - 1);\n        var leftIndex = Math.floor(value);\n        var rightIndex = Math.ceil(value);\n        var leftColor = colors[leftIndex];\n        var rightColor = colors[rightIndex];\n        var dv = value - leftIndex;\n        out[0] = clampCssByte(lerp(leftColor[0], rightColor[0], dv));\n        out[1] = clampCssByte(lerp(leftColor[1], rightColor[1], dv));\n        out[2] = clampCssByte(lerp(leftColor[2], rightColor[2], dv));\n        out[3] = clampCssFloat(lerp(leftColor[3], rightColor[3], dv));\n\n        return out;\n    }\n    /**\n     * @param {number} normalizedValue A float between 0 and 1.\n     * @param {Array.<string>} colors Color list.\n     * @param {boolean=} fullOutput Default false.\n     * @return {(string|Object)} Result color. If fullOutput,\n     *                           return {color: ..., leftIndex: ..., rightIndex: ..., value: ...},\n     * @memberOf module:zrender/util/color\n     */\n    function mapToColor(normalizedValue, colors, fullOutput) {\n        if (!(colors && colors.length)\n            || !(normalizedValue >= 0 && normalizedValue <= 1)\n        ) {\n            return;\n        }\n\n        var value = normalizedValue * (colors.length - 1);\n        var leftIndex = Math.floor(value);\n        var rightIndex = Math.ceil(value);\n        var leftColor = parse(colors[leftIndex]);\n        var rightColor = parse(colors[rightIndex]);\n        var dv = value - leftIndex;\n\n        var color = stringify(\n            [\n                clampCssByte(lerp(leftColor[0], rightColor[0], dv)),\n                clampCssByte(lerp(leftColor[1], rightColor[1], dv)),\n                clampCssByte(lerp(leftColor[2], rightColor[2], dv)),\n                clampCssFloat(lerp(leftColor[3], rightColor[3], dv))\n            ],\n            'rgba'\n        );\n\n        return fullOutput\n            ? {\n                color: color,\n                leftIndex: leftIndex,\n                rightIndex: rightIndex,\n                value: value\n            }\n            : color;\n    }\n\n    /**\n     * @param {string} color\n     * @param {number=} h 0 ~ 360, ignore when null.\n     * @param {number=} s 0 ~ 1, ignore when null.\n     * @param {number=} l 0 ~ 1, ignore when null.\n     * @return {string} Color string in rgba format.\n     * @memberOf module:zrender/util/color\n     */\n    function modifyHSL(color, h, s, l) {\n        color = parse(color);\n\n        if (color) {\n            color = rgba2hsla(color);\n            h != null && (color[0] = clampCssAngle(h));\n            s != null && (color[1] = parseCssFloat(s));\n            l != null && (color[2] = parseCssFloat(l));\n\n            return stringify(hsla2rgba(color), 'rgba');\n        }\n    }\n\n    /**\n     * @param {string} color\n     * @param {number=} alpha 0 ~ 1\n     * @return {string} Color string in rgba format.\n     * @memberOf module:zrender/util/color\n     */\n    function modifyAlpha(color, alpha) {\n        color = parse(color);\n\n        if (color && alpha != null) {\n            color[3] = clampCssFloat(alpha);\n            return stringify(color, 'rgba');\n        }\n    }\n\n    /**\n     * @param {Array.<number>} arrColor like [12,33,44,0.4]\n     * @param {string} type 'rgba', 'hsva', ...\n     * @return {string} Result color. (If input illegal, return undefined).\n     */\n    function stringify(arrColor, type) {\n        if (!arrColor || !arrColor.length) {\n            return;\n        }\n        var colorStr = arrColor[0] + ',' + arrColor[1] + ',' + arrColor[2];\n        if (type === 'rgba' || type === 'hsva' || type === 'hsla') {\n            colorStr += ',' + arrColor[3];\n        }\n        return type + '(' + colorStr + ')';\n    }\n\n    module.exports = {\n        parse: parse,\n        lift: lift,\n        toHex: toHex,\n        fastMapToColor: fastMapToColor,\n        mapToColor: mapToColor,\n        modifyHSL: modifyHSL,\n        modifyAlpha: modifyAlpha,\n        stringify: stringify\n    };\n\n\n\n\n/***/ }),\n/* 331 */\n/***/ (function(module, exports) {\n\n/**\n * 事件扩展\n * @module zrender/mixin/Eventful\n * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)\n *         pissang (https://www.github.com/pissang)\n */\n\n\n    var arrySlice = Array.prototype.slice;\n\n    /**\n     * 事件分发器\n     * @alias module:zrender/mixin/Eventful\n     * @constructor\n     */\n    var Eventful = function () {\n        this._$handlers = {};\n    };\n\n    Eventful.prototype = {\n\n        constructor: Eventful,\n\n        /**\n         * 单次触发绑定，trigger后销毁\n         *\n         * @param {string} event 事件名\n         * @param {Function} handler 响应函数\n         * @param {Object} context\n         */\n        one: function (event, handler, context) {\n            var _h = this._$handlers;\n\n            if (!handler || !event) {\n                return this;\n            }\n\n            if (!_h[event]) {\n                _h[event] = [];\n            }\n\n            for (var i = 0; i < _h[event].length; i++) {\n                if (_h[event][i].h === handler) {\n                    return this;\n                }\n            }\n\n            _h[event].push({\n                h: handler,\n                one: true,\n                ctx: context || this\n            });\n\n            return this;\n        },\n\n        /**\n         * 绑定事件\n         * @param {string} event 事件名\n         * @param {Function} handler 事件处理函数\n         * @param {Object} [context]\n         */\n        on: function (event, handler, context) {\n            var _h = this._$handlers;\n\n            if (!handler || !event) {\n                return this;\n            }\n\n            if (!_h[event]) {\n                _h[event] = [];\n            }\n\n            for (var i = 0; i < _h[event].length; i++) {\n                if (_h[event][i].h === handler) {\n                    return this;\n                }\n            }\n\n            _h[event].push({\n                h: handler,\n                one: false,\n                ctx: context || this\n            });\n\n            return this;\n        },\n\n        /**\n         * 是否绑定了事件\n         * @param  {string}  event\n         * @return {boolean}\n         */\n        isSilent: function (event) {\n            var _h = this._$handlers;\n            return _h[event] && _h[event].length;\n        },\n\n        /**\n         * 解绑事件\n         * @param {string} event 事件名\n         * @param {Function} [handler] 事件处理函数\n         */\n        off: function (event, handler) {\n            var _h = this._$handlers;\n\n            if (!event) {\n                this._$handlers = {};\n                return this;\n            }\n\n            if (handler) {\n                if (_h[event]) {\n                    var newList = [];\n                    for (var i = 0, l = _h[event].length; i < l; i++) {\n                        if (_h[event][i]['h'] != handler) {\n                            newList.push(_h[event][i]);\n                        }\n                    }\n                    _h[event] = newList;\n                }\n\n                if (_h[event] && _h[event].length === 0) {\n                    delete _h[event];\n                }\n            }\n            else {\n                delete _h[event];\n            }\n\n            return this;\n        },\n\n        /**\n         * 事件分发\n         *\n         * @param {string} type 事件类型\n         */\n        trigger: function (type) {\n            if (this._$handlers[type]) {\n                var args = arguments;\n                var argLen = args.length;\n\n                if (argLen > 3) {\n                    args = arrySlice.call(args, 1);\n                }\n\n                var _h = this._$handlers[type];\n                var len = _h.length;\n                for (var i = 0; i < len;) {\n                    // Optimize advise from backbone\n                    switch (argLen) {\n                        case 1:\n                            _h[i]['h'].call(_h[i]['ctx']);\n                            break;\n                        case 2:\n                            _h[i]['h'].call(_h[i]['ctx'], args[1]);\n                            break;\n                        case 3:\n                            _h[i]['h'].call(_h[i]['ctx'], args[1], args[2]);\n                            break;\n                        default:\n                            // have more than 2 given arguments\n                            _h[i]['h'].apply(_h[i]['ctx'], args);\n                            break;\n                    }\n\n                    if (_h[i]['one']) {\n                        _h.splice(i, 1);\n                        len--;\n                    }\n                    else {\n                        i++;\n                    }\n                }\n            }\n\n            return this;\n        },\n\n        /**\n         * 带有context的事件分发, 最后一个参数是事件回调的context\n         * @param {string} type 事件类型\n         */\n        triggerWithContext: function (type) {\n            if (this._$handlers[type]) {\n                var args = arguments;\n                var argLen = args.length;\n\n                if (argLen > 4) {\n                    args = arrySlice.call(args, 1, args.length - 1);\n                }\n                var ctx = args[args.length - 1];\n\n                var _h = this._$handlers[type];\n                var len = _h.length;\n                for (var i = 0; i < len;) {\n                    // Optimize advise from backbone\n                    switch (argLen) {\n                        case 1:\n                            _h[i]['h'].call(ctx);\n                            break;\n                        case 2:\n                            _h[i]['h'].call(ctx, args[1]);\n                            break;\n                        case 3:\n                            _h[i]['h'].call(ctx, args[1], args[2]);\n                            break;\n                        default:\n                            // have more than 2 given arguments\n                            _h[i]['h'].apply(ctx, args);\n                            break;\n                    }\n\n                    if (_h[i]['one']) {\n                        _h.splice(i, 1);\n                        len--;\n                    }\n                    else {\n                        i++;\n                    }\n                }\n            }\n\n            return this;\n        }\n    };\n\n    // 对象可以通过 onxxxx 绑定事件\n    /**\n     * @event module:zrender/mixin/Eventful#onclick\n     * @type {Function}\n     * @default null\n     */\n    /**\n     * @event module:zrender/mixin/Eventful#onmouseover\n     * @type {Function}\n     * @default null\n     */\n    /**\n     * @event module:zrender/mixin/Eventful#onmouseout\n     * @type {Function}\n     * @default null\n     */\n    /**\n     * @event module:zrender/mixin/Eventful#onmousemove\n     * @type {Function}\n     * @default null\n     */\n    /**\n     * @event module:zrender/mixin/Eventful#onmousewheel\n     * @type {Function}\n     * @default null\n     */\n    /**\n     * @event module:zrender/mixin/Eventful#onmousedown\n     * @type {Function}\n     * @default null\n     */\n    /**\n     * @event module:zrender/mixin/Eventful#onmouseup\n     * @type {Function}\n     * @default null\n     */\n    /**\n     * @event module:zrender/mixin/Eventful#ondrag\n     * @type {Function}\n     * @default null\n     */\n    /**\n     * @event module:zrender/mixin/Eventful#ondragstart\n     * @type {Function}\n     * @default null\n     */\n    /**\n     * @event module:zrender/mixin/Eventful#ondragend\n     * @type {Function}\n     * @default null\n     */\n    /**\n     * @event module:zrender/mixin/Eventful#ondragenter\n     * @type {Function}\n     * @default null\n     */\n    /**\n     * @event module:zrender/mixin/Eventful#ondragleave\n     * @type {Function}\n     * @default null\n     */\n    /**\n     * @event module:zrender/mixin/Eventful#ondragover\n     * @type {Function}\n     * @default null\n     */\n    /**\n     * @event module:zrender/mixin/Eventful#ondrop\n     * @type {Function}\n     * @default null\n     */\n\n    module.exports = Eventful;\n\n\n\n/***/ }),\n/* 332 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var textWidthCache = {};\n    var textWidthCacheCounter = 0;\n    var TEXT_CACHE_MAX = 5000;\n\n    var util = __webpack_require__(315);\n    var BoundingRect = __webpack_require__(324);\n    var retrieve = util.retrieve;\n\n    function getTextWidth(text, textFont) {\n        var key = text + ':' + textFont;\n        if (textWidthCache[key]) {\n            return textWidthCache[key];\n        }\n\n        var textLines = (text + '').split('\\n');\n        var width = 0;\n\n        for (var i = 0, l = textLines.length; i < l; i++) {\n            // measureText 可以被覆盖以兼容不支持 Canvas 的环境\n            width = Math.max(textContain.measureText(textLines[i], textFont).width, width);\n        }\n\n        if (textWidthCacheCounter > TEXT_CACHE_MAX) {\n            textWidthCacheCounter = 0;\n            textWidthCache = {};\n        }\n        textWidthCacheCounter++;\n        textWidthCache[key] = width;\n\n        return width;\n    }\n\n    function getTextRect(text, textFont, textAlign, textBaseline) {\n        var textLineLen = ((text || '') + '').split('\\n').length;\n\n        var width = getTextWidth(text, textFont);\n        // FIXME 高度计算比较粗暴\n        var lineHeight = getTextWidth('国', textFont);\n        var height = textLineLen * lineHeight;\n\n        var rect = new BoundingRect(0, 0, width, height);\n        // Text has a special line height property\n        rect.lineHeight = lineHeight;\n\n        switch (textBaseline) {\n            case 'bottom':\n            case 'alphabetic':\n                rect.y -= lineHeight;\n                break;\n            case 'middle':\n                rect.y -= lineHeight / 2;\n                break;\n            // case 'hanging':\n            // case 'top':\n        }\n\n        // FIXME Right to left language\n        switch (textAlign) {\n            case 'end':\n            case 'right':\n                rect.x -= rect.width;\n                break;\n            case 'center':\n                rect.x -= rect.width / 2;\n                break;\n            // case 'start':\n            // case 'left':\n        }\n\n        return rect;\n    }\n\n    function adjustTextPositionOnRect(textPosition, rect, textRect, distance) {\n\n        var x = rect.x;\n        var y = rect.y;\n\n        var height = rect.height;\n        var width = rect.width;\n\n        var textHeight = textRect.height;\n\n        var lineHeight = textRect.lineHeight;\n        var halfHeight = height / 2 - textHeight / 2 + lineHeight;\n\n        var textAlign = 'left';\n\n        switch (textPosition) {\n            case 'left':\n                x -= distance;\n                y += halfHeight;\n                textAlign = 'right';\n                break;\n            case 'right':\n                x += distance + width;\n                y += halfHeight;\n                textAlign = 'left';\n                break;\n            case 'top':\n                x += width / 2;\n                y -= distance + textHeight - lineHeight;\n                textAlign = 'center';\n                break;\n            case 'bottom':\n                x += width / 2;\n                y += height + distance + lineHeight;\n                textAlign = 'center';\n                break;\n            case 'inside':\n                x += width / 2;\n                y += halfHeight;\n                textAlign = 'center';\n                break;\n            case 'insideLeft':\n                x += distance;\n                y += halfHeight;\n                textAlign = 'left';\n                break;\n            case 'insideRight':\n                x += width - distance;\n                y += halfHeight;\n                textAlign = 'right';\n                break;\n            case 'insideTop':\n                x += width / 2;\n                y += distance + lineHeight;\n                textAlign = 'center';\n                break;\n            case 'insideBottom':\n                x += width / 2;\n                y += height - textHeight - distance + lineHeight;\n                textAlign = 'center';\n                break;\n            case 'insideTopLeft':\n                x += distance;\n                y += distance + lineHeight;\n                textAlign = 'left';\n                break;\n            case 'insideTopRight':\n                x += width - distance;\n                y += distance + lineHeight;\n                textAlign = 'right';\n                break;\n            case 'insideBottomLeft':\n                x += distance;\n                y += height - textHeight - distance + lineHeight;\n                break;\n            case 'insideBottomRight':\n                x += width - distance;\n                y += height - textHeight - distance + lineHeight;\n                textAlign = 'right';\n                break;\n        }\n\n        return {\n            x: x,\n            y: y,\n            textAlign: textAlign,\n            textBaseline: 'alphabetic'\n        };\n    }\n\n    /**\n     * Show ellipsis if overflow.\n     *\n     * @param  {string} text\n     * @param  {string} containerWidth\n     * @param  {string} textFont\n     * @param  {number} [ellipsis='...']\n     * @param  {Object} [options]\n     * @param  {number} [options.maxIterations=3]\n     * @param  {number} [options.minChar=0] If truncate result are less\n     *                  then minChar, ellipsis will not show, which is\n     *                  better for user hint in some cases.\n     * @param  {number} [options.placeholder=''] When all truncated, use the placeholder.\n     * @return {string}\n     */\n    function truncateText(text, containerWidth, textFont, ellipsis, options) {\n        if (!containerWidth) {\n            return '';\n        }\n\n        options = options || {};\n\n        ellipsis = retrieve(ellipsis, '...');\n        var maxIterations = retrieve(options.maxIterations, 2);\n        var minChar = retrieve(options.minChar, 0);\n        // FIXME\n        // Other languages?\n        var cnCharWidth = getTextWidth('国', textFont);\n        // FIXME\n        // Consider proportional font?\n        var ascCharWidth = getTextWidth('a', textFont);\n        var placeholder = retrieve(options.placeholder, '');\n\n        // Example 1: minChar: 3, text: 'asdfzxcv', truncate result: 'asdf', but not: 'a...'.\n        // Example 2: minChar: 3, text: '维度', truncate result: '维', but not: '...'.\n        var contentWidth = containerWidth = Math.max(0, containerWidth - 1); // Reserve some gap.\n        for (var i = 0; i < minChar && contentWidth >= ascCharWidth; i++) {\n            contentWidth -= ascCharWidth;\n        }\n\n        var ellipsisWidth = getTextWidth(ellipsis);\n        if (ellipsisWidth > contentWidth) {\n            ellipsis = '';\n            ellipsisWidth = 0;\n        }\n\n        contentWidth = containerWidth - ellipsisWidth;\n\n        var textLines = (text + '').split('\\n');\n\n        for (var i = 0, len = textLines.length; i < len; i++) {\n            var textLine = textLines[i];\n            var lineWidth = getTextWidth(textLine, textFont);\n\n            if (lineWidth <= containerWidth) {\n                continue;\n            }\n\n            for (var j = 0;; j++) {\n                if (lineWidth <= contentWidth || j >= maxIterations) {\n                    textLine += ellipsis;\n                    break;\n                }\n\n                var subLength = j === 0\n                    ? estimateLength(textLine, contentWidth, ascCharWidth, cnCharWidth)\n                    : lineWidth > 0\n                    ? Math.floor(textLine.length * contentWidth / lineWidth)\n                    : 0;\n\n                textLine = textLine.substr(0, subLength);\n                lineWidth = getTextWidth(textLine, textFont);\n            }\n\n            if (textLine === '') {\n                textLine = placeholder;\n            }\n\n            textLines[i] = textLine;\n        }\n\n        return textLines.join('\\n');\n    }\n\n    function estimateLength(text, contentWidth, ascCharWidth, cnCharWidth) {\n        var width = 0;\n        var i = 0;\n        for (var len = text.length; i < len && width < contentWidth; i++) {\n            var charCode = text.charCodeAt(i);\n            width += (0 <= charCode && charCode <= 127) ? ascCharWidth : cnCharWidth;\n        }\n        return i;\n    }\n\n    var textContain = {\n\n        getWidth: getTextWidth,\n\n        getBoundingRect: getTextRect,\n\n        adjustTextPositionOnRect: adjustTextPositionOnRect,\n\n        truncateText: truncateText,\n\n        measureText: function (text, textFont) {\n            var ctx = util.getContext();\n            ctx.font = textFont || '12px sans-serif';\n            return ctx.measureText(text);\n        }\n    };\n\n    module.exports = textContain;\n\n\n/***/ }),\n/* 333 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * 事件辅助类\n * @module zrender/core/event\n * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)\n */\n\n\n    var Eventful = __webpack_require__(331);\n    var env = __webpack_require__(321);\n\n    var isDomLevel2 = (typeof window !== 'undefined') && !!window.addEventListener;\n\n    function getBoundingClientRect(el) {\n        // BlackBerry 5, iOS 3 (original iPhone) don't have getBoundingRect\n        return el.getBoundingClientRect ? el.getBoundingClientRect() : {left: 0, top: 0};\n    }\n\n    // `calculate` is optional, default false\n    function clientToLocal(el, e, out, calculate) {\n        out = out || {};\n\n        // According to the W3C Working Draft, offsetX and offsetY should be relative\n        // to the padding edge of the target element. The only browser using this convention\n        // is IE. Webkit uses the border edge, Opera uses the content edge, and FireFox does\n        // not support the properties.\n        // (see http://www.jacklmoore.com/notes/mouse-position/)\n        // In zr painter.dom, padding edge equals to border edge.\n\n        // FIXME\n        // When mousemove event triggered on ec tooltip, target is not zr painter.dom, and\n        // offsetX/Y is relative to e.target, where the calculation of zrX/Y via offsetX/Y\n        // is too complex. So css-transfrom dont support in this case temporarily.\n        if (calculate || !env.canvasSupported) {\n            defaultGetZrXY(el, e, out);\n        }\n        // Caution: In FireFox, layerX/layerY Mouse position relative to the closest positioned\n        // ancestor element, so we should make sure el is positioned (e.g., not position:static).\n        // BTW1, Webkit don't return the same results as FF in non-simple cases (like add\n        // zoom-factor, overflow / opacity layers, transforms ...)\n        // BTW2, (ev.offsetY || ev.pageY - $(ev.target).offset().top) is not correct in preserve-3d.\n        // <https://bugs.jquery.com/ticket/8523#comment:14>\n        // BTW3, In ff, offsetX/offsetY is always 0.\n        else if (env.browser.firefox && e.layerX != null && e.layerX !== e.offsetX) {\n            out.zrX = e.layerX;\n            out.zrY = e.layerY;\n        }\n        // For IE6+, chrome, safari, opera. (When will ff support offsetX?)\n        else if (e.offsetX != null) {\n            out.zrX = e.offsetX;\n            out.zrY = e.offsetY;\n        }\n        // For some other device, e.g., IOS safari.\n        else {\n            defaultGetZrXY(el, e, out);\n        }\n\n        return out;\n    }\n\n    function defaultGetZrXY(el, e, out) {\n        // This well-known method below does not support css transform.\n        var box = getBoundingClientRect(el);\n        out.zrX = e.clientX - box.left;\n        out.zrY = e.clientY - box.top;\n    }\n\n    /**\n     * 如果存在第三方嵌入的一些dom触发的事件，或touch事件，需要转换一下事件坐标.\n     * `calculate` is optional, default false.\n     */\n    function normalizeEvent(el, e, calculate) {\n\n        e = e || window.event;\n\n        if (e.zrX != null) {\n            return e;\n        }\n\n        var eventType = e.type;\n        var isTouch = eventType && eventType.indexOf('touch') >= 0;\n\n        if (!isTouch) {\n            clientToLocal(el, e, e, calculate);\n            e.zrDelta = (e.wheelDelta) ? e.wheelDelta / 120 : -(e.detail || 0) / 3;\n        }\n        else {\n            var touch = eventType != 'touchend'\n                ? e.targetTouches[0]\n                : e.changedTouches[0];\n            touch && clientToLocal(el, touch, e, calculate);\n        }\n\n        return e;\n    }\n\n    function addEventListener(el, name, handler) {\n        if (isDomLevel2) {\n            el.addEventListener(name, handler);\n        }\n        else {\n            el.attachEvent('on' + name, handler);\n        }\n    }\n\n    function removeEventListener(el, name, handler) {\n        if (isDomLevel2) {\n            el.removeEventListener(name, handler);\n        }\n        else {\n            el.detachEvent('on' + name, handler);\n        }\n    }\n\n    /**\n     * preventDefault and stopPropagation.\n     * Notice: do not do that in zrender. Upper application\n     * do that if necessary.\n     *\n     * @memberOf module:zrender/core/event\n     * @method\n     * @param {Event} e : event对象\n     */\n    var stop = isDomLevel2\n        ? function (e) {\n            e.preventDefault();\n            e.stopPropagation();\n            e.cancelBubble = true;\n        }\n        : function (e) {\n            e.returnValue = false;\n            e.cancelBubble = true;\n        };\n\n    module.exports = {\n        clientToLocal: clientToLocal,\n        normalizeEvent: normalizeEvent,\n        addEventListener: addEventListener,\n        removeEventListener: removeEventListener,\n\n        stop: stop,\n        // 做向上兼容\n        Dispatcher: Eventful\n    };\n\n\n\n/***/ }),\n/* 334 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * // Scale class management\n * @module echarts/scale/Scale\n */\n\n\n    var clazzUtil = __webpack_require__(326);\n\n    function Scale() {\n        /**\n         * Extent\n         * @type {Array.<number>}\n         * @protected\n         */\n        this._extent = [Infinity, -Infinity];\n\n        /**\n         * Step is calculated in adjustExtent\n         * @type {Array.<number>}\n         * @protected\n         */\n        this._interval = 0;\n\n        this.init && this.init.apply(this, arguments);\n    }\n\n    var scaleProto = Scale.prototype;\n\n    /**\n     * Parse input val to valid inner number.\n     * @param {*} val\n     * @return {number}\n     */\n    scaleProto.parse = function (val) {\n        // Notice: This would be a trap here, If the implementation\n        // of this method depends on extent, and this method is used\n        // before extent set (like in dataZoom), it would be wrong.\n        // Nevertheless, parse does not depend on extent generally.\n        return val;\n    };\n\n    scaleProto.contain = function (val) {\n        var extent = this._extent;\n        return val >= extent[0] && val <= extent[1];\n    };\n\n    /**\n     * Normalize value to linear [0, 1], return 0.5 if extent span is 0\n     * @param {number} val\n     * @return {number}\n     */\n    scaleProto.normalize = function (val) {\n        var extent = this._extent;\n        if (extent[1] === extent[0]) {\n            return 0.5;\n        }\n        return (val - extent[0]) / (extent[1] - extent[0]);\n    };\n\n    /**\n     * Scale normalized value\n     * @param {number} val\n     * @return {number}\n     */\n    scaleProto.scale = function (val) {\n        var extent = this._extent;\n        return val * (extent[1] - extent[0]) + extent[0];\n    };\n\n    /**\n     * Set extent from data\n     * @param {Array.<number>} other\n     */\n    scaleProto.unionExtent = function (other) {\n        var extent = this._extent;\n        other[0] < extent[0] && (extent[0] = other[0]);\n        other[1] > extent[1] && (extent[1] = other[1]);\n        // not setExtent because in log axis it may transformed to power\n        // this.setExtent(extent[0], extent[1]);\n    };\n\n    /**\n     * Set extent from data\n     * @param {module:echarts/data/List} data\n     * @param {string} dim\n     */\n    scaleProto.unionExtentFromData = function (data, dim) {\n        this.unionExtent(data.getDataExtent(dim, true));\n    };\n\n    /**\n     * Get extent\n     * @return {Array.<number>}\n     */\n    scaleProto.getExtent = function () {\n        return this._extent.slice();\n    };\n\n    /**\n     * Set extent\n     * @param {number} start\n     * @param {number} end\n     */\n    scaleProto.setExtent = function (start, end) {\n        var thisExtent = this._extent;\n        if (!isNaN(start)) {\n            thisExtent[0] = start;\n        }\n        if (!isNaN(end)) {\n            thisExtent[1] = end;\n        }\n    };\n\n    /**\n     * @return {Array.<string>}\n     */\n    scaleProto.getTicksLabels = function () {\n        var labels = [];\n        var ticks = this.getTicks();\n        for (var i = 0; i < ticks.length; i++) {\n            labels.push(this.getLabel(ticks[i]));\n        }\n        return labels;\n    };\n\n    clazzUtil.enableClassExtend(Scale);\n    clazzUtil.enableClassManagement(Scale, {\n        registerWhenExtend: true\n    });\n\n    module.exports = Scale;\n\n\n/***/ }),\n/* 335 */\n/***/ (function(module, exports) {\n\n\n    var dpr = 1;\n    // If in browser environment\n    if (typeof window !== 'undefined') {\n        dpr = Math.max(window.devicePixelRatio || 1, 1);\n    }\n    /**\n     * config默认配置项\n     * @exports zrender/config\n     * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)\n     */\n    var config = {\n        /**\n         * debug日志选项：catchBrushException为true下有效\n         * 0 : 不生成debug数据，发布用\n         * 1 : 异常抛出，调试用\n         * 2 : 控制台输出，调试用\n         */\n        debugMode: 0,\n\n        // retina 屏幕优化\n        devicePixelRatio: dpr\n    };\n    module.exports = config;\n\n\n\n\n/***/ }),\n/* 336 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * Group是一个容器，可以插入子节点，Group的变换也会被应用到子节点上\n * @module zrender/graphic/Group\n * @example\n *     var Group = require('zrender/lib/container/Group');\n *     var Circle = require('zrender/lib/graphic/shape/Circle');\n *     var g = new Group();\n *     g.position[0] = 100;\n *     g.position[1] = 100;\n *     g.add(new Circle({\n *         style: {\n *             x: 100,\n *             y: 100,\n *             r: 20,\n *         }\n *     }));\n *     zr.add(g);\n */\n\n\n    var zrUtil = __webpack_require__(315);\n    var Element = __webpack_require__(355);\n    var BoundingRect = __webpack_require__(324);\n\n    /**\n     * @alias module:zrender/graphic/Group\n     * @constructor\n     * @extends module:zrender/mixin/Transformable\n     * @extends module:zrender/mixin/Eventful\n     */\n    var Group = function (opts) {\n\n        opts = opts || {};\n\n        Element.call(this, opts);\n\n        for (var key in opts) {\n            if (opts.hasOwnProperty(key)) {\n                this[key] = opts[key];\n            }\n        }\n\n        this._children = [];\n\n        this.__storage = null;\n\n        this.__dirty = true;\n    };\n\n    Group.prototype = {\n\n        constructor: Group,\n\n        isGroup: true,\n\n        /**\n         * @type {string}\n         */\n        type: 'group',\n\n        /**\n         * 所有子孙元素是否响应鼠标事件\n         * @name module:/zrender/container/Group#silent\n         * @type {boolean}\n         * @default false\n         */\n        silent: false,\n\n        /**\n         * @return {Array.<module:zrender/Element>}\n         */\n        children: function () {\n            return this._children.slice();\n        },\n\n        /**\n         * 获取指定 index 的儿子节点\n         * @param  {number} idx\n         * @return {module:zrender/Element}\n         */\n        childAt: function (idx) {\n            return this._children[idx];\n        },\n\n        /**\n         * 获取指定名字的儿子节点\n         * @param  {string} name\n         * @return {module:zrender/Element}\n         */\n        childOfName: function (name) {\n            var children = this._children;\n            for (var i = 0; i < children.length; i++) {\n                if (children[i].name === name) {\n                    return children[i];\n                }\n             }\n        },\n\n        /**\n         * @return {number}\n         */\n        childCount: function () {\n            return this._children.length;\n        },\n\n        /**\n         * 添加子节点到最后\n         * @param {module:zrender/Element} child\n         */\n        add: function (child) {\n            if (child && child !== this && child.parent !== this) {\n\n                this._children.push(child);\n\n                this._doAdd(child);\n            }\n\n            return this;\n        },\n\n        /**\n         * 添加子节点在 nextSibling 之前\n         * @param {module:zrender/Element} child\n         * @param {module:zrender/Element} nextSibling\n         */\n        addBefore: function (child, nextSibling) {\n            if (child && child !== this && child.parent !== this\n                && nextSibling && nextSibling.parent === this) {\n\n                var children = this._children;\n                var idx = children.indexOf(nextSibling);\n\n                if (idx >= 0) {\n                    children.splice(idx, 0, child);\n                    this._doAdd(child);\n                }\n            }\n\n            return this;\n        },\n\n        _doAdd: function (child) {\n            if (child.parent) {\n                child.parent.remove(child);\n            }\n\n            child.parent = this;\n\n            var storage = this.__storage;\n            var zr = this.__zr;\n            if (storage && storage !== child.__storage) {\n\n                storage.addToStorage(child);\n\n                if (child instanceof Group) {\n                    child.addChildrenToStorage(storage);\n                }\n            }\n\n            zr && zr.refresh();\n        },\n\n        /**\n         * 移除子节点\n         * @param {module:zrender/Element} child\n         */\n        remove: function (child) {\n            var zr = this.__zr;\n            var storage = this.__storage;\n            var children = this._children;\n\n            var idx = zrUtil.indexOf(children, child);\n            if (idx < 0) {\n                return this;\n            }\n            children.splice(idx, 1);\n\n            child.parent = null;\n\n            if (storage) {\n\n                storage.delFromStorage(child);\n\n                if (child instanceof Group) {\n                    child.delChildrenFromStorage(storage);\n                }\n            }\n\n            zr && zr.refresh();\n\n            return this;\n        },\n\n        /**\n         * 移除所有子节点\n         */\n        removeAll: function () {\n            var children = this._children;\n            var storage = this.__storage;\n            var child;\n            var i;\n            for (i = 0; i < children.length; i++) {\n                child = children[i];\n                if (storage) {\n                    storage.delFromStorage(child);\n                    if (child instanceof Group) {\n                        child.delChildrenFromStorage(storage);\n                    }\n                }\n                child.parent = null;\n            }\n            children.length = 0;\n\n            return this;\n        },\n\n        /**\n         * 遍历所有子节点\n         * @param  {Function} cb\n         * @param  {}   context\n         */\n        eachChild: function (cb, context) {\n            var children = this._children;\n            for (var i = 0; i < children.length; i++) {\n                var child = children[i];\n                cb.call(context, child, i);\n            }\n            return this;\n        },\n\n        /**\n         * 深度优先遍历所有子孙节点\n         * @param  {Function} cb\n         * @param  {}   context\n         */\n        traverse: function (cb, context) {\n            for (var i = 0; i < this._children.length; i++) {\n                var child = this._children[i];\n                cb.call(context, child);\n\n                if (child.type === 'group') {\n                    child.traverse(cb, context);\n                }\n            }\n            return this;\n        },\n\n        addChildrenToStorage: function (storage) {\n            for (var i = 0; i < this._children.length; i++) {\n                var child = this._children[i];\n                storage.addToStorage(child);\n                if (child instanceof Group) {\n                    child.addChildrenToStorage(storage);\n                }\n            }\n        },\n\n        delChildrenFromStorage: function (storage) {\n            for (var i = 0; i < this._children.length; i++) {\n                var child = this._children[i];\n                storage.delFromStorage(child);\n                if (child instanceof Group) {\n                    child.delChildrenFromStorage(storage);\n                }\n            }\n        },\n\n        dirty: function () {\n            this.__dirty = true;\n            this.__zr && this.__zr.refresh();\n            return this;\n        },\n\n        /**\n         * @return {module:zrender/core/BoundingRect}\n         */\n        getBoundingRect: function (includeChildren) {\n            // TODO Caching\n            var rect = null;\n            var tmpRect = new BoundingRect(0, 0, 0, 0);\n            var children = includeChildren || this._children;\n            var tmpMat = [];\n\n            for (var i = 0; i < children.length; i++) {\n                var child = children[i];\n                if (child.ignore || child.invisible) {\n                    continue;\n                }\n\n                var childRect = child.getBoundingRect();\n                var transform = child.getLocalTransform(tmpMat);\n                // TODO\n                // The boundingRect cacluated by transforming original\n                // rect may be bigger than the actual bundingRect when rotation\n                // is used. (Consider a circle rotated aginst its center, where\n                // the actual boundingRect should be the same as that not be\n                // rotated.) But we can not find better approach to calculate\n                // actual boundingRect yet, considering performance.\n                if (transform) {\n                    tmpRect.copy(childRect);\n                    tmpRect.applyTransform(transform);\n                    rect = rect || tmpRect.clone();\n                    rect.union(tmpRect);\n                }\n                else {\n                    rect = rect || childRect.clone();\n                    rect.union(childRect);\n                }\n            }\n            return rect || tmpRect;\n        }\n    };\n\n    zrUtil.inherits(Group, Element);\n\n    module.exports = Group;\n\n\n/***/ }),\n/* 337 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * Path 代理，可以在`buildPath`中用于替代`ctx`, 会保存每个path操作的命令到pathCommands属性中\n * 可以用于 isInsidePath 判断以及获取boundingRect\n *\n * @module zrender/core/PathProxy\n * @author Yi Shen (http://www.github.com/pissang)\n */\n\n // TODO getTotalLength, getPointAtLength\n\n\n    var curve = __webpack_require__(329);\n    var vec2 = __webpack_require__(319);\n    var bbox = __webpack_require__(431);\n    var BoundingRect = __webpack_require__(324);\n    var dpr = __webpack_require__(335).devicePixelRatio;\n\n    var CMD = {\n        M: 1,\n        L: 2,\n        C: 3,\n        Q: 4,\n        A: 5,\n        Z: 6,\n        // Rect\n        R: 7\n    };\n\n    // var CMD_MEM_SIZE = {\n    //     M: 3,\n    //     L: 3,\n    //     C: 7,\n    //     Q: 5,\n    //     A: 9,\n    //     R: 5,\n    //     Z: 1\n    // };\n\n    var min = [];\n    var max = [];\n    var min2 = [];\n    var max2 = [];\n    var mathMin = Math.min;\n    var mathMax = Math.max;\n    var mathCos = Math.cos;\n    var mathSin = Math.sin;\n    var mathSqrt = Math.sqrt;\n    var mathAbs = Math.abs;\n\n    var hasTypedArray = typeof Float32Array != 'undefined';\n\n    /**\n     * @alias module:zrender/core/PathProxy\n     * @constructor\n     */\n    var PathProxy = function (notSaveData) {\n\n        this._saveData = !(notSaveData || false);\n\n        if (this._saveData) {\n            /**\n             * Path data. Stored as flat array\n             * @type {Array.<Object>}\n             */\n            this.data = [];\n        }\n\n        this._ctx = null;\n    };\n\n    /**\n     * 快速计算Path包围盒（并不是最小包围盒）\n     * @return {Object}\n     */\n    PathProxy.prototype = {\n\n        constructor: PathProxy,\n\n        _xi: 0,\n        _yi: 0,\n\n        _x0: 0,\n        _y0: 0,\n        // Unit x, Unit y. Provide for avoiding drawing that too short line segment\n        _ux: 0,\n        _uy: 0,\n\n        _len: 0,\n\n        _lineDash: null,\n\n        _dashOffset: 0,\n\n        _dashIdx: 0,\n\n        _dashSum: 0,\n\n        /**\n         * @readOnly\n         */\n        setScale: function (sx, sy) {\n            this._ux = mathAbs(1 / dpr / sx) || 0;\n            this._uy = mathAbs(1 / dpr / sy) || 0;\n        },\n\n        getContext: function () {\n            return this._ctx;\n        },\n\n        /**\n         * @param  {CanvasRenderingContext2D} ctx\n         * @return {module:zrender/core/PathProxy}\n         */\n        beginPath: function (ctx) {\n\n            this._ctx = ctx;\n\n            ctx && ctx.beginPath();\n\n            ctx && (this.dpr = ctx.dpr);\n\n            // Reset\n            if (this._saveData) {\n                this._len = 0;\n            }\n\n            if (this._lineDash) {\n                this._lineDash = null;\n\n                this._dashOffset = 0;\n            }\n\n            return this;\n        },\n\n        /**\n         * @param  {number} x\n         * @param  {number} y\n         * @return {module:zrender/core/PathProxy}\n         */\n        moveTo: function (x, y) {\n            this.addData(CMD.M, x, y);\n            this._ctx && this._ctx.moveTo(x, y);\n\n            // x0, y0, xi, yi 是记录在 _dashedXXXXTo 方法中使用\n            // xi, yi 记录当前点, x0, y0 在 closePath 的时候回到起始点。\n            // 有可能在 beginPath 之后直接调用 lineTo，这时候 x0, y0 需要\n            // 在 lineTo 方法中记录，这里先不考虑这种情况，dashed line 也只在 IE10- 中不支持\n            this._x0 = x;\n            this._y0 = y;\n\n            this._xi = x;\n            this._yi = y;\n\n            return this;\n        },\n\n        /**\n         * @param  {number} x\n         * @param  {number} y\n         * @return {module:zrender/core/PathProxy}\n         */\n        lineTo: function (x, y) {\n            var exceedUnit = mathAbs(x - this._xi) > this._ux\n                || mathAbs(y - this._yi) > this._uy\n                // Force draw the first segment\n                || this._len < 5;\n\n            this.addData(CMD.L, x, y);\n\n            if (this._ctx && exceedUnit) {\n                this._needsDash() ? this._dashedLineTo(x, y)\n                    : this._ctx.lineTo(x, y);\n            }\n            if (exceedUnit) {\n                this._xi = x;\n                this._yi = y;\n            }\n\n            return this;\n        },\n\n        /**\n         * @param  {number} x1\n         * @param  {number} y1\n         * @param  {number} x2\n         * @param  {number} y2\n         * @param  {number} x3\n         * @param  {number} y3\n         * @return {module:zrender/core/PathProxy}\n         */\n        bezierCurveTo: function (x1, y1, x2, y2, x3, y3) {\n            this.addData(CMD.C, x1, y1, x2, y2, x3, y3);\n            if (this._ctx) {\n                this._needsDash() ? this._dashedBezierTo(x1, y1, x2, y2, x3, y3)\n                    : this._ctx.bezierCurveTo(x1, y1, x2, y2, x3, y3);\n            }\n            this._xi = x3;\n            this._yi = y3;\n            return this;\n        },\n\n        /**\n         * @param  {number} x1\n         * @param  {number} y1\n         * @param  {number} x2\n         * @param  {number} y2\n         * @return {module:zrender/core/PathProxy}\n         */\n        quadraticCurveTo: function (x1, y1, x2, y2) {\n            this.addData(CMD.Q, x1, y1, x2, y2);\n            if (this._ctx) {\n                this._needsDash() ? this._dashedQuadraticTo(x1, y1, x2, y2)\n                    : this._ctx.quadraticCurveTo(x1, y1, x2, y2);\n            }\n            this._xi = x2;\n            this._yi = y2;\n            return this;\n        },\n\n        /**\n         * @param  {number} cx\n         * @param  {number} cy\n         * @param  {number} r\n         * @param  {number} startAngle\n         * @param  {number} endAngle\n         * @param  {boolean} anticlockwise\n         * @return {module:zrender/core/PathProxy}\n         */\n        arc: function (cx, cy, r, startAngle, endAngle, anticlockwise) {\n            this.addData(\n                CMD.A, cx, cy, r, r, startAngle, endAngle - startAngle, 0, anticlockwise ? 0 : 1\n            );\n            this._ctx && this._ctx.arc(cx, cy, r, startAngle, endAngle, anticlockwise);\n\n            this._xi = mathCos(endAngle) * r + cx;\n            this._yi = mathSin(endAngle) * r + cx;\n            return this;\n        },\n\n        // TODO\n        arcTo: function (x1, y1, x2, y2, radius) {\n            if (this._ctx) {\n                this._ctx.arcTo(x1, y1, x2, y2, radius);\n            }\n            return this;\n        },\n\n        // TODO\n        rect: function (x, y, w, h) {\n            this._ctx && this._ctx.rect(x, y, w, h);\n            this.addData(CMD.R, x, y, w, h);\n            return this;\n        },\n\n        /**\n         * @return {module:zrender/core/PathProxy}\n         */\n        closePath: function () {\n            this.addData(CMD.Z);\n\n            var ctx = this._ctx;\n            var x0 = this._x0;\n            var y0 = this._y0;\n            if (ctx) {\n                this._needsDash() && this._dashedLineTo(x0, y0);\n                ctx.closePath();\n            }\n\n            this._xi = x0;\n            this._yi = y0;\n            return this;\n        },\n\n        /**\n         * Context 从外部传入，因为有可能是 rebuildPath 完之后再 fill。\n         * stroke 同样\n         * @param {CanvasRenderingContext2D} ctx\n         * @return {module:zrender/core/PathProxy}\n         */\n        fill: function (ctx) {\n            ctx && ctx.fill();\n            this.toStatic();\n        },\n\n        /**\n         * @param {CanvasRenderingContext2D} ctx\n         * @return {module:zrender/core/PathProxy}\n         */\n        stroke: function (ctx) {\n            ctx && ctx.stroke();\n            this.toStatic();\n        },\n\n        /**\n         * 必须在其它绘制命令前调用\n         * Must be invoked before all other path drawing methods\n         * @return {module:zrender/core/PathProxy}\n         */\n        setLineDash: function (lineDash) {\n            if (lineDash instanceof Array) {\n                this._lineDash = lineDash;\n\n                this._dashIdx = 0;\n\n                var lineDashSum = 0;\n                for (var i = 0; i < lineDash.length; i++) {\n                    lineDashSum += lineDash[i];\n                }\n                this._dashSum = lineDashSum;\n            }\n            return this;\n        },\n\n        /**\n         * 必须在其它绘制命令前调用\n         * Must be invoked before all other path drawing methods\n         * @return {module:zrender/core/PathProxy}\n         */\n        setLineDashOffset: function (offset) {\n            this._dashOffset = offset;\n            return this;\n        },\n\n        /**\n         *\n         * @return {boolean}\n         */\n        len: function () {\n            return this._len;\n        },\n\n        /**\n         * 直接设置 Path 数据\n         */\n        setData: function (data) {\n\n            var len = data.length;\n\n            if (! (this.data && this.data.length == len) && hasTypedArray) {\n                this.data = new Float32Array(len);\n            }\n\n            for (var i = 0; i < len; i++) {\n                this.data[i] = data[i];\n            }\n\n            this._len = len;\n        },\n\n        /**\n         * 添加子路径\n         * @param {module:zrender/core/PathProxy|Array.<module:zrender/core/PathProxy>} path\n         */\n        appendPath: function (path) {\n            if (!(path instanceof Array)) {\n                path = [path];\n            }\n            var len = path.length;\n            var appendSize = 0;\n            var offset = this._len;\n            for (var i = 0; i < len; i++) {\n                appendSize += path[i].len();\n            }\n            if (hasTypedArray && (this.data instanceof Float32Array)) {\n                this.data = new Float32Array(offset + appendSize);\n            }\n            for (var i = 0; i < len; i++) {\n                var appendPathData = path[i].data;\n                for (var k = 0; k < appendPathData.length; k++) {\n                    this.data[offset++] = appendPathData[k];\n                }\n            }\n            this._len = offset;\n        },\n\n        /**\n         * 填充 Path 数据。\n         * 尽量复用而不申明新的数组。大部分图形重绘的指令数据长度都是不变的。\n         */\n        addData: function (cmd) {\n            if (!this._saveData) {\n                return;\n            }\n\n            var data = this.data;\n            if (this._len + arguments.length > data.length) {\n                // 因为之前的数组已经转换成静态的 Float32Array\n                // 所以不够用时需要扩展一个新的动态数组\n                this._expandData();\n                data = this.data;\n            }\n            for (var i = 0; i < arguments.length; i++) {\n                data[this._len++] = arguments[i];\n            }\n\n            this._prevCmd = cmd;\n        },\n\n        _expandData: function () {\n            // Only if data is Float32Array\n            if (!(this.data instanceof Array)) {\n                var newData = [];\n                for (var i = 0; i < this._len; i++) {\n                    newData[i] = this.data[i];\n                }\n                this.data = newData;\n            }\n        },\n\n        /**\n         * If needs js implemented dashed line\n         * @return {boolean}\n         * @private\n         */\n        _needsDash: function () {\n            return this._lineDash;\n        },\n\n        _dashedLineTo: function (x1, y1) {\n            var dashSum = this._dashSum;\n            var offset = this._dashOffset;\n            var lineDash = this._lineDash;\n            var ctx = this._ctx;\n\n            var x0 = this._xi;\n            var y0 = this._yi;\n            var dx = x1 - x0;\n            var dy = y1 - y0;\n            var dist = mathSqrt(dx * dx + dy * dy);\n            var x = x0;\n            var y = y0;\n            var dash;\n            var nDash = lineDash.length;\n            var idx;\n            dx /= dist;\n            dy /= dist;\n\n            if (offset < 0) {\n                // Convert to positive offset\n                offset = dashSum + offset;\n            }\n            offset %= dashSum;\n            x -= offset * dx;\n            y -= offset * dy;\n\n            while ((dx > 0 && x <= x1) || (dx < 0 && x >= x1)\n            || (dx == 0 && ((dy > 0 && y <= y1) || (dy < 0 && y >= y1)))) {\n                idx = this._dashIdx;\n                dash = lineDash[idx];\n                x += dx * dash;\n                y += dy * dash;\n                this._dashIdx = (idx + 1) % nDash;\n                // Skip positive offset\n                if ((dx > 0 && x < x0) || (dx < 0 && x > x0) || (dy > 0 && y < y0) || (dy < 0 && y > y0)) {\n                    continue;\n                }\n                ctx[idx % 2 ? 'moveTo' : 'lineTo'](\n                    dx >= 0 ? mathMin(x, x1) : mathMax(x, x1),\n                    dy >= 0 ? mathMin(y, y1) : mathMax(y, y1)\n                );\n            }\n            // Offset for next lineTo\n            dx = x - x1;\n            dy = y - y1;\n            this._dashOffset = -mathSqrt(dx * dx + dy * dy);\n        },\n\n        // Not accurate dashed line to\n        _dashedBezierTo: function (x1, y1, x2, y2, x3, y3) {\n            var dashSum = this._dashSum;\n            var offset = this._dashOffset;\n            var lineDash = this._lineDash;\n            var ctx = this._ctx;\n\n            var x0 = this._xi;\n            var y0 = this._yi;\n            var t;\n            var dx;\n            var dy;\n            var cubicAt = curve.cubicAt;\n            var bezierLen = 0;\n            var idx = this._dashIdx;\n            var nDash = lineDash.length;\n\n            var x;\n            var y;\n\n            var tmpLen = 0;\n\n            if (offset < 0) {\n                // Convert to positive offset\n                offset = dashSum + offset;\n            }\n            offset %= dashSum;\n            // Bezier approx length\n            for (t = 0; t < 1; t += 0.1) {\n                dx = cubicAt(x0, x1, x2, x3, t + 0.1)\n                    - cubicAt(x0, x1, x2, x3, t);\n                dy = cubicAt(y0, y1, y2, y3, t + 0.1)\n                    - cubicAt(y0, y1, y2, y3, t);\n                bezierLen += mathSqrt(dx * dx + dy * dy);\n            }\n\n            // Find idx after add offset\n            for (; idx < nDash; idx++) {\n                tmpLen += lineDash[idx];\n                if (tmpLen > offset) {\n                    break;\n                }\n            }\n            t = (tmpLen - offset) / bezierLen;\n\n            while (t <= 1) {\n\n                x = cubicAt(x0, x1, x2, x3, t);\n                y = cubicAt(y0, y1, y2, y3, t);\n\n                // Use line to approximate dashed bezier\n                // Bad result if dash is long\n                idx % 2 ? ctx.moveTo(x, y)\n                    : ctx.lineTo(x, y);\n\n                t += lineDash[idx] / bezierLen;\n\n                idx = (idx + 1) % nDash;\n            }\n\n            // Finish the last segment and calculate the new offset\n            (idx % 2 !== 0) && ctx.lineTo(x3, y3);\n            dx = x3 - x;\n            dy = y3 - y;\n            this._dashOffset = -mathSqrt(dx * dx + dy * dy);\n        },\n\n        _dashedQuadraticTo: function (x1, y1, x2, y2) {\n            // Convert quadratic to cubic using degree elevation\n            var x3 = x2;\n            var y3 = y2;\n            x2 = (x2 + 2 * x1) / 3;\n            y2 = (y2 + 2 * y1) / 3;\n            x1 = (this._xi + 2 * x1) / 3;\n            y1 = (this._yi + 2 * y1) / 3;\n\n            this._dashedBezierTo(x1, y1, x2, y2, x3, y3);\n        },\n\n        /**\n         * 转成静态的 Float32Array 减少堆内存占用\n         * Convert dynamic array to static Float32Array\n         */\n        toStatic: function () {\n            var data = this.data;\n            if (data instanceof Array) {\n                data.length = this._len;\n                if (hasTypedArray) {\n                    this.data = new Float32Array(data);\n                }\n            }\n        },\n\n        /**\n         * @return {module:zrender/core/BoundingRect}\n         */\n        getBoundingRect: function () {\n            min[0] = min[1] = min2[0] = min2[1] = Number.MAX_VALUE;\n            max[0] = max[1] = max2[0] = max2[1] = -Number.MAX_VALUE;\n\n            var data = this.data;\n            var xi = 0;\n            var yi = 0;\n            var x0 = 0;\n            var y0 = 0;\n\n            for (var i = 0; i < data.length;) {\n                var cmd = data[i++];\n\n                if (i == 1) {\n                    // 如果第一个命令是 L, C, Q\n                    // 则 previous point 同绘制命令的第一个 point\n                    //\n                    // 第一个命令为 Arc 的情况下会在后面特殊处理\n                    xi = data[i];\n                    yi = data[i + 1];\n\n                    x0 = xi;\n                    y0 = yi;\n                }\n\n                switch (cmd) {\n                    case CMD.M:\n                        // moveTo 命令重新创建一个新的 subpath, 并且更新新的起点\n                        // 在 closePath 的时候使用\n                        x0 = data[i++];\n                        y0 = data[i++];\n                        xi = x0;\n                        yi = y0;\n                        min2[0] = x0;\n                        min2[1] = y0;\n                        max2[0] = x0;\n                        max2[1] = y0;\n                        break;\n                    case CMD.L:\n                        bbox.fromLine(xi, yi, data[i], data[i + 1], min2, max2);\n                        xi = data[i++];\n                        yi = data[i++];\n                        break;\n                    case CMD.C:\n                        bbox.fromCubic(\n                            xi, yi, data[i++], data[i++], data[i++], data[i++], data[i], data[i + 1],\n                            min2, max2\n                        );\n                        xi = data[i++];\n                        yi = data[i++];\n                        break;\n                    case CMD.Q:\n                        bbox.fromQuadratic(\n                            xi, yi, data[i++], data[i++], data[i], data[i + 1],\n                            min2, max2\n                        );\n                        xi = data[i++];\n                        yi = data[i++];\n                        break;\n                    case CMD.A:\n                        // TODO Arc 判断的开销比较大\n                        var cx = data[i++];\n                        var cy = data[i++];\n                        var rx = data[i++];\n                        var ry = data[i++];\n                        var startAngle = data[i++];\n                        var endAngle = data[i++] + startAngle;\n                        // TODO Arc 旋转\n                        var psi = data[i++];\n                        var anticlockwise = 1 - data[i++];\n\n                        if (i == 1) {\n                            // 直接使用 arc 命令\n                            // 第一个命令起点还未定义\n                            x0 = mathCos(startAngle) * rx + cx;\n                            y0 = mathSin(startAngle) * ry + cy;\n                        }\n\n                        bbox.fromArc(\n                            cx, cy, rx, ry, startAngle, endAngle,\n                            anticlockwise, min2, max2\n                        );\n\n                        xi = mathCos(endAngle) * rx + cx;\n                        yi = mathSin(endAngle) * ry + cy;\n                        break;\n                    case CMD.R:\n                        x0 = xi = data[i++];\n                        y0 = yi = data[i++];\n                        var width = data[i++];\n                        var height = data[i++];\n                        // Use fromLine\n                        bbox.fromLine(x0, y0, x0 + width, y0 + height, min2, max2);\n                        break;\n                    case CMD.Z:\n                        xi = x0;\n                        yi = y0;\n                        break;\n                }\n\n                // Union\n                vec2.min(min, min, min2);\n                vec2.max(max, max, max2);\n            }\n\n            // No data\n            if (i === 0) {\n                min[0] = min[1] = max[0] = max[1] = 0;\n            }\n\n            return new BoundingRect(\n                min[0], min[1], max[0] - min[0], max[1] - min[1]\n            );\n        },\n\n        /**\n         * Rebuild path from current data\n         * Rebuild path will not consider javascript implemented line dash.\n         * @param {CanvasRenderingContext} ctx\n         */\n        rebuildPath: function (ctx) {\n            var d = this.data;\n            var x0, y0;\n            var xi, yi;\n            var x, y;\n            var ux = this._ux;\n            var uy = this._uy;\n            var len = this._len;\n            for (var i = 0; i < len;) {\n                var cmd = d[i++];\n\n                if (i == 1) {\n                    // 如果第一个命令是 L, C, Q\n                    // 则 previous point 同绘制命令的第一个 point\n                    //\n                    // 第一个命令为 Arc 的情况下会在后面特殊处理\n                    xi = d[i];\n                    yi = d[i + 1];\n\n                    x0 = xi;\n                    y0 = yi;\n                }\n                switch (cmd) {\n                    case CMD.M:\n                        x0 = xi = d[i++];\n                        y0 = yi = d[i++];\n                        ctx.moveTo(xi, yi);\n                        break;\n                    case CMD.L:\n                        x = d[i++];\n                        y = d[i++];\n                        // Not draw too small seg between\n                        if (mathAbs(x - xi) > ux || mathAbs(y - yi) > uy || i === len - 1) {\n                            ctx.lineTo(x, y);\n                            xi = x;\n                            yi = y;\n                        }\n                        break;\n                    case CMD.C:\n                        ctx.bezierCurveTo(\n                            d[i++], d[i++], d[i++], d[i++], d[i++], d[i++]\n                        );\n                        xi = d[i - 2];\n                        yi = d[i - 1];\n                        break;\n                    case CMD.Q:\n                        ctx.quadraticCurveTo(d[i++], d[i++], d[i++], d[i++]);\n                        xi = d[i - 2];\n                        yi = d[i - 1];\n                        break;\n                    case CMD.A:\n                        var cx = d[i++];\n                        var cy = d[i++];\n                        var rx = d[i++];\n                        var ry = d[i++];\n                        var theta = d[i++];\n                        var dTheta = d[i++];\n                        var psi = d[i++];\n                        var fs = d[i++];\n                        var r = (rx > ry) ? rx : ry;\n                        var scaleX = (rx > ry) ? 1 : rx / ry;\n                        var scaleY = (rx > ry) ? ry / rx : 1;\n                        var isEllipse = Math.abs(rx - ry) > 1e-3;\n                        var endAngle = theta + dTheta;\n                        if (isEllipse) {\n                            ctx.translate(cx, cy);\n                            ctx.rotate(psi);\n                            ctx.scale(scaleX, scaleY);\n                            ctx.arc(0, 0, r, theta, endAngle, 1 - fs);\n                            ctx.scale(1 / scaleX, 1 / scaleY);\n                            ctx.rotate(-psi);\n                            ctx.translate(-cx, -cy);\n                        }\n                        else {\n                            ctx.arc(cx, cy, r, theta, endAngle, 1 - fs);\n                        }\n\n                        if (i == 1) {\n                            // 直接使用 arc 命令\n                            // 第一个命令起点还未定义\n                            x0 = mathCos(theta) * rx + cx;\n                            y0 = mathSin(theta) * ry + cy;\n                        }\n                        xi = mathCos(endAngle) * rx + cx;\n                        yi = mathSin(endAngle) * ry + cy;\n                        break;\n                    case CMD.R:\n                        x0 = xi = d[i];\n                        y0 = yi = d[i + 1];\n                        ctx.rect(d[i++], d[i++], d[i++], d[i++]);\n                        break;\n                    case CMD.Z:\n                        ctx.closePath();\n                        xi = x0;\n                        yi = y0;\n                }\n            }\n        }\n    };\n\n    PathProxy.CMD = CMD;\n\n    module.exports = PathProxy;\n\n\n/***/ }),\n/* 338 */\n/***/ (function(module, exports) {\n\n\n    var ArrayCtor = typeof Float32Array === 'undefined'\n        ? Array\n        : Float32Array;\n    /**\n     * 3x2矩阵操作类\n     * @exports zrender/tool/matrix\n     */\n    var matrix = {\n        /**\n         * 创建一个单位矩阵\n         * @return {Float32Array|Array.<number>}\n         */\n        create : function() {\n            var out = new ArrayCtor(6);\n            matrix.identity(out);\n\n            return out;\n        },\n        /**\n         * 设置矩阵为单位矩阵\n         * @param {Float32Array|Array.<number>} out\n         */\n        identity : function(out) {\n            out[0] = 1;\n            out[1] = 0;\n            out[2] = 0;\n            out[3] = 1;\n            out[4] = 0;\n            out[5] = 0;\n            return out;\n        },\n        /**\n         * 复制矩阵\n         * @param {Float32Array|Array.<number>} out\n         * @param {Float32Array|Array.<number>} m\n         */\n        copy: function(out, m) {\n            out[0] = m[0];\n            out[1] = m[1];\n            out[2] = m[2];\n            out[3] = m[3];\n            out[4] = m[4];\n            out[5] = m[5];\n            return out;\n        },\n        /**\n         * 矩阵相乘\n         * @param {Float32Array|Array.<number>} out\n         * @param {Float32Array|Array.<number>} m1\n         * @param {Float32Array|Array.<number>} m2\n         */\n        mul : function (out, m1, m2) {\n            // Consider matrix.mul(m, m2, m);\n            // where out is the same as m2.\n            // So use temp variable to escape error.\n            var out0 = m1[0] * m2[0] + m1[2] * m2[1];\n            var out1 = m1[1] * m2[0] + m1[3] * m2[1];\n            var out2 = m1[0] * m2[2] + m1[2] * m2[3];\n            var out3 = m1[1] * m2[2] + m1[3] * m2[3];\n            var out4 = m1[0] * m2[4] + m1[2] * m2[5] + m1[4];\n            var out5 = m1[1] * m2[4] + m1[3] * m2[5] + m1[5];\n            out[0] = out0;\n            out[1] = out1;\n            out[2] = out2;\n            out[3] = out3;\n            out[4] = out4;\n            out[5] = out5;\n            return out;\n        },\n        /**\n         * 平移变换\n         * @param {Float32Array|Array.<number>} out\n         * @param {Float32Array|Array.<number>} a\n         * @param {Float32Array|Array.<number>} v\n         */\n        translate : function(out, a, v) {\n            out[0] = a[0];\n            out[1] = a[1];\n            out[2] = a[2];\n            out[3] = a[3];\n            out[4] = a[4] + v[0];\n            out[5] = a[5] + v[1];\n            return out;\n        },\n        /**\n         * 旋转变换\n         * @param {Float32Array|Array.<number>} out\n         * @param {Float32Array|Array.<number>} a\n         * @param {number} rad\n         */\n        rotate : function(out, a, rad) {\n            var aa = a[0];\n            var ac = a[2];\n            var atx = a[4];\n            var ab = a[1];\n            var ad = a[3];\n            var aty = a[5];\n            var st = Math.sin(rad);\n            var ct = Math.cos(rad);\n\n            out[0] = aa * ct + ab * st;\n            out[1] = -aa * st + ab * ct;\n            out[2] = ac * ct + ad * st;\n            out[3] = -ac * st + ct * ad;\n            out[4] = ct * atx + st * aty;\n            out[5] = ct * aty - st * atx;\n            return out;\n        },\n        /**\n         * 缩放变换\n         * @param {Float32Array|Array.<number>} out\n         * @param {Float32Array|Array.<number>} a\n         * @param {Float32Array|Array.<number>} v\n         */\n        scale : function(out, a, v) {\n            var vx = v[0];\n            var vy = v[1];\n            out[0] = a[0] * vx;\n            out[1] = a[1] * vy;\n            out[2] = a[2] * vx;\n            out[3] = a[3] * vy;\n            out[4] = a[4] * vx;\n            out[5] = a[5] * vy;\n            return out;\n        },\n        /**\n         * 求逆矩阵\n         * @param {Float32Array|Array.<number>} out\n         * @param {Float32Array|Array.<number>} a\n         */\n        invert : function(out, a) {\n\n            var aa = a[0];\n            var ac = a[2];\n            var atx = a[4];\n            var ab = a[1];\n            var ad = a[3];\n            var aty = a[5];\n\n            var det = aa * ad - ab * ac;\n            if (!det) {\n                return null;\n            }\n            det = 1.0 / det;\n\n            out[0] = ad * det;\n            out[1] = -ab * det;\n            out[2] = -ac * det;\n            out[3] = aa * det;\n            out[4] = (ac * aty - ad * atx) * det;\n            out[5] = (ab * atx - aa * aty) * det;\n            return out;\n        }\n    };\n\n    module.exports = matrix;\n\n\n\n/***/ }),\n/* 339 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// TODO Parse shadow style\n// TODO Only shallow path support\n\n    var zrUtil = __webpack_require__(315);\n\n    module.exports = function (properties) {\n        // Normalize\n        for (var i = 0; i < properties.length; i++) {\n            if (!properties[i][1]) {\n               properties[i][1] = properties[i][0];\n            }\n        }\n        return function (excludes) {\n            var style = {};\n            for (var i = 0; i < properties.length; i++) {\n                var propName = properties[i][1];\n                if (excludes && zrUtil.indexOf(excludes, propName) >= 0) {\n                    continue;\n                }\n                var val = this.getShallow(propName);\n                if (val != null) {\n                    style[properties[i][0]] = val;\n                }\n            }\n            return style;\n        };\n    };\n\n\n/***/ }),\n/* 340 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n\n    var zrUtil = __webpack_require__(315);\n\n    /**\n     * Interface of Coordinate System Class\n     *\n     * create:\n     *     @param {module:echarts/model/Global} ecModel\n     *     @param {module:echarts/ExtensionAPI} api\n     *     @return {Object} coordinate system instance\n     *\n     * update:\n     *     @param {module:echarts/model/Global} ecModel\n     *     @param {module:echarts/ExtensionAPI} api\n     *\n     * convertToPixel:\n     * convertFromPixel:\n     *     These two methods is also responsible for determine whether this\n     *     coodinate system is applicable to the given `finder`.\n     *     Each coordinate system will be tried, util one returns none\n     *     null/undefined value.\n     *     @param {module:echarts/model/Global} ecModel\n     *     @param {Object} finder\n     *     @param {Array|number} value\n     *     @return {Array|number} convert result.\n     *\n     * containPoint:\n     *     @param {Array.<number>} point In pixel coordinate system.\n     *     @return {boolean}\n     */\n\n    var coordinateSystemCreators = {};\n\n    function CoordinateSystemManager() {\n\n        this._coordinateSystems = [];\n    }\n\n    CoordinateSystemManager.prototype = {\n\n        constructor: CoordinateSystemManager,\n\n        create: function (ecModel, api) {\n            var coordinateSystems = [];\n            zrUtil.each(coordinateSystemCreators, function (creater, type) {\n                var list = creater.create(ecModel, api);\n                coordinateSystems = coordinateSystems.concat(list || []);\n            });\n\n            this._coordinateSystems = coordinateSystems;\n        },\n\n        update: function (ecModel, api) {\n            zrUtil.each(this._coordinateSystems, function (coordSys) {\n                // FIXME MUST have\n                coordSys.update && coordSys.update(ecModel, api);\n            });\n        },\n\n        getCoordinateSystems: function () {\n            return this._coordinateSystems.slice();\n        }\n    };\n\n    CoordinateSystemManager.register = function (type, coordinateSystemCreator) {\n        coordinateSystemCreators[type] = coordinateSystemCreator;\n    };\n\n    CoordinateSystemManager.get = function (type) {\n        return coordinateSystemCreators[type];\n    };\n\n    module.exports = CoordinateSystemManager;\n\n\n/***/ }),\n/* 341 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var OrdinalScale = __webpack_require__(413);\n    var IntervalScale = __webpack_require__(342);\n    __webpack_require__(414);\n    __webpack_require__(412);\n    var Scale = __webpack_require__(334);\n\n    var numberUtil = __webpack_require__(318);\n    var zrUtil = __webpack_require__(315);\n    var textContain = __webpack_require__(332);\n    var axisHelper = {};\n\n    /**\n     * Get axis scale extent before niced.\n     * Item of returned array can only be number (including Infinity and NaN).\n     */\n    axisHelper.getScaleExtent = function (axis, model) {\n        var scale = axis.scale;\n        var scaleType = scale.type;\n\n        var min = model.getMin();\n        var max = model.getMax();\n        var fixMin = min != null;\n        var fixMax = max != null;\n        var originalExtent = scale.getExtent();\n\n        var axisDataLen;\n        var boundaryGap;\n        var span;\n        if (scaleType === 'ordinal') {\n            axisDataLen = (model.get('data') || []).length;\n        }\n        else {\n            boundaryGap = model.get('boundaryGap');\n            if (!zrUtil.isArray(boundaryGap)) {\n                boundaryGap = [boundaryGap || 0, boundaryGap || 0];\n            }\n            boundaryGap[0] = numberUtil.parsePercent(boundaryGap[0], 1);\n            boundaryGap[1] = numberUtil.parsePercent(boundaryGap[1], 1);\n            span = originalExtent[1] - originalExtent[0];\n        }\n\n        if (min == null) {\n            min = scaleType === 'ordinal'\n                ? (axisDataLen ? 0 : NaN)\n                : originalExtent[0] - boundaryGap[0] * span;\n        }\n        if (max == null) {\n            max = scaleType === 'ordinal'\n                ? (axisDataLen ? axisDataLen - 1 : NaN)\n                : originalExtent[1] + boundaryGap[1] * span;\n        }\n\n        if (min === 'dataMin') {\n            min = originalExtent[0];\n        }\n        if (max === 'dataMax') {\n            max = originalExtent[1];\n        }\n\n        (min == null || !isFinite(min)) && (min = NaN);\n        (max == null || !isFinite(max)) && (max = NaN);\n\n        axis.setBlank(zrUtil.eqNaN(min) || zrUtil.eqNaN(max));\n\n        // Evaluate if axis needs cross zero\n        if (model.getNeedCrossZero()) {\n            // Axis is over zero and min is not set\n            if (min > 0 && max > 0 && !fixMin) {\n                min = 0;\n            }\n            // Axis is under zero and max is not set\n            if (min < 0 && max < 0 && !fixMax) {\n                max = 0;\n            }\n        }\n\n        return [min, max];\n    };\n\n    axisHelper.niceScaleExtent = function (axis, model) {\n        var scale = axis.scale;\n        var extent = axisHelper.getScaleExtent(axis, model);\n        var fixMin = model.getMin() != null;\n        var fixMax = model.getMax() != null;\n        var splitNumber = model.get('splitNumber');\n\n        if (scale.type === 'log') {\n            scale.base = model.get('logBase');\n        }\n\n        scale.setExtent(extent[0], extent[1]);\n        scale.niceExtent(splitNumber, fixMin, fixMax);\n\n        // Use minInterval to constraint the calculated interval.\n        // If calculated interval is less than minInterval. increase the interval quantity until\n        // it is larger than minInterval.\n        // For example:\n        //  minInterval is 1, calculated interval is 0.2, so increase it to be 1. In this way we can get\n        //  an integer axis.\n        var minInterval = model.get('minInterval');\n        if (isFinite(minInterval) && !fixMin && !fixMax && scale.type === 'interval') {\n            var interval = scale.getInterval();\n            var intervalScale = Math.max(Math.abs(interval), minInterval) / interval;\n            // while (interval < minInterval) {\n            //     var quantity = numberUtil.quantity(interval);\n            //     interval = quantity * 10;\n            //     scaleQuantity *= 10;\n            // }\n            extent = scale.getExtent();\n            var origin = (extent[1] + extent[0]) / 2;\n            scale.setExtent(\n                intervalScale * (extent[0] - origin) + origin,\n                intervalScale * (extent[1] - origin) + origin\n            );\n            scale.niceExtent(splitNumber);\n        }\n\n        // If some one specified the min, max. And the default calculated interval\n        // is not good enough. He can specify the interval. It is often appeared\n        // in angle axis with angle 0 - 360. Interval calculated in interval scale is hard\n        // to be 60.\n        // FIXME\n        var interval = model.get('interval');\n        if (interval != null) {\n            scale.setInterval && scale.setInterval(interval);\n        }\n    };\n\n    /**\n     * @param {module:echarts/model/Model} model\n     * @param {string} [axisType] Default retrieve from model.type\n     * @return {module:echarts/scale/*}\n     */\n    axisHelper.createScaleByModel = function(model, axisType) {\n        axisType = axisType || model.get('type');\n        if (axisType) {\n            switch (axisType) {\n                // Buildin scale\n                case 'category':\n                    return new OrdinalScale(\n                        model.getCategories(), [Infinity, -Infinity]\n                    );\n                case 'value':\n                    return new IntervalScale();\n                // Extended scale, like time and log\n                default:\n                    return (Scale.getClass(axisType) || IntervalScale).create(model);\n            }\n        }\n    };\n\n    /**\n     * Check if the axis corss 0\n     */\n    axisHelper.ifAxisCrossZero = function (axis) {\n        var dataExtent = axis.scale.getExtent();\n        var min = dataExtent[0];\n        var max = dataExtent[1];\n        return !((min > 0 && max > 0) || (min < 0 && max < 0));\n    };\n\n    /**\n     * @param {Array.<number>} tickCoords In axis self coordinate.\n     * @param {Array.<string>} labels\n     * @param {string} font\n     * @param {boolean} isAxisHorizontal\n     * @return {number}\n     */\n    axisHelper.getAxisLabelInterval = function (tickCoords, labels, font, isAxisHorizontal) {\n        // FIXME\n        // 不同角的axis和label，不只是horizontal和vertical.\n\n        var textSpaceTakenRect;\n        var autoLabelInterval = 0;\n        var accumulatedLabelInterval = 0;\n\n        var step = 1;\n        if (labels.length > 40) {\n            // Simple optimization for large amount of labels\n            step = Math.floor(labels.length / 40);\n        }\n\n        for (var i = 0; i < tickCoords.length; i += step) {\n            var tickCoord = tickCoords[i];\n            var rect = textContain.getBoundingRect(\n                labels[i], font, 'center', 'top'\n            );\n            rect[isAxisHorizontal ? 'x' : 'y'] += tickCoord;\n            // FIXME Magic number 1.5\n            rect[isAxisHorizontal ? 'width' : 'height'] *= 1.3;\n            if (!textSpaceTakenRect) {\n                textSpaceTakenRect = rect.clone();\n            }\n            // There is no space for current label;\n            else if (textSpaceTakenRect.intersect(rect)) {\n                accumulatedLabelInterval++;\n                autoLabelInterval = Math.max(autoLabelInterval, accumulatedLabelInterval);\n            }\n            else {\n                textSpaceTakenRect.union(rect);\n                // Reset\n                accumulatedLabelInterval = 0;\n            }\n        }\n        if (autoLabelInterval === 0 && step > 1) {\n            return step;\n        }\n        return (autoLabelInterval + 1) * step - 1;\n    };\n\n    /**\n     * @param {Object} axis\n     * @param {Function} labelFormatter\n     * @return {Array.<string>}\n     */\n    axisHelper.getFormattedLabels = function (axis, labelFormatter) {\n        var scale = axis.scale;\n        var labels = scale.getTicksLabels();\n        var ticks = scale.getTicks();\n        if (typeof labelFormatter === 'string') {\n            labelFormatter = (function (tpl) {\n                return function (val) {\n                    return tpl.replace('{value}', val != null ? val : '');\n                };\n            })(labelFormatter);\n            // Consider empty array\n            return zrUtil.map(labels, labelFormatter);\n        }\n        else if (typeof labelFormatter === 'function') {\n            return zrUtil.map(ticks, function (tick, idx) {\n                return labelFormatter(\n                    axis.type === 'category' ? scale.getLabel(tick) : tick,\n                    idx\n                );\n            }, this);\n        }\n        else {\n            return labels;\n        }\n    };\n\n    module.exports = axisHelper;\n\n\n/***/ }),\n/* 342 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * Interval scale\n * @module echarts/scale/Interval\n */\n\n\n\n    var numberUtil = __webpack_require__(318);\n    var formatUtil = __webpack_require__(322);\n    var Scale = __webpack_require__(334);\n\n    var mathFloor = Math.floor;\n    var mathCeil = Math.ceil;\n\n    var getPrecisionSafe = numberUtil.getPrecisionSafe;\n    var roundingErrorFix = numberUtil.round;\n    /**\n     * @alias module:echarts/coord/scale/Interval\n     * @constructor\n     */\n    var IntervalScale = Scale.extend({\n\n        type: 'interval',\n\n        _interval: 0,\n\n        setExtent: function (start, end) {\n            var thisExtent = this._extent;\n            //start,end may be a Number like '25',so...\n            if (!isNaN(start)) {\n                thisExtent[0] = parseFloat(start);\n            }\n            if (!isNaN(end)) {\n                thisExtent[1] = parseFloat(end);\n            }\n        },\n\n        unionExtent: function (other) {\n            var extent = this._extent;\n            other[0] < extent[0] && (extent[0] = other[0]);\n            other[1] > extent[1] && (extent[1] = other[1]);\n\n            // unionExtent may called by it's sub classes\n            IntervalScale.prototype.setExtent.call(this, extent[0], extent[1]);\n        },\n        /**\n         * Get interval\n         */\n        getInterval: function () {\n            if (!this._interval) {\n                this.niceTicks();\n            }\n            return this._interval;\n        },\n\n        /**\n         * Set interval\n         */\n        setInterval: function (interval) {\n            this._interval = interval;\n            // Dropped auto calculated niceExtent and use user setted extent\n            // We assume user wan't to set both interval, min, max to get a better result\n            this._niceExtent = this._extent.slice();\n        },\n\n        /**\n         * @return {Array.<number>}\n         */\n        getTicks: function () {\n            if (!this._interval) {\n                this.niceTicks();\n            }\n            var interval = this._interval;\n            var extent = this._extent;\n            var ticks = [];\n\n            // Consider this case: using dataZoom toolbox, zoom and zoom.\n            var safeLimit = 10000;\n\n            if (interval) {\n                var niceExtent = this._niceExtent;\n                var precision = getPrecisionSafe(interval) + 2;\n\n                if (extent[0] < niceExtent[0]) {\n                    ticks.push(extent[0]);\n                }\n                var tick = niceExtent[0];\n\n                while (tick <= niceExtent[1]) {\n                    ticks.push(tick);\n                    // Avoid rounding error\n                    tick = roundingErrorFix(tick + interval, precision);\n                    if (ticks.length > safeLimit) {\n                        return [];\n                    }\n                }\n                // Consider this case: the last item of ticks is smaller\n                // than niceExtent[1] and niceExtent[1] === extent[1].\n                if (extent[1] > (ticks.length ? ticks[ticks.length - 1] : niceExtent[1])) {\n                    ticks.push(extent[1]);\n                }\n            }\n\n            return ticks;\n        },\n\n        /**\n         * @return {Array.<string>}\n         */\n        getTicksLabels: function () {\n            var labels = [];\n            var ticks = this.getTicks();\n            for (var i = 0; i < ticks.length; i++) {\n                labels.push(this.getLabel(ticks[i]));\n            }\n            return labels;\n        },\n\n        /**\n         * @param {number} n\n         * @return {number}\n         */\n        getLabel: function (data) {\n            return formatUtil.addCommas(data);\n        },\n\n        /**\n         * Update interval and extent of intervals for nice ticks\n         *\n         * @param {number} [splitNumber = 5] Desired number of ticks\n         */\n        niceTicks: function (splitNumber) {\n            splitNumber = splitNumber || 5;\n            var extent = this._extent;\n            var span = extent[1] - extent[0];\n            if (!isFinite(span)) {\n                return;\n            }\n            // User may set axis min 0 and data are all negative\n            // FIXME If it needs to reverse ?\n            if (span < 0) {\n                span = -span;\n                extent.reverse();\n            }\n\n            // From \"Nice Numbers for Graph Labels\" of Graphic Gems\n            // var niceSpan = numberUtil.nice(span, false);\n            var step = roundingErrorFix(\n                numberUtil.nice(span / splitNumber, true),\n                Math.max(\n                    getPrecisionSafe(extent[0]),\n                    getPrecisionSafe(extent[1])\n                // extent may be [0, 1], and step should have 1 more digits.\n                // To make it safe we add 2 more digits\n                ) + 2\n            );\n\n            var precision = getPrecisionSafe(step) + 2;\n            // Niced extent inside original extent\n            var niceExtent = [\n                roundingErrorFix(mathCeil(extent[0] / step) * step, precision),\n                roundingErrorFix(mathFloor(extent[1] / step) * step, precision)\n            ];\n\n            this._interval = step;\n            this._niceExtent = niceExtent;\n        },\n\n        /**\n         * Nice extent.\n         * @param {number} [splitNumber = 5] Given approx tick number\n         * @param {boolean} [fixMin=false]\n         * @param {boolean} [fixMax=false]\n         */\n        niceExtent: function (splitNumber, fixMin, fixMax) {\n            var extent = this._extent;\n            // If extent start and end are same, expand them\n            if (extent[0] === extent[1]) {\n                if (extent[0] !== 0) {\n                    // Expand extent\n                    var expandSize = extent[0];\n                    // In the fowllowing case\n                    //      Axis has been fixed max 100\n                    //      Plus data are all 100 and axis extent are [100, 100].\n                    // Extend to the both side will cause expanded max is larger than fixed max.\n                    // So only expand to the smaller side.\n                    if (!fixMax) {\n                        extent[1] += expandSize / 2;\n                        extent[0] -= expandSize / 2;\n                    }\n                    else {\n                        extent[0] -= expandSize / 2;\n                    }\n                }\n                else {\n                    extent[1] = 1;\n                }\n            }\n            var span = extent[1] - extent[0];\n            // If there are no data and extent are [Infinity, -Infinity]\n            if (!isFinite(span)) {\n                extent[0] = 0;\n                extent[1] = 1;\n            }\n\n            this.niceTicks(splitNumber);\n\n            // var extent = this._extent;\n            var interval = this._interval;\n\n            if (!fixMin) {\n                extent[0] = roundingErrorFix(mathFloor(extent[0] / interval) * interval);\n            }\n            if (!fixMax) {\n                extent[1] = roundingErrorFix(mathCeil(extent[1] / interval) * interval);\n            }\n        }\n    });\n\n    /**\n     * @return {module:echarts/scale/Time}\n     */\n    IntervalScale.create = function () {\n        return new IntervalScale();\n    };\n\n    module.exports = IntervalScale;\n\n\n\n/***/ }),\n/* 343 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var zrUtil = __webpack_require__(315);\n    var clazz = __webpack_require__(326);\n\n    var parseClassType = clazz.parseClassType;\n\n    var base = 0;\n\n    var componentUtil = {};\n\n    var DELIMITER = '_';\n\n    /**\n     * @public\n     * @param {string} type\n     * @return {string}\n     */\n    componentUtil.getUID = function (type) {\n        // Considering the case of crossing js context,\n        // use Math.random to make id as unique as possible.\n        return [(type || ''), base++, Math.random()].join(DELIMITER);\n    };\n\n    /**\n     * @inner\n     */\n    componentUtil.enableSubTypeDefaulter = function (entity) {\n\n        var subTypeDefaulters = {};\n\n        entity.registerSubTypeDefaulter = function (componentType, defaulter) {\n            componentType = parseClassType(componentType);\n            subTypeDefaulters[componentType.main] = defaulter;\n        };\n\n        entity.determineSubType = function (componentType, option) {\n            var type = option.type;\n            if (!type) {\n                var componentTypeMain = parseClassType(componentType).main;\n                if (entity.hasSubTypes(componentType) && subTypeDefaulters[componentTypeMain]) {\n                    type = subTypeDefaulters[componentTypeMain](option);\n                }\n            }\n            return type;\n        };\n\n        return entity;\n    };\n\n    /**\n     * Topological travel on Activity Network (Activity On Vertices).\n     * Dependencies is defined in Model.prototype.dependencies, like ['xAxis', 'yAxis'].\n     *\n     * If 'xAxis' or 'yAxis' is absent in componentTypeList, just ignore it in topology.\n     *\n     * If there is circle dependencey, Error will be thrown.\n     *\n     */\n    componentUtil.enableTopologicalTravel = function (entity, dependencyGetter) {\n\n        /**\n         * @public\n         * @param {Array.<string>} targetNameList Target Component type list.\n         *                                           Can be ['aa', 'bb', 'aa.xx']\n         * @param {Array.<string>} fullNameList By which we can build dependency graph.\n         * @param {Function} callback Params: componentType, dependencies.\n         * @param {Object} context Scope of callback.\n         */\n        entity.topologicalTravel = function (targetNameList, fullNameList, callback, context) {\n            if (!targetNameList.length) {\n                return;\n            }\n\n            var result = makeDepndencyGraph(fullNameList);\n            var graph = result.graph;\n            var stack = result.noEntryList;\n\n            var targetNameSet = {};\n            zrUtil.each(targetNameList, function (name) {\n                targetNameSet[name] = true;\n            });\n\n            while (stack.length) {\n                var currComponentType = stack.pop();\n                var currVertex = graph[currComponentType];\n                var isInTargetNameSet = !!targetNameSet[currComponentType];\n                if (isInTargetNameSet) {\n                    callback.call(context, currComponentType, currVertex.originalDeps.slice());\n                    delete targetNameSet[currComponentType];\n                }\n                zrUtil.each(\n                    currVertex.successor,\n                    isInTargetNameSet ? removeEdgeAndAdd : removeEdge\n                );\n            }\n\n            zrUtil.each(targetNameSet, function () {\n                throw new Error('Circle dependency may exists');\n            });\n\n            function removeEdge(succComponentType) {\n                graph[succComponentType].entryCount--;\n                if (graph[succComponentType].entryCount === 0) {\n                    stack.push(succComponentType);\n                }\n            }\n\n            // Consider this case: legend depends on series, and we call\n            // chart.setOption({series: [...]}), where only series is in option.\n            // If we do not have 'removeEdgeAndAdd', legendModel.mergeOption will\n            // not be called, but only sereis.mergeOption is called. Thus legend\n            // have no chance to update its local record about series (like which\n            // name of series is available in legend).\n            function removeEdgeAndAdd(succComponentType) {\n                targetNameSet[succComponentType] = true;\n                removeEdge(succComponentType);\n            }\n        };\n\n        /**\n         * DepndencyGraph: {Object}\n         * key: conponentType,\n         * value: {\n         *     successor: [conponentTypes...],\n         *     originalDeps: [conponentTypes...],\n         *     entryCount: {number}\n         * }\n         */\n        function makeDepndencyGraph(fullNameList) {\n            var graph = {};\n            var noEntryList = [];\n\n            zrUtil.each(fullNameList, function (name) {\n\n                var thisItem = createDependencyGraphItem(graph, name);\n                var originalDeps = thisItem.originalDeps = dependencyGetter(name);\n\n                var availableDeps = getAvailableDependencies(originalDeps, fullNameList);\n                thisItem.entryCount = availableDeps.length;\n                if (thisItem.entryCount === 0) {\n                    noEntryList.push(name);\n                }\n\n                zrUtil.each(availableDeps, function (dependentName) {\n                    if (zrUtil.indexOf(thisItem.predecessor, dependentName) < 0) {\n                        thisItem.predecessor.push(dependentName);\n                    }\n                    var thatItem = createDependencyGraphItem(graph, dependentName);\n                    if (zrUtil.indexOf(thatItem.successor, dependentName) < 0) {\n                        thatItem.successor.push(name);\n                    }\n                });\n            });\n\n            return {graph: graph, noEntryList: noEntryList};\n        }\n\n        function createDependencyGraphItem(graph, name) {\n            if (!graph[name]) {\n                graph[name] = {predecessor: [], successor: []};\n            }\n            return graph[name];\n        }\n\n        function getAvailableDependencies(originalDeps, fullNameList) {\n            var availableDeps = [];\n            zrUtil.each(originalDeps, function (dep) {\n                zrUtil.indexOf(fullNameList, dep) >= 0 && availableDeps.push(dep);\n            });\n            return availableDeps;\n        }\n    };\n\n    module.exports = componentUtil;\n\n\n/***/ }),\n/* 344 */\n/***/ (function(module, exports) {\n\n// https://github.com/mziccard/node-timsort\n\n    var DEFAULT_MIN_MERGE = 32;\n\n    var DEFAULT_MIN_GALLOPING = 7;\n\n    var DEFAULT_TMP_STORAGE_LENGTH = 256;\n\n    function minRunLength(n) {\n        var r = 0;\n\n        while (n >= DEFAULT_MIN_MERGE) {\n            r |= n & 1;\n            n >>= 1;\n        }\n\n        return n + r;\n    }\n\n    function makeAscendingRun(array, lo, hi, compare) {\n        var runHi = lo + 1;\n\n        if (runHi === hi) {\n            return 1;\n        }\n\n        if (compare(array[runHi++], array[lo]) < 0) {\n            while (runHi < hi && compare(array[runHi], array[runHi - 1]) < 0) {\n                runHi++;\n            }\n\n            reverseRun(array, lo, runHi);\n        }\n        else {\n            while (runHi < hi && compare(array[runHi], array[runHi - 1]) >= 0) {\n                runHi++;\n            }\n        }\n\n        return runHi - lo;\n    }\n\n    function reverseRun(array, lo, hi) {\n        hi--;\n\n        while (lo < hi) {\n            var t = array[lo];\n            array[lo++] = array[hi];\n            array[hi--] = t;\n        }\n    }\n\n    function binaryInsertionSort(array, lo, hi, start, compare) {\n        if (start === lo) {\n            start++;\n        }\n\n        for (; start < hi; start++) {\n            var pivot = array[start];\n\n            var left = lo;\n            var right = start;\n            var mid;\n\n            while (left < right) {\n                mid = left + right >>> 1;\n\n                if (compare(pivot, array[mid]) < 0) {\n                    right = mid;\n                }\n                else {\n                    left = mid + 1;\n                }\n            }\n\n            var n = start - left;\n\n            switch (n) {\n                case 3:\n                    array[left + 3] = array[left + 2];\n\n                case 2:\n                    array[left + 2] = array[left + 1];\n\n                case 1:\n                    array[left + 1] = array[left];\n                    break;\n                default:\n                    while (n > 0) {\n                        array[left + n] = array[left + n - 1];\n                        n--;\n                    }\n            }\n\n            array[left] = pivot;\n        }\n    }\n\n    function gallopLeft(value, array, start, length, hint, compare) {\n        var lastOffset = 0;\n        var maxOffset = 0;\n        var offset = 1;\n\n        if (compare(value, array[start + hint]) > 0) {\n            maxOffset = length - hint;\n\n            while (offset < maxOffset && compare(value, array[start + hint + offset]) > 0) {\n                lastOffset = offset;\n                offset = (offset << 1) + 1;\n\n                if (offset <= 0) {\n                    offset = maxOffset;\n                }\n            }\n\n            if (offset > maxOffset) {\n                offset = maxOffset;\n            }\n\n            lastOffset += hint;\n            offset += hint;\n        }\n        else {\n            maxOffset = hint + 1;\n            while (offset < maxOffset && compare(value, array[start + hint - offset]) <= 0) {\n                lastOffset = offset;\n                offset = (offset << 1) + 1;\n\n                if (offset <= 0) {\n                    offset = maxOffset;\n                }\n            }\n            if (offset > maxOffset) {\n                offset = maxOffset;\n            }\n\n            var tmp = lastOffset;\n            lastOffset = hint - offset;\n            offset = hint - tmp;\n        }\n\n        lastOffset++;\n        while (lastOffset < offset) {\n            var m = lastOffset + (offset - lastOffset >>> 1);\n\n            if (compare(value, array[start + m]) > 0) {\n                lastOffset = m + 1;\n            }\n            else {\n                offset = m;\n            }\n        }\n        return offset;\n    }\n\n    function gallopRight(value, array, start, length, hint, compare) {\n        var lastOffset = 0;\n        var maxOffset = 0;\n        var offset = 1;\n\n        if (compare(value, array[start + hint]) < 0) {\n            maxOffset = hint + 1;\n\n            while (offset < maxOffset && compare(value, array[start + hint - offset]) < 0) {\n                lastOffset = offset;\n                offset = (offset << 1) + 1;\n\n                if (offset <= 0) {\n                    offset = maxOffset;\n                }\n            }\n\n            if (offset > maxOffset) {\n                offset = maxOffset;\n            }\n\n            var tmp = lastOffset;\n            lastOffset = hint - offset;\n            offset = hint - tmp;\n        }\n        else {\n            maxOffset = length - hint;\n\n            while (offset < maxOffset && compare(value, array[start + hint + offset]) >= 0) {\n                lastOffset = offset;\n                offset = (offset << 1) + 1;\n\n                if (offset <= 0) {\n                    offset = maxOffset;\n                }\n            }\n\n            if (offset > maxOffset) {\n                offset = maxOffset;\n            }\n\n            lastOffset += hint;\n            offset += hint;\n        }\n\n        lastOffset++;\n\n        while (lastOffset < offset) {\n            var m = lastOffset + (offset - lastOffset >>> 1);\n\n            if (compare(value, array[start + m]) < 0) {\n                offset = m;\n            }\n            else {\n                lastOffset = m + 1;\n            }\n        }\n\n        return offset;\n    }\n\n    function TimSort(array, compare) {\n        var minGallop = DEFAULT_MIN_GALLOPING;\n        var length = 0;\n        var tmpStorageLength = DEFAULT_TMP_STORAGE_LENGTH;\n        var stackLength = 0;\n        var runStart;\n        var runLength;\n        var stackSize = 0;\n\n        length = array.length;\n\n        if (length < 2 * DEFAULT_TMP_STORAGE_LENGTH) {\n            tmpStorageLength = length >>> 1;\n        }\n\n        var tmp = [];\n\n        stackLength = length < 120 ? 5 : length < 1542 ? 10 : length < 119151 ? 19 : 40;\n\n        runStart = [];\n        runLength = [];\n\n        function pushRun(_runStart, _runLength) {\n            runStart[stackSize] = _runStart;\n            runLength[stackSize] = _runLength;\n            stackSize += 1;\n        }\n\n        function mergeRuns() {\n            while (stackSize > 1) {\n                var n = stackSize - 2;\n\n                if (n >= 1 && runLength[n - 1] <= runLength[n] + runLength[n + 1] || n >= 2 && runLength[n - 2] <= runLength[n] + runLength[n - 1]) {\n                    if (runLength[n - 1] < runLength[n + 1]) {\n                        n--;\n                    }\n                }\n                else if (runLength[n] > runLength[n + 1]) {\n                    break;\n                }\n                mergeAt(n);\n            }\n        }\n\n        function forceMergeRuns() {\n            while (stackSize > 1) {\n                var n = stackSize - 2;\n\n                if (n > 0 && runLength[n - 1] < runLength[n + 1]) {\n                    n--;\n                }\n\n                mergeAt(n);\n            }\n        }\n\n        function mergeAt(i) {\n            var start1 = runStart[i];\n            var length1 = runLength[i];\n            var start2 = runStart[i + 1];\n            var length2 = runLength[i + 1];\n\n            runLength[i] = length1 + length2;\n\n            if (i === stackSize - 3) {\n                runStart[i + 1] = runStart[i + 2];\n                runLength[i + 1] = runLength[i + 2];\n            }\n\n            stackSize--;\n\n            var k = gallopRight(array[start2], array, start1, length1, 0, compare);\n            start1 += k;\n            length1 -= k;\n\n            if (length1 === 0) {\n                return;\n            }\n\n            length2 = gallopLeft(array[start1 + length1 - 1], array, start2, length2, length2 - 1, compare);\n\n            if (length2 === 0) {\n                return;\n            }\n\n            if (length1 <= length2) {\n                mergeLow(start1, length1, start2, length2);\n            }\n            else {\n                mergeHigh(start1, length1, start2, length2);\n            }\n        }\n\n        function mergeLow(start1, length1, start2, length2) {\n            var i = 0;\n\n            for (i = 0; i < length1; i++) {\n                tmp[i] = array[start1 + i];\n            }\n\n            var cursor1 = 0;\n            var cursor2 = start2;\n            var dest = start1;\n\n            array[dest++] = array[cursor2++];\n\n            if (--length2 === 0) {\n                for (i = 0; i < length1; i++) {\n                    array[dest + i] = tmp[cursor1 + i];\n                }\n                return;\n            }\n\n            if (length1 === 1) {\n                for (i = 0; i < length2; i++) {\n                    array[dest + i] = array[cursor2 + i];\n                }\n                array[dest + length2] = tmp[cursor1];\n                return;\n            }\n\n            var _minGallop = minGallop;\n            var count1, count2, exit;\n\n            while (1) {\n                count1 = 0;\n                count2 = 0;\n                exit = false;\n\n                do {\n                    if (compare(array[cursor2], tmp[cursor1]) < 0) {\n                        array[dest++] = array[cursor2++];\n                        count2++;\n                        count1 = 0;\n\n                        if (--length2 === 0) {\n                            exit = true;\n                            break;\n                        }\n                    }\n                    else {\n                        array[dest++] = tmp[cursor1++];\n                        count1++;\n                        count2 = 0;\n                        if (--length1 === 1) {\n                            exit = true;\n                            break;\n                        }\n                    }\n                } while ((count1 | count2) < _minGallop);\n\n                if (exit) {\n                    break;\n                }\n\n                do {\n                    count1 = gallopRight(array[cursor2], tmp, cursor1, length1, 0, compare);\n\n                    if (count1 !== 0) {\n                        for (i = 0; i < count1; i++) {\n                            array[dest + i] = tmp[cursor1 + i];\n                        }\n\n                        dest += count1;\n                        cursor1 += count1;\n                        length1 -= count1;\n                        if (length1 <= 1) {\n                            exit = true;\n                            break;\n                        }\n                    }\n\n                    array[dest++] = array[cursor2++];\n\n                    if (--length2 === 0) {\n                        exit = true;\n                        break;\n                    }\n\n                    count2 = gallopLeft(tmp[cursor1], array, cursor2, length2, 0, compare);\n\n                    if (count2 !== 0) {\n                        for (i = 0; i < count2; i++) {\n                            array[dest + i] = array[cursor2 + i];\n                        }\n\n                        dest += count2;\n                        cursor2 += count2;\n                        length2 -= count2;\n\n                        if (length2 === 0) {\n                            exit = true;\n                            break;\n                        }\n                    }\n                    array[dest++] = tmp[cursor1++];\n\n                    if (--length1 === 1) {\n                        exit = true;\n                        break;\n                    }\n\n                    _minGallop--;\n                } while (count1 >= DEFAULT_MIN_GALLOPING || count2 >= DEFAULT_MIN_GALLOPING);\n\n                if (exit) {\n                    break;\n                }\n\n                if (_minGallop < 0) {\n                    _minGallop = 0;\n                }\n\n                _minGallop += 2;\n            }\n\n            minGallop = _minGallop;\n\n            minGallop < 1 && (minGallop = 1);\n\n            if (length1 === 1) {\n                for (i = 0; i < length2; i++) {\n                    array[dest + i] = array[cursor2 + i];\n                }\n                array[dest + length2] = tmp[cursor1];\n            }\n            else if (length1 === 0) {\n                throw new Error();\n                // throw new Error('mergeLow preconditions were not respected');\n            }\n            else {\n                for (i = 0; i < length1; i++) {\n                    array[dest + i] = tmp[cursor1 + i];\n                }\n            }\n        }\n\n        function mergeHigh (start1, length1, start2, length2) {\n            var i = 0;\n\n            for (i = 0; i < length2; i++) {\n                tmp[i] = array[start2 + i];\n            }\n\n            var cursor1 = start1 + length1 - 1;\n            var cursor2 = length2 - 1;\n            var dest = start2 + length2 - 1;\n            var customCursor = 0;\n            var customDest = 0;\n\n            array[dest--] = array[cursor1--];\n\n            if (--length1 === 0) {\n                customCursor = dest - (length2 - 1);\n\n                for (i = 0; i < length2; i++) {\n                    array[customCursor + i] = tmp[i];\n                }\n\n                return;\n            }\n\n            if (length2 === 1) {\n                dest -= length1;\n                cursor1 -= length1;\n                customDest = dest + 1;\n                customCursor = cursor1 + 1;\n\n                for (i = length1 - 1; i >= 0; i--) {\n                    array[customDest + i] = array[customCursor + i];\n                }\n\n                array[dest] = tmp[cursor2];\n                return;\n            }\n\n            var _minGallop = minGallop;\n\n            while (true) {\n                var count1 = 0;\n                var count2 = 0;\n                var exit = false;\n\n                do {\n                    if (compare(tmp[cursor2], array[cursor1]) < 0) {\n                        array[dest--] = array[cursor1--];\n                        count1++;\n                        count2 = 0;\n                        if (--length1 === 0) {\n                            exit = true;\n                            break;\n                        }\n                    }\n                    else {\n                        array[dest--] = tmp[cursor2--];\n                        count2++;\n                        count1 = 0;\n                        if (--length2 === 1) {\n                            exit = true;\n                            break;\n                        }\n                    }\n                } while ((count1 | count2) < _minGallop);\n\n                if (exit) {\n                    break;\n                }\n\n                do {\n                    count1 = length1 - gallopRight(tmp[cursor2], array, start1, length1, length1 - 1, compare);\n\n                    if (count1 !== 0) {\n                        dest -= count1;\n                        cursor1 -= count1;\n                        length1 -= count1;\n                        customDest = dest + 1;\n                        customCursor = cursor1 + 1;\n\n                        for (i = count1 - 1; i >= 0; i--) {\n                            array[customDest + i] = array[customCursor + i];\n                        }\n\n                        if (length1 === 0) {\n                            exit = true;\n                            break;\n                        }\n                    }\n\n                    array[dest--] = tmp[cursor2--];\n\n                    if (--length2 === 1) {\n                        exit = true;\n                        break;\n                    }\n\n                    count2 = length2 - gallopLeft(array[cursor1], tmp, 0, length2, length2 - 1, compare);\n\n                    if (count2 !== 0) {\n                        dest -= count2;\n                        cursor2 -= count2;\n                        length2 -= count2;\n                        customDest = dest + 1;\n                        customCursor = cursor2 + 1;\n\n                        for (i = 0; i < count2; i++) {\n                            array[customDest + i] = tmp[customCursor + i];\n                        }\n\n                        if (length2 <= 1) {\n                            exit = true;\n                            break;\n                        }\n                    }\n\n                    array[dest--] = array[cursor1--];\n\n                    if (--length1 === 0) {\n                        exit = true;\n                        break;\n                    }\n\n                    _minGallop--;\n                } while (count1 >= DEFAULT_MIN_GALLOPING || count2 >= DEFAULT_MIN_GALLOPING);\n\n                if (exit) {\n                    break;\n                }\n\n                if (_minGallop < 0) {\n                    _minGallop = 0;\n                }\n\n                _minGallop += 2;\n            }\n\n            minGallop = _minGallop;\n\n            if (minGallop < 1) {\n                minGallop = 1;\n            }\n\n            if (length2 === 1) {\n                dest -= length1;\n                cursor1 -= length1;\n                customDest = dest + 1;\n                customCursor = cursor1 + 1;\n\n                for (i = length1 - 1; i >= 0; i--) {\n                    array[customDest + i] = array[customCursor + i];\n                }\n\n                array[dest] = tmp[cursor2];\n            }\n            else if (length2 === 0) {\n                throw new Error();\n                // throw new Error('mergeHigh preconditions were not respected');\n            }\n            else {\n                customCursor = dest - (length2 - 1);\n                for (i = 0; i < length2; i++) {\n                    array[customCursor + i] = tmp[i];\n                }\n            }\n        }\n\n        this.mergeRuns = mergeRuns;\n        this.forceMergeRuns = forceMergeRuns;\n        this.pushRun = pushRun;\n    }\n\n    function sort(array, compare, lo, hi) {\n        if (!lo) {\n            lo = 0;\n        }\n        if (!hi) {\n            hi = array.length;\n        }\n\n        var remaining = hi - lo;\n\n        if (remaining < 2) {\n            return;\n        }\n\n        var runLength = 0;\n\n        if (remaining < DEFAULT_MIN_MERGE) {\n            runLength = makeAscendingRun(array, lo, hi, compare);\n            binaryInsertionSort(array, lo, hi, lo + runLength, compare);\n            return;\n        }\n\n        var ts = new TimSort(array, compare);\n\n        var minRun = minRunLength(remaining);\n\n        do {\n            runLength = makeAscendingRun(array, lo, hi, compare);\n            if (runLength < minRun) {\n                var force = remaining;\n                if (force > minRun) {\n                    force = minRun;\n                }\n\n                binaryInsertionSort(array, lo, lo + force, lo + runLength, compare);\n                runLength = force;\n            }\n\n            ts.pushRun(lo, runLength);\n            ts.mergeRuns();\n\n            remaining -= runLength;\n            lo += runLength;\n        } while (remaining !== 0);\n\n        ts.forceMergeRuns();\n    }\n\n    module.exports = sort;\n\n\n/***/ }),\n/* 345 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * 可绘制的图形基类\n * Base class of all displayable graphic objects\n * @module zrender/graphic/Displayable\n */\n\n\n\n    var zrUtil = __webpack_require__(315);\n\n    var Style = __webpack_require__(364);\n\n    var Element = __webpack_require__(355);\n    var RectText = __webpack_require__(439);\n    // var Stateful = require('./mixin/Stateful');\n\n    /**\n     * @alias module:zrender/graphic/Displayable\n     * @extends module:zrender/Element\n     * @extends module:zrender/graphic/mixin/RectText\n     */\n    function Displayable(opts) {\n\n        opts = opts || {};\n\n        Element.call(this, opts);\n\n        // Extend properties\n        for (var name in opts) {\n            if (\n                opts.hasOwnProperty(name) &&\n                name !== 'style'\n            ) {\n                this[name] = opts[name];\n            }\n        }\n\n        /**\n         * @type {module:zrender/graphic/Style}\n         */\n        this.style = new Style(opts.style);\n\n        this._rect = null;\n        // Shapes for cascade clipping.\n        this.__clipPaths = [];\n\n        // FIXME Stateful must be mixined after style is setted\n        // Stateful.call(this, opts);\n    }\n\n    Displayable.prototype = {\n\n        constructor: Displayable,\n\n        type: 'displayable',\n\n        /**\n         * Displayable 是否为脏，Painter 中会根据该标记判断是否需要是否需要重新绘制\n         * Dirty flag. From which painter will determine if this displayable object needs brush\n         * @name module:zrender/graphic/Displayable#__dirty\n         * @type {boolean}\n         */\n        __dirty: true,\n\n        /**\n         * 图形是否可见，为true时不绘制图形，但是仍能触发鼠标事件\n         * If ignore drawing of the displayable object. Mouse event will still be triggered\n         * @name module:/zrender/graphic/Displayable#invisible\n         * @type {boolean}\n         * @default false\n         */\n        invisible: false,\n\n        /**\n         * @name module:/zrender/graphic/Displayable#z\n         * @type {number}\n         * @default 0\n         */\n        z: 0,\n\n        /**\n         * @name module:/zrender/graphic/Displayable#z\n         * @type {number}\n         * @default 0\n         */\n        z2: 0,\n\n        /**\n         * z层level，决定绘画在哪层canvas中\n         * @name module:/zrender/graphic/Displayable#zlevel\n         * @type {number}\n         * @default 0\n         */\n        zlevel: 0,\n\n        /**\n         * 是否可拖拽\n         * @name module:/zrender/graphic/Displayable#draggable\n         * @type {boolean}\n         * @default false\n         */\n        draggable: false,\n\n        /**\n         * 是否正在拖拽\n         * @name module:/zrender/graphic/Displayable#draggable\n         * @type {boolean}\n         * @default false\n         */\n        dragging: false,\n\n        /**\n         * 是否相应鼠标事件\n         * @name module:/zrender/graphic/Displayable#silent\n         * @type {boolean}\n         * @default false\n         */\n        silent: false,\n\n        /**\n         * If enable culling\n         * @type {boolean}\n         * @default false\n         */\n        culling: false,\n\n        /**\n         * Mouse cursor when hovered\n         * @name module:/zrender/graphic/Displayable#cursor\n         * @type {string}\n         */\n        cursor: 'pointer',\n\n        /**\n         * If hover area is bounding rect\n         * @name module:/zrender/graphic/Displayable#rectHover\n         * @type {string}\n         */\n        rectHover: false,\n\n        /**\n         * Render the element progressively when the value >= 0,\n         * usefull for large data.\n         * @type {number}\n         */\n        progressive: -1,\n\n        beforeBrush: function (ctx) {},\n\n        afterBrush: function (ctx) {},\n\n        /**\n         * 图形绘制方法\n         * @param {Canvas2DRenderingContext} ctx\n         */\n        // Interface\n        brush: function (ctx, prevEl) {},\n\n        /**\n         * 获取最小包围盒\n         * @return {module:zrender/core/BoundingRect}\n         */\n        // Interface\n        getBoundingRect: function () {},\n\n        /**\n         * 判断坐标 x, y 是否在图形上\n         * If displayable element contain coord x, y\n         * @param  {number} x\n         * @param  {number} y\n         * @return {boolean}\n         */\n        contain: function (x, y) {\n            return this.rectContain(x, y);\n        },\n\n        /**\n         * @param  {Function} cb\n         * @param  {}   context\n         */\n        traverse: function (cb, context) {\n            cb.call(context, this);\n        },\n\n        /**\n         * 判断坐标 x, y 是否在图形的包围盒上\n         * If bounding rect of element contain coord x, y\n         * @param  {number} x\n         * @param  {number} y\n         * @return {boolean}\n         */\n        rectContain: function (x, y) {\n            var coord = this.transformCoordToLocal(x, y);\n            var rect = this.getBoundingRect();\n            return rect.contain(coord[0], coord[1]);\n        },\n\n        /**\n         * 标记图形元素为脏，并且在下一帧重绘\n         * Mark displayable element dirty and refresh next frame\n         */\n        dirty: function () {\n            this.__dirty = true;\n\n            this._rect = null;\n\n            this.__zr && this.__zr.refresh();\n        },\n\n        /**\n         * 图形是否会触发事件\n         * If displayable object binded any event\n         * @return {boolean}\n         */\n        // TODO, 通过 bind 绑定的事件\n        // isSilent: function () {\n        //     return !(\n        //         this.hoverable || this.draggable\n        //         || this.onmousemove || this.onmouseover || this.onmouseout\n        //         || this.onmousedown || this.onmouseup || this.onclick\n        //         || this.ondragenter || this.ondragover || this.ondragleave\n        //         || this.ondrop\n        //     );\n        // },\n        /**\n         * Alias for animate('style')\n         * @param {boolean} loop\n         */\n        animateStyle: function (loop) {\n            return this.animate('style', loop);\n        },\n\n        attrKV: function (key, value) {\n            if (key !== 'style') {\n                Element.prototype.attrKV.call(this, key, value);\n            }\n            else {\n                this.style.set(value);\n            }\n        },\n\n        /**\n         * @param {Object|string} key\n         * @param {*} value\n         */\n        setStyle: function (key, value) {\n            this.style.set(key, value);\n            this.dirty(false);\n            return this;\n        },\n\n        /**\n         * Use given style object\n         * @param  {Object} obj\n         */\n        useStyle: function (obj) {\n            this.style = new Style(obj);\n            this.dirty(false);\n            return this;\n        }\n    };\n\n    zrUtil.inherits(Displayable, Element);\n\n    zrUtil.mixin(Displayable, RectText);\n    // zrUtil.mixin(Displayable, Stateful);\n\n    module.exports = Displayable;\n\n\n/***/ }),\n/* 346 */\n/***/ (function(module, exports) {\n\n\n\n    /**\n     * @param {Array.<Object>} colorStops\n     */\n    var Gradient = function (colorStops) {\n\n        this.colorStops = colorStops || [];\n    };\n\n    Gradient.prototype = {\n\n        constructor: Gradient,\n\n        addColorStop: function (offset, color) {\n            this.colorStops.push({\n\n                offset: offset,\n\n                color: color\n            });\n        }\n    };\n\n    module.exports = Gradient;\n\n\n/***/ }),\n/* 347 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n\n    var zrUtil = __webpack_require__(315);\n    var formatUtil = __webpack_require__(322);\n    var classUtil = __webpack_require__(326);\n    var modelUtil = __webpack_require__(323);\n    var ComponentModel = __webpack_require__(327);\n    var colorPaletteMixin = __webpack_require__(352);\n    var env = __webpack_require__(321);\n    var layout = __webpack_require__(328);\n\n    var set = classUtil.set;\n    var get = classUtil.get;\n    var encodeHTML = formatUtil.encodeHTML;\n    var addCommas = formatUtil.addCommas;\n\n    var SeriesModel = ComponentModel.extend({\n\n        type: 'series.__base__',\n\n        /**\n         * @readOnly\n         */\n        seriesIndex: 0,\n\n        // coodinateSystem will be injected in the echarts/CoordinateSystem\n        coordinateSystem: null,\n\n        /**\n         * @type {Object}\n         * @protected\n         */\n        defaultOption: null,\n\n        /**\n         * Data provided for legend\n         * @type {Function}\n         */\n        // PENDING\n        legendDataProvider: null,\n\n        /**\n         * Access path of color for visual\n         */\n        visualColorAccessPath: 'itemStyle.normal.color',\n\n        /**\n         * Support merge layout params.\n         * Only support 'box' now (left/right/top/bottom/width/height).\n         * @type {string|Object} Object can be {ignoreSize: true}\n         * @readOnly\n         */\n        layoutMode: null,\n\n        init: function (option, parentModel, ecModel, extraOpt) {\n\n            /**\n             * @type {number}\n             * @readOnly\n             */\n            this.seriesIndex = this.componentIndex;\n\n            this.mergeDefaultAndTheme(option, ecModel);\n\n            /**\n             * @type {module:echarts/data/List|module:echarts/data/Tree|module:echarts/data/Graph}\n             * @private\n             */\n            set(this, 'dataBeforeProcessed', this.getInitialData(option, ecModel));\n\n            // If we reverse the order (make data firstly, and then make\n            // dataBeforeProcessed by cloneShallow), cloneShallow will\n            // cause data.graph.data !== data when using\n            // module:echarts/data/Graph or module:echarts/data/Tree.\n            // See module:echarts/data/helper/linkList\n            this.restoreData();\n        },\n\n        /**\n         * Util for merge default and theme to option\n         * @param  {Object} option\n         * @param  {module:echarts/model/Global} ecModel\n         */\n        mergeDefaultAndTheme: function (option, ecModel) {\n            var layoutMode = this.layoutMode;\n            var inputPositionParams = layoutMode\n                ? layout.getLayoutParams(option) : {};\n\n            zrUtil.merge(\n                option,\n                ecModel.getTheme().get(this.subType)\n            );\n            zrUtil.merge(option, this.getDefaultOption());\n\n            // Default label emphasis `position` and `show`\n            // FIXME Set label in mergeOption\n            modelUtil.defaultEmphasis(option.label, modelUtil.LABEL_OPTIONS);\n\n            this.fillDataTextStyle(option.data);\n\n            if (layoutMode) {\n                layout.mergeLayoutParam(option, inputPositionParams, layoutMode);\n            }\n        },\n\n        mergeOption: function (newSeriesOption, ecModel) {\n            newSeriesOption = zrUtil.merge(this.option, newSeriesOption, true);\n            this.fillDataTextStyle(newSeriesOption.data);\n\n            var layoutMode = this.layoutMode;\n            if (layoutMode) {\n                layout.mergeLayoutParam(this.option, newSeriesOption, layoutMode);\n            }\n\n            var data = this.getInitialData(newSeriesOption, ecModel);\n            // TODO Merge data?\n            if (data) {\n                set(this, 'data', data);\n                set(this, 'dataBeforeProcessed', data.cloneShallow());\n            }\n        },\n\n        fillDataTextStyle: function (data) {\n            // Default data label emphasis `position` and `show`\n            // FIXME Tree structure data ?\n            // FIXME Performance ?\n            if (data) {\n                for (var i = 0; i < data.length; i++) {\n                    if (data[i] && data[i].label) {\n                        modelUtil.defaultEmphasis(data[i].label, modelUtil.LABEL_OPTIONS);\n                    }\n                }\n            }\n        },\n\n        /**\n         * Init a data structure from data related option in series\n         * Must be overwritten\n         */\n        getInitialData: function () {},\n\n        /**\n         * @param {string} [dataType]\n         * @return {module:echarts/data/List}\n         */\n        getData: function (dataType) {\n            var data = get(this, 'data');\n            return dataType == null ? data : data.getLinkedData(dataType);\n        },\n\n        /**\n         * @param {module:echarts/data/List} data\n         */\n        setData: function (data) {\n            set(this, 'data', data);\n        },\n\n        /**\n         * Get data before processed\n         * @return {module:echarts/data/List}\n         */\n        getRawData: function () {\n            return get(this, 'dataBeforeProcessed');\n        },\n\n        /**\n         * Coord dimension to data dimension.\n         *\n         * By default the result is the same as dimensions of series data.\n         * But in some series data dimensions are different from coord dimensions (i.e.\n         * candlestick and boxplot). Override this method to handle those cases.\n         *\n         * Coord dimension to data dimension can be one-to-many\n         *\n         * @param {string} coordDim\n         * @return {Array.<string>} dimensions on the axis.\n         */\n        coordDimToDataDim: function (coordDim) {\n            return [coordDim];\n        },\n\n        /**\n         * Convert data dimension to coord dimension.\n         *\n         * @param {string|number} dataDim\n         * @return {string}\n         */\n        dataDimToCoordDim: function (dataDim) {\n            return dataDim;\n        },\n\n        /**\n         * Get base axis if has coordinate system and has axis.\n         * By default use coordSys.getBaseAxis();\n         * Can be overrided for some chart.\n         * @return {type} description\n         */\n        getBaseAxis: function () {\n            var coordSys = this.coordinateSystem;\n            return coordSys && coordSys.getBaseAxis && coordSys.getBaseAxis();\n        },\n\n        // FIXME\n        /**\n         * Default tooltip formatter\n         *\n         * @param {number} dataIndex\n         * @param {boolean} [multipleSeries=false]\n         * @param {number} [dataType]\n         */\n        formatTooltip: function (dataIndex, multipleSeries, dataType) {\n            function formatArrayValue(value) {\n                var result = [];\n\n                zrUtil.each(value, function (val, idx) {\n                    var dimInfo = data.getDimensionInfo(idx);\n                    var dimType = dimInfo && dimInfo.type;\n                    var valStr;\n\n                    if (dimType === 'ordinal') {\n                        valStr = val + '';\n                    }\n                    else if (dimType === 'time') {\n                        valStr = multipleSeries ? '' : formatUtil.formatTime('yyyy/MM/dd hh:mm:ss', val);\n                    }\n                    else {\n                        valStr = addCommas(val);\n                    }\n\n                    valStr && result.push(valStr);\n                });\n\n                return result.join(', ');\n            }\n\n            var data = get(this, 'data');\n\n            var value = this.getRawValue(dataIndex);\n            var formattedValue = encodeHTML(\n                zrUtil.isArray(value) ? formatArrayValue(value) : addCommas(value)\n            );\n            var name = data.getName(dataIndex);\n\n            var color = data.getItemVisual(dataIndex, 'color');\n            if (zrUtil.isObject(color) && color.colorStops) {\n                color = (color.colorStops[0] || {}).color;\n            }\n            color = color || 'transparent';\n\n            var colorEl = '<span style=\"display:inline-block;margin-right:5px;'\n                + 'border-radius:10px;width:9px;height:9px;background-color:' + encodeHTML(color) + '\"></span>';\n\n            var seriesName = this.name;\n            // FIXME\n            if (seriesName === '\\0-') {\n                // Not show '-'\n                seriesName = '';\n            }\n            return !multipleSeries\n                ? ((seriesName && encodeHTML(seriesName) + '<br />') + colorEl\n                    + (name\n                        ? encodeHTML(name) + ' : ' + formattedValue\n                        : formattedValue\n                    )\n                  )\n                : (colorEl + encodeHTML(this.name) + ' : ' + formattedValue);\n        },\n\n        /**\n         * @return {boolean}\n         */\n        isAnimationEnabled: function () {\n            if (env.node) {\n                return false;\n            }\n\n            var animationEnabled = this.getShallow('animation');\n            if (animationEnabled) {\n                if (this.getData().count() > this.getShallow('animationThreshold')) {\n                    animationEnabled = false;\n                }\n            }\n            return animationEnabled;\n        },\n\n        restoreData: function () {\n            set(this, 'data', get(this, 'dataBeforeProcessed').cloneShallow());\n        },\n\n        getColorFromPalette: function (name, scope) {\n            var ecModel = this.ecModel;\n            // PENDING\n            var color = colorPaletteMixin.getColorFromPalette.call(this, name, scope);\n            if (!color) {\n                color = ecModel.getColorFromPalette(name, scope);\n            }\n            return color;\n        },\n\n        /**\n         * Get data indices for show tooltip content. See tooltip.\n         * @abstract\n         * @param {Array.<string>|string} dim\n         * @param {Array.<number>} value\n         * @param {module:echarts/coord/single/SingleAxis} baseAxis\n         * @return {Array.<number>} data indices.\n         */\n        getAxisTooltipDataIndex: null,\n\n        /**\n         * See tooltip.\n         * @abstract\n         * @param {number} dataIndex\n         * @return {Array.<number>} Point of tooltip. null/undefined can be returned.\n         */\n        getTooltipPosition: null\n    });\n\n    zrUtil.mixin(SeriesModel, modelUtil.dataFormatMixin);\n    zrUtil.mixin(SeriesModel, colorPaletteMixin);\n\n    module.exports = SeriesModel;\n\n\n/***/ }),\n/* 348 */,\n/* 349 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(global) {/**\n * List for data storage\n * @module echarts/data/List\n */\n\n\n    var UNDEFINED = 'undefined';\n    var globalObj = typeof window === 'undefined' ? global : window;\n    var Float64Array = typeof globalObj.Float64Array === UNDEFINED\n        ? Array : globalObj.Float64Array;\n    var Int32Array = typeof globalObj.Int32Array === UNDEFINED\n        ? Array : globalObj.Int32Array;\n\n    var dataCtors = {\n        'float': Float64Array,\n        'int': Int32Array,\n        // Ordinal data type can be string or int\n        'ordinal': Array,\n        'number': Array,\n        'time': Array\n    };\n\n    var Model = __webpack_require__(325);\n    var DataDiffer = __webpack_require__(397);\n\n    var zrUtil = __webpack_require__(315);\n    var modelUtil = __webpack_require__(323);\n    var isObject = zrUtil.isObject;\n\n    var TRANSFERABLE_PROPERTIES = [\n        'stackedOn', 'hasItemOption', '_nameList', '_idList', '_rawData'\n    ];\n\n    var transferProperties = function (a, b) {\n        zrUtil.each(TRANSFERABLE_PROPERTIES.concat(b.__wrappedMethods || []), function (propName) {\n            if (b.hasOwnProperty(propName)) {\n                a[propName] = b[propName];\n            }\n        });\n\n        a.__wrappedMethods = b.__wrappedMethods;\n    };\n\n    /**\n     * @constructor\n     * @alias module:echarts/data/List\n     *\n     * @param {Array.<string>} dimensions\n     *        Dimensions should be concrete names like x, y, z, lng, lat, angle, radius\n     * @param {module:echarts/model/Model} hostModel\n     */\n    var List = function (dimensions, hostModel) {\n\n        dimensions = dimensions || ['x', 'y'];\n\n        var dimensionInfos = {};\n        var dimensionNames = [];\n        for (var i = 0; i < dimensions.length; i++) {\n            var dimensionName;\n            var dimensionInfo = {};\n            if (typeof dimensions[i] === 'string') {\n                dimensionName = dimensions[i];\n                dimensionInfo = {\n                    name: dimensionName,\n                    stackable: false,\n                    // Type can be 'float', 'int', 'number'\n                    // Default is number, Precision of float may not enough\n                    type: 'number'\n                };\n            }\n            else {\n                dimensionInfo = dimensions[i];\n                dimensionName = dimensionInfo.name;\n                dimensionInfo.type = dimensionInfo.type || 'number';\n            }\n            dimensionNames.push(dimensionName);\n            dimensionInfos[dimensionName] = dimensionInfo;\n        }\n        /**\n         * @readOnly\n         * @type {Array.<string>}\n         */\n        this.dimensions = dimensionNames;\n\n        /**\n         * Infomation of each data dimension, like data type.\n         * @type {Object}\n         */\n        this._dimensionInfos = dimensionInfos;\n\n        /**\n         * @type {module:echarts/model/Model}\n         */\n        this.hostModel = hostModel;\n\n        /**\n         * @type {module:echarts/model/Model}\n         */\n        this.dataType;\n\n        /**\n         * Indices stores the indices of data subset after filtered.\n         * This data subset will be used in chart.\n         * @type {Array.<number>}\n         * @readOnly\n         */\n        this.indices = [];\n\n        /**\n         * Data storage\n         * @type {Object.<key, TypedArray|Array>}\n         * @private\n         */\n        this._storage = {};\n\n        /**\n         * @type {Array.<string>}\n         */\n        this._nameList = [];\n        /**\n         * @type {Array.<string>}\n         */\n        this._idList = [];\n        /**\n         * Models of data option is stored sparse for optimizing memory cost\n         * @type {Array.<module:echarts/model/Model>}\n         * @private\n         */\n        this._optionModels = [];\n\n        /**\n         * @param {module:echarts/data/List}\n         */\n        this.stackedOn = null;\n\n        /**\n         * Global visual properties after visual coding\n         * @type {Object}\n         * @private\n         */\n        this._visual = {};\n\n        /**\n         * Globel layout properties.\n         * @type {Object}\n         * @private\n         */\n        this._layout = {};\n\n        /**\n         * Item visual properties after visual coding\n         * @type {Array.<Object>}\n         * @private\n         */\n        this._itemVisuals = [];\n\n        /**\n         * Item layout properties after layout\n         * @type {Array.<Object>}\n         * @private\n         */\n        this._itemLayouts = [];\n\n        /**\n         * Graphic elemnents\n         * @type {Array.<module:zrender/Element>}\n         * @private\n         */\n        this._graphicEls = [];\n\n        /**\n         * @type {Array.<Array|Object>}\n         * @private\n         */\n        this._rawData;\n\n        /**\n         * @type {Object}\n         * @private\n         */\n        this._extent;\n    };\n\n    var listProto = List.prototype;\n\n    listProto.type = 'list';\n    /**\n     * If each data item has it's own option\n     * @type {boolean}\n     */\n    listProto.hasItemOption = true;\n\n    /**\n     * Get dimension name\n     * @param {string|number} dim\n     *        Dimension can be concrete names like x, y, z, lng, lat, angle, radius\n     *        Or a ordinal number. For example getDimensionInfo(0) will return 'x' or 'lng' or 'radius'\n     * @return {string} Concrete dim name.\n     */\n    listProto.getDimension = function (dim) {\n        if (!isNaN(dim)) {\n            dim = this.dimensions[dim] || dim;\n        }\n        return dim;\n    };\n    /**\n     * Get type and stackable info of particular dimension\n     * @param {string|number} dim\n     *        Dimension can be concrete names like x, y, z, lng, lat, angle, radius\n     *        Or a ordinal number. For example getDimensionInfo(0) will return 'x' or 'lng' or 'radius'\n     */\n    listProto.getDimensionInfo = function (dim) {\n        return zrUtil.clone(this._dimensionInfos[this.getDimension(dim)]);\n    };\n\n    /**\n     * Initialize from data\n     * @param {Array.<Object|number|Array>} data\n     * @param {Array.<string>} [nameList]\n     * @param {Function} [dimValueGetter] (dataItem, dimName, dataIndex, dimIndex) => number\n     */\n    listProto.initData = function (data, nameList, dimValueGetter) {\n        data = data || [];\n\n        if (__DEV__) {\n            if (!zrUtil.isArray(data)) {\n                throw new Error('Invalid data.');\n            }\n        }\n\n        this._rawData = data;\n\n        // Clear\n        var storage = this._storage = {};\n        var indices = this.indices = [];\n\n        var dimensions = this.dimensions;\n        var size = data.length;\n        var dimensionInfoMap = this._dimensionInfos;\n\n        var idList = [];\n        var nameRepeatCount = {};\n\n        nameList = nameList || [];\n\n        // Init storage\n        for (var i = 0; i < dimensions.length; i++) {\n            var dimInfo = dimensionInfoMap[dimensions[i]];\n            var DataCtor = dataCtors[dimInfo.type];\n            storage[dimensions[i]] = new DataCtor(size);\n        }\n\n        var self = this;\n        if (!dimValueGetter) {\n            self.hasItemOption = false;\n        }\n        // Default dim value getter\n        dimValueGetter = dimValueGetter || function (dataItem, dimName, dataIndex, dimIndex) {\n            var value = modelUtil.getDataItemValue(dataItem);\n            // If any dataItem is like { value: 10 }\n            if (modelUtil.isDataItemOption(dataItem)) {\n                self.hasItemOption = true;\n            }\n            return modelUtil.converDataValue(\n                (value instanceof Array)\n                    ? value[dimIndex]\n                    // If value is a single number or something else not array.\n                    : value,\n                dimensionInfoMap[dimName]\n            );\n        };\n\n        for (var idx = 0; idx < data.length; idx++) {\n            var dataItem = data[idx];\n            // Each data item is value\n            // [1, 2]\n            // 2\n            // Bar chart, line chart which uses category axis\n            // only gives the 'y' value. 'x' value is the indices of cateogry\n            // Use a tempValue to normalize the value to be a (x, y) value\n\n            // Store the data by dimensions\n            for (var k = 0; k < dimensions.length; k++) {\n                var dim = dimensions[k];\n                var dimStorage = storage[dim];\n                // PENDING NULL is empty or zero\n                dimStorage[idx] = dimValueGetter(dataItem, dim, idx, k);\n            }\n\n            indices.push(idx);\n        }\n\n        // Use the name in option and create id\n        for (var i = 0; i < data.length; i++) {\n            if (!nameList[i]) {\n                if (data[i] && data[i].name != null) {\n                    nameList[i] = data[i].name;\n                }\n            }\n            var name = nameList[i] || '';\n            // Try using the id in option\n            var id = data[i] && data[i].id;\n\n            if (!id && name) {\n                // Use name as id and add counter to avoid same name\n                nameRepeatCount[name] = nameRepeatCount[name] || 0;\n                id = name;\n                if (nameRepeatCount[name] > 0) {\n                    id += '__ec__' + nameRepeatCount[name];\n                }\n                nameRepeatCount[name]++;\n            }\n            id && (idList[i] = id);\n        }\n\n        this._nameList = nameList;\n        this._idList = idList;\n    };\n\n    /**\n     * @return {number}\n     */\n    listProto.count = function () {\n        return this.indices.length;\n    };\n\n    /**\n     * Get value. Return NaN if idx is out of range.\n     * @param {string} dim Dim must be concrete name.\n     * @param {number} idx\n     * @param {boolean} stack\n     * @return {number}\n     */\n    listProto.get = function (dim, idx, stack) {\n        var storage = this._storage;\n        var dataIndex = this.indices[idx];\n\n        // If value not exists\n        if (dataIndex == null) {\n            return NaN;\n        }\n\n        var value = storage[dim] && storage[dim][dataIndex];\n        // FIXME ordinal data type is not stackable\n        if (stack) {\n            var dimensionInfo = this._dimensionInfos[dim];\n            if (dimensionInfo && dimensionInfo.stackable) {\n                var stackedOn = this.stackedOn;\n                while (stackedOn) {\n                    // Get no stacked data of stacked on\n                    var stackedValue = stackedOn.get(dim, idx);\n                    // Considering positive stack, negative stack and empty data\n                    if ((value >= 0 && stackedValue > 0)  // Positive stack\n                        || (value <= 0 && stackedValue < 0) // Negative stack\n                    ) {\n                        value += stackedValue;\n                    }\n                    stackedOn = stackedOn.stackedOn;\n                }\n            }\n        }\n        return value;\n    };\n\n    /**\n     * Get value for multi dimensions.\n     * @param {Array.<string>} [dimensions] If ignored, using all dimensions.\n     * @param {number} idx\n     * @param {boolean} stack\n     * @return {number}\n     */\n    listProto.getValues = function (dimensions, idx, stack) {\n        var values = [];\n\n        if (!zrUtil.isArray(dimensions)) {\n            stack = idx;\n            idx = dimensions;\n            dimensions = this.dimensions;\n        }\n\n        for (var i = 0, len = dimensions.length; i < len; i++) {\n            values.push(this.get(dimensions[i], idx, stack));\n        }\n\n        return values;\n    };\n\n    /**\n     * If value is NaN. Inlcuding '-'\n     * @param {string} dim\n     * @param {number} idx\n     * @return {number}\n     */\n    listProto.hasValue = function (idx) {\n        var dimensions = this.dimensions;\n        var dimensionInfos = this._dimensionInfos;\n        for (var i = 0, len = dimensions.length; i < len; i++) {\n            if (\n                // Ordinal type can be string or number\n                dimensionInfos[dimensions[i]].type !== 'ordinal'\n                && isNaN(this.get(dimensions[i], idx))\n            ) {\n                return false;\n            }\n        }\n        return true;\n    };\n\n    /**\n     * Get extent of data in one dimension\n     * @param {string} dim\n     * @param {boolean} stack\n     * @param {Function} filter\n     */\n    listProto.getDataExtent = function (dim, stack, filter) {\n        dim = this.getDimension(dim);\n        var dimData = this._storage[dim];\n        var dimInfo = this.getDimensionInfo(dim);\n        stack = (dimInfo && dimInfo.stackable) && stack;\n        var dimExtent = (this._extent || (this._extent = {}))[dim + (!!stack)];\n        var value;\n        if (dimExtent) {\n            return dimExtent;\n        }\n        // var dimInfo = this._dimensionInfos[dim];\n        if (dimData) {\n            var min = Infinity;\n            var max = -Infinity;\n            // var isOrdinal = dimInfo.type === 'ordinal';\n            for (var i = 0, len = this.count(); i < len; i++) {\n                value = this.get(dim, i, stack);\n                // FIXME\n                // if (isOrdinal && typeof value === 'string') {\n                //     value = zrUtil.indexOf(dimData, value);\n                // }\n                if (!filter || filter(value, dim, i)) {\n                    value < min && (min = value);\n                    value > max && (max = value);\n                }\n            }\n            return (this._extent[dim + !!stack] = [min, max]);\n        }\n        else {\n            return [Infinity, -Infinity];\n        }\n    };\n\n    /**\n     * Get sum of data in one dimension\n     * @param {string} dim\n     * @param {boolean} stack\n     */\n    listProto.getSum = function (dim, stack) {\n        var dimData = this._storage[dim];\n        var sum = 0;\n        if (dimData) {\n            for (var i = 0, len = this.count(); i < len; i++) {\n                var value = this.get(dim, i, stack);\n                if (!isNaN(value)) {\n                    sum += value;\n                }\n            }\n        }\n        return sum;\n    };\n\n    /**\n     * Retreive the index with given value\n     * @param {number} idx\n     * @param {number} value\n     * @return {number}\n     */\n    // FIXME Precision of float value\n    listProto.indexOf = function (dim, value) {\n        var storage = this._storage;\n        var dimData = storage[dim];\n        var indices = this.indices;\n\n        if (dimData) {\n            for (var i = 0, len = indices.length; i < len; i++) {\n                var rawIndex = indices[i];\n                if (dimData[rawIndex] === value) {\n                    return i;\n                }\n            }\n        }\n        return -1;\n    };\n\n    /**\n     * Retreive the index with given name\n     * @param {number} idx\n     * @param {number} name\n     * @return {number}\n     */\n    listProto.indexOfName = function (name) {\n        var indices = this.indices;\n        var nameList = this._nameList;\n\n        for (var i = 0, len = indices.length; i < len; i++) {\n            var rawIndex = indices[i];\n            if (nameList[rawIndex] === name) {\n                return i;\n            }\n        }\n\n        return -1;\n    };\n\n    /**\n     * Retreive the index with given raw data index\n     * @param {number} idx\n     * @param {number} name\n     * @return {number}\n     */\n    listProto.indexOfRawIndex = function (rawIndex) {\n        // Indices are ascending\n        var indices = this.indices;\n\n        // If rawIndex === dataIndex\n        var rawDataIndex = indices[rawIndex];\n        if (rawDataIndex != null && rawDataIndex === rawIndex) {\n            return rawIndex;\n        }\n\n        var left = 0;\n        var right = indices.length - 1;\n        while (left <= right) {\n            var mid = (left + right) / 2 | 0;\n            if (indices[mid] < rawIndex) {\n                left = mid + 1;\n            }\n            else if (indices[mid] > rawIndex) {\n                right = mid - 1;\n            }\n            else {\n                return mid;\n            }\n        }\n        return -1;\n    };\n\n    /**\n     * Retreive the index of nearest value\n     * @param {string} dim\n     * @param {number} value\n     * @param {boolean} stack If given value is after stacked\n     * @param {number} [maxDistance=Infinity]\n     * @return {number}\n     */\n    listProto.indexOfNearest = function (dim, value, stack, maxDistance) {\n        var storage = this._storage;\n        var dimData = storage[dim];\n\n        if (maxDistance == null) {\n            maxDistance = Infinity;\n        }\n\n        var nearestIdx = -1;\n        if (dimData) {\n            var minDist = Number.MAX_VALUE;\n            for (var i = 0, len = this.count(); i < len; i++) {\n                var diff = value - this.get(dim, i, stack);\n                var dist = Math.abs(diff);\n                if (\n                    diff <= maxDistance\n                    && (dist < minDist\n                        // For the case of two data are same on xAxis, which has sequence data.\n                        // Show the nearest index\n                        // https://github.com/ecomfe/echarts/issues/2869\n                        || (dist === minDist && diff > 0)\n                    )\n                ) {\n                    minDist = dist;\n                    nearestIdx = i;\n                }\n            }\n        }\n        return nearestIdx;\n    };\n\n    /**\n     * Get raw data index\n     * @param {number} idx\n     * @return {number}\n     */\n    listProto.getRawIndex = function (idx) {\n        var rawIdx = this.indices[idx];\n        return rawIdx == null ? -1 : rawIdx;\n    };\n\n    /**\n     * Get raw data item\n     * @param {number} idx\n     * @return {number}\n     */\n    listProto.getRawDataItem = function (idx) {\n        return this._rawData[this.getRawIndex(idx)];\n    };\n\n    /**\n     * @param {number} idx\n     * @param {boolean} [notDefaultIdx=false]\n     * @return {string}\n     */\n    listProto.getName = function (idx) {\n        return this._nameList[this.indices[idx]] || '';\n    };\n\n    /**\n     * @param {number} idx\n     * @param {boolean} [notDefaultIdx=false]\n     * @return {string}\n     */\n    listProto.getId = function (idx) {\n        return this._idList[this.indices[idx]] || (this.getRawIndex(idx) + '');\n    };\n\n\n    function normalizeDimensions(dimensions) {\n        if (!zrUtil.isArray(dimensions)) {\n            dimensions = [dimensions];\n        }\n        return dimensions;\n    }\n\n    /**\n     * Data iteration\n     * @param {string|Array.<string>}\n     * @param {Function} cb\n     * @param {boolean} [stack=false]\n     * @param {*} [context=this]\n     *\n     * @example\n     *  list.each('x', function (x, idx) {});\n     *  list.each(['x', 'y'], function (x, y, idx) {});\n     *  list.each(function (idx) {})\n     */\n    listProto.each = function (dims, cb, stack, context) {\n        if (typeof dims === 'function') {\n            context = stack;\n            stack = cb;\n            cb = dims;\n            dims = [];\n        }\n\n        dims = zrUtil.map(normalizeDimensions(dims), this.getDimension, this);\n\n        var value = [];\n        var dimSize = dims.length;\n        var indices = this.indices;\n\n        context = context || this;\n\n        for (var i = 0; i < indices.length; i++) {\n            // Simple optimization\n            switch (dimSize) {\n                case 0:\n                    cb.call(context, i);\n                    break;\n                case 1:\n                    cb.call(context, this.get(dims[0], i, stack), i);\n                    break;\n                case 2:\n                    cb.call(context, this.get(dims[0], i, stack), this.get(dims[1], i, stack), i);\n                    break;\n                default:\n                    for (var k = 0; k < dimSize; k++) {\n                        value[k] = this.get(dims[k], i, stack);\n                    }\n                    // Index\n                    value[k] = i;\n                    cb.apply(context, value);\n            }\n        }\n    };\n\n    /**\n     * Data filter\n     * @param {string|Array.<string>}\n     * @param {Function} cb\n     * @param {boolean} [stack=false]\n     * @param {*} [context=this]\n     */\n    listProto.filterSelf = function (dimensions, cb, stack, context) {\n        if (typeof dimensions === 'function') {\n            context = stack;\n            stack = cb;\n            cb = dimensions;\n            dimensions = [];\n        }\n\n        dimensions = zrUtil.map(\n            normalizeDimensions(dimensions), this.getDimension, this\n        );\n\n        var newIndices = [];\n        var value = [];\n        var dimSize = dimensions.length;\n        var indices = this.indices;\n\n        context = context || this;\n\n        for (var i = 0; i < indices.length; i++) {\n            var keep;\n            // Simple optimization\n            if (dimSize === 1) {\n                keep = cb.call(\n                    context, this.get(dimensions[0], i, stack), i\n                );\n            }\n            else {\n                for (var k = 0; k < dimSize; k++) {\n                    value[k] = this.get(dimensions[k], i, stack);\n                }\n                value[k] = i;\n                keep = cb.apply(context, value);\n            }\n            if (keep) {\n                newIndices.push(indices[i]);\n            }\n        }\n\n        this.indices = newIndices;\n\n        // Reset data extent\n        this._extent = {};\n\n        return this;\n    };\n\n    /**\n     * Data mapping to a plain array\n     * @param {string|Array.<string>} [dimensions]\n     * @param {Function} cb\n     * @param {boolean} [stack=false]\n     * @param {*} [context=this]\n     * @return {Array}\n     */\n    listProto.mapArray = function (dimensions, cb, stack, context) {\n        if (typeof dimensions === 'function') {\n            context = stack;\n            stack = cb;\n            cb = dimensions;\n            dimensions = [];\n        }\n\n        var result = [];\n        this.each(dimensions, function () {\n            result.push(cb && cb.apply(this, arguments));\n        }, stack, context);\n        return result;\n    };\n\n    function cloneListForMapAndSample(original, excludeDimensions) {\n        var allDimensions = original.dimensions;\n        var list = new List(\n            zrUtil.map(allDimensions, original.getDimensionInfo, original),\n            original.hostModel\n        );\n        // FIXME If needs stackedOn, value may already been stacked\n        transferProperties(list, original);\n\n        var storage = list._storage = {};\n        var originalStorage = original._storage;\n        // Init storage\n        for (var i = 0; i < allDimensions.length; i++) {\n            var dim = allDimensions[i];\n            var dimStore = originalStorage[dim];\n            if (zrUtil.indexOf(excludeDimensions, dim) >= 0) {\n                storage[dim] = new dimStore.constructor(\n                    originalStorage[dim].length\n                );\n            }\n            else {\n                // Direct reference for other dimensions\n                storage[dim] = originalStorage[dim];\n            }\n        }\n        return list;\n    }\n\n    /**\n     * Data mapping to a new List with given dimensions\n     * @param {string|Array.<string>} dimensions\n     * @param {Function} cb\n     * @param {boolean} [stack=false]\n     * @param {*} [context=this]\n     * @return {Array}\n     */\n    listProto.map = function (dimensions, cb, stack, context) {\n        dimensions = zrUtil.map(\n            normalizeDimensions(dimensions), this.getDimension, this\n        );\n\n        var list = cloneListForMapAndSample(this, dimensions);\n        // Following properties are all immutable.\n        // So we can reference to the same value\n        var indices = list.indices = this.indices;\n\n        var storage = list._storage;\n\n        var tmpRetValue = [];\n        this.each(dimensions, function () {\n            var idx = arguments[arguments.length - 1];\n            var retValue = cb && cb.apply(this, arguments);\n            if (retValue != null) {\n                // a number\n                if (typeof retValue === 'number') {\n                    tmpRetValue[0] = retValue;\n                    retValue = tmpRetValue;\n                }\n                for (var i = 0; i < retValue.length; i++) {\n                    var dim = dimensions[i];\n                    var dimStore = storage[dim];\n                    var rawIdx = indices[idx];\n                    if (dimStore) {\n                        dimStore[rawIdx] = retValue[i];\n                    }\n                }\n            }\n        }, stack, context);\n\n        return list;\n    };\n\n    /**\n     * Large data down sampling on given dimension\n     * @param {string} dimension\n     * @param {number} rate\n     * @param {Function} sampleValue\n     * @param {Function} sampleIndex Sample index for name and id\n     */\n    listProto.downSample = function (dimension, rate, sampleValue, sampleIndex) {\n        var list = cloneListForMapAndSample(this, [dimension]);\n        var storage = this._storage;\n        var targetStorage = list._storage;\n\n        var originalIndices = this.indices;\n        var indices = list.indices = [];\n\n        var frameValues = [];\n        var frameIndices = [];\n        var frameSize = Math.floor(1 / rate);\n\n        var dimStore = targetStorage[dimension];\n        var len = this.count();\n        // Copy data from original data\n        for (var i = 0; i < storage[dimension].length; i++) {\n            targetStorage[dimension][i] = storage[dimension][i];\n        }\n        for (var i = 0; i < len; i += frameSize) {\n            // Last frame\n            if (frameSize > len - i) {\n                frameSize = len - i;\n                frameValues.length = frameSize;\n            }\n            for (var k = 0; k < frameSize; k++) {\n                var idx = originalIndices[i + k];\n                frameValues[k] = dimStore[idx];\n                frameIndices[k] = idx;\n            }\n            var value = sampleValue(frameValues);\n            var idx = frameIndices[sampleIndex(frameValues, value) || 0];\n            // Only write value on the filtered data\n            dimStore[idx] = value;\n            indices.push(idx);\n        }\n\n        return list;\n    };\n\n    /**\n     * Get model of one data item.\n     *\n     * @param {number} idx\n     */\n    // FIXME Model proxy ?\n    listProto.getItemModel = function (idx) {\n        var hostModel = this.hostModel;\n        idx = this.indices[idx];\n        return new Model(this._rawData[idx], hostModel, hostModel && hostModel.ecModel);\n    };\n\n    /**\n     * Create a data differ\n     * @param {module:echarts/data/List} otherList\n     * @return {module:echarts/data/DataDiffer}\n     */\n    listProto.diff = function (otherList) {\n        var idList = this._idList;\n        var otherIdList = otherList && otherList._idList;\n        var val;\n        // Use prefix to avoid index to be the same as otherIdList[idx],\n        // which will cause weird udpate animation.\n        var prefix = 'e\\0\\0';\n\n        return new DataDiffer(\n            otherList ? otherList.indices : [],\n            this.indices,\n            function (idx) {\n                return (val = otherIdList[idx]) != null ? val : prefix + idx;\n            },\n            function (idx) {\n                return (val = idList[idx]) != null ? val : prefix + idx;\n            }\n        );\n    };\n    /**\n     * Get visual property.\n     * @param {string} key\n     */\n    listProto.getVisual = function (key) {\n        var visual = this._visual;\n        return visual && visual[key];\n    };\n\n    /**\n     * Set visual property\n     * @param {string|Object} key\n     * @param {*} [value]\n     *\n     * @example\n     *  setVisual('color', color);\n     *  setVisual({\n     *      'color': color\n     *  });\n     */\n    listProto.setVisual = function (key, val) {\n        if (isObject(key)) {\n            for (var name in key) {\n                if (key.hasOwnProperty(name)) {\n                    this.setVisual(name, key[name]);\n                }\n            }\n            return;\n        }\n        this._visual = this._visual || {};\n        this._visual[key] = val;\n    };\n\n    /**\n     * Set layout property.\n     * @param {string} key\n     * @param {*} [val]\n     */\n    listProto.setLayout = function (key, val) {\n        if (isObject(key)) {\n            for (var name in key) {\n                if (key.hasOwnProperty(name)) {\n                    this.setLayout(name, key[name]);\n                }\n            }\n            return;\n        }\n        this._layout[key] = val;\n    };\n\n    /**\n     * Get layout property.\n     * @param  {string} key.\n     * @return {*}\n     */\n    listProto.getLayout = function (key) {\n        return this._layout[key];\n    };\n\n    /**\n     * Get layout of single data item\n     * @param {number} idx\n     */\n    listProto.getItemLayout = function (idx) {\n        return this._itemLayouts[idx];\n    };\n\n    /**\n     * Set layout of single data item\n     * @param {number} idx\n     * @param {Object} layout\n     * @param {boolean=} [merge=false]\n     */\n    listProto.setItemLayout = function (idx, layout, merge) {\n        this._itemLayouts[idx] = merge\n            ? zrUtil.extend(this._itemLayouts[idx] || {}, layout)\n            : layout;\n    };\n\n    /**\n     * Clear all layout of single data item\n     */\n    listProto.clearItemLayouts = function () {\n        this._itemLayouts.length = 0;\n    };\n\n    /**\n     * Get visual property of single data item\n     * @param {number} idx\n     * @param {string} key\n     * @param {boolean} ignoreParent\n     */\n    listProto.getItemVisual = function (idx, key, ignoreParent) {\n        var itemVisual = this._itemVisuals[idx];\n        var val = itemVisual && itemVisual[key];\n        if (val == null && !ignoreParent) {\n            // Use global visual property\n            return this.getVisual(key);\n        }\n        return val;\n    };\n\n    /**\n     * Set visual property of single data item\n     *\n     * @param {number} idx\n     * @param {string|Object} key\n     * @param {*} [value]\n     *\n     * @example\n     *  setItemVisual(0, 'color', color);\n     *  setItemVisual(0, {\n     *      'color': color\n     *  });\n     */\n    listProto.setItemVisual = function (idx, key, value) {\n        var itemVisual = this._itemVisuals[idx] || {};\n        this._itemVisuals[idx] = itemVisual;\n\n        if (isObject(key)) {\n            for (var name in key) {\n                if (key.hasOwnProperty(name)) {\n                    itemVisual[name] = key[name];\n                }\n            }\n            return;\n        }\n        itemVisual[key] = value;\n    };\n\n    /**\n     * Clear itemVisuals and list visual.\n     */\n    listProto.clearAllVisual = function () {\n        this._visual = {};\n        this._itemVisuals = [];\n    };\n\n    var setItemDataAndSeriesIndex = function (child) {\n        child.seriesIndex = this.seriesIndex;\n        child.dataIndex = this.dataIndex;\n        child.dataType = this.dataType;\n    };\n    /**\n     * Set graphic element relative to data. It can be set as null\n     * @param {number} idx\n     * @param {module:zrender/Element} [el]\n     */\n    listProto.setItemGraphicEl = function (idx, el) {\n        var hostModel = this.hostModel;\n\n        if (el) {\n            // Add data index and series index for indexing the data by element\n            // Useful in tooltip\n            el.dataIndex = idx;\n            el.dataType = this.dataType;\n            el.seriesIndex = hostModel && hostModel.seriesIndex;\n            if (el.type === 'group') {\n                el.traverse(setItemDataAndSeriesIndex, el);\n            }\n        }\n\n        this._graphicEls[idx] = el;\n    };\n\n    /**\n     * @param {number} idx\n     * @return {module:zrender/Element}\n     */\n    listProto.getItemGraphicEl = function (idx) {\n        return this._graphicEls[idx];\n    };\n\n    /**\n     * @param {Function} cb\n     * @param {*} context\n     */\n    listProto.eachItemGraphicEl = function (cb, context) {\n        zrUtil.each(this._graphicEls, function (el, idx) {\n            if (el) {\n                cb && cb.call(context, el, idx);\n            }\n        });\n    };\n\n    /**\n     * Shallow clone a new list except visual and layout properties, and graph elements.\n     * New list only change the indices.\n     */\n    listProto.cloneShallow = function () {\n        var dimensionInfoList = zrUtil.map(this.dimensions, this.getDimensionInfo, this);\n        var list = new List(dimensionInfoList, this.hostModel);\n\n        // FIXME\n        list._storage = this._storage;\n\n        transferProperties(list, this);\n\n\n        // Clone will not change the data extent and indices\n        list.indices = this.indices.slice();\n\n        if (this._extent) {\n            list._extent = zrUtil.extend({}, this._extent);\n        }\n\n        return list;\n    };\n\n    /**\n     * Wrap some method to add more feature\n     * @param {string} methodName\n     * @param {Function} injectFunction\n     */\n    listProto.wrapMethod = function (methodName, injectFunction) {\n        var originalMethod = this[methodName];\n        if (typeof originalMethod !== 'function') {\n            return;\n        }\n        this.__wrappedMethods = this.__wrappedMethods || [];\n        this.__wrappedMethods.push(methodName);\n        this[methodName] = function () {\n            var res = originalMethod.apply(this, arguments);\n            return injectFunction.apply(this, [res].concat(zrUtil.slice(arguments)));\n        };\n    };\n\n    // Methods that create a new list based on this list should be listed here.\n    // Notice that those method should `RETURN` the new list.\n    listProto.TRANSFERABLE_METHODS = ['cloneShallow', 'downSample', 'map'];\n    // Methods that change indices of this list should be listed here.\n    listProto.CHANGABLE_METHODS = ['filterSelf'];\n\n    module.exports = List;\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(62)))\n\n/***/ }),\n/* 350 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * @module echarts/chart/helper/Symbol\n */\n\n\n    var zrUtil = __webpack_require__(315);\n    var symbolUtil = __webpack_require__(353);\n    var graphic = __webpack_require__(317);\n    var numberUtil = __webpack_require__(318);\n\n    function getSymbolSize(data, idx) {\n        var symbolSize = data.getItemVisual(idx, 'symbolSize');\n        return symbolSize instanceof Array\n            ? symbolSize.slice()\n            : [+symbolSize, +symbolSize];\n    }\n\n    function getScale(symbolSize) {\n        return [symbolSize[0] / 2, symbolSize[1] / 2];\n    }\n\n    /**\n     * @constructor\n     * @alias {module:echarts/chart/helper/Symbol}\n     * @param {module:echarts/data/List} data\n     * @param {number} idx\n     * @extends {module:zrender/graphic/Group}\n     */\n    function Symbol(data, idx, seriesScope) {\n        graphic.Group.call(this);\n\n        this.updateData(data, idx, seriesScope);\n    }\n\n    var symbolProto = Symbol.prototype;\n\n    function driftSymbol(dx, dy) {\n        this.parent.drift(dx, dy);\n    }\n\n    symbolProto._createSymbol = function (symbolType, data, idx, symbolSize) {\n        // Remove paths created before\n        this.removeAll();\n\n        var seriesModel = data.hostModel;\n        var color = data.getItemVisual(idx, 'color');\n\n        // var symbolPath = symbolUtil.createSymbol(\n        //     symbolType, -0.5, -0.5, 1, 1, color\n        // );\n        // If width/height are set too small (e.g., set to 1) on ios10\n        // and macOS Sierra, a circle stroke become a rect, no matter what\n        // the scale is set. So we set width/height as 2. See #4150.\n        var symbolPath = symbolUtil.createSymbol(\n            symbolType, -1, -1, 2, 2, color\n        );\n\n        symbolPath.attr({\n            z2: 100,\n            culling: true,\n            scale: [0, 0]\n        });\n        // Rewrite drift method\n        symbolPath.drift = driftSymbol;\n\n        graphic.initProps(symbolPath, {\n            scale: getScale(symbolSize)\n        }, seriesModel, idx);\n        this._symbolType = symbolType;\n\n        this.add(symbolPath);\n    };\n\n    /**\n     * Stop animation\n     * @param {boolean} toLastFrame\n     */\n    symbolProto.stopSymbolAnimation = function (toLastFrame) {\n        this.childAt(0).stopAnimation(toLastFrame);\n    };\n\n    /**\n     * Get symbol path element\n     */\n    symbolProto.getSymbolPath = function () {\n        return this.childAt(0);\n    };\n\n    /**\n     * Get scale(aka, current symbol size).\n     * Including the change caused by animation\n     */\n    symbolProto.getScale = function () {\n        return this.childAt(0).scale;\n    };\n\n    /**\n     * Highlight symbol\n     */\n    symbolProto.highlight = function () {\n        this.childAt(0).trigger('emphasis');\n    };\n\n    /**\n     * Downplay symbol\n     */\n    symbolProto.downplay = function () {\n        this.childAt(0).trigger('normal');\n    };\n\n    /**\n     * @param {number} zlevel\n     * @param {number} z\n     */\n    symbolProto.setZ = function (zlevel, z) {\n        var symbolPath = this.childAt(0);\n        symbolPath.zlevel = zlevel;\n        symbolPath.z = z;\n    };\n\n    symbolProto.setDraggable = function (draggable) {\n        var symbolPath = this.childAt(0);\n        symbolPath.draggable = draggable;\n        symbolPath.cursor = draggable ? 'move' : 'pointer';\n    };\n\n    /**\n     * Update symbol properties\n     * @param  {module:echarts/data/List} data\n     * @param  {number} idx\n     */\n    symbolProto.updateData = function (data, idx, seriesScope) {\n        this.silent = false;\n\n        var symbolType = data.getItemVisual(idx, 'symbol') || 'circle';\n        var seriesModel = data.hostModel;\n        var symbolSize = getSymbolSize(data, idx);\n\n        if (symbolType !== this._symbolType) {\n            this._createSymbol(symbolType, data, idx, symbolSize);\n        }\n        else {\n            var symbolPath = this.childAt(0);\n            graphic.updateProps(symbolPath, {\n                scale: getScale(symbolSize)\n            }, seriesModel, idx);\n        }\n        this._updateCommon(data, idx, symbolSize, seriesScope);\n        this._seriesModel = seriesModel;\n    };\n\n    // Update common properties\n    var normalStyleAccessPath = ['itemStyle', 'normal'];\n    var emphasisStyleAccessPath = ['itemStyle', 'emphasis'];\n    var normalLabelAccessPath = ['label', 'normal'];\n    var emphasisLabelAccessPath = ['label', 'emphasis'];\n\n    symbolProto._updateCommon = function (data, idx, symbolSize, seriesScope) {\n        var symbolPath = this.childAt(0);\n        var seriesModel = data.hostModel;\n        var color = data.getItemVisual(idx, 'color');\n\n        // Reset style\n        if (symbolPath.type !== 'image') {\n            symbolPath.useStyle({\n                strokeNoScale: true\n            });\n        }\n\n        seriesScope = seriesScope || null;\n\n        var itemStyle = seriesScope && seriesScope.itemStyle;\n        var hoverItemStyle = seriesScope && seriesScope.hoverItemStyle;\n        var symbolRotate = seriesScope && seriesScope.symbolRotate;\n        var symbolOffset = seriesScope && seriesScope.symbolOffset;\n        var labelModel = seriesScope && seriesScope.labelModel;\n        var hoverLabelModel = seriesScope && seriesScope.hoverLabelModel;\n        var hoverAnimation = seriesScope && seriesScope.hoverAnimation;\n\n        if (!seriesScope || data.hasItemOption) {\n            var itemModel = data.getItemModel(idx);\n\n            // Color must be excluded.\n            // Because symbol provide setColor individually to set fill and stroke\n            itemStyle = itemModel.getModel(normalStyleAccessPath).getItemStyle(['color']);\n            hoverItemStyle = itemModel.getModel(emphasisStyleAccessPath).getItemStyle();\n\n            symbolRotate = itemModel.getShallow('symbolRotate');\n            symbolOffset = itemModel.getShallow('symbolOffset');\n\n            labelModel = itemModel.getModel(normalLabelAccessPath);\n            hoverLabelModel = itemModel.getModel(emphasisLabelAccessPath);\n            hoverAnimation = itemModel.getShallow('hoverAnimation');\n        }\n        else {\n            hoverItemStyle = zrUtil.extend({}, hoverItemStyle);\n        }\n\n        var elStyle = symbolPath.style;\n\n        symbolPath.attr('rotation', (symbolRotate || 0) * Math.PI / 180 || 0);\n\n        if (symbolOffset) {\n            symbolPath.attr('position', [\n                numberUtil.parsePercent(symbolOffset[0], symbolSize[0]),\n                numberUtil.parsePercent(symbolOffset[1], symbolSize[1])\n            ]);\n        }\n\n        // PENDING setColor before setStyle!!!\n        symbolPath.setColor(color);\n\n        symbolPath.setStyle(itemStyle);\n\n        var opacity = data.getItemVisual(idx, 'opacity');\n        if (opacity != null) {\n            elStyle.opacity = opacity;\n        }\n\n        // Get last value dim\n        var dimensions = data.dimensions.slice();\n        var valueDim;\n        var dataType;\n        while (dimensions.length && (\n            valueDim = dimensions.pop(),\n            dataType = data.getDimensionInfo(valueDim).type,\n            dataType === 'ordinal' || dataType === 'time'\n        )) {} // jshint ignore:line\n\n        if (valueDim != null && labelModel.getShallow('show')) {\n            graphic.setText(elStyle, labelModel, color);\n            elStyle.text = zrUtil.retrieve(\n                seriesModel.getFormattedLabel(idx, 'normal'),\n                data.get(valueDim, idx)\n            );\n        }\n        else {\n            elStyle.text = '';\n        }\n\n        if (valueDim != null && hoverLabelModel.getShallow('show')) {\n            graphic.setText(hoverItemStyle, hoverLabelModel, color);\n            hoverItemStyle.text = zrUtil.retrieve(\n                seriesModel.getFormattedLabel(idx, 'emphasis'),\n                data.get(valueDim, idx)\n            );\n        }\n        else {\n            hoverItemStyle.text = '';\n        }\n\n        symbolPath.off('mouseover')\n            .off('mouseout')\n            .off('emphasis')\n            .off('normal');\n\n        symbolPath.hoverStyle = hoverItemStyle;\n\n        graphic.setHoverStyle(symbolPath);\n\n        var scale = getScale(symbolSize);\n\n        if (hoverAnimation && seriesModel.isAnimationEnabled()) {\n            var onEmphasis = function() {\n                var ratio = scale[1] / scale[0];\n                this.animateTo({\n                    scale: [\n                        Math.max(scale[0] * 1.1, scale[0] + 3),\n                        Math.max(scale[1] * 1.1, scale[1] + 3 * ratio)\n                    ]\n                }, 400, 'elasticOut');\n            };\n            var onNormal = function() {\n                this.animateTo({\n                    scale: scale\n                }, 400, 'elasticOut');\n            };\n            symbolPath.on('mouseover', onEmphasis)\n                .on('mouseout', onNormal)\n                .on('emphasis', onEmphasis)\n                .on('normal', onNormal);\n        }\n    };\n\n    symbolProto.fadeOut = function (cb) {\n        var symbolPath = this.childAt(0);\n        // Avoid mistaken hover when fading out\n        this.silent = true;\n        // Not show text when animating\n        symbolPath.style.text = '';\n        graphic.updateProps(symbolPath, {\n            scale: [0, 0]\n        }, this._seriesModel, this.dataIndex, cb);\n    };\n\n    zrUtil.inherits(Symbol, graphic.Group);\n\n    module.exports = Symbol;\n\n\n/***/ }),\n/* 351 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n\n    var ComponentModel = __webpack_require__(327);\n    var zrUtil = __webpack_require__(315);\n    var axisModelCreator = __webpack_require__(391);\n\n    var AxisModel = ComponentModel.extend({\n\n        type: 'cartesian2dAxis',\n\n        /**\n         * @type {module:echarts/coord/cartesian/Axis2D}\n         */\n        axis: null,\n\n        /**\n         * @override\n         */\n        init: function () {\n            AxisModel.superApply(this, 'init', arguments);\n            this.resetRange();\n        },\n\n        /**\n         * @override\n         */\n        mergeOption: function () {\n            AxisModel.superApply(this, 'mergeOption', arguments);\n            this.resetRange();\n        },\n\n        /**\n         * @override\n         */\n        restoreData: function () {\n            AxisModel.superApply(this, 'restoreData', arguments);\n            this.resetRange();\n        },\n\n        /**\n         * @override\n         * @return {module:echarts/model/Component}\n         */\n        getCoordSysModel: function () {\n            return this.ecModel.queryComponents({\n                mainType: 'grid',\n                index: this.option.gridIndex,\n                id: this.option.gridId\n            })[0];\n        }\n\n    });\n\n    function getAxisType(axisDim, option) {\n        // Default axis with data is category axis\n        return option.type || (option.data ? 'category' : 'value');\n    }\n\n    zrUtil.merge(AxisModel.prototype, __webpack_require__(390));\n\n    var extraOption = {\n        // gridIndex: 0,\n        // gridId: '',\n\n        // Offset is for multiple axis on the same position\n        offset: 0\n    };\n\n    axisModelCreator('x', AxisModel, getAxisType, extraOption);\n    axisModelCreator('y', AxisModel, getAxisType, extraOption);\n\n    module.exports = AxisModel;\n\n\n/***/ }),\n/* 352 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var classUtil = __webpack_require__(326);\n    var set = classUtil.set;\n    var get = classUtil.get;\n\n    module.exports = {\n        clearColorPalette: function () {\n            set(this, 'colorIdx', 0);\n            set(this, 'colorNameMap', {});\n        },\n\n        getColorFromPalette: function (name, scope) {\n            scope = scope || this;\n            var colorIdx = get(scope, 'colorIdx') || 0;\n            var colorNameMap = get(scope, 'colorNameMap') || set(scope, 'colorNameMap', {});\n            if (colorNameMap[name]) {\n                return colorNameMap[name];\n            }\n            var colorPalette = this.get('color', true) || [];\n            if (!colorPalette.length) {\n                return;\n            }\n\n            var color = colorPalette[colorIdx];\n            if (name) {\n                colorNameMap[name] = color;\n            }\n            set(scope, 'colorIdx', (colorIdx + 1) % colorPalette.length);\n\n            return color;\n        }\n    };\n\n\n/***/ }),\n/* 353 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n// Symbol factory\n\n\n    var graphic = __webpack_require__(317);\n    var BoundingRect = __webpack_require__(324);\n\n    /**\n     * Triangle shape\n     * @inner\n     */\n    var Triangle = graphic.extendShape({\n        type: 'triangle',\n        shape: {\n            cx: 0,\n            cy: 0,\n            width: 0,\n            height: 0\n        },\n        buildPath: function (path, shape) {\n            var cx = shape.cx;\n            var cy = shape.cy;\n            var width = shape.width / 2;\n            var height = shape.height / 2;\n            path.moveTo(cx, cy - height);\n            path.lineTo(cx + width, cy + height);\n            path.lineTo(cx - width, cy + height);\n            path.closePath();\n        }\n    });\n    /**\n     * Diamond shape\n     * @inner\n     */\n    var Diamond = graphic.extendShape({\n        type: 'diamond',\n        shape: {\n            cx: 0,\n            cy: 0,\n            width: 0,\n            height: 0\n        },\n        buildPath: function (path, shape) {\n            var cx = shape.cx;\n            var cy = shape.cy;\n            var width = shape.width / 2;\n            var height = shape.height / 2;\n            path.moveTo(cx, cy - height);\n            path.lineTo(cx + width, cy);\n            path.lineTo(cx, cy + height);\n            path.lineTo(cx - width, cy);\n            path.closePath();\n        }\n    });\n\n    /**\n     * Pin shape\n     * @inner\n     */\n    var Pin = graphic.extendShape({\n        type: 'pin',\n        shape: {\n            // x, y on the cusp\n            x: 0,\n            y: 0,\n            width: 0,\n            height: 0\n        },\n\n        buildPath: function (path, shape) {\n            var x = shape.x;\n            var y = shape.y;\n            var w = shape.width / 5 * 3;\n            // Height must be larger than width\n            var h = Math.max(w, shape.height);\n            var r = w / 2;\n\n            // Dist on y with tangent point and circle center\n            var dy = r * r / (h - r);\n            var cy = y - h + r + dy;\n            var angle = Math.asin(dy / r);\n            // Dist on x with tangent point and circle center\n            var dx = Math.cos(angle) * r;\n\n            var tanX = Math.sin(angle);\n            var tanY = Math.cos(angle);\n\n            path.arc(\n                x, cy, r,\n                Math.PI - angle,\n                Math.PI * 2 + angle\n            );\n\n            var cpLen = r * 0.6;\n            var cpLen2 = r * 0.7;\n            path.bezierCurveTo(\n                x + dx - tanX * cpLen, cy + dy + tanY * cpLen,\n                x, y - cpLen2,\n                x, y\n            );\n            path.bezierCurveTo(\n                x, y - cpLen2,\n                x - dx + tanX * cpLen, cy + dy + tanY * cpLen,\n                x - dx, cy + dy\n            );\n            path.closePath();\n        }\n    });\n\n    /**\n     * Arrow shape\n     * @inner\n     */\n    var Arrow = graphic.extendShape({\n\n        type: 'arrow',\n\n        shape: {\n            x: 0,\n            y: 0,\n            width: 0,\n            height: 0\n        },\n\n        buildPath: function (ctx, shape) {\n            var height = shape.height;\n            var width = shape.width;\n            var x = shape.x;\n            var y = shape.y;\n            var dx = width / 3 * 2;\n            ctx.moveTo(x, y);\n            ctx.lineTo(x + dx, y + height);\n            ctx.lineTo(x, y + height / 4 * 3);\n            ctx.lineTo(x - dx, y + height);\n            ctx.lineTo(x, y);\n            ctx.closePath();\n        }\n    });\n\n    /**\n     * Map of path contructors\n     * @type {Object.<string, module:zrender/graphic/Path>}\n     */\n    var symbolCtors = {\n        line: graphic.Line,\n\n        rect: graphic.Rect,\n\n        roundRect: graphic.Rect,\n\n        square: graphic.Rect,\n\n        circle: graphic.Circle,\n\n        diamond: Diamond,\n\n        pin: Pin,\n\n        arrow: Arrow,\n\n        triangle: Triangle\n    };\n\n    var symbolShapeMakers = {\n\n        line: function (x, y, w, h, shape) {\n            // FIXME\n            shape.x1 = x;\n            shape.y1 = y + h / 2;\n            shape.x2 = x + w;\n            shape.y2 = y + h / 2;\n        },\n\n        rect: function (x, y, w, h, shape) {\n            shape.x = x;\n            shape.y = y;\n            shape.width = w;\n            shape.height = h;\n        },\n\n        roundRect: function (x, y, w, h, shape) {\n            shape.x = x;\n            shape.y = y;\n            shape.width = w;\n            shape.height = h;\n            shape.r = Math.min(w, h) / 4;\n        },\n\n        square: function (x, y, w, h, shape) {\n            var size = Math.min(w, h);\n            shape.x = x;\n            shape.y = y;\n            shape.width = size;\n            shape.height = size;\n        },\n\n        circle: function (x, y, w, h, shape) {\n            // Put circle in the center of square\n            shape.cx = x + w / 2;\n            shape.cy = y + h / 2;\n            shape.r = Math.min(w, h) / 2;\n        },\n\n        diamond: function (x, y, w, h, shape) {\n            shape.cx = x + w / 2;\n            shape.cy = y + h / 2;\n            shape.width = w;\n            shape.height = h;\n        },\n\n        pin: function (x, y, w, h, shape) {\n            shape.x = x + w / 2;\n            shape.y = y + h / 2;\n            shape.width = w;\n            shape.height = h;\n        },\n\n        arrow: function (x, y, w, h, shape) {\n            shape.x = x + w / 2;\n            shape.y = y + h / 2;\n            shape.width = w;\n            shape.height = h;\n        },\n\n        triangle: function (x, y, w, h, shape) {\n            shape.cx = x + w / 2;\n            shape.cy = y + h / 2;\n            shape.width = w;\n            shape.height = h;\n        }\n    };\n\n    var symbolBuildProxies = {};\n    for (var name in symbolCtors) {\n        if (symbolCtors.hasOwnProperty(name)) {\n            symbolBuildProxies[name] = new symbolCtors[name]();\n        }\n    }\n\n    var Symbol = graphic.extendShape({\n\n        type: 'symbol',\n\n        shape: {\n            symbolType: '',\n            x: 0,\n            y: 0,\n            width: 0,\n            height: 0\n        },\n\n        beforeBrush: function () {\n            var style = this.style;\n            var shape = this.shape;\n            // FIXME\n            if (shape.symbolType === 'pin' && style.textPosition === 'inside') {\n                style.textPosition = ['50%', '40%'];\n                style.textAlign = 'center';\n                style.textVerticalAlign = 'middle';\n            }\n        },\n\n        buildPath: function (ctx, shape, inBundle) {\n            var symbolType = shape.symbolType;\n            var proxySymbol = symbolBuildProxies[symbolType];\n            if (shape.symbolType !== 'none') {\n                if (!proxySymbol) {\n                    // Default rect\n                    symbolType = 'rect';\n                    proxySymbol = symbolBuildProxies[symbolType];\n                }\n                symbolShapeMakers[symbolType](\n                    shape.x, shape.y, shape.width, shape.height, proxySymbol.shape\n                );\n                proxySymbol.buildPath(ctx, proxySymbol.shape, inBundle);\n            }\n        }\n    });\n\n    // Provide setColor helper method to avoid determine if set the fill or stroke outside\n    var symbolPathSetColor = function (color) {\n        if (this.type !== 'image') {\n            var symbolStyle = this.style;\n            var symbolShape = this.shape;\n            if (symbolShape && symbolShape.symbolType === 'line') {\n                symbolStyle.stroke = color;\n            }\n            else if (this.__isEmptyBrush) {\n                symbolStyle.stroke = color;\n                symbolStyle.fill = '#fff';\n            }\n            else {\n                // FIXME 判断图形默认是填充还是描边，使用 onlyStroke ?\n                symbolStyle.fill && (symbolStyle.fill = color);\n                symbolStyle.stroke && (symbolStyle.stroke = color);\n            }\n            this.dirty(false);\n        }\n    };\n\n    var symbolUtil = {\n        /**\n         * Create a symbol element with given symbol configuration: shape, x, y, width, height, color\n         * @param {string} symbolType\n         * @param {number} x\n         * @param {number} y\n         * @param {number} w\n         * @param {number} h\n         * @param {string} color\n         */\n        createSymbol: function (symbolType, x, y, w, h, color) {\n            var isEmpty = symbolType.indexOf('empty') === 0;\n            if (isEmpty) {\n                symbolType = symbolType.substr(5, 1).toLowerCase() + symbolType.substr(6);\n            }\n            var symbolPath;\n\n            if (symbolType.indexOf('image://') === 0) {\n                symbolPath = new graphic.Image({\n                    style: {\n                        image: symbolType.slice(8),\n                        x: x,\n                        y: y,\n                        width: w,\n                        height: h\n                    }\n                });\n            }\n            else if (symbolType.indexOf('path://') === 0) {\n                symbolPath = graphic.makePath(symbolType.slice(7), {}, new BoundingRect(x, y, w, h));\n            }\n            else {\n                symbolPath = new Symbol({\n                    shape: {\n                        symbolType: symbolType,\n                        x: x,\n                        y: y,\n                        width: w,\n                        height: h\n                    }\n                });\n            }\n\n            symbolPath.__isEmptyBrush = isEmpty;\n\n            symbolPath.setColor = symbolPathSetColor;\n\n            symbolPath.setColor(color);\n\n            return symbolPath;\n        }\n    };\n\n    module.exports = symbolUtil;\n\n\n/***/ }),\n/* 354 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var Group = __webpack_require__(336);\n    var componentUtil = __webpack_require__(343);\n    var clazzUtil = __webpack_require__(326);\n    var modelUtil = __webpack_require__(323);\n    var zrUtil = __webpack_require__(315);\n\n    function Chart() {\n\n        /**\n         * @type {module:zrender/container/Group}\n         * @readOnly\n         */\n        this.group = new Group();\n\n        /**\n         * @type {string}\n         * @readOnly\n         */\n        this.uid = componentUtil.getUID('viewChart');\n    }\n\n    Chart.prototype = {\n\n        type: 'chart',\n\n        /**\n         * Init the chart\n         * @param  {module:echarts/model/Global} ecModel\n         * @param  {module:echarts/ExtensionAPI} api\n         */\n        init: function (ecModel, api) {},\n\n        /**\n         * Render the chart\n         * @param  {module:echarts/model/Series} seriesModel\n         * @param  {module:echarts/model/Global} ecModel\n         * @param  {module:echarts/ExtensionAPI} api\n         * @param  {Object} payload\n         */\n        render: function (seriesModel, ecModel, api, payload) {},\n\n        /**\n         * Highlight series or specified data item\n         * @param  {module:echarts/model/Series} seriesModel\n         * @param  {module:echarts/model/Global} ecModel\n         * @param  {module:echarts/ExtensionAPI} api\n         * @param  {Object} payload\n         */\n        highlight: function (seriesModel, ecModel, api, payload) {\n            toggleHighlight(seriesModel.getData(), payload, 'emphasis');\n        },\n\n        /**\n         * Downplay series or specified data item\n         * @param  {module:echarts/model/Series} seriesModel\n         * @param  {module:echarts/model/Global} ecModel\n         * @param  {module:echarts/ExtensionAPI} api\n         * @param  {Object} payload\n         */\n        downplay: function (seriesModel, ecModel, api, payload) {\n            toggleHighlight(seriesModel.getData(), payload, 'normal');\n        },\n\n        /**\n         * Remove self\n         * @param  {module:echarts/model/Global} ecModel\n         * @param  {module:echarts/ExtensionAPI} api\n         */\n        remove: function (ecModel, api) {\n            this.group.removeAll();\n        },\n\n        /**\n         * Dispose self\n         * @param  {module:echarts/model/Global} ecModel\n         * @param  {module:echarts/ExtensionAPI} api\n         */\n        dispose: function () {}\n\n        /**\n         * The view contains the given point.\n         * @interface\n         * @param {Array.<number>} point\n         * @return {boolean}\n         */\n        // containPoint: function () {}\n\n    };\n\n    var chartProto = Chart.prototype;\n    chartProto.updateView\n        = chartProto.updateLayout\n        = chartProto.updateVisual\n        = function (seriesModel, ecModel, api, payload) {\n            this.render(seriesModel, ecModel, api, payload);\n        };\n\n    /**\n     * Set state of single element\n     * @param  {module:zrender/Element} el\n     * @param  {string} state\n     */\n    function elSetState(el, state) {\n        if (el) {\n            el.trigger(state);\n            if (el.type === 'group') {\n                for (var i = 0; i < el.childCount(); i++) {\n                    elSetState(el.childAt(i), state);\n                }\n            }\n        }\n    }\n    /**\n     * @param  {module:echarts/data/List} data\n     * @param  {Object} payload\n     * @param  {string} state 'normal'|'emphasis'\n     * @inner\n     */\n    function toggleHighlight(data, payload, state) {\n        var dataIndex = modelUtil.queryDataIndex(data, payload);\n\n        if (dataIndex != null) {\n            zrUtil.each(modelUtil.normalizeToArray(dataIndex), function (dataIdx) {\n                elSetState(data.getItemGraphicEl(dataIdx), state);\n            });\n        }\n        else {\n            data.eachItemGraphicEl(function (el) {\n                elSetState(el, state);\n            });\n        }\n    }\n\n    // Enable Chart.extend.\n    clazzUtil.enableClassExtend(Chart, ['dispose']);\n\n    // Add capability of registerClass, getClass, hasClass, registerSubTypeDefaulter and so on.\n    clazzUtil.enableClassManagement(Chart, {registerWhenExtend: true});\n\n    module.exports = Chart;\n\n\n/***/ }),\n/* 355 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * @module zrender/Element\n */\n\n\n    var guid = __webpack_require__(360);\n    var Eventful = __webpack_require__(331);\n    var Transformable = __webpack_require__(451);\n    var Animatable = __webpack_require__(449);\n    var zrUtil = __webpack_require__(315);\n\n    /**\n     * @alias module:zrender/Element\n     * @constructor\n     * @extends {module:zrender/mixin/Animatable}\n     * @extends {module:zrender/mixin/Transformable}\n     * @extends {module:zrender/mixin/Eventful}\n     */\n    var Element = function (opts) {\n\n        Transformable.call(this, opts);\n        Eventful.call(this, opts);\n        Animatable.call(this, opts);\n\n        /**\n         * 画布元素ID\n         * @type {string}\n         */\n        this.id = opts.id || guid();\n    };\n\n    Element.prototype = {\n\n        /**\n         * 元素类型\n         * Element type\n         * @type {string}\n         */\n        type: 'element',\n\n        /**\n         * 元素名字\n         * Element name\n         * @type {string}\n         */\n        name: '',\n\n        /**\n         * ZRender 实例对象，会在 element 添加到 zrender 实例中后自动赋值\n         * ZRender instance will be assigned when element is associated with zrender\n         * @name module:/zrender/Element#__zr\n         * @type {module:zrender/ZRender}\n         */\n        __zr: null,\n\n        /**\n         * 图形是否忽略，为true时忽略图形的绘制以及事件触发\n         * If ignore drawing and events of the element object\n         * @name module:/zrender/Element#ignore\n         * @type {boolean}\n         * @default false\n         */\n        ignore: false,\n\n        /**\n         * 用于裁剪的路径(shape)，所有 Group 内的路径在绘制时都会被这个路径裁剪\n         * 该路径会继承被裁减对象的变换\n         * @type {module:zrender/graphic/Path}\n         * @see http://www.w3.org/TR/2dcontext/#clipping-region\n         * @readOnly\n         */\n        clipPath: null,\n\n        /**\n         * Drift element\n         * @param  {number} dx dx on the global space\n         * @param  {number} dy dy on the global space\n         */\n        drift: function (dx, dy) {\n            switch (this.draggable) {\n                case 'horizontal':\n                    dy = 0;\n                    break;\n                case 'vertical':\n                    dx = 0;\n                    break;\n            }\n\n            var m = this.transform;\n            if (!m) {\n                m = this.transform = [1, 0, 0, 1, 0, 0];\n            }\n            m[4] += dx;\n            m[5] += dy;\n\n            this.decomposeTransform();\n            this.dirty(false);\n        },\n\n        /**\n         * Hook before update\n         */\n        beforeUpdate: function () {},\n        /**\n         * Hook after update\n         */\n        afterUpdate: function () {},\n        /**\n         * Update each frame\n         */\n        update: function () {\n            this.updateTransform();\n        },\n\n        /**\n         * @param  {Function} cb\n         * @param  {}   context\n         */\n        traverse: function (cb, context) {},\n\n        /**\n         * @protected\n         */\n        attrKV: function (key, value) {\n            if (key === 'position' || key === 'scale' || key === 'origin') {\n                // Copy the array\n                if (value) {\n                    var target = this[key];\n                    if (!target) {\n                        target = this[key] = [];\n                    }\n                    target[0] = value[0];\n                    target[1] = value[1];\n                }\n            }\n            else {\n                this[key] = value;\n            }\n        },\n\n        /**\n         * Hide the element\n         */\n        hide: function () {\n            this.ignore = true;\n            this.__zr && this.__zr.refresh();\n        },\n\n        /**\n         * Show the element\n         */\n        show: function () {\n            this.ignore = false;\n            this.__zr && this.__zr.refresh();\n        },\n\n        /**\n         * @param {string|Object} key\n         * @param {*} value\n         */\n        attr: function (key, value) {\n            if (typeof key === 'string') {\n                this.attrKV(key, value);\n            }\n            else if (zrUtil.isObject(key)) {\n                for (var name in key) {\n                    if (key.hasOwnProperty(name)) {\n                        this.attrKV(name, key[name]);\n                    }\n                }\n            }\n\n            this.dirty(false);\n\n            return this;\n        },\n\n        /**\n         * @param {module:zrender/graphic/Path} clipPath\n         */\n        setClipPath: function (clipPath) {\n            var zr = this.__zr;\n            if (zr) {\n                clipPath.addSelfToZr(zr);\n            }\n\n            // Remove previous clip path\n            if (this.clipPath && this.clipPath !== clipPath) {\n                this.removeClipPath();\n            }\n\n            this.clipPath = clipPath;\n            clipPath.__zr = zr;\n            clipPath.__clipTarget = this;\n\n            this.dirty(false);\n        },\n\n        /**\n         */\n        removeClipPath: function () {\n            var clipPath = this.clipPath;\n            if (clipPath) {\n                if (clipPath.__zr) {\n                    clipPath.removeSelfFromZr(clipPath.__zr);\n                }\n\n                clipPath.__zr = null;\n                clipPath.__clipTarget = null;\n                this.clipPath = null;\n\n                this.dirty(false);\n            }\n        },\n\n        /**\n         * Add self from zrender instance.\n         * Not recursively because it will be invoked when element added to storage.\n         * @param {module:zrender/ZRender} zr\n         */\n        addSelfToZr: function (zr) {\n            this.__zr = zr;\n            // 添加动画\n            var animators = this.animators;\n            if (animators) {\n                for (var i = 0; i < animators.length; i++) {\n                    zr.animation.addAnimator(animators[i]);\n                }\n            }\n\n            if (this.clipPath) {\n                this.clipPath.addSelfToZr(zr);\n            }\n        },\n\n        /**\n         * Remove self from zrender instance.\n         * Not recursively because it will be invoked when element added to storage.\n         * @param {module:zrender/ZRender} zr\n         */\n        removeSelfFromZr: function (zr) {\n            this.__zr = null;\n            // 移除动画\n            var animators = this.animators;\n            if (animators) {\n                for (var i = 0; i < animators.length; i++) {\n                    zr.animation.removeAnimator(animators[i]);\n                }\n            }\n\n            if (this.clipPath) {\n                this.clipPath.removeSelfFromZr(zr);\n            }\n        }\n    };\n\n    zrUtil.mixin(Element, Animatable);\n    zrUtil.mixin(Element, Transformable);\n    zrUtil.mixin(Element, Eventful);\n\n    module.exports = Element;\n\n\n/***/ }),\n/* 356 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * @module echarts/animation/Animator\n */\n\n\n    var Clip = __webpack_require__(422);\n    var color = __webpack_require__(330);\n    var util = __webpack_require__(315);\n    var isArrayLike = util.isArrayLike;\n\n    var arraySlice = Array.prototype.slice;\n\n    function defaultGetter(target, key) {\n        return target[key];\n    }\n\n    function defaultSetter(target, key, value) {\n        target[key] = value;\n    }\n\n    /**\n     * @param  {number} p0\n     * @param  {number} p1\n     * @param  {number} percent\n     * @return {number}\n     */\n    function interpolateNumber(p0, p1, percent) {\n        return (p1 - p0) * percent + p0;\n    }\n\n    /**\n     * @param  {string} p0\n     * @param  {string} p1\n     * @param  {number} percent\n     * @return {string}\n     */\n    function interpolateString(p0, p1, percent) {\n        return percent > 0.5 ? p1 : p0;\n    }\n\n    /**\n     * @param  {Array} p0\n     * @param  {Array} p1\n     * @param  {number} percent\n     * @param  {Array} out\n     * @param  {number} arrDim\n     */\n    function interpolateArray(p0, p1, percent, out, arrDim) {\n        var len = p0.length;\n        if (arrDim == 1) {\n            for (var i = 0; i < len; i++) {\n                out[i] = interpolateNumber(p0[i], p1[i], percent);\n            }\n        }\n        else {\n            var len2 = p0[0].length;\n            for (var i = 0; i < len; i++) {\n                for (var j = 0; j < len2; j++) {\n                    out[i][j] = interpolateNumber(\n                        p0[i][j], p1[i][j], percent\n                    );\n                }\n            }\n        }\n    }\n\n    // arr0 is source array, arr1 is target array.\n    // Do some preprocess to avoid error happened when interpolating from arr0 to arr1\n    function fillArr(arr0, arr1, arrDim) {\n        var arr0Len = arr0.length;\n        var arr1Len = arr1.length;\n        if (arr0Len !== arr1Len) {\n            // FIXME Not work for TypedArray\n            var isPreviousLarger = arr0Len > arr1Len;\n            if (isPreviousLarger) {\n                // Cut the previous\n                arr0.length = arr1Len;\n            }\n            else {\n                // Fill the previous\n                for (var i = arr0Len; i < arr1Len; i++) {\n                    arr0.push(\n                        arrDim === 1 ? arr1[i] : arraySlice.call(arr1[i])\n                    );\n                }\n            }\n        }\n        // Handling NaN value\n        var len2 = arr0[0] && arr0[0].length;\n        for (var i = 0; i < arr0.length; i++) {\n            if (arrDim === 1) {\n                if (isNaN(arr0[i])) {\n                    arr0[i] = arr1[i];\n                }\n            }\n            else {\n                for (var j = 0; j < len2; j++) {\n                    if (isNaN(arr0[i][j])) {\n                        arr0[i][j] = arr1[i][j];\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * @param  {Array} arr0\n     * @param  {Array} arr1\n     * @param  {number} arrDim\n     * @return {boolean}\n     */\n    function isArraySame(arr0, arr1, arrDim) {\n        if (arr0 === arr1) {\n            return true;\n        }\n        var len = arr0.length;\n        if (len !== arr1.length) {\n            return false;\n        }\n        if (arrDim === 1) {\n            for (var i = 0; i < len; i++) {\n                if (arr0[i] !== arr1[i]) {\n                    return false;\n                }\n            }\n        }\n        else {\n            var len2 = arr0[0].length;\n            for (var i = 0; i < len; i++) {\n                for (var j = 0; j < len2; j++) {\n                    if (arr0[i][j] !== arr1[i][j]) {\n                        return false;\n                    }\n                }\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Catmull Rom interpolate array\n     * @param  {Array} p0\n     * @param  {Array} p1\n     * @param  {Array} p2\n     * @param  {Array} p3\n     * @param  {number} t\n     * @param  {number} t2\n     * @param  {number} t3\n     * @param  {Array} out\n     * @param  {number} arrDim\n     */\n    function catmullRomInterpolateArray(\n        p0, p1, p2, p3, t, t2, t3, out, arrDim\n    ) {\n        var len = p0.length;\n        if (arrDim == 1) {\n            for (var i = 0; i < len; i++) {\n                out[i] = catmullRomInterpolate(\n                    p0[i], p1[i], p2[i], p3[i], t, t2, t3\n                );\n            }\n        }\n        else {\n            var len2 = p0[0].length;\n            for (var i = 0; i < len; i++) {\n                for (var j = 0; j < len2; j++) {\n                    out[i][j] = catmullRomInterpolate(\n                        p0[i][j], p1[i][j], p2[i][j], p3[i][j],\n                        t, t2, t3\n                    );\n                }\n            }\n        }\n    }\n\n    /**\n     * Catmull Rom interpolate number\n     * @param  {number} p0\n     * @param  {number} p1\n     * @param  {number} p2\n     * @param  {number} p3\n     * @param  {number} t\n     * @param  {number} t2\n     * @param  {number} t3\n     * @return {number}\n     */\n    function catmullRomInterpolate(p0, p1, p2, p3, t, t2, t3) {\n        var v0 = (p2 - p0) * 0.5;\n        var v1 = (p3 - p1) * 0.5;\n        return (2 * (p1 - p2) + v0 + v1) * t3\n                + (-3 * (p1 - p2) - 2 * v0 - v1) * t2\n                + v0 * t + p1;\n    }\n\n    function cloneValue(value) {\n        if (isArrayLike(value)) {\n            var len = value.length;\n            if (isArrayLike(value[0])) {\n                var ret = [];\n                for (var i = 0; i < len; i++) {\n                    ret.push(arraySlice.call(value[i]));\n                }\n                return ret;\n            }\n\n            return arraySlice.call(value);\n        }\n\n        return value;\n    }\n\n    function rgba2String(rgba) {\n        rgba[0] = Math.floor(rgba[0]);\n        rgba[1] = Math.floor(rgba[1]);\n        rgba[2] = Math.floor(rgba[2]);\n\n        return 'rgba(' + rgba.join(',') + ')';\n    }\n\n    function createTrackClip (animator, easing, oneTrackDone, keyframes, propName) {\n        var getter = animator._getter;\n        var setter = animator._setter;\n        var useSpline = easing === 'spline';\n\n        var trackLen = keyframes.length;\n        if (!trackLen) {\n            return;\n        }\n        // Guess data type\n        var firstVal = keyframes[0].value;\n        var isValueArray = isArrayLike(firstVal);\n        var isValueColor = false;\n        var isValueString = false;\n\n        // For vertices morphing\n        var arrDim = (\n                isValueArray\n                && isArrayLike(firstVal[0])\n            )\n            ? 2 : 1;\n        var trackMaxTime;\n        // Sort keyframe as ascending\n        keyframes.sort(function(a, b) {\n            return a.time - b.time;\n        });\n\n        trackMaxTime = keyframes[trackLen - 1].time;\n        // Percents of each keyframe\n        var kfPercents = [];\n        // Value of each keyframe\n        var kfValues = [];\n        var prevValue = keyframes[0].value;\n        var isAllValueEqual = true;\n        for (var i = 0; i < trackLen; i++) {\n            kfPercents.push(keyframes[i].time / trackMaxTime);\n            // Assume value is a color when it is a string\n            var value = keyframes[i].value;\n\n            // Check if value is equal, deep check if value is array\n            if (!((isValueArray && isArraySame(value, prevValue, arrDim))\n                || (!isValueArray && value === prevValue))) {\n                isAllValueEqual = false;\n            }\n            prevValue = value;\n\n            // Try converting a string to a color array\n            if (typeof value == 'string') {\n                var colorArray = color.parse(value);\n                if (colorArray) {\n                    value = colorArray;\n                    isValueColor = true;\n                }\n                else {\n                    isValueString = true;\n                }\n            }\n            kfValues.push(value);\n        }\n        if (isAllValueEqual) {\n            return;\n        }\n\n        var lastValue = kfValues[trackLen - 1];\n        // Polyfill array and NaN value\n        for (var i = 0; i < trackLen - 1; i++) {\n            if (isValueArray) {\n                fillArr(kfValues[i], lastValue, arrDim);\n            }\n            else {\n                if (isNaN(kfValues[i]) && !isNaN(lastValue) && !isValueString && !isValueColor) {\n                    kfValues[i] = lastValue;\n                }\n            }\n        }\n        isValueArray && fillArr(getter(animator._target, propName), lastValue, arrDim);\n\n        // Cache the key of last frame to speed up when\n        // animation playback is sequency\n        var lastFrame = 0;\n        var lastFramePercent = 0;\n        var start;\n        var w;\n        var p0;\n        var p1;\n        var p2;\n        var p3;\n\n        if (isValueColor) {\n            var rgba = [0, 0, 0, 0];\n        }\n\n        var onframe = function (target, percent) {\n            // Find the range keyframes\n            // kf1-----kf2---------current--------kf3\n            // find kf2 and kf3 and do interpolation\n            var frame;\n            // In the easing function like elasticOut, percent may less than 0\n            if (percent < 0) {\n                frame = 0;\n            }\n            else if (percent < lastFramePercent) {\n                // Start from next key\n                // PENDING start from lastFrame ?\n                start = Math.min(lastFrame + 1, trackLen - 1);\n                for (frame = start; frame >= 0; frame--) {\n                    if (kfPercents[frame] <= percent) {\n                        break;\n                    }\n                }\n                // PENDING really need to do this ?\n                frame = Math.min(frame, trackLen - 2);\n            }\n            else {\n                for (frame = lastFrame; frame < trackLen; frame++) {\n                    if (kfPercents[frame] > percent) {\n                        break;\n                    }\n                }\n                frame = Math.min(frame - 1, trackLen - 2);\n            }\n            lastFrame = frame;\n            lastFramePercent = percent;\n\n            var range = (kfPercents[frame + 1] - kfPercents[frame]);\n            if (range === 0) {\n                return;\n            }\n            else {\n                w = (percent - kfPercents[frame]) / range;\n            }\n            if (useSpline) {\n                p1 = kfValues[frame];\n                p0 = kfValues[frame === 0 ? frame : frame - 1];\n                p2 = kfValues[frame > trackLen - 2 ? trackLen - 1 : frame + 1];\n                p3 = kfValues[frame > trackLen - 3 ? trackLen - 1 : frame + 2];\n                if (isValueArray) {\n                    catmullRomInterpolateArray(\n                        p0, p1, p2, p3, w, w * w, w * w * w,\n                        getter(target, propName),\n                        arrDim\n                    );\n                }\n                else {\n                    var value;\n                    if (isValueColor) {\n                        value = catmullRomInterpolateArray(\n                            p0, p1, p2, p3, w, w * w, w * w * w,\n                            rgba, 1\n                        );\n                        value = rgba2String(rgba);\n                    }\n                    else if (isValueString) {\n                        // String is step(0.5)\n                        return interpolateString(p1, p2, w);\n                    }\n                    else {\n                        value = catmullRomInterpolate(\n                            p0, p1, p2, p3, w, w * w, w * w * w\n                        );\n                    }\n                    setter(\n                        target,\n                        propName,\n                        value\n                    );\n                }\n            }\n            else {\n                if (isValueArray) {\n                    interpolateArray(\n                        kfValues[frame], kfValues[frame + 1], w,\n                        getter(target, propName),\n                        arrDim\n                    );\n                }\n                else {\n                    var value;\n                    if (isValueColor) {\n                        interpolateArray(\n                            kfValues[frame], kfValues[frame + 1], w,\n                            rgba, 1\n                        );\n                        value = rgba2String(rgba);\n                    }\n                    else if (isValueString) {\n                        // String is step(0.5)\n                        return interpolateString(kfValues[frame], kfValues[frame + 1], w);\n                    }\n                    else {\n                        value = interpolateNumber(kfValues[frame], kfValues[frame + 1], w);\n                    }\n                    setter(\n                        target,\n                        propName,\n                        value\n                    );\n                }\n            }\n        };\n\n        var clip = new Clip({\n            target: animator._target,\n            life: trackMaxTime,\n            loop: animator._loop,\n            delay: animator._delay,\n            onframe: onframe,\n            ondestroy: oneTrackDone\n        });\n\n        if (easing && easing !== 'spline') {\n            clip.easing = easing;\n        }\n\n        return clip;\n    }\n\n    /**\n     * @alias module:zrender/animation/Animator\n     * @constructor\n     * @param {Object} target\n     * @param {boolean} loop\n     * @param {Function} getter\n     * @param {Function} setter\n     */\n    var Animator = function(target, loop, getter, setter) {\n        this._tracks = {};\n        this._target = target;\n\n        this._loop = loop || false;\n\n        this._getter = getter || defaultGetter;\n        this._setter = setter || defaultSetter;\n\n        this._clipCount = 0;\n\n        this._delay = 0;\n\n        this._doneList = [];\n\n        this._onframeList = [];\n\n        this._clipList = [];\n    };\n\n    Animator.prototype = {\n        /**\n         * 设置动画关键帧\n         * @param  {number} time 关键帧时间，单位是ms\n         * @param  {Object} props 关键帧的属性值，key-value表示\n         * @return {module:zrender/animation/Animator}\n         */\n        when: function(time /* ms */, props) {\n            var tracks = this._tracks;\n            for (var propName in props) {\n                if (!props.hasOwnProperty(propName)) {\n                    continue;\n                }\n\n                if (!tracks[propName]) {\n                    tracks[propName] = [];\n                    // Invalid value\n                    var value = this._getter(this._target, propName);\n                    if (value == null) {\n                        // zrLog('Invalid property ' + propName);\n                        continue;\n                    }\n                    // If time is 0\n                    //  Then props is given initialize value\n                    // Else\n                    //  Initialize value from current prop value\n                    if (time !== 0) {\n                        tracks[propName].push({\n                            time: 0,\n                            value: cloneValue(value)\n                        });\n                    }\n                }\n                tracks[propName].push({\n                    time: time,\n                    value: props[propName]\n                });\n            }\n            return this;\n        },\n        /**\n         * 添加动画每一帧的回调函数\n         * @param  {Function} callback\n         * @return {module:zrender/animation/Animator}\n         */\n        during: function (callback) {\n            this._onframeList.push(callback);\n            return this;\n        },\n\n        pause: function () {\n            for (var i = 0; i < this._clipList.length; i++) {\n                this._clipList[i].pause();\n            }\n            this._paused = true;\n        },\n\n        resume: function () {\n            for (var i = 0; i < this._clipList.length; i++) {\n                this._clipList[i].resume();\n            }\n            this._paused = false;\n        },\n\n        isPaused: function () {\n            return !!this._paused;\n        },\n\n        _doneCallback: function () {\n            // Clear all tracks\n            this._tracks = {};\n            // Clear all clips\n            this._clipList.length = 0;\n\n            var doneList = this._doneList;\n            var len = doneList.length;\n            for (var i = 0; i < len; i++) {\n                doneList[i].call(this);\n            }\n        },\n        /**\n         * 开始执行动画\n         * @param  {string|Function} easing\n         *         动画缓动函数，详见{@link module:zrender/animation/easing}\n         * @return {module:zrender/animation/Animator}\n         */\n        start: function (easing) {\n\n            var self = this;\n            var clipCount = 0;\n\n            var oneTrackDone = function() {\n                clipCount--;\n                if (!clipCount) {\n                    self._doneCallback();\n                }\n            };\n\n            var lastClip;\n            for (var propName in this._tracks) {\n                if (!this._tracks.hasOwnProperty(propName)) {\n                    continue;\n                }\n                var clip = createTrackClip(\n                    this, easing, oneTrackDone,\n                    this._tracks[propName], propName\n                );\n                if (clip) {\n                    this._clipList.push(clip);\n                    clipCount++;\n\n                    // If start after added to animation\n                    if (this.animation) {\n                        this.animation.addClip(clip);\n                    }\n\n                    lastClip = clip;\n                }\n            }\n\n            // Add during callback on the last clip\n            if (lastClip) {\n                var oldOnFrame = lastClip.onframe;\n                lastClip.onframe = function (target, percent) {\n                    oldOnFrame(target, percent);\n\n                    for (var i = 0; i < self._onframeList.length; i++) {\n                        self._onframeList[i](target, percent);\n                    }\n                };\n            }\n\n            if (!clipCount) {\n                this._doneCallback();\n            }\n            return this;\n        },\n        /**\n         * 停止动画\n         * @param {boolean} forwardToLast If move to last frame before stop\n         */\n        stop: function (forwardToLast) {\n            var clipList = this._clipList;\n            var animation = this.animation;\n            for (var i = 0; i < clipList.length; i++) {\n                var clip = clipList[i];\n                if (forwardToLast) {\n                    // Move to last frame before stop\n                    clip.onframe(this._target, 1);\n                }\n                animation && animation.removeClip(clip);\n            }\n            clipList.length = 0;\n        },\n        /**\n         * 设置动画延迟开始的时间\n         * @param  {number} time 单位ms\n         * @return {module:zrender/animation/Animator}\n         */\n        delay: function (time) {\n            this._delay = time;\n            return this;\n        },\n        /**\n         * 添加动画结束的回调\n         * @param  {Function} cb\n         * @return {module:zrender/animation/Animator}\n         */\n        done: function(cb) {\n            if (cb) {\n                this._doneList.push(cb);\n            }\n            return this;\n        },\n\n        /**\n         * @return {Array.<module:zrender/animation/Clip>}\n         */\n        getClips: function () {\n            return this._clipList;\n        }\n    };\n\n    module.exports = Animator;\n\n\n/***/ }),\n/* 357 */\n/***/ (function(module, exports) {\n\n\n\n    module.exports = (typeof window !== 'undefined' &&\n                                    (window.requestAnimationFrame\n                                    || window.msRequestAnimationFrame\n                                    || window.mozRequestAnimationFrame\n                                    || window.webkitRequestAnimationFrame))\n                                || function (func) {\n                                    setTimeout(func, 16);\n                                };\n\n\n\n/***/ }),\n/* 358 */\n/***/ (function(module, exports) {\n\n\n\n    var PI2 = Math.PI * 2;\n    module.exports = {\n        normalizeRadian: function(angle) {\n            angle %= PI2;\n            if (angle < 0) {\n                angle += PI2;\n            }\n            return angle;\n        }\n    };\n\n\n/***/ }),\n/* 359 */\n/***/ (function(module, exports) {\n\n// Simple LRU cache use doubly linked list\n// @module zrender/core/LRU\n\n\n    /**\n     * Simple double linked list. Compared with array, it has O(1) remove operation.\n     * @constructor\n     */\n    var LinkedList = function () {\n\n        /**\n         * @type {module:zrender/core/LRU~Entry}\n         */\n        this.head = null;\n\n        /**\n         * @type {module:zrender/core/LRU~Entry}\n         */\n        this.tail = null;\n\n        this._len = 0;\n    };\n\n    var linkedListProto = LinkedList.prototype;\n    /**\n     * Insert a new value at the tail\n     * @param  {} val\n     * @return {module:zrender/core/LRU~Entry}\n     */\n    linkedListProto.insert = function (val) {\n        var entry = new Entry(val);\n        this.insertEntry(entry);\n        return entry;\n    };\n\n    /**\n     * Insert an entry at the tail\n     * @param  {module:zrender/core/LRU~Entry} entry\n     */\n    linkedListProto.insertEntry = function (entry) {\n        if (!this.head) {\n            this.head = this.tail = entry;\n        }\n        else {\n            this.tail.next = entry;\n            entry.prev = this.tail;\n            entry.next = null;\n            this.tail = entry;\n        }\n        this._len++;\n    };\n\n    /**\n     * Remove entry.\n     * @param  {module:zrender/core/LRU~Entry} entry\n     */\n    linkedListProto.remove = function (entry) {\n        var prev = entry.prev;\n        var next = entry.next;\n        if (prev) {\n            prev.next = next;\n        }\n        else {\n            // Is head\n            this.head = next;\n        }\n        if (next) {\n            next.prev = prev;\n        }\n        else {\n            // Is tail\n            this.tail = prev;\n        }\n        entry.next = entry.prev = null;\n        this._len--;\n    };\n\n    /**\n     * @return {number}\n     */\n    linkedListProto.len = function () {\n        return this._len;\n    };\n\n    /**\n     * Clear list\n     */\n    linkedListProto.clear = function () {\n        this.head = this.tail = null;\n        this._len = 0;\n    };\n\n    /**\n     * @constructor\n     * @param {} val\n     */\n    var Entry = function (val) {\n        /**\n         * @type {}\n         */\n        this.value = val;\n\n        /**\n         * @type {module:zrender/core/LRU~Entry}\n         */\n        this.next;\n\n        /**\n         * @type {module:zrender/core/LRU~Entry}\n         */\n        this.prev;\n    };\n\n    /**\n     * LRU Cache\n     * @constructor\n     * @alias module:zrender/core/LRU\n     */\n    var LRU = function (maxSize) {\n\n        this._list = new LinkedList();\n\n        this._map = {};\n\n        this._maxSize = maxSize || 10;\n\n        this._lastRemovedEntry = null;\n    };\n\n    var LRUProto = LRU.prototype;\n\n    /**\n     * @param  {string} key\n     * @param  {} value\n     * @return {} Removed value\n     */\n    LRUProto.put = function (key, value) {\n        var list = this._list;\n        var map = this._map;\n        var removed = null;\n        if (map[key] == null) {\n            var len = list.len();\n            // Reuse last removed entry\n            var entry = this._lastRemovedEntry;\n\n            if (len >= this._maxSize && len > 0) {\n                // Remove the least recently used\n                var leastUsedEntry = list.head;\n                list.remove(leastUsedEntry);\n                delete map[leastUsedEntry.key];\n\n                removed = leastUsedEntry.value;\n                this._lastRemovedEntry = leastUsedEntry;\n            }\n\n            if (entry) {\n                entry.value = value;\n            }\n            else {\n                entry = new Entry(value);\n            }\n            entry.key = key;\n            list.insertEntry(entry);\n            map[key] = entry;\n        }\n\n        return removed;\n    };\n\n    /**\n     * @param  {string} key\n     * @return {}\n     */\n    LRUProto.get = function (key) {\n        var entry = this._map[key];\n        var list = this._list;\n        if (entry != null) {\n            // Put the latest used entry in the tail\n            if (entry !== list.tail) {\n                list.remove(entry);\n                list.insertEntry(entry);\n            }\n\n            return entry.value;\n        }\n    };\n\n    /**\n     * Clear the cache\n     */\n    LRUProto.clear = function () {\n        this._list.clear();\n        this._map = {};\n    };\n\n    module.exports = LRU;\n\n\n/***/ }),\n/* 360 */\n/***/ (function(module, exports) {\n\n/**\n * zrender: 生成唯一id\n *\n * @author errorrik (errorrik@gmail.com)\n */\n\n\n    var idStart = 0x0907;\n\n    module.exports = function () {\n        return idStart++;\n    };\n\n\n\n/***/ }),\n/* 361 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\n        var config = __webpack_require__(335);\n\n        /**\n         * @exports zrender/tool/log\n         * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)\n         */\n        module.exports = function() {\n            if (config.debugMode === 0) {\n                return;\n            }\n            else if (config.debugMode == 1) {\n                for (var k in arguments) {\n                    throw new Error(arguments[k]);\n                }\n            }\n            else if (config.debugMode > 1) {\n                for (var k in arguments) {\n                    console.log(arguments[k]);\n                }\n            }\n        };\n\n        /* for debug\n        return function(mes) {\n            document.getElementById('wrong-message').innerHTML =\n                mes + ' ' + (new Date() - 0)\n                + '<br/>'\n                + document.getElementById('wrong-message').innerHTML;\n        };\n        */\n    \n\n\n/***/ }),\n/* 362 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * Image element\n * @module zrender/graphic/Image\n */\n\n\n\n    var Displayable = __webpack_require__(345);\n    var BoundingRect = __webpack_require__(324);\n    var zrUtil = __webpack_require__(315);\n\n    var LRU = __webpack_require__(359);\n    var globalImageCache = new LRU(50);\n    /**\n     * @alias zrender/graphic/Image\n     * @extends module:zrender/graphic/Displayable\n     * @constructor\n     * @param {Object} opts\n     */\n    function ZImage(opts) {\n        Displayable.call(this, opts);\n    }\n\n    ZImage.prototype = {\n\n        constructor: ZImage,\n\n        type: 'image',\n\n        brush: function (ctx, prevEl) {\n            var style = this.style;\n            var src = style.image;\n            var image;\n\n            // Must bind each time\n            style.bind(ctx, this, prevEl);\n            // style.image is a url string\n            if (typeof src === 'string') {\n                image = this._image;\n            }\n            // style.image is an HTMLImageElement or HTMLCanvasElement or Canvas\n            else {\n                image = src;\n            }\n            // FIXME Case create many images with src\n            if (!image && src) {\n                // Try get from global image cache\n                var cachedImgObj = globalImageCache.get(src);\n                if (!cachedImgObj) {\n                    // Create a new image\n                    image = new Image();\n                    image.onload = function () {\n                        image.onload = null;\n                        for (var i = 0; i < cachedImgObj.pending.length; i++) {\n                            cachedImgObj.pending[i].dirty();\n                        }\n                    };\n                    cachedImgObj = {\n                        image: image,\n                        pending: [this]\n                    };\n                    image.src = src;\n                    globalImageCache.put(src, cachedImgObj);\n                    this._image = image;\n                    return;\n                }\n                else {\n                    image = cachedImgObj.image;\n                    this._image = image;\n                    // Image is not complete finish, add to pending list\n                    if (!image.width || !image.height) {\n                        cachedImgObj.pending.push(this);\n                        return;\n                    }\n                }\n            }\n\n            if (image) {\n                // 图片已经加载完成\n                // if (image.nodeName.toUpperCase() == 'IMG') {\n                //     if (!image.complete) {\n                //         return;\n                //     }\n                // }\n                // Else is canvas\n\n                var x = style.x || 0;\n                var y = style.y || 0;\n                // 图片加载失败\n                if (!image.width || !image.height) {\n                    return;\n                }\n                var width = style.width;\n                var height = style.height;\n                var aspect = image.width / image.height;\n                if (width == null && height != null) {\n                    // Keep image/height ratio\n                    width = height * aspect;\n                }\n                else if (height == null && width != null) {\n                    height = width / aspect;\n                }\n                else if (width == null && height == null) {\n                    width = image.width;\n                    height = image.height;\n                }\n\n                // 设置transform\n                this.setTransform(ctx);\n\n                if (style.sWidth && style.sHeight) {\n                    var sx = style.sx || 0;\n                    var sy = style.sy || 0;\n                    ctx.drawImage(\n                        image,\n                        sx, sy, style.sWidth, style.sHeight,\n                        x, y, width, height\n                    );\n                }\n                else if (style.sx && style.sy) {\n                    var sx = style.sx;\n                    var sy = style.sy;\n                    var sWidth = width - sx;\n                    var sHeight = height - sy;\n                    ctx.drawImage(\n                        image,\n                        sx, sy, sWidth, sHeight,\n                        x, y, width, height\n                    );\n                }\n                else {\n                    ctx.drawImage(image, x, y, width, height);\n                }\n\n                this.restoreTransform(ctx);\n\n                // Draw rect text\n                if (style.text != null) {\n                    this.drawRectText(ctx, this.getBoundingRect());\n                }\n\n            }\n        },\n\n        getBoundingRect: function () {\n            var style = this.style;\n            if (! this._rect) {\n                this._rect = new BoundingRect(\n                    style.x || 0, style.y || 0, style.width || 0, style.height || 0\n                );\n            }\n            return this._rect;\n        }\n    };\n\n    zrUtil.inherits(ZImage, Displayable);\n\n    module.exports = ZImage;\n\n\n/***/ }),\n/* 363 */\n/***/ (function(module, exports) {\n\n\n\n    var Pattern = function (image, repeat) {\n        // Should do nothing more in this constructor. Because gradient can be\n        // declard by `color: {image: ...}`, where this constructor will not be called.\n\n        this.image = image;\n        this.repeat = repeat;\n\n        // Can be cloned\n        this.type = 'pattern';\n    };\n\n    Pattern.prototype.getCanvasPattern = function (ctx) {\n        return ctx.createPattern(this.image, this.repeat || 'repeat');\n    };\n\n    module.exports = Pattern;\n\n\n/***/ }),\n/* 364 */\n/***/ (function(module, exports) {\n\n/**\n * @module zrender/graphic/Style\n */\n\n\n    var STYLE_COMMON_PROPS = [\n        ['shadowBlur', 0], ['shadowOffsetX', 0], ['shadowOffsetY', 0], ['shadowColor', '#000'],\n        ['lineCap', 'butt'], ['lineJoin', 'miter'], ['miterLimit', 10]\n    ];\n\n    // var SHADOW_PROPS = STYLE_COMMON_PROPS.slice(0, 4);\n    // var LINE_PROPS = STYLE_COMMON_PROPS.slice(4);\n\n    var Style = function (opts) {\n        this.extendFrom(opts);\n    };\n\n    function createLinearGradient(ctx, obj, rect) {\n        var x = obj.x == null ? 0 : obj.x;\n        var x2 = obj.x2 == null ? 1 : obj.x2;\n        var y = obj.y == null ? 0 : obj.y;\n        var y2 = obj.y2 == null ? 0 : obj.y2;\n\n        if (!obj.global) {\n            x = x * rect.width + rect.x;\n            x2 = x2 * rect.width + rect.x;\n            y = y * rect.height + rect.y;\n            y2 = y2 * rect.height + rect.y;\n        }\n\n        var canvasGradient = ctx.createLinearGradient(x, y, x2, y2);\n\n        return canvasGradient;\n    }\n\n    function createRadialGradient(ctx, obj, rect) {\n        var width = rect.width;\n        var height = rect.height;\n        var min = Math.min(width, height);\n\n        var x = obj.x == null ? 0.5 : obj.x;\n        var y = obj.y == null ? 0.5 : obj.y;\n        var r = obj.r == null ? 0.5 : obj.r;\n        if (!obj.global) {\n            x = x * width + rect.x;\n            y = y * height + rect.y;\n            r = r * min;\n        }\n\n        var canvasGradient = ctx.createRadialGradient(x, y, 0, x, y, r);\n\n        return canvasGradient;\n    }\n\n\n    Style.prototype = {\n\n        constructor: Style,\n\n        /**\n         * @type {string}\n         */\n        fill: '#000000',\n\n        /**\n         * @type {string}\n         */\n        stroke: null,\n\n        /**\n         * @type {number}\n         */\n        opacity: 1,\n\n        /**\n         * @type {Array.<number>}\n         */\n        lineDash: null,\n\n        /**\n         * @type {number}\n         */\n        lineDashOffset: 0,\n\n        /**\n         * @type {number}\n         */\n        shadowBlur: 0,\n\n        /**\n         * @type {number}\n         */\n        shadowOffsetX: 0,\n\n        /**\n         * @type {number}\n         */\n        shadowOffsetY: 0,\n\n        /**\n         * @type {number}\n         */\n        lineWidth: 1,\n\n        /**\n         * If stroke ignore scale\n         * @type {Boolean}\n         */\n        strokeNoScale: false,\n\n        // Bounding rect text configuration\n        // Not affected by element transform\n        /**\n         * @type {string}\n         */\n        text: null,\n\n        /**\n         * @type {string}\n         */\n        textFill: '#000',\n\n        /**\n         * @type {string}\n         */\n        textStroke: null,\n\n        /**\n         * 'inside', 'left', 'right', 'top', 'bottom'\n         * [x, y]\n         * @type {string|Array.<number>}\n         * @default 'inside'\n         */\n        textPosition: 'inside',\n\n        /**\n         * [x, y]\n         * @type {Array.<number>}\n         */\n        textOffset: null,\n\n        /**\n         * @type {string}\n         */\n        textBaseline: null,\n\n        /**\n         * @type {string}\n         */\n        textAlign: null,\n\n        /**\n         * @type {string}\n         */\n        textVerticalAlign: null,\n\n        /**\n         * Only useful in Path and Image element\n         * @type {number}\n         */\n        textDistance: 5,\n\n        /**\n         * Only useful in Path and Image element\n         * @type {number}\n         */\n        textShadowBlur: 0,\n\n        /**\n         * Only useful in Path and Image element\n         * @type {number}\n         */\n        textShadowOffsetX: 0,\n\n        /**\n         * Only useful in Path and Image element\n         * @type {number}\n         */\n        textShadowOffsetY: 0,\n\n        /**\n         * If transform text\n         * Only useful in Path and Image element\n         * @type {boolean}\n         */\n        textTransform: false,\n\n        /**\n         * Text rotate around position of Path or Image\n         * Only useful in Path and Image element and textTransform is false.\n         */\n        textRotation: 0,\n\n        /**\n         * @type {string}\n         * https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation\n         */\n        blend: null,\n\n        /**\n         * @param {CanvasRenderingContext2D} ctx\n         */\n        bind: function (ctx, el, prevEl) {\n            var style = this;\n            var prevStyle = prevEl && prevEl.style;\n            var firstDraw = !prevStyle;\n\n            for (var i = 0; i < STYLE_COMMON_PROPS.length; i++) {\n                var prop = STYLE_COMMON_PROPS[i];\n                var styleName = prop[0];\n\n                if (firstDraw || style[styleName] !== prevStyle[styleName]) {\n                    // FIXME Invalid property value will cause style leak from previous element.\n                    ctx[styleName] = style[styleName] || prop[1];\n                }\n            }\n\n            if ((firstDraw || style.fill !== prevStyle.fill)) {\n                ctx.fillStyle = style.fill;\n            }\n            if ((firstDraw || style.stroke !== prevStyle.stroke)) {\n                ctx.strokeStyle = style.stroke;\n            }\n            if ((firstDraw || style.opacity !== prevStyle.opacity)) {\n                ctx.globalAlpha = style.opacity == null ? 1 : style.opacity;\n            }\n\n            if ((firstDraw || style.blend !== prevStyle.blend)) {\n                ctx.globalCompositeOperation = style.blend || 'source-over';\n            }\n            if (this.hasStroke()) {\n                var lineWidth = style.lineWidth;\n                ctx.lineWidth = lineWidth / (\n                    (this.strokeNoScale && el && el.getLineScale) ? el.getLineScale() : 1\n                );\n            }\n        },\n\n        hasFill: function () {\n            var fill = this.fill;\n            return fill != null && fill !== 'none';\n        },\n\n        hasStroke: function () {\n            var stroke = this.stroke;\n            return stroke != null && stroke !== 'none' && this.lineWidth > 0;\n        },\n\n        /**\n         * Extend from other style\n         * @param {zrender/graphic/Style} otherStyle\n         * @param {boolean} overwrite\n         */\n        extendFrom: function (otherStyle, overwrite) {\n            if (otherStyle) {\n                var target = this;\n                for (var name in otherStyle) {\n                    if (otherStyle.hasOwnProperty(name)\n                        && (overwrite || ! target.hasOwnProperty(name))\n                    ) {\n                        target[name] = otherStyle[name];\n                    }\n                }\n            }\n        },\n\n        /**\n         * Batch setting style with a given object\n         * @param {Object|string} obj\n         * @param {*} [obj]\n         */\n        set: function (obj, value) {\n            if (typeof obj === 'string') {\n                this[obj] = value;\n            }\n            else {\n                this.extendFrom(obj, true);\n            }\n        },\n\n        /**\n         * Clone\n         * @return {zrender/graphic/Style} [description]\n         */\n        clone: function () {\n            var newStyle = new this.constructor();\n            newStyle.extendFrom(this, true);\n            return newStyle;\n        },\n\n        getGradient: function (ctx, obj, rect) {\n            var method = obj.type === 'radial' ? createRadialGradient : createLinearGradient;\n            var canvasGradient = method(ctx, obj, rect);\n            var colorStops = obj.colorStops;\n            for (var i = 0; i < colorStops.length; i++) {\n                canvasGradient.addColorStop(\n                    colorStops[i].offset, colorStops[i].color\n                );\n            }\n            return canvasGradient;\n        }\n    };\n\n    var styleProto = Style.prototype;\n    for (var i = 0; i < STYLE_COMMON_PROPS.length; i++) {\n        var prop = STYLE_COMMON_PROPS[i];\n        if (!(prop[0] in styleProto)) {\n            styleProto[prop[0]] = prop[1];\n        }\n    }\n\n    // Provide for others\n    Style.getGradient = styleProto.getGradient;\n\n    module.exports = Style;\n\n\n/***/ }),\n/* 365 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var smoothSpline = __webpack_require__(438);\n    var smoothBezier = __webpack_require__(437);\n\n    module.exports = {\n        buildPath: function (ctx, shape, closePath) {\n            var points = shape.points;\n            var smooth = shape.smooth;\n            if (points && points.length >= 2) {\n                if (smooth && smooth !== 'spline') {\n                    var controlPoints = smoothBezier(\n                        points, smooth, closePath, shape.smoothConstraint\n                    );\n\n                    ctx.moveTo(points[0][0], points[0][1]);\n                    var len = points.length;\n                    for (var i = 0; i < (closePath ? len : len - 1); i++) {\n                        var cp1 = controlPoints[i * 2];\n                        var cp2 = controlPoints[i * 2 + 1];\n                        var p = points[(i + 1) % len];\n                        ctx.bezierCurveTo(\n                            cp1[0], cp1[1], cp2[0], cp2[1], p[0], p[1]\n                        );\n                    }\n                }\n                else {\n                    if (smooth === 'spline') {\n                        points = smoothSpline(points, closePath);\n                    }\n\n                    ctx.moveTo(points[0][0], points[0][1]);\n                    for (var i = 1, l = points.length; i < l; i++) {\n                        ctx.lineTo(points[i][0], points[i][1]);\n                    }\n                }\n\n                closePath && ctx.closePath();\n            }\n        }\n    };\n\n\n/***/ }),\n/* 366 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n\n    var List = __webpack_require__(349);\n    var completeDimensions = __webpack_require__(398);\n    var zrUtil = __webpack_require__(315);\n    var modelUtil = __webpack_require__(323);\n    var CoordinateSystem = __webpack_require__(340);\n    var getDataItemValue = modelUtil.getDataItemValue;\n    var converDataValue = modelUtil.converDataValue;\n\n    function firstDataNotNull(data) {\n        var i = 0;\n        while (i < data.length && data[i] == null) {\n            i++;\n        }\n        return data[i];\n    }\n    function ifNeedCompleteOrdinalData(data) {\n        var sampleItem = firstDataNotNull(data);\n        return sampleItem != null\n            && !zrUtil.isArray(getDataItemValue(sampleItem));\n    }\n\n    /**\n     * Helper function to create a list from option data\n     */\n    function createListFromArray(data, seriesModel, ecModel) {\n        // If data is undefined\n        data = data || [];\n\n        if (__DEV__) {\n            if (!zrUtil.isArray(data)) {\n                throw new Error('Invalid data.');\n            }\n        }\n\n        var coordSysName = seriesModel.get('coordinateSystem');\n        var creator = creators[coordSysName];\n        var registeredCoordSys = CoordinateSystem.get(coordSysName);\n        // FIXME\n        var axesInfo = creator && creator(data, seriesModel, ecModel);\n        var dimensions = axesInfo && axesInfo.dimensions;\n        if (!dimensions) {\n            // Get dimensions from registered coordinate system\n            dimensions = (registeredCoordSys && registeredCoordSys.dimensions) || ['x', 'y'];\n            dimensions = completeDimensions(dimensions, data, dimensions.concat(['value']));\n        }\n        var categoryIndex = axesInfo ? axesInfo.categoryIndex : -1;\n\n        var list = new List(dimensions, seriesModel);\n\n        var nameList = createNameList(axesInfo, data);\n\n        var categories = {};\n        var dimValueGetter = (categoryIndex >= 0 && ifNeedCompleteOrdinalData(data))\n            ? function (itemOpt, dimName, dataIndex, dimIndex) {\n                // If any dataItem is like { value: 10 }\n                if (modelUtil.isDataItemOption(itemOpt)) {\n                    list.hasItemOption = true;\n                }\n\n                // Use dataIndex as ordinal value in categoryAxis\n                return dimIndex === categoryIndex\n                    ? dataIndex\n                    : converDataValue(getDataItemValue(itemOpt), dimensions[dimIndex]);\n            }\n            : function (itemOpt, dimName, dataIndex, dimIndex) {\n                var value = getDataItemValue(itemOpt);\n                var val = converDataValue(value && value[dimIndex], dimensions[dimIndex]);\n                // If any dataItem is like { value: 10 }\n                if (modelUtil.isDataItemOption(itemOpt)) {\n                    list.hasItemOption = true;\n                }\n\n                var categoryAxesModels = axesInfo && axesInfo.categoryAxesModels;\n                if (categoryAxesModels && categoryAxesModels[dimName]) {\n                    // If given value is a category string\n                    if (typeof val === 'string') {\n                        // Lazy get categories\n                        categories[dimName] = categories[dimName]\n                            || categoryAxesModels[dimName].getCategories();\n                        val = zrUtil.indexOf(categories[dimName], val);\n                        if (val < 0 && !isNaN(val)) {\n                            // In case some one write '1', '2' istead of 1, 2\n                            val = +val;\n                        }\n                    }\n                }\n                return val;\n            };\n\n        list.hasItemOption = false;\n        list.initData(data, nameList, dimValueGetter);\n\n        return list;\n    }\n\n    function isStackable(axisType) {\n        return axisType !== 'category' && axisType !== 'time';\n    }\n\n    function getDimTypeByAxis(axisType) {\n        return axisType === 'category'\n            ? 'ordinal'\n            : axisType === 'time'\n            ? 'time'\n            : 'float';\n    }\n\n    /**\n     * Creaters for each coord system.\n     */\n    var creators = {\n\n        cartesian2d: function (data, seriesModel, ecModel) {\n\n            var axesModels = zrUtil.map(['xAxis', 'yAxis'], function (name) {\n                return ecModel.queryComponents({\n                    mainType: name,\n                    index: seriesModel.get(name + 'Index'),\n                    id: seriesModel.get(name + 'Id')\n                })[0];\n            });\n            var xAxisModel = axesModels[0];\n            var yAxisModel = axesModels[1];\n\n            if (__DEV__) {\n                if (!xAxisModel) {\n                    throw new Error('xAxis \"' + zrUtil.retrieve(\n                        seriesModel.get('xAxisIndex'),\n                        seriesModel.get('xAxisId'),\n                        0\n                    ) + '\" not found');\n                }\n                if (!yAxisModel) {\n                    throw new Error('yAxis \"' + zrUtil.retrieve(\n                        seriesModel.get('xAxisIndex'),\n                        seriesModel.get('yAxisId'),\n                        0\n                    ) + '\" not found');\n                }\n            }\n\n            var xAxisType = xAxisModel.get('type');\n            var yAxisType = yAxisModel.get('type');\n\n            var dimensions = [\n                {\n                    name: 'x',\n                    type: getDimTypeByAxis(xAxisType),\n                    stackable: isStackable(xAxisType)\n                },\n                {\n                    name: 'y',\n                    // If two category axes\n                    type: getDimTypeByAxis(yAxisType),\n                    stackable: isStackable(yAxisType)\n                }\n            ];\n\n            var isXAxisCateogry = xAxisType === 'category';\n            var isYAxisCategory = yAxisType === 'category';\n\n            completeDimensions(dimensions, data, ['x', 'y', 'z']);\n\n            var categoryAxesModels = {};\n            if (isXAxisCateogry) {\n                categoryAxesModels.x = xAxisModel;\n            }\n            if (isYAxisCategory) {\n                categoryAxesModels.y = yAxisModel;\n            }\n            return {\n                dimensions: dimensions,\n                categoryIndex: isXAxisCateogry ? 0 : (isYAxisCategory ? 1 : -1),\n                categoryAxesModels: categoryAxesModels\n            };\n        },\n\n        singleAxis: function (data, seriesModel, ecModel) {\n\n            var singleAxisModel = ecModel.queryComponents({\n                mainType: 'singleAxis',\n                index: seriesModel.get('singleAxisIndex'),\n                id: seriesModel.get('singleAxisId')\n            })[0];\n\n            if (__DEV__) {\n                if (!singleAxisModel) {\n                    throw new Error('singleAxis should be specified.');\n                }\n            }\n\n            var singleAxisType = singleAxisModel.get('type');\n            var isCategory = singleAxisType === 'category';\n\n            var dimensions = [{\n                name: 'single',\n                type: getDimTypeByAxis(singleAxisType),\n                stackable: isStackable(singleAxisType)\n            }];\n\n            completeDimensions(dimensions, data);\n\n            var categoryAxesModels = {};\n            if (isCategory) {\n                categoryAxesModels.single = singleAxisModel;\n            }\n\n            return {\n                dimensions: dimensions,\n                categoryIndex: isCategory ? 0 : -1,\n                categoryAxesModels: categoryAxesModels\n            };\n        },\n\n        polar: function (data, seriesModel, ecModel) {\n            var polarModel = ecModel.queryComponents({\n                mainType: 'polar',\n                index: seriesModel.get('polarIndex'),\n                id: seriesModel.get('polarId')\n            })[0];\n\n            var angleAxisModel = polarModel.findAxisModel('angleAxis');\n            var radiusAxisModel = polarModel.findAxisModel('radiusAxis');\n\n            if (__DEV__) {\n                if (!angleAxisModel) {\n                    throw new Error('angleAxis option not found');\n                }\n                if (!radiusAxisModel) {\n                    throw new Error('radiusAxis option not found');\n                }\n            }\n\n            var radiusAxisType = radiusAxisModel.get('type');\n            var angleAxisType = angleAxisModel.get('type');\n\n            var dimensions = [\n                {\n                    name: 'radius',\n                    type: getDimTypeByAxis(radiusAxisType),\n                    stackable: isStackable(radiusAxisType)\n                },\n                {\n                    name: 'angle',\n                    type: getDimTypeByAxis(angleAxisType),\n                    stackable: isStackable(angleAxisType)\n                }\n            ];\n            var isAngleAxisCateogry = angleAxisType === 'category';\n            var isRadiusAxisCateogry = radiusAxisType === 'category';\n\n            completeDimensions(dimensions, data, ['radius', 'angle', 'value']);\n\n            var categoryAxesModels = {};\n            if (isRadiusAxisCateogry) {\n                categoryAxesModels.radius = radiusAxisModel;\n            }\n            if (isAngleAxisCateogry) {\n                categoryAxesModels.angle = angleAxisModel;\n            }\n            return {\n                dimensions: dimensions,\n                categoryIndex: isAngleAxisCateogry ? 1 : (isRadiusAxisCateogry ? 0 : -1),\n                categoryAxesModels: categoryAxesModels\n            };\n        },\n\n        geo: function (data, seriesModel, ecModel) {\n            // TODO Region\n            // 多个散点图系列在同一个地区的时候\n            return {\n                dimensions: completeDimensions([\n                    {name: 'lng'},\n                    {name: 'lat'}\n                ], data, ['lng', 'lat', 'value'])\n            };\n        }\n    };\n\n    function createNameList(result, data) {\n        var nameList = [];\n\n        var categoryDim = result && result.dimensions[result.categoryIndex];\n        var categoryAxisModel;\n        if (categoryDim) {\n            categoryAxisModel = result.categoryAxesModels[categoryDim.name];\n        }\n\n        if (categoryAxisModel) {\n            // FIXME Two category axis\n            var categories = categoryAxisModel.getCategories();\n            if (categories) {\n                var dataLen = data.length;\n                // Ordered data is given explicitly like\n                // [[3, 0.2], [1, 0.3], [2, 0.15]]\n                // or given scatter data,\n                // pick the category\n                if (zrUtil.isArray(data[0]) && data[0].length > 1) {\n                    nameList = [];\n                    for (var i = 0; i < dataLen; i++) {\n                        nameList[i] = categories[data[i][result.categoryIndex || 0]];\n                    }\n                }\n                else {\n                    nameList = categories.slice(0);\n                }\n            }\n        }\n\n        return nameList;\n    }\n\n    module.exports = createListFromArray;\n\n\n\n/***/ }),\n/* 367 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n\n    var graphic = __webpack_require__(317);\n    var zrUtil = __webpack_require__(315);\n    var echarts = __webpack_require__(316);\n\n    __webpack_require__(368);\n\n    __webpack_require__(382);\n\n    // Grid view\n    echarts.extendComponentView({\n\n        type: 'grid',\n\n        render: function (gridModel, ecModel) {\n            this.group.removeAll();\n            if (gridModel.get('show')) {\n                this.group.add(new graphic.Rect({\n                    shape: gridModel.coordinateSystem.getRect(),\n                    style: zrUtil.defaults({\n                        fill: gridModel.get('backgroundColor')\n                    }, gridModel.getItemStyle()),\n                    silent: true,\n                    z2: -1\n                }));\n            }\n        }\n\n    });\n\n    echarts.registerPreprocessor(function (option) {\n        // Only create grid when need\n        if (option.xAxis && option.yAxis && !option.grid) {\n            option.grid = {};\n        }\n    });\n\n\n/***/ }),\n/* 368 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * Grid is a region which contains at most 4 cartesian systems\n *\n * TODO Default cartesian\n */\nvar factory = exports;\n\n    var layout = __webpack_require__(328);\n    var axisHelper = __webpack_require__(341);\n\n    var zrUtil = __webpack_require__(315);\n    var Cartesian2D = __webpack_require__(394);\n    var Axis2D = __webpack_require__(392);\n\n    var each = zrUtil.each;\n\n    var ifAxisCrossZero = axisHelper.ifAxisCrossZero;\n    var niceScaleExtent = axisHelper.niceScaleExtent;\n\n    // 依赖 GridModel, AxisModel 做预处理\n    __webpack_require__(395);\n\n    /**\n     * Check if the axis is used in the specified grid\n     * @inner\n     */\n    function isAxisUsedInTheGrid(axisModel, gridModel, ecModel) {\n        return axisModel.getCoordSysModel() === gridModel;\n    }\n\n    function getLabelUnionRect(axis) {\n        var axisModel = axis.model;\n        var labels = axisModel.getFormattedLabels();\n        var textStyleModel = axisModel.getModel('axisLabel.textStyle');\n        var rect;\n        var step = 1;\n        var labelCount = labels.length;\n        if (labelCount > 40) {\n            // Simple optimization for large amount of labels\n            step = Math.ceil(labelCount / 40);\n        }\n        for (var i = 0; i < labelCount; i += step) {\n            if (!axis.isLabelIgnored(i)) {\n                var singleRect = textStyleModel.getTextRect(labels[i]);\n                // FIXME consider label rotate\n                rect ? rect.union(singleRect) : (rect = singleRect);\n            }\n        }\n        return rect;\n    }\n\n    function Grid(gridModel, ecModel, api) {\n        /**\n         * @type {Object.<string, module:echarts/coord/cartesian/Cartesian2D>}\n         * @private\n         */\n        this._coordsMap = {};\n\n        /**\n         * @type {Array.<module:echarts/coord/cartesian/Cartesian>}\n         * @private\n         */\n        this._coordsList = [];\n\n        /**\n         * @type {Object.<string, module:echarts/coord/cartesian/Axis2D>}\n         * @private\n         */\n        this._axesMap = {};\n\n        /**\n         * @type {Array.<module:echarts/coord/cartesian/Axis2D>}\n         * @private\n         */\n        this._axesList = [];\n\n        this._initCartesian(gridModel, ecModel, api);\n\n        this._model = gridModel;\n    }\n\n    var gridProto = Grid.prototype;\n\n    gridProto.type = 'grid';\n\n    gridProto.getRect = function () {\n        return this._rect;\n    };\n\n    gridProto.update = function (ecModel, api) {\n\n        var axesMap = this._axesMap;\n\n        this._updateScale(ecModel, this._model);\n\n        function ifAxisCanNotOnZero(otherAxisDim) {\n            var axes = axesMap[otherAxisDim];\n            for (var idx in axes) {\n                if (axes.hasOwnProperty(idx)) {\n                    var axis = axes[idx];\n                    if (axis && (axis.type === 'category' || !ifAxisCrossZero(axis))) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        }\n\n        each(axesMap.x, function (xAxis) {\n            niceScaleExtent(xAxis, xAxis.model);\n        });\n        each(axesMap.y, function (yAxis) {\n            niceScaleExtent(yAxis, yAxis.model);\n        });\n        // Fix configuration\n        each(axesMap.x, function (xAxis) {\n            // onZero can not be enabled in these two situations\n            // 1. When any other axis is a category axis\n            // 2. When any other axis not across 0 point\n            if (ifAxisCanNotOnZero('y')) {\n                xAxis.onZero = false;\n            }\n        });\n        each(axesMap.y, function (yAxis) {\n            if (ifAxisCanNotOnZero('x')) {\n                yAxis.onZero = false;\n            }\n        });\n\n        // Resize again if containLabel is enabled\n        // FIXME It may cause getting wrong grid size in data processing stage\n        this.resize(this._model, api);\n    };\n\n    /**\n     * Resize the grid\n     * @param {module:echarts/coord/cartesian/GridModel} gridModel\n     * @param {module:echarts/ExtensionAPI} api\n     */\n    gridProto.resize = function (gridModel, api) {\n\n        var gridRect = layout.getLayoutRect(\n            gridModel.getBoxLayoutParams(), {\n                width: api.getWidth(),\n                height: api.getHeight()\n            });\n\n        this._rect = gridRect;\n\n        var axesList = this._axesList;\n\n        adjustAxes();\n\n        // Minus label size\n        if (gridModel.get('containLabel')) {\n            each(axesList, function (axis) {\n                if (!axis.model.get('axisLabel.inside')) {\n                    var labelUnionRect = getLabelUnionRect(axis);\n                    if (labelUnionRect) {\n                        var dim = axis.isHorizontal() ? 'height' : 'width';\n                        var margin = axis.model.get('axisLabel.margin');\n                        gridRect[dim] -= labelUnionRect[dim] + margin;\n                        if (axis.position === 'top') {\n                            gridRect.y += labelUnionRect.height + margin;\n                        }\n                        else if (axis.position === 'left')  {\n                            gridRect.x += labelUnionRect.width + margin;\n                        }\n                    }\n                }\n            });\n\n            adjustAxes();\n        }\n\n        function adjustAxes() {\n            each(axesList, function (axis) {\n                var isHorizontal = axis.isHorizontal();\n                var extent = isHorizontal ? [0, gridRect.width] : [0, gridRect.height];\n                var idx = axis.inverse ? 1 : 0;\n                axis.setExtent(extent[idx], extent[1 - idx]);\n                updateAxisTransfrom(axis, isHorizontal ? gridRect.x : gridRect.y);\n            });\n        }\n    };\n\n    /**\n     * @param {string} axisType\n     * @param {ndumber} [axisIndex]\n     */\n    gridProto.getAxis = function (axisType, axisIndex) {\n        var axesMapOnDim = this._axesMap[axisType];\n        if (axesMapOnDim != null) {\n            if (axisIndex == null) {\n                // Find first axis\n                for (var name in axesMapOnDim) {\n                    if (axesMapOnDim.hasOwnProperty(name)) {\n                        return axesMapOnDim[name];\n                    }\n                }\n            }\n            return axesMapOnDim[axisIndex];\n        }\n    };\n\n    gridProto.getCartesian = function (xAxisIndex, yAxisIndex) {\n        if (xAxisIndex != null && yAxisIndex != null) {\n            var key = 'x' + xAxisIndex + 'y' + yAxisIndex;\n            return this._coordsMap[key];\n        }\n        else {\n            // When only xAxisIndex or yAxisIndex given, find its first cartesian.\n            for (var i = 0, coordList = this._coordsList; i < coordList.length; i++) {\n                if (coordList[i].getAxis('x').index === xAxisIndex\n                    || coordList[i].getAxis('y').index === yAxisIndex\n                ) {\n                    return coordList[i];\n                }\n            }\n        }\n    };\n\n    /**\n     * @implements\n     * see {module:echarts/CoodinateSystem}\n     */\n    gridProto.convertToPixel = function (ecModel, finder, value) {\n        var target = this._findConvertTarget(ecModel, finder);\n\n        return target.cartesian\n            ? target.cartesian.dataToPoint(value)\n            : target.axis\n            ? target.axis.toGlobalCoord(target.axis.dataToCoord(value))\n            : null;\n    };\n\n    /**\n     * @implements\n     * see {module:echarts/CoodinateSystem}\n     */\n    gridProto.convertFromPixel = function (ecModel, finder, value) {\n        var target = this._findConvertTarget(ecModel, finder);\n\n        return target.cartesian\n            ? target.cartesian.pointToData(value)\n            : target.axis\n            ? target.axis.coordToData(target.axis.toLocalCoord(value))\n            : null;\n    };\n\n    /**\n     * @inner\n     */\n    gridProto._findConvertTarget = function (ecModel, finder) {\n        var seriesModel = finder.seriesModel;\n        var xAxisModel = finder.xAxisModel\n            || (seriesModel && seriesModel.getReferringComponents('xAxis')[0]);\n        var yAxisModel = finder.yAxisModel\n            || (seriesModel && seriesModel.getReferringComponents('yAxis')[0]);\n        var gridModel = finder.gridModel;\n        var coordsList = this._coordsList;\n        var cartesian;\n        var axis;\n\n        if (seriesModel) {\n            cartesian = seriesModel.coordinateSystem;\n            zrUtil.indexOf(coordsList, cartesian) < 0 && (cartesian = null);\n        }\n        else if (xAxisModel && yAxisModel) {\n            cartesian = this.getCartesian(xAxisModel.componentIndex, yAxisModel.componentIndex);\n        }\n        else if (xAxisModel) {\n            axis = this.getAxis('x', xAxisModel.componentIndex);\n        }\n        else if (yAxisModel) {\n            axis = this.getAxis('y', yAxisModel.componentIndex);\n        }\n        // Lowest priority.\n        else if (gridModel) {\n            var grid = gridModel.coordinateSystem;\n            if (grid === this) {\n                cartesian = this._coordsList[0];\n            }\n        }\n\n        return {cartesian: cartesian, axis: axis};\n    };\n\n    /**\n     * @implements\n     * see {module:echarts/CoodinateSystem}\n     */\n    gridProto.containPoint = function (point) {\n        var coord = this._coordsList[0];\n        if (coord) {\n            return coord.containPoint(point);\n        }\n    };\n\n    /**\n     * Initialize cartesian coordinate systems\n     * @private\n     */\n    gridProto._initCartesian = function (gridModel, ecModel, api) {\n        var axisPositionUsed = {\n            left: false,\n            right: false,\n            top: false,\n            bottom: false\n        };\n\n        var axesMap = {\n            x: {},\n            y: {}\n        };\n        var axesCount = {\n            x: 0,\n            y: 0\n        };\n\n        /// Create axis\n        ecModel.eachComponent('xAxis', createAxisCreator('x'), this);\n        ecModel.eachComponent('yAxis', createAxisCreator('y'), this);\n\n        if (!axesCount.x || !axesCount.y) {\n            // Roll back when there no either x or y axis\n            this._axesMap = {};\n            this._axesList = [];\n            return;\n        }\n\n        this._axesMap = axesMap;\n\n        /// Create cartesian2d\n        each(axesMap.x, function (xAxis, xAxisIndex) {\n            each(axesMap.y, function (yAxis, yAxisIndex) {\n                var key = 'x' + xAxisIndex + 'y' + yAxisIndex;\n                var cartesian = new Cartesian2D(key);\n\n                cartesian.grid = this;\n\n                this._coordsMap[key] = cartesian;\n                this._coordsList.push(cartesian);\n\n                cartesian.addAxis(xAxis);\n                cartesian.addAxis(yAxis);\n            }, this);\n        }, this);\n\n        function createAxisCreator(axisType) {\n            return function (axisModel, idx) {\n                if (!isAxisUsedInTheGrid(axisModel, gridModel, ecModel)) {\n                    return;\n                }\n\n                var axisPosition = axisModel.get('position');\n                if (axisType === 'x') {\n                    // Fix position\n                    if (axisPosition !== 'top' && axisPosition !== 'bottom') {\n                        // Default bottom of X\n                        axisPosition = 'bottom';\n                        if (axisPositionUsed[axisPosition]) {\n                            axisPosition = axisPosition === 'top' ? 'bottom' : 'top';\n                        }\n                    }\n                }\n                else {\n                    // Fix position\n                    if (axisPosition !== 'left' && axisPosition !== 'right') {\n                        // Default left of Y\n                        axisPosition = 'left';\n                        if (axisPositionUsed[axisPosition]) {\n                            axisPosition = axisPosition === 'left' ? 'right' : 'left';\n                        }\n                    }\n                }\n                axisPositionUsed[axisPosition] = true;\n\n                var axis = new Axis2D(\n                    axisType, axisHelper.createScaleByModel(axisModel),\n                    [0, 0],\n                    axisModel.get('type'),\n                    axisPosition\n                );\n\n                var isCategory = axis.type === 'category';\n                axis.onBand = isCategory && axisModel.get('boundaryGap');\n                axis.inverse = axisModel.get('inverse');\n\n                axis.onZero = axisModel.get('axisLine.onZero');\n\n                // Inject axis into axisModel\n                axisModel.axis = axis;\n\n                // Inject axisModel into axis\n                axis.model = axisModel;\n\n                // Inject grid info axis\n                axis.grid = this;\n\n                // Index of axis, can be used as key\n                axis.index = idx;\n\n                this._axesList.push(axis);\n\n                axesMap[axisType][idx] = axis;\n                axesCount[axisType]++;\n            };\n        }\n    };\n\n    /**\n     * Update cartesian properties from series\n     * @param  {module:echarts/model/Option} option\n     * @private\n     */\n    gridProto._updateScale = function (ecModel, gridModel) {\n        // Reset scale\n        zrUtil.each(this._axesList, function (axis) {\n            axis.scale.setExtent(Infinity, -Infinity);\n        });\n        ecModel.eachSeries(function (seriesModel) {\n            if (isCartesian2D(seriesModel)) {\n                var axesModels = findAxesModels(seriesModel, ecModel);\n                var xAxisModel = axesModels[0];\n                var yAxisModel = axesModels[1];\n\n                if (!isAxisUsedInTheGrid(xAxisModel, gridModel, ecModel)\n                    || !isAxisUsedInTheGrid(yAxisModel, gridModel, ecModel)\n                 ) {\n                    return;\n                }\n\n                var cartesian = this.getCartesian(\n                    xAxisModel.componentIndex, yAxisModel.componentIndex\n                );\n                var data = seriesModel.getData();\n                var xAxis = cartesian.getAxis('x');\n                var yAxis = cartesian.getAxis('y');\n\n                if (data.type === 'list') {\n                    unionExtent(data, xAxis, seriesModel);\n                    unionExtent(data, yAxis, seriesModel);\n                }\n            }\n        }, this);\n\n        function unionExtent(data, axis, seriesModel) {\n            each(seriesModel.coordDimToDataDim(axis.dim), function (dim) {\n                axis.scale.unionExtentFromData(data, dim);\n            });\n        }\n    };\n\n    /**\n     * @inner\n     */\n    function updateAxisTransfrom(axis, coordBase) {\n        var axisExtent = axis.getExtent();\n        var axisExtentSum = axisExtent[0] + axisExtent[1];\n\n        // Fast transform\n        axis.toGlobalCoord = axis.dim === 'x'\n            ? function (coord) {\n                return coord + coordBase;\n            }\n            : function (coord) {\n                return axisExtentSum - coord + coordBase;\n            };\n        axis.toLocalCoord = axis.dim === 'x'\n            ? function (coord) {\n                return coord - coordBase;\n            }\n            : function (coord) {\n                return axisExtentSum - coord + coordBase;\n            };\n    }\n\n    var axesTypes = ['xAxis', 'yAxis'];\n    /**\n     * @inner\n     */\n    function findAxesModels(seriesModel, ecModel) {\n        return zrUtil.map(axesTypes, function (axisType) {\n            var axisModel = seriesModel.getReferringComponents(axisType)[0];\n\n            if (__DEV__) {\n                if (!axisModel) {\n                    throw new Error(axisType + ' \"' + zrUtil.retrieve(\n                        seriesModel.get(axisType + 'Index'),\n                        seriesModel.get(axisType + 'Id'),\n                        0\n                    ) + '\" not found');\n                }\n            }\n            return axisModel;\n        });\n    }\n\n    /**\n     * @inner\n     */\n    function isCartesian2D(seriesModel) {\n        return seriesModel.get('coordinateSystem') === 'cartesian2d';\n    }\n\n    Grid.create = function (ecModel, api) {\n        var grids = [];\n        ecModel.eachComponent('grid', function (gridModel, idx) {\n            var grid = new Grid(gridModel, ecModel, api);\n            grid.name = 'grid_' + idx;\n            grid.resize(gridModel, api);\n\n            gridModel.coordinateSystem = grid;\n\n            grids.push(grid);\n        });\n\n        // Inject the coordinateSystems into seriesModel\n        ecModel.eachSeries(function (seriesModel) {\n            if (!isCartesian2D(seriesModel)) {\n                return;\n            }\n\n            var axesModels = findAxesModels(seriesModel, ecModel);\n            var xAxisModel = axesModels[0];\n            var yAxisModel = axesModels[1];\n\n            var gridModel = xAxisModel.getCoordSysModel();\n\n            if (__DEV__) {\n                if (!gridModel) {\n                    throw new Error(\n                        'Grid \"' + zrUtil.retrieve(\n                            xAxisModel.get('gridIndex'),\n                            xAxisModel.get('gridId'),\n                            0\n                        ) + '\" not found'\n                    );\n                }\n                if (xAxisModel.getCoordSysModel() !== yAxisModel.getCoordSysModel()) {\n                    throw new Error('xAxis and yAxis must use the same grid');\n                }\n            }\n\n            var grid = gridModel.coordinateSystem;\n\n            seriesModel.coordinateSystem = grid.getCartesian(\n                xAxisModel.componentIndex, yAxisModel.componentIndex\n            );\n        });\n\n        return grids;\n    };\n\n    // For deciding which dimensions to use when creating list data\n    Grid.dimensions = Cartesian2D.prototype.dimensions;\n\n    __webpack_require__(340).register('cartesian2d', Grid);\n\n    module.exports = Grid;\n\n\n/***/ }),\n/* 369 */\n/***/ (function(module, exports) {\n\n\n\n    var lib = {};\n\n    var ORIGIN_METHOD = '\\0__throttleOriginMethod';\n    var RATE = '\\0__throttleRate';\n    var THROTTLE_TYPE = '\\0__throttleType';\n\n    /**\n     * @public\n     * @param {(Function)} fn\n     * @param {number} [delay=0] Unit: ms.\n     * @param {boolean} [debounce=false]\n     *        true: If call interval less than `delay`, only the last call works.\n     *        false: If call interval less than `delay, call works on fixed rate.\n     * @return {(Function)} throttled fn.\n     */\n    lib.throttle = function (fn, delay, debounce) {\n\n        var currCall;\n        var lastCall = 0;\n        var lastExec = 0;\n        var timer = null;\n        var diff;\n        var scope;\n        var args;\n\n        delay = delay || 0;\n\n        function exec() {\n            lastExec = (new Date()).getTime();\n            timer = null;\n            fn.apply(scope, args || []);\n        }\n\n        var cb = function () {\n            currCall = (new Date()).getTime();\n            scope = this;\n            args = arguments;\n            diff = currCall - (debounce ? lastCall : lastExec) - delay;\n\n            clearTimeout(timer);\n\n            if (debounce) {\n                timer = setTimeout(exec, delay);\n            }\n            else {\n                if (diff >= 0) {\n                    exec();\n                }\n                else {\n                    timer = setTimeout(exec, -diff);\n                }\n            }\n\n            lastCall = currCall;\n        };\n\n        /**\n         * Clear throttle.\n         * @public\n         */\n        cb.clear = function () {\n            if (timer) {\n                clearTimeout(timer);\n                timer = null;\n            }\n        };\n\n        return cb;\n    };\n\n    /**\n     * Create throttle method or update throttle rate.\n     *\n     * @example\n     * ComponentView.prototype.render = function () {\n     *     ...\n     *     throttle.createOrUpdate(\n     *         this,\n     *         '_dispatchAction',\n     *         this.model.get('throttle'),\n     *         'fixRate'\n     *     );\n     * };\n     * ComponentView.prototype.remove = function () {\n     *     throttle.clear(this, '_dispatchAction');\n     * };\n     * ComponentView.prototype.dispose = function () {\n     *     throttle.clear(this, '_dispatchAction');\n     * };\n     *\n     * @public\n     * @param {Object} obj\n     * @param {string} fnAttr\n     * @param {number} [rate]\n     * @param {string} [throttleType='fixRate'] 'fixRate' or 'debounce'\n     * @return {Function} throttled function.\n     */\n    lib.createOrUpdate = function (obj, fnAttr, rate, throttleType) {\n        var fn = obj[fnAttr];\n\n        if (!fn) {\n            return;\n        }\n\n        var originFn = fn[ORIGIN_METHOD] || fn;\n        var lastThrottleType = fn[THROTTLE_TYPE];\n        var lastRate = fn[RATE];\n\n        if (lastRate !== rate || lastThrottleType !== throttleType) {\n            if (rate == null || !throttleType) {\n                return (obj[fnAttr] = originFn);\n            }\n\n            fn = obj[fnAttr] = lib.throttle(\n                originFn, rate, throttleType === 'debounce'\n            );\n            fn[ORIGIN_METHOD] = originFn;\n            fn[THROTTLE_TYPE] = throttleType;\n            fn[RATE] = rate;\n        }\n\n        return fn;\n    };\n\n    /**\n     * Clear throttle. Example see throttle.createOrUpdate.\n     *\n     * @public\n     * @param {Object} obj\n     * @param {string} fnAttr\n     */\n    lib.clear = function (obj, fnAttr) {\n        var fn = obj[fnAttr];\n        if (fn && fn[ORIGIN_METHOD]) {\n            obj[fnAttr] = fn[ORIGIN_METHOD];\n        }\n    };\n\n    module.exports = lib;\n\n\n\n/***/ }),\n/* 370 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * @file Visual mapping.\n */\n\n\n    var zrUtil = __webpack_require__(315);\n    var zrColor = __webpack_require__(330);\n    var linearMap = __webpack_require__(318).linearMap;\n    var each = zrUtil.each;\n    var isObject = zrUtil.isObject;\n\n    var CATEGORY_DEFAULT_VISUAL_INDEX = -1;\n\n    /**\n     * @param {Object} option\n     * @param {string} [option.type] See visualHandlers.\n     * @param {string} [option.mappingMethod] 'linear' or 'piecewise' or 'category' or 'fixed'\n     * @param {Array.<number>=} [option.dataExtent] [minExtent, maxExtent],\n     *                                              required when mappingMethod is 'linear'\n     * @param {Array.<Object>=} [option.pieceList] [\n     *                                             {value: someValue},\n     *                                             {interval: [min1, max1], visual: {...}},\n     *                                             {interval: [min2, max2]}\n     *                                             ],\n     *                                            required when mappingMethod is 'piecewise'.\n     *                                            Visual for only each piece can be specified.\n     * @param {Array.<string|Object>=} [option.categories] ['cate1', 'cate2']\n     *                                            required when mappingMethod is 'category'.\n     *                                            If no option.categories, categories is set\n     *                                            as [0, 1, 2, ...].\n     * @param {boolean} [option.loop=false] Whether loop mapping when mappingMethod is 'category'.\n     * @param {(Array|Object|*)} [option.visual]  Visual data.\n     *                                            when mappingMethod is 'category',\n     *                                            visual data can be array or object\n     *                                            (like: {cate1: '#222', none: '#fff'})\n     *                                            or primary types (which represents\n     *                                            defualt category visual), otherwise visual\n     *                                            can be array or primary (which will be\n     *                                            normalized to array).\n     *\n     */\n    var VisualMapping = function (option) {\n        var mappingMethod = option.mappingMethod;\n        var visualType = option.type;\n\n        /**\n         * @readOnly\n         * @type {Object}\n         */\n        var thisOption = this.option = zrUtil.clone(option);\n\n        /**\n         * @readOnly\n         * @type {string}\n         */\n        this.type = visualType;\n\n        /**\n         * @readOnly\n         * @type {string}\n         */\n        this.mappingMethod = mappingMethod;\n\n        /**\n         * @private\n         * @type {Function}\n         */\n        this._normalizeData = normalizers[mappingMethod];\n\n        var visualHandler = visualHandlers[visualType];\n\n        /**\n         * @public\n         * @type {Function}\n         */\n        this.applyVisual = visualHandler.applyVisual;\n\n        /**\n         * @public\n         * @type {Function}\n         */\n        this.getColorMapper = visualHandler.getColorMapper;\n\n        /**\n         * @private\n         * @type {Function}\n         */\n        this._doMap = visualHandler._doMap[mappingMethod];\n\n        if (mappingMethod === 'piecewise') {\n            normalizeVisualRange(thisOption);\n            preprocessForPiecewise(thisOption);\n        }\n        else if (mappingMethod === 'category') {\n            thisOption.categories\n                ? preprocessForSpecifiedCategory(thisOption)\n                // categories is ordinal when thisOption.categories not specified,\n                // which need no more preprocess except normalize visual.\n                : normalizeVisualRange(thisOption, true);\n        }\n        else { // mappingMethod === 'linear' or 'fixed'\n            zrUtil.assert(mappingMethod !== 'linear' || thisOption.dataExtent);\n            normalizeVisualRange(thisOption);\n        }\n    };\n\n    VisualMapping.prototype = {\n\n        constructor: VisualMapping,\n\n        mapValueToVisual: function (value) {\n            var normalized = this._normalizeData(value);\n            return this._doMap(normalized, value);\n        },\n\n        getNormalizer: function () {\n            return zrUtil.bind(this._normalizeData, this);\n        }\n    };\n\n    var visualHandlers = VisualMapping.visualHandlers = {\n\n        color: {\n\n            applyVisual: makeApplyVisual('color'),\n\n            /**\n             * Create a mapper function\n             * @return {Function}\n             */\n            getColorMapper: function () {\n                var thisOption = this.option;\n                var parsedVisual = zrUtil.map(thisOption.visual, zrColor.parse);\n\n                return zrUtil.bind(\n                    thisOption.mappingMethod === 'category'\n                        ? function (value, isNormalized) {\n                            !isNormalized && (value = this._normalizeData(value));\n                            return doMapCategory.call(this, value);\n                        }\n                        : function (value, isNormalized, out) {\n                            // If output rgb array\n                            // which will be much faster and useful in pixel manipulation\n                            var returnRGBArray = !!out;\n                            !isNormalized && (value = this._normalizeData(value));\n                            out = zrColor.fastMapToColor(value, parsedVisual, out);\n                            return returnRGBArray ? out : zrUtil.stringify(out, 'rgba');\n                        },\n                    this\n                );\n            },\n\n            _doMap: {\n                linear: function (normalized) {\n                    return zrColor.mapToColor(normalized, this.option.visual);\n                },\n                category: doMapCategory,\n                piecewise: function (normalized, value) {\n                    var result = getSpecifiedVisual.call(this, value);\n                    if (result == null) {\n                        result = zrColor.mapToColor(normalized, this.option.visual);\n                    }\n                    return result;\n                },\n                fixed: doMapFixed\n            }\n        },\n\n        colorHue: makePartialColorVisualHandler(function (color, value) {\n            return zrColor.modifyHSL(color, value);\n        }),\n\n        colorSaturation: makePartialColorVisualHandler(function (color, value) {\n            return zrColor.modifyHSL(color, null, value);\n        }),\n\n        colorLightness: makePartialColorVisualHandler(function (color, value) {\n            return zrColor.modifyHSL(color, null, null, value);\n        }),\n\n        colorAlpha: makePartialColorVisualHandler(function (color, value) {\n            return zrColor.modifyAlpha(color, value);\n        }),\n\n        opacity: {\n            applyVisual: makeApplyVisual('opacity'),\n            _doMap: makeDoMap([0, 1])\n        },\n\n        symbol: {\n            applyVisual: function (value, getter, setter) {\n                var symbolCfg = this.mapValueToVisual(value);\n                if (zrUtil.isString(symbolCfg)) {\n                    setter('symbol', symbolCfg);\n                }\n                else if (isObject(symbolCfg)) {\n                    for (var name in symbolCfg) {\n                        if (symbolCfg.hasOwnProperty(name)) {\n                            setter(name, symbolCfg[name]);\n                        }\n                    }\n                }\n            },\n            _doMap: {\n                linear: doMapToArray,\n                category: doMapCategory,\n                piecewise: function (normalized, value) {\n                    var result = getSpecifiedVisual.call(this, value);\n                    if (result == null) {\n                        result = doMapToArray.call(this, normalized);\n                    }\n                    return result;\n                },\n                fixed: doMapFixed\n            }\n        },\n\n        symbolSize: {\n            applyVisual: makeApplyVisual('symbolSize'),\n            _doMap: makeDoMap([0, 1])\n        }\n    };\n\n\n    function preprocessForPiecewise(thisOption) {\n        var pieceList = thisOption.pieceList;\n        thisOption.hasSpecialVisual = false;\n\n        zrUtil.each(pieceList, function (piece, index) {\n            piece.originIndex = index;\n            // piece.visual is \"result visual value\" but not\n            // a visual range, so it does not need to be normalized.\n            if (piece.visual != null) {\n                thisOption.hasSpecialVisual = true;\n            }\n        });\n    }\n\n    function preprocessForSpecifiedCategory(thisOption) {\n        // Hash categories.\n        var categories = thisOption.categories;\n        var visual = thisOption.visual;\n\n        var categoryMap = thisOption.categoryMap = {};\n        each(categories, function (cate, index) {\n            categoryMap[cate] = index;\n        });\n\n        // Process visual map input.\n        if (!zrUtil.isArray(visual)) {\n            var visualArr = [];\n\n            if (zrUtil.isObject(visual)) {\n                each(visual, function (v, cate) {\n                    var index = categoryMap[cate];\n                    visualArr[index != null ? index : CATEGORY_DEFAULT_VISUAL_INDEX] = v;\n                });\n            }\n            else { // Is primary type, represents default visual.\n                visualArr[CATEGORY_DEFAULT_VISUAL_INDEX] = visual;\n            }\n\n            visual = thisOption.visual = visualArr;\n        }\n\n        // Remove categories that has no visual,\n        // then we can mapping them to CATEGORY_DEFAULT_VISUAL_INDEX.\n        for (var i = categories.length - 1; i >= 0; i--) {\n            if (visual[i] == null) {\n                delete categoryMap[categories[i]];\n                categories.pop();\n            }\n        }\n    }\n\n    function normalizeVisualRange(thisOption, isCategory) {\n        var visual = thisOption.visual;\n        var visualArr = [];\n\n        if (zrUtil.isObject(visual)) {\n            each(visual, function (v) {\n                visualArr.push(v);\n            });\n        }\n        else if (visual != null) {\n            visualArr.push(visual);\n        }\n\n        var doNotNeedPair = {color: 1, symbol: 1};\n\n        if (!isCategory\n            && visualArr.length === 1\n            && !doNotNeedPair.hasOwnProperty(thisOption.type)\n        ) {\n            // Do not care visualArr.length === 0, which is illegal.\n            visualArr[1] = visualArr[0];\n        }\n\n        thisOption.visual = visualArr;\n    }\n\n    function makePartialColorVisualHandler(applyValue) {\n        return {\n            applyVisual: function (value, getter, setter) {\n                value = this.mapValueToVisual(value);\n                // Must not be array value\n                setter('color', applyValue(getter('color'), value));\n            },\n            _doMap: makeDoMap([0, 1])\n        };\n    }\n\n    function doMapToArray(normalized) {\n        var visual = this.option.visual;\n        return visual[\n            Math.round(linearMap(normalized, [0, 1], [0, visual.length - 1], true))\n        ] || {};\n    }\n\n    function makeApplyVisual(visualType) {\n        return function (value, getter, setter) {\n            setter(visualType, this.mapValueToVisual(value));\n        };\n    }\n\n    function doMapCategory(normalized) {\n        var visual = this.option.visual;\n        return visual[\n            (this.option.loop && normalized !== CATEGORY_DEFAULT_VISUAL_INDEX)\n                ? normalized % visual.length\n                : normalized\n        ];\n    }\n\n    function doMapFixed() {\n        return this.option.visual[0];\n    }\n\n    function makeDoMap(sourceExtent) {\n        return {\n            linear: function (normalized) {\n                return linearMap(normalized, sourceExtent, this.option.visual, true);\n            },\n            category: doMapCategory,\n            piecewise: function (normalized, value) {\n                var result = getSpecifiedVisual.call(this, value);\n                if (result == null) {\n                    result = linearMap(normalized, sourceExtent, this.option.visual, true);\n                }\n                return result;\n            },\n            fixed: doMapFixed\n        };\n    }\n\n    function getSpecifiedVisual(value) {\n        var thisOption = this.option;\n        var pieceList = thisOption.pieceList;\n        if (thisOption.hasSpecialVisual) {\n            var pieceIndex = VisualMapping.findPieceIndex(value, pieceList);\n            var piece = pieceList[pieceIndex];\n            if (piece && piece.visual) {\n                return piece.visual[this.type];\n            }\n        }\n    }\n\n\n    /**\n     * Normalizers by mapping methods.\n     */\n    var normalizers = {\n\n        linear: function (value) {\n            return linearMap(value, this.option.dataExtent, [0, 1], true);\n        },\n\n        piecewise: function (value) {\n            var pieceList = this.option.pieceList;\n            var pieceIndex = VisualMapping.findPieceIndex(value, pieceList, true);\n            if (pieceIndex != null) {\n                return linearMap(pieceIndex, [0, pieceList.length - 1], [0, 1], true);\n            }\n        },\n\n        category: function (value) {\n            var index = this.option.categories\n                ? this.option.categoryMap[value]\n                : value; // ordinal\n            return index == null ? CATEGORY_DEFAULT_VISUAL_INDEX : index;\n        },\n\n        fixed: zrUtil.noop\n    };\n\n\n\n    /**\n     * List available visual types.\n     *\n     * @public\n     * @return {Array.<string>}\n     */\n    VisualMapping.listVisualTypes = function () {\n        var visualTypes = [];\n        zrUtil.each(visualHandlers, function (handler, key) {\n            visualTypes.push(key);\n        });\n        return visualTypes;\n    };\n\n    /**\n     * @public\n     */\n    VisualMapping.addVisualHandler = function (name, handler) {\n        visualHandlers[name] = handler;\n    };\n\n    /**\n     * @public\n     */\n    VisualMapping.isValidType = function (visualType) {\n        return visualHandlers.hasOwnProperty(visualType);\n    };\n\n    /**\n     * Convinent method.\n     * Visual can be Object or Array or primary type.\n     *\n     * @public\n     */\n    VisualMapping.eachVisual = function (visual, callback, context) {\n        if (zrUtil.isObject(visual)) {\n            zrUtil.each(visual, callback, context);\n        }\n        else {\n            callback.call(context, visual);\n        }\n    };\n\n    VisualMapping.mapVisual = function (visual, callback, context) {\n        var isPrimary;\n        var newVisual = zrUtil.isArray(visual)\n            ? []\n            : zrUtil.isObject(visual)\n            ? {}\n            : (isPrimary = true, null);\n\n        VisualMapping.eachVisual(visual, function (v, key) {\n            var newVal = callback.call(context, v, key);\n            isPrimary ? (newVisual = newVal) : (newVisual[key] = newVal);\n        });\n        return newVisual;\n    };\n\n    /**\n     * @public\n     * @param {Object} obj\n     * @return {Oject} new object containers visual values.\n     *                 If no visuals, return null.\n     */\n    VisualMapping.retrieveVisuals = function (obj) {\n        var ret = {};\n        var hasVisual;\n\n        obj && each(visualHandlers, function (h, visualType) {\n            if (obj.hasOwnProperty(visualType)) {\n                ret[visualType] = obj[visualType];\n                hasVisual = true;\n            }\n        });\n\n        return hasVisual ? ret : null;\n    };\n\n    /**\n     * Give order to visual types, considering colorSaturation, colorAlpha depends on color.\n     *\n     * @public\n     * @param {(Object|Array)} visualTypes If Object, like: {color: ..., colorSaturation: ...}\n     *                                     IF Array, like: ['color', 'symbol', 'colorSaturation']\n     * @return {Array.<string>} Sorted visual types.\n     */\n    VisualMapping.prepareVisualTypes = function (visualTypes) {\n        if (isObject(visualTypes)) {\n            var types = [];\n            each(visualTypes, function (item, type) {\n                types.push(type);\n            });\n            visualTypes = types;\n        }\n        else if (zrUtil.isArray(visualTypes)) {\n            visualTypes = visualTypes.slice();\n        }\n        else {\n            return [];\n        }\n\n        visualTypes.sort(function (type1, type2) {\n            // color should be front of colorSaturation, colorAlpha, ...\n            // symbol and symbolSize do not matter.\n            return (type2 === 'color' && type1 !== 'color' && type1.indexOf('color') === 0)\n                ? 1 : -1;\n        });\n\n        return visualTypes;\n    };\n\n    /**\n     * 'color', 'colorSaturation', 'colorAlpha', ... are depends on 'color'.\n     * Other visuals are only depends on themself.\n     *\n     * @public\n     * @param {string} visualType1\n     * @param {string} visualType2\n     * @return {boolean}\n     */\n    VisualMapping.dependsOn = function (visualType1, visualType2) {\n        return visualType2 === 'color'\n            ? !!(visualType1 && visualType1.indexOf(visualType2) === 0)\n            : visualType1 === visualType2;\n    };\n\n    /**\n     * @param {number} value\n     * @param {Array.<Object>} pieceList [{value: ..., interval: [min, max]}, ...]\n     *                         Always from small to big.\n     * @param {boolean} [findClosestWhenOutside=false]\n     * @return {number} index\n     */\n    VisualMapping.findPieceIndex = function (value, pieceList, findClosestWhenOutside) {\n        var possibleI;\n        var abs = Infinity;\n\n        // value has the higher priority.\n        for (var i = 0, len = pieceList.length; i < len; i++) {\n            var pieceValue = pieceList[i].value;\n            if (pieceValue != null) {\n                if (pieceValue === value) {\n                    return i;\n                }\n                findClosestWhenOutside && updatePossible(pieceValue, i);\n            }\n        }\n\n        for (var i = 0, len = pieceList.length; i < len; i++) {\n            var piece = pieceList[i];\n            var interval = piece.interval;\n            var close = piece.close;\n\n            if (interval) {\n                if (interval[0] === -Infinity) {\n                    if (littleThan(close[1], value, interval[1])) {\n                        return i;\n                    }\n                }\n                else if (interval[1] === Infinity) {\n                    if (littleThan(close[0], interval[0], value)) {\n                        return i;\n                    }\n                }\n                else if (\n                    littleThan(close[0], interval[0], value)\n                    && littleThan(close[1], value, interval[1])\n                ) {\n                    return i;\n                }\n                findClosestWhenOutside && updatePossible(interval[0], i);\n                findClosestWhenOutside && updatePossible(interval[1], i);\n            }\n        }\n\n        if (findClosestWhenOutside) {\n            return value === Infinity\n                ? pieceList.length - 1\n                : value === -Infinity\n                ? 0\n                : possibleI;\n        }\n\n        function updatePossible(val, index) {\n            var newAbs = Math.abs(val - value);\n            if (newAbs < abs) {\n                abs = newAbs;\n                possibleI = index;\n            }\n        }\n\n    };\n\n    function littleThan(close, a, b) {\n        return close ? a <= b : a < b;\n    }\n\n    module.exports = VisualMapping;\n\n\n\n/***/ }),\n/* 371 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n\n    var zrUtil = __webpack_require__(315);\n\n    var Gradient = __webpack_require__(346);\n\n    /**\n     * x, y, x2, y2 are all percent from 0 to 1\n     * @param {number} [x=0]\n     * @param {number} [y=0]\n     * @param {number} [x2=1]\n     * @param {number} [y2=0]\n     * @param {Array.<Object>} colorStops\n     * @param {boolean} [globalCoord=false]\n     */\n    var LinearGradient = function (x, y, x2, y2, colorStops, globalCoord) {\n        // Should do nothing more in this constructor. Because gradient can be\n        // declard by `color: {type: 'linear', colorStops: ...}`, where\n        // this constructor will not be called.\n\n        this.x = x == null ? 0 : x;\n\n        this.y = y == null ? 0 : y;\n\n        this.x2 = x2 == null ? 1 : x2;\n\n        this.y2 = y2 == null ? 0 : y2;\n\n        // Can be cloned\n        this.type = 'linear';\n\n        // If use global coord\n        this.global = globalCoord || false;\n\n        Gradient.call(this, colorStops);\n    };\n\n    LinearGradient.prototype = {\n\n        constructor: LinearGradient\n    };\n\n    zrUtil.inherits(LinearGradient, Gradient);\n\n    module.exports = LinearGradient;\n\n\n/***/ }),\n/* 372 */,\n/* 373 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * @module echarts/chart/helper/SymbolDraw\n */\n\n\n    var graphic = __webpack_require__(317);\n    var Symbol = __webpack_require__(350);\n\n    /**\n     * @constructor\n     * @alias module:echarts/chart/helper/SymbolDraw\n     * @param {module:zrender/graphic/Group} [symbolCtor]\n     */\n    function SymbolDraw(symbolCtor) {\n        this.group = new graphic.Group();\n\n        this._symbolCtor = symbolCtor || Symbol;\n    }\n\n    var symbolDrawProto = SymbolDraw.prototype;\n\n    function symbolNeedsDraw(data, idx, isIgnore) {\n        var point = data.getItemLayout(idx);\n        // Is an object\n        // if (point && point.hasOwnProperty('point')) {\n        //     point = point.point;\n        // }\n        return point && !isNaN(point[0]) && !isNaN(point[1]) && !(isIgnore && isIgnore(idx))\n                    && data.getItemVisual(idx, 'symbol') !== 'none';\n    }\n    /**\n     * Update symbols draw by new data\n     * @param {module:echarts/data/List} data\n     * @param {Array.<boolean>} [isIgnore]\n     */\n    symbolDrawProto.updateData = function (data, isIgnore) {\n        var group = this.group;\n        var seriesModel = data.hostModel;\n        var oldData = this._data;\n\n        var SymbolCtor = this._symbolCtor;\n\n        var seriesScope = {\n            itemStyle: seriesModel.getModel('itemStyle.normal').getItemStyle(['color']),\n            hoverItemStyle: seriesModel.getModel('itemStyle.emphasis').getItemStyle(),\n            symbolRotate: seriesModel.get('symbolRotate'),\n            symbolOffset: seriesModel.get('symbolOffset'),\n            hoverAnimation: seriesModel.get('hoverAnimation'),\n\n            labelModel: seriesModel.getModel('label.normal'),\n            hoverLabelModel: seriesModel.getModel('label.emphasis')\n        };\n\n        data.diff(oldData)\n            .add(function (newIdx) {\n                var point = data.getItemLayout(newIdx);\n                if (symbolNeedsDraw(data, newIdx, isIgnore)) {\n                    var symbolEl = new SymbolCtor(data, newIdx, seriesScope);\n                    symbolEl.attr('position', point);\n                    data.setItemGraphicEl(newIdx, symbolEl);\n                    group.add(symbolEl);\n                }\n            })\n            .update(function (newIdx, oldIdx) {\n                var symbolEl = oldData.getItemGraphicEl(oldIdx);\n                var point = data.getItemLayout(newIdx);\n                if (!symbolNeedsDraw(data, newIdx, isIgnore)) {\n                    group.remove(symbolEl);\n                    return;\n                }\n                if (!symbolEl) {\n                    symbolEl = new SymbolCtor(data, newIdx);\n                    symbolEl.attr('position', point);\n                }\n                else {\n                    symbolEl.updateData(data, newIdx, seriesScope);\n                    graphic.updateProps(symbolEl, {\n                        position: point\n                    }, seriesModel);\n                }\n\n                // Add back\n                group.add(symbolEl);\n\n                data.setItemGraphicEl(newIdx, symbolEl);\n            })\n            .remove(function (oldIdx) {\n                var el = oldData.getItemGraphicEl(oldIdx);\n                el && el.fadeOut(function () {\n                    group.remove(el);\n                });\n            })\n            .execute();\n\n        this._data = data;\n    };\n\n    symbolDrawProto.updateLayout = function () {\n        var data = this._data;\n        if (data) {\n            // Not use animation\n            data.eachItemGraphicEl(function (el, idx) {\n                var point = data.getItemLayout(idx);\n                el.attr('position', point);\n            });\n        }\n    };\n\n    symbolDrawProto.remove = function (enableAnimation) {\n        var group = this.group;\n        var data = this._data;\n        if (data) {\n            if (enableAnimation) {\n                data.eachItemGraphicEl(function (el) {\n                    el.fadeOut(function () {\n                        group.remove(el);\n                    });\n                });\n            }\n            else {\n                group.removeAll();\n            }\n        }\n    };\n\n    module.exports = SymbolDraw;\n\n\n/***/ }),\n/* 374 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// FIXME Better way to pack data in graphic element\n\n\n    __webpack_require__(386);\n\n    __webpack_require__(387);\n\n    // Show tip action\n    /**\n     * @action\n     * @property {string} type\n     * @property {number} seriesIndex\n     * @property {number} dataIndex\n     * @property {number} [x]\n     * @property {number} [y]\n     */\n    __webpack_require__(316).registerAction(\n        {\n            type: 'showTip',\n            event: 'showTip',\n            update: 'tooltip:manuallyShowTip'\n        },\n        // noop\n        function () {}\n    );\n    // Hide tip action\n    __webpack_require__(316).registerAction(\n        {\n            type: 'hideTip',\n            event: 'hideTip',\n            update: 'tooltip:manuallyHideTip'\n        },\n        // noop\n        function () {}\n    );\n\n\n/***/ }),\n/* 375 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var Group = __webpack_require__(336);\n    var componentUtil = __webpack_require__(343);\n    var clazzUtil = __webpack_require__(326);\n\n    var Component = function () {\n        /**\n         * @type {module:zrender/container/Group}\n         * @readOnly\n         */\n        this.group = new Group();\n\n        /**\n         * @type {string}\n         * @readOnly\n         */\n        this.uid = componentUtil.getUID('viewComponent');\n    };\n\n    Component.prototype = {\n\n        constructor: Component,\n\n        init: function (ecModel, api) {},\n\n        render: function (componentModel, ecModel, api, payload) {},\n\n        dispose: function () {}\n\n    };\n\n    var componentProto = Component.prototype;\n    componentProto.updateView\n        = componentProto.updateLayout\n        = componentProto.updateVisual\n        = function (seriesModel, ecModel, api, payload) {\n            // Do nothing;\n        };\n    // Enable Component.extend.\n    clazzUtil.enableClassExtend(Component);\n\n    // Enable capability of registerClass, getClass, hasClass, registerSubTypeDefaulter and so on.\n    clazzUtil.enableClassManagement(Component, {registerWhenExtend: true});\n\n    module.exports = Component;\n\n\n/***/ }),\n/* 376 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n\n    var zrUtil = __webpack_require__(315);\n\n    var echartsAPIList = [\n        'getDom', 'getZr', 'getWidth', 'getHeight', 'dispatchAction', 'isDisposed',\n        'on', 'off', 'getDataURL', 'getConnectedDataURL', 'getModel', 'getOption'\n    ];\n\n    function ExtensionAPI(chartInstance) {\n        zrUtil.each(echartsAPIList, function (name) {\n            this[name] = zrUtil.bind(chartInstance[name], chartInstance);\n        }, this);\n    }\n\n    module.exports = ExtensionAPI;\n\n\n/***/ }),\n/* 377 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var zrUtil = __webpack_require__(315);\n    var echarts = __webpack_require__(316);\n    var PRIORITY = echarts.PRIORITY;\n\n    __webpack_require__(378);\n    __webpack_require__(379);\n\n    echarts.registerVisual(zrUtil.curry(\n        __webpack_require__(416), 'line', 'circle', 'line'\n    ));\n    echarts.registerLayout(zrUtil.curry(\n        __webpack_require__(399), 'line'\n    ));\n\n    // Down sample after filter\n    echarts.registerProcessor(PRIORITY.PROCESSOR.STATISTIC, zrUtil.curry(\n        __webpack_require__(411), 'line'\n    ));\n\n    // In case developer forget to include grid component\n    __webpack_require__(367);\n\n\n/***/ }),\n/* 378 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n\n    var createListFromArray = __webpack_require__(366);\n    var SeriesModel = __webpack_require__(347);\n\n    module.exports = SeriesModel.extend({\n\n        type: 'series.line',\n\n        dependencies: ['grid', 'polar'],\n\n        getInitialData: function (option, ecModel) {\n            if (__DEV__) {\n                var coordSys = option.coordinateSystem;\n                if (coordSys !== 'polar' && coordSys !== 'cartesian2d') {\n                    throw new Error('Line not support coordinateSystem besides cartesian and polar');\n                }\n            }\n            return createListFromArray(option.data, this, ecModel);\n        },\n\n        defaultOption: {\n            zlevel: 0,                  // 一级层叠\n            z: 2,                       // 二级层叠\n            coordinateSystem: 'cartesian2d',\n            legendHoverLink: true,\n\n            hoverAnimation: true,\n            // stack: null\n            // xAxisIndex: 0,\n            // yAxisIndex: 0,\n\n            // polarIndex: 0,\n\n            // If clip the overflow value\n            clipOverflow: true,\n\n            label: {\n                normal: {\n                    position: 'top'\n                }\n            },\n            // itemStyle: {\n            //     normal: {},\n            //     emphasis: {}\n            // },\n            lineStyle: {\n                normal: {\n                    width: 2,\n                    type: 'solid'\n                }\n            },\n            // areaStyle: {},\n            // false, 'start', 'end', 'middle'\n            step: false,\n\n            // Disabled if step is true\n            smooth: false,\n            smoothMonotone: null,\n            // 拐点图形类型\n            symbol: 'emptyCircle',\n            // 拐点图形大小\n            symbolSize: 4,\n            // 拐点图形旋转控制\n            symbolRotate: null,\n\n            // 是否显示 symbol, 只有在 tooltip hover 的时候显示\n            showSymbol: true,\n            // 标志图形默认只有主轴显示（随主轴标签间隔隐藏策略）\n            showAllSymbol: false,\n\n            // 是否连接断点\n            connectNulls: false,\n\n            // 数据过滤，'average', 'max', 'min', 'sum'\n            sampling: 'none',\n\n            animationEasing: 'linear',\n\n            // Disable progressive\n            progressive: 0,\n            hoverLayerThreshold: Infinity\n        }\n    });\n\n\n/***/ }),\n/* 379 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n// FIXME step not support polar\n\n\n    var zrUtil = __webpack_require__(315);\n    var SymbolDraw = __webpack_require__(373);\n    var Symbol = __webpack_require__(350);\n    var lineAnimationDiff = __webpack_require__(380);\n    var graphic = __webpack_require__(317);\n    var modelUtil = __webpack_require__(323);\n    var polyHelper = __webpack_require__(381);\n    var ChartView = __webpack_require__(354);\n\n    function isPointsSame(points1, points2) {\n        if (points1.length !== points2.length) {\n            return;\n        }\n        for (var i = 0; i < points1.length; i++) {\n            var p1 = points1[i];\n            var p2 = points2[i];\n            if (p1[0] !== p2[0] || p1[1] !== p2[1]) {\n                return;\n            }\n        }\n        return true;\n    }\n\n    function getSmooth(smooth) {\n        return typeof (smooth) === 'number' ? smooth : (smooth ? 0.3 : 0);\n    }\n\n    function getAxisExtentWithGap(axis) {\n        var extent = axis.getGlobalExtent();\n        if (axis.onBand) {\n            // Remove extra 1px to avoid line miter in clipped edge\n            var halfBandWidth = axis.getBandWidth() / 2 - 1;\n            var dir = extent[1] > extent[0] ? 1 : -1;\n            extent[0] += dir * halfBandWidth;\n            extent[1] -= dir * halfBandWidth;\n        }\n        return extent;\n    }\n\n    function sign(val) {\n        return val >= 0 ? 1 : -1;\n    }\n    /**\n     * @param {module:echarts/coord/cartesian/Cartesian2D|module:echarts/coord/polar/Polar} coordSys\n     * @param {module:echarts/data/List} data\n     * @param {Array.<Array.<number>>} points\n     * @private\n     */\n    function getStackedOnPoints(coordSys, data) {\n        var baseAxis = coordSys.getBaseAxis();\n        var valueAxis = coordSys.getOtherAxis(baseAxis);\n        var valueStart = baseAxis.onZero\n            ? 0 : valueAxis.scale.getExtent()[0];\n\n        var valueDim = valueAxis.dim;\n\n        var baseDataOffset = valueDim === 'x' || valueDim === 'radius' ? 1 : 0;\n\n        return data.mapArray([valueDim], function (val, idx) {\n            var stackedOnSameSign;\n            var stackedOn = data.stackedOn;\n            // Find first stacked value with same sign\n            while (stackedOn &&\n                sign(stackedOn.get(valueDim, idx)) === sign(val)\n            ) {\n                stackedOnSameSign = stackedOn;\n                break;\n            }\n            var stackedData = [];\n            stackedData[baseDataOffset] = data.get(baseAxis.dim, idx);\n            stackedData[1 - baseDataOffset] = stackedOnSameSign\n                ? stackedOnSameSign.get(valueDim, idx, true) : valueStart;\n\n            return coordSys.dataToPoint(stackedData);\n        }, true);\n    }\n\n    function createGridClipShape(cartesian, hasAnimation, seriesModel) {\n        var xExtent = getAxisExtentWithGap(cartesian.getAxis('x'));\n        var yExtent = getAxisExtentWithGap(cartesian.getAxis('y'));\n        var isHorizontal = cartesian.getBaseAxis().isHorizontal();\n\n        var x = Math.min(xExtent[0], xExtent[1]);\n        var y = Math.min(yExtent[0], yExtent[1]);\n        var width = Math.max(xExtent[0], xExtent[1]) - x;\n        var height = Math.max(yExtent[0], yExtent[1]) - y;\n        var lineWidth = seriesModel.get('lineStyle.normal.width') || 2;\n        // Expand clip shape to avoid clipping when line value exceeds axis\n        var expandSize = seriesModel.get('clipOverflow') ? lineWidth / 2 : Math.max(width, height);\n        if (isHorizontal) {\n            y -= expandSize;\n            height += expandSize * 2;\n        }\n        else {\n            x -= expandSize;\n            width += expandSize * 2;\n        }\n\n        var clipPath = new graphic.Rect({\n            shape: {\n                x: x,\n                y: y,\n                width: width,\n                height: height\n            }\n        });\n\n        if (hasAnimation) {\n            clipPath.shape[isHorizontal ? 'width' : 'height'] = 0;\n            graphic.initProps(clipPath, {\n                shape: {\n                    width: width,\n                    height: height\n                }\n            }, seriesModel);\n        }\n\n        return clipPath;\n    }\n\n    function createPolarClipShape(polar, hasAnimation, seriesModel) {\n        var angleAxis = polar.getAngleAxis();\n        var radiusAxis = polar.getRadiusAxis();\n\n        var radiusExtent = radiusAxis.getExtent();\n        var angleExtent = angleAxis.getExtent();\n\n        var RADIAN = Math.PI / 180;\n\n        var clipPath = new graphic.Sector({\n            shape: {\n                cx: polar.cx,\n                cy: polar.cy,\n                r0: radiusExtent[0],\n                r: radiusExtent[1],\n                startAngle: -angleExtent[0] * RADIAN,\n                endAngle: -angleExtent[1] * RADIAN,\n                clockwise: angleAxis.inverse\n            }\n        });\n\n        if (hasAnimation) {\n            clipPath.shape.endAngle = -angleExtent[0] * RADIAN;\n            graphic.initProps(clipPath, {\n                shape: {\n                    endAngle: -angleExtent[1] * RADIAN\n                }\n            }, seriesModel);\n        }\n\n        return clipPath;\n    }\n\n    function createClipShape(coordSys, hasAnimation, seriesModel) {\n        return coordSys.type === 'polar'\n            ? createPolarClipShape(coordSys, hasAnimation, seriesModel)\n            : createGridClipShape(coordSys, hasAnimation, seriesModel);\n    }\n\n    function turnPointsIntoStep(points, coordSys, stepTurnAt) {\n        var baseAxis = coordSys.getBaseAxis();\n        var baseIndex = baseAxis.dim === 'x' || baseAxis.dim === 'radius' ? 0 : 1;\n\n        var stepPoints = [];\n        for (var i = 0; i < points.length - 1; i++) {\n            var nextPt = points[i + 1];\n            var pt = points[i];\n            stepPoints.push(pt);\n\n            var stepPt = [];\n            switch (stepTurnAt) {\n                case 'end':\n                    stepPt[baseIndex] = nextPt[baseIndex];\n                    stepPt[1 - baseIndex] = pt[1 - baseIndex];\n                    // default is start\n                    stepPoints.push(stepPt);\n                    break;\n                case 'middle':\n                    // default is start\n                    var middle = (pt[baseIndex] + nextPt[baseIndex]) / 2;\n                    var stepPt2 = [];\n                    stepPt[baseIndex] = stepPt2[baseIndex] = middle;\n                    stepPt[1 - baseIndex] = pt[1 - baseIndex];\n                    stepPt2[1 - baseIndex] = nextPt[1 - baseIndex];\n                    stepPoints.push(stepPt);\n                    stepPoints.push(stepPt2);\n                    break;\n                default:\n                    stepPt[baseIndex] = pt[baseIndex];\n                    stepPt[1 - baseIndex] = nextPt[1 - baseIndex];\n                    // default is start\n                    stepPoints.push(stepPt);\n            }\n        }\n        // Last points\n        points[i] && stepPoints.push(points[i]);\n        return stepPoints;\n    }\n\n    function getVisualGradient(data, coordSys) {\n        var visualMetaList = data.getVisual('visualMeta');\n        if (!visualMetaList || !visualMetaList.length || !data.count()) {\n            // When data.count() is 0, gradient range can not be calculated.\n            return;\n        }\n\n        var visualMeta;\n        for (var i = visualMetaList.length - 1; i >= 0; i--) {\n            // Can only be x or y\n            if (visualMetaList[i].dimension < 2) {\n                visualMeta = visualMetaList[i];\n                break;\n            }\n        }\n        if (!visualMeta || coordSys.type !== 'cartesian2d') {\n            if (__DEV__) {\n                console.warn('Visual map on line style only support x or y dimension.');\n            }\n            return;\n        }\n\n        // If the area to be rendered is bigger than area defined by LinearGradient,\n        // the canvas spec prescribes that the color of the first stop and the last\n        // stop should be used. But if two stops are added at offset 0, in effect\n        // browsers use the color of the second stop to render area outside\n        // LinearGradient. So we can only infinitesimally extend area defined in\n        // LinearGradient to render `outerColors`.\n\n        var dimension = visualMeta.dimension;\n        var dimName = data.dimensions[dimension];\n        var axis = coordSys.getAxis(dimName);\n\n        // dataToCoor mapping may not be linear, but must be monotonic.\n        var colorStops = zrUtil.map(visualMeta.stops, function (stop) {\n            return {\n                coord: axis.toGlobalCoord(axis.dataToCoord(stop.value)),\n                color: stop.color\n            };\n        });\n        var stopLen = colorStops.length;\n        var outerColors = visualMeta.outerColors.slice();\n\n        if (stopLen && colorStops[0].coord > colorStops[stopLen - 1].coord) {\n            colorStops.reverse();\n            outerColors.reverse();\n        }\n\n        var tinyExtent = 10; // Arbitrary value: 10px\n        var minCoord = colorStops[0].coord - tinyExtent;\n        var maxCoord = colorStops[stopLen - 1].coord + tinyExtent;\n        var coordSpan = maxCoord - minCoord;\n\n        if (coordSpan < 1e-3) {\n            return 'transparent';\n        }\n\n        zrUtil.each(colorStops, function (stop) {\n            stop.offset = (stop.coord - minCoord) / coordSpan;\n        });\n        colorStops.push({\n            offset: stopLen ? colorStops[stopLen - 1].offset : 0.5,\n            color: outerColors[1] || 'transparent'\n        });\n        colorStops.unshift({ // notice colorStops.length have been changed.\n            offset: stopLen ? colorStops[0].offset : 0.5,\n            color: outerColors[0] || 'transparent'\n        });\n\n        // zrUtil.each(colorStops, function (colorStop) {\n        //     // Make sure each offset has rounded px to avoid not sharp edge\n        //     colorStop.offset = (Math.round(colorStop.offset * (end - start) + start) - start) / (end - start);\n        // });\n\n        var gradient = new graphic.LinearGradient(0, 0, 0, 0, colorStops, true);\n        gradient[dimName] = minCoord;\n        gradient[dimName + '2'] = maxCoord;\n\n        return gradient;\n    }\n\n    module.exports = ChartView.extend({\n\n        type: 'line',\n\n        init: function () {\n            var lineGroup = new graphic.Group();\n\n            var symbolDraw = new SymbolDraw();\n            this.group.add(symbolDraw.group);\n\n            this._symbolDraw = symbolDraw;\n            this._lineGroup = lineGroup;\n        },\n\n        render: function (seriesModel, ecModel, api) {\n            var coordSys = seriesModel.coordinateSystem;\n            var group = this.group;\n            var data = seriesModel.getData();\n            var lineStyleModel = seriesModel.getModel('lineStyle.normal');\n            var areaStyleModel = seriesModel.getModel('areaStyle.normal');\n\n            var points = data.mapArray(data.getItemLayout, true);\n\n            var isCoordSysPolar = coordSys.type === 'polar';\n            var prevCoordSys = this._coordSys;\n\n            var symbolDraw = this._symbolDraw;\n            var polyline = this._polyline;\n            var polygon = this._polygon;\n\n            var lineGroup = this._lineGroup;\n\n            var hasAnimation = seriesModel.get('animation');\n\n            var isAreaChart = !areaStyleModel.isEmpty();\n            var stackedOnPoints = getStackedOnPoints(coordSys, data);\n\n            var showSymbol = seriesModel.get('showSymbol');\n\n            var isSymbolIgnore = showSymbol && !isCoordSysPolar && !seriesModel.get('showAllSymbol')\n                && this._getSymbolIgnoreFunc(data, coordSys);\n\n            // Remove temporary symbols\n            var oldData = this._data;\n            oldData && oldData.eachItemGraphicEl(function (el, idx) {\n                if (el.__temp) {\n                    group.remove(el);\n                    oldData.setItemGraphicEl(idx, null);\n                }\n            });\n\n            // Remove previous created symbols if showSymbol changed to false\n            if (!showSymbol) {\n                symbolDraw.remove();\n            }\n\n            group.add(lineGroup);\n\n            // FIXME step not support polar\n            var step = !isCoordSysPolar && seriesModel.get('step');\n            // Initialization animation or coordinate system changed\n            if (\n                !(polyline && prevCoordSys.type === coordSys.type && step === this._step)\n            ) {\n                showSymbol && symbolDraw.updateData(data, isSymbolIgnore);\n\n                if (step) {\n                    // TODO If stacked series is not step\n                    points = turnPointsIntoStep(points, coordSys, step);\n                    stackedOnPoints = turnPointsIntoStep(stackedOnPoints, coordSys, step);\n                }\n\n                polyline = this._newPolyline(points, coordSys, hasAnimation);\n                if (isAreaChart) {\n                    polygon = this._newPolygon(\n                        points, stackedOnPoints,\n                        coordSys, hasAnimation\n                    );\n                }\n                lineGroup.setClipPath(createClipShape(coordSys, true, seriesModel));\n            }\n            else {\n                if (isAreaChart && !polygon) {\n                    // If areaStyle is added\n                    polygon = this._newPolygon(\n                        points, stackedOnPoints,\n                        coordSys, hasAnimation\n                    );\n                }\n                else if (polygon && !isAreaChart) {\n                    // If areaStyle is removed\n                    lineGroup.remove(polygon);\n                    polygon = this._polygon = null;\n                }\n\n                // Update clipPath\n                lineGroup.setClipPath(createClipShape(coordSys, false, seriesModel));\n\n                // Always update, or it is wrong in the case turning on legend\n                // because points are not changed\n                showSymbol && symbolDraw.updateData(data, isSymbolIgnore);\n\n                // Stop symbol animation and sync with line points\n                // FIXME performance?\n                data.eachItemGraphicEl(function (el) {\n                    el.stopAnimation(true);\n                });\n\n                // In the case data zoom triggerred refreshing frequently\n                // Data may not change if line has a category axis. So it should animate nothing\n                if (!isPointsSame(this._stackedOnPoints, stackedOnPoints)\n                    || !isPointsSame(this._points, points)\n                ) {\n                    if (hasAnimation) {\n                        this._updateAnimation(\n                            data, stackedOnPoints, coordSys, api, step\n                        );\n                    }\n                    else {\n                        // Not do it in update with animation\n                        if (step) {\n                            // TODO If stacked series is not step\n                            points = turnPointsIntoStep(points, coordSys, step);\n                            stackedOnPoints = turnPointsIntoStep(stackedOnPoints, coordSys, step);\n                        }\n\n                        polyline.setShape({\n                            points: points\n                        });\n                        polygon && polygon.setShape({\n                            points: points,\n                            stackedOnPoints: stackedOnPoints\n                        });\n                    }\n                }\n            }\n\n            var visualColor = getVisualGradient(data, coordSys) || data.getVisual('color');\n\n            polyline.useStyle(zrUtil.defaults(\n                // Use color in lineStyle first\n                lineStyleModel.getLineStyle(),\n                {\n                    fill: 'none',\n                    stroke: visualColor,\n                    lineJoin: 'bevel'\n                }\n            ));\n\n            var smooth = seriesModel.get('smooth');\n            smooth = getSmooth(seriesModel.get('smooth'));\n            polyline.setShape({\n                smooth: smooth,\n                smoothMonotone: seriesModel.get('smoothMonotone'),\n                connectNulls: seriesModel.get('connectNulls')\n            });\n\n            if (polygon) {\n                var stackedOn = data.stackedOn;\n                var stackedOnSmooth = 0;\n\n                polygon.useStyle(zrUtil.defaults(\n                    areaStyleModel.getAreaStyle(),\n                    {\n                        fill: visualColor,\n                        opacity: 0.7,\n                        lineJoin: 'bevel'\n                    }\n                ));\n\n                if (stackedOn) {\n                    var stackedOnSeries = stackedOn.hostModel;\n                    stackedOnSmooth = getSmooth(stackedOnSeries.get('smooth'));\n                }\n\n                polygon.setShape({\n                    smooth: smooth,\n                    stackedOnSmooth: stackedOnSmooth,\n                    smoothMonotone: seriesModel.get('smoothMonotone'),\n                    connectNulls: seriesModel.get('connectNulls')\n                });\n            }\n\n            this._data = data;\n            // Save the coordinate system for transition animation when data changed\n            this._coordSys = coordSys;\n            this._stackedOnPoints = stackedOnPoints;\n            this._points = points;\n            this._step = step;\n        },\n\n        dispose: function () {},\n\n        highlight: function (seriesModel, ecModel, api, payload) {\n            var data = seriesModel.getData();\n            var dataIndex = modelUtil.queryDataIndex(data, payload);\n\n            if (!(dataIndex instanceof Array) && dataIndex != null && dataIndex >= 0) {\n                var symbol = data.getItemGraphicEl(dataIndex);\n                if (!symbol) {\n                    // Create a temporary symbol if it is not exists\n                    var pt = data.getItemLayout(dataIndex);\n                    if (!pt) {\n                        // Null data\n                        return;\n                    }\n                    symbol = new Symbol(data, dataIndex);\n                    symbol.position = pt;\n                    symbol.setZ(\n                        seriesModel.get('zlevel'),\n                        seriesModel.get('z')\n                    );\n                    symbol.ignore = isNaN(pt[0]) || isNaN(pt[1]);\n                    symbol.__temp = true;\n                    data.setItemGraphicEl(dataIndex, symbol);\n\n                    // Stop scale animation\n                    symbol.stopSymbolAnimation(true);\n\n                    this.group.add(symbol);\n                }\n                symbol.highlight();\n            }\n            else {\n                // Highlight whole series\n                ChartView.prototype.highlight.call(\n                    this, seriesModel, ecModel, api, payload\n                );\n            }\n        },\n\n        downplay: function (seriesModel, ecModel, api, payload) {\n            var data = seriesModel.getData();\n            var dataIndex = modelUtil.queryDataIndex(data, payload);\n            if (dataIndex != null && dataIndex >= 0) {\n                var symbol = data.getItemGraphicEl(dataIndex);\n                if (symbol) {\n                    if (symbol.__temp) {\n                        data.setItemGraphicEl(dataIndex, null);\n                        this.group.remove(symbol);\n                    }\n                    else {\n                        symbol.downplay();\n                    }\n                }\n            }\n            else {\n                // Downplay whole series\n                ChartView.prototype.downplay.call(\n                    this, seriesModel, ecModel, api, payload\n                );\n            }\n        },\n\n        /**\n         * @param {module:zrender/container/Group} group\n         * @param {Array.<Array.<number>>} points\n         * @private\n         */\n        _newPolyline: function (points) {\n            var polyline = this._polyline;\n            // Remove previous created polyline\n            if (polyline) {\n                this._lineGroup.remove(polyline);\n            }\n\n            polyline = new polyHelper.Polyline({\n                shape: {\n                    points: points\n                },\n                silent: true,\n                z2: 10\n            });\n\n            this._lineGroup.add(polyline);\n\n            this._polyline = polyline;\n\n            return polyline;\n        },\n\n        /**\n         * @param {module:zrender/container/Group} group\n         * @param {Array.<Array.<number>>} stackedOnPoints\n         * @param {Array.<Array.<number>>} points\n         * @private\n         */\n        _newPolygon: function (points, stackedOnPoints) {\n            var polygon = this._polygon;\n            // Remove previous created polygon\n            if (polygon) {\n                this._lineGroup.remove(polygon);\n            }\n\n            polygon = new polyHelper.Polygon({\n                shape: {\n                    points: points,\n                    stackedOnPoints: stackedOnPoints\n                },\n                silent: true\n            });\n\n            this._lineGroup.add(polygon);\n\n            this._polygon = polygon;\n            return polygon;\n        },\n        /**\n         * @private\n         */\n        _getSymbolIgnoreFunc: function (data, coordSys) {\n            var categoryAxis = coordSys.getAxesByScale('ordinal')[0];\n            // `getLabelInterval` is provided by echarts/component/axis\n            if (categoryAxis && categoryAxis.isLabelIgnored) {\n                return zrUtil.bind(categoryAxis.isLabelIgnored, categoryAxis);\n            }\n        },\n\n        /**\n         * @private\n         */\n        // FIXME Two value axis\n        _updateAnimation: function (data, stackedOnPoints, coordSys, api, step) {\n            var polyline = this._polyline;\n            var polygon = this._polygon;\n            var seriesModel = data.hostModel;\n\n            var diff = lineAnimationDiff(\n                this._data, data,\n                this._stackedOnPoints, stackedOnPoints,\n                this._coordSys, coordSys\n            );\n\n            var current = diff.current;\n            var stackedOnCurrent = diff.stackedOnCurrent;\n            var next = diff.next;\n            var stackedOnNext = diff.stackedOnNext;\n            if (step) {\n                // TODO If stacked series is not step\n                current = turnPointsIntoStep(diff.current, coordSys, step);\n                stackedOnCurrent = turnPointsIntoStep(diff.stackedOnCurrent, coordSys, step);\n                next = turnPointsIntoStep(diff.next, coordSys, step);\n                stackedOnNext = turnPointsIntoStep(diff.stackedOnNext, coordSys, step);\n            }\n            // `diff.current` is subset of `current` (which should be ensured by\n            // turnPointsIntoStep), so points in `__points` can be updated when\n            // points in `current` are update during animation.\n            polyline.shape.__points = diff.current;\n            polyline.shape.points = current;\n\n            graphic.updateProps(polyline, {\n                shape: {\n                    points: next\n                }\n            }, seriesModel);\n\n            if (polygon) {\n                polygon.setShape({\n                    points: current,\n                    stackedOnPoints: stackedOnCurrent\n                });\n                graphic.updateProps(polygon, {\n                    shape: {\n                        points: next,\n                        stackedOnPoints: stackedOnNext\n                    }\n                }, seriesModel);\n            }\n\n            var updatedDataInfo = [];\n            var diffStatus = diff.status;\n\n            for (var i = 0; i < diffStatus.length; i++) {\n                var cmd = diffStatus[i].cmd;\n                if (cmd === '=') {\n                    var el = data.getItemGraphicEl(diffStatus[i].idx1);\n                    if (el) {\n                        updatedDataInfo.push({\n                            el: el,\n                            ptIdx: i    // Index of points\n                        });\n                    }\n                }\n            }\n\n            if (polyline.animators && polyline.animators.length) {\n                polyline.animators[0].during(function () {\n                    for (var i = 0; i < updatedDataInfo.length; i++) {\n                        var el = updatedDataInfo[i].el;\n                        el.attr('position', polyline.shape.__points[updatedDataInfo[i].ptIdx]);\n                    }\n                });\n            }\n        },\n\n        remove: function (ecModel) {\n            var group = this.group;\n            var oldData = this._data;\n            this._lineGroup.removeAll();\n            this._symbolDraw.remove(true);\n            // Remove temporary created elements when highlighting\n            oldData && oldData.eachItemGraphicEl(function (el, idx) {\n                if (el.__temp) {\n                    group.remove(el);\n                    oldData.setItemGraphicEl(idx, null);\n                }\n            });\n\n            this._polyline =\n            this._polygon =\n            this._coordSys =\n            this._points =\n            this._stackedOnPoints =\n            this._data = null;\n        }\n    });\n\n\n/***/ }),\n/* 380 */\n/***/ (function(module, exports) {\n\n\n\n    // var arrayDiff = require('zrender/lib/core/arrayDiff');\n    // 'zrender/core/arrayDiff' has been used before, but it did\n    // not do well in performance when roam with fixed dataZoom window.\n\n    function sign(val) {\n        return val >= 0 ? 1 : -1;\n    }\n\n    function getStackedOnPoint(coordSys, data, idx) {\n        var baseAxis = coordSys.getBaseAxis();\n        var valueAxis = coordSys.getOtherAxis(baseAxis);\n        var valueStart = baseAxis.onZero\n            ? 0 : valueAxis.scale.getExtent()[0];\n\n        var valueDim = valueAxis.dim;\n        var baseDataOffset = valueDim === 'x' || valueDim === 'radius' ? 1 : 0;\n\n        var stackedOnSameSign;\n        var stackedOn = data.stackedOn;\n        var val = data.get(valueDim, idx);\n        // Find first stacked value with same sign\n        while (stackedOn &&\n            sign(stackedOn.get(valueDim, idx)) === sign(val)\n        ) {\n            stackedOnSameSign = stackedOn;\n            break;\n        }\n        var stackedData = [];\n        stackedData[baseDataOffset] = data.get(baseAxis.dim, idx);\n        stackedData[1 - baseDataOffset] = stackedOnSameSign\n            ? stackedOnSameSign.get(valueDim, idx, true) : valueStart;\n\n        return coordSys.dataToPoint(stackedData);\n    }\n\n    // function convertToIntId(newIdList, oldIdList) {\n    //     // Generate int id instead of string id.\n    //     // Compare string maybe slow in score function of arrDiff\n\n    //     // Assume id in idList are all unique\n    //     var idIndicesMap = {};\n    //     var idx = 0;\n    //     for (var i = 0; i < newIdList.length; i++) {\n    //         idIndicesMap[newIdList[i]] = idx;\n    //         newIdList[i] = idx++;\n    //     }\n    //     for (var i = 0; i < oldIdList.length; i++) {\n    //         var oldId = oldIdList[i];\n    //         // Same with newIdList\n    //         if (idIndicesMap[oldId]) {\n    //             oldIdList[i] = idIndicesMap[oldId];\n    //         }\n    //         else {\n    //             oldIdList[i] = idx++;\n    //         }\n    //     }\n    // }\n\n    function diffData(oldData, newData) {\n        var diffResult = [];\n\n        newData.diff(oldData)\n            .add(function (idx) {\n                diffResult.push({cmd: '+', idx: idx});\n            })\n            .update(function (newIdx, oldIdx) {\n                diffResult.push({cmd: '=', idx: oldIdx, idx1: newIdx});\n            })\n            .remove(function (idx) {\n                diffResult.push({cmd: '-', idx: idx});\n            })\n            .execute();\n\n        return diffResult;\n    }\n\n    module.exports = function (\n        oldData, newData,\n        oldStackedOnPoints, newStackedOnPoints,\n        oldCoordSys, newCoordSys\n    ) {\n        var diff = diffData(oldData, newData);\n\n        // var newIdList = newData.mapArray(newData.getId);\n        // var oldIdList = oldData.mapArray(oldData.getId);\n\n        // convertToIntId(newIdList, oldIdList);\n\n        // // FIXME One data ?\n        // diff = arrayDiff(oldIdList, newIdList);\n\n        var currPoints = [];\n        var nextPoints = [];\n        // Points for stacking base line\n        var currStackedPoints = [];\n        var nextStackedPoints = [];\n\n        var status = [];\n        var sortedIndices = [];\n        var rawIndices = [];\n        var dims = newCoordSys.dimensions;\n        for (var i = 0; i < diff.length; i++) {\n            var diffItem = diff[i];\n            var pointAdded = true;\n\n            // FIXME, animation is not so perfect when dataZoom window moves fast\n            // Which is in case remvoing or add more than one data in the tail or head\n            switch (diffItem.cmd) {\n                case '=':\n                    var currentPt = oldData.getItemLayout(diffItem.idx);\n                    var nextPt = newData.getItemLayout(diffItem.idx1);\n                    // If previous data is NaN, use next point directly\n                    if (isNaN(currentPt[0]) || isNaN(currentPt[1])) {\n                        currentPt = nextPt.slice();\n                    }\n                    currPoints.push(currentPt);\n                    nextPoints.push(nextPt);\n\n                    currStackedPoints.push(oldStackedOnPoints[diffItem.idx]);\n                    nextStackedPoints.push(newStackedOnPoints[diffItem.idx1]);\n\n                    rawIndices.push(newData.getRawIndex(diffItem.idx1));\n                    break;\n                case '+':\n                    var idx = diffItem.idx;\n                    currPoints.push(\n                        oldCoordSys.dataToPoint([\n                            newData.get(dims[0], idx, true), newData.get(dims[1], idx, true)\n                        ])\n                    );\n\n                    nextPoints.push(newData.getItemLayout(idx).slice());\n\n                    currStackedPoints.push(\n                        getStackedOnPoint(oldCoordSys, newData, idx)\n                    );\n                    nextStackedPoints.push(newStackedOnPoints[idx]);\n\n                    rawIndices.push(newData.getRawIndex(idx));\n                    break;\n                case '-':\n                    var idx = diffItem.idx;\n                    var rawIndex = oldData.getRawIndex(idx);\n                    // Data is replaced. In the case of dynamic data queue\n                    // FIXME FIXME FIXME\n                    if (rawIndex !== idx) {\n                        currPoints.push(oldData.getItemLayout(idx));\n                        nextPoints.push(newCoordSys.dataToPoint([\n                            oldData.get(dims[0], idx, true), oldData.get(dims[1], idx, true)\n                        ]));\n\n                        currStackedPoints.push(oldStackedOnPoints[idx]);\n                        nextStackedPoints.push(\n                            getStackedOnPoint(\n                                newCoordSys, oldData, idx\n                            )\n                        );\n\n                        rawIndices.push(rawIndex);\n                    }\n                    else {\n                        pointAdded = false;\n                    }\n            }\n\n            // Original indices\n            if (pointAdded) {\n                status.push(diffItem);\n                sortedIndices.push(sortedIndices.length);\n            }\n        }\n\n        // Diff result may be crossed if all items are changed\n        // Sort by data index\n        sortedIndices.sort(function (a, b) {\n            return rawIndices[a] - rawIndices[b];\n        });\n\n        var sortedCurrPoints = [];\n        var sortedNextPoints = [];\n\n        var sortedCurrStackedPoints = [];\n        var sortedNextStackedPoints = [];\n\n        var sortedStatus = [];\n        for (var i = 0; i < sortedIndices.length; i++) {\n            var idx = sortedIndices[i];\n            sortedCurrPoints[i] = currPoints[idx];\n            sortedNextPoints[i] = nextPoints[idx];\n\n            sortedCurrStackedPoints[i] = currStackedPoints[idx];\n            sortedNextStackedPoints[i] = nextStackedPoints[idx];\n\n            sortedStatus[i] = status[idx];\n        }\n\n        return {\n            current: sortedCurrPoints,\n            next: sortedNextPoints,\n\n            stackedOnCurrent: sortedCurrStackedPoints,\n            stackedOnNext: sortedNextStackedPoints,\n\n            status: sortedStatus\n        };\n    };\n\n\n/***/ }),\n/* 381 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// Poly path support NaN point\n\n\n    var Path = __webpack_require__(320);\n    var vec2 = __webpack_require__(319);\n\n    var vec2Min = vec2.min;\n    var vec2Max = vec2.max;\n\n    var scaleAndAdd = vec2.scaleAndAdd;\n    var v2Copy = vec2.copy;\n\n    // Temporary variable\n    var v = [];\n    var cp0 = [];\n    var cp1 = [];\n\n    function isPointNull(p) {\n        return isNaN(p[0]) || isNaN(p[1]);\n    }\n\n    function drawSegment(\n        ctx, points, start, segLen, allLen,\n        dir, smoothMin, smoothMax, smooth, smoothMonotone, connectNulls\n    ) {\n        var prevIdx = 0;\n        var idx = start;\n        for (var k = 0; k < segLen; k++) {\n            var p = points[idx];\n            if (idx >= allLen || idx < 0) {\n                break;\n            }\n            if (isPointNull(p)) {\n                if (connectNulls) {\n                    idx += dir;\n                    continue;\n                }\n                break;\n            }\n\n            if (idx === start) {\n                ctx[dir > 0 ? 'moveTo' : 'lineTo'](p[0], p[1]);\n                v2Copy(cp0, p);\n            }\n            else {\n                if (smooth > 0) {\n                    var nextIdx = idx + dir;\n                    var nextP = points[nextIdx];\n                    if (connectNulls) {\n                        // Find next point not null\n                        while (nextP && isPointNull(points[nextIdx])) {\n                            nextIdx += dir;\n                            nextP = points[nextIdx];\n                        }\n                    }\n\n                    var ratioNextSeg = 0.5;\n                    var prevP = points[prevIdx];\n                    var nextP = points[nextIdx];\n                    // Last point\n                    if (!nextP || isPointNull(nextP)) {\n                        v2Copy(cp1, p);\n                    }\n                    else {\n                        // If next data is null in not connect case\n                        if (isPointNull(nextP) && !connectNulls) {\n                            nextP = p;\n                        }\n\n                        vec2.sub(v, nextP, prevP);\n\n                        var lenPrevSeg;\n                        var lenNextSeg;\n                        if (smoothMonotone === 'x' || smoothMonotone === 'y') {\n                            var dim = smoothMonotone === 'x' ? 0 : 1;\n                            lenPrevSeg = Math.abs(p[dim] - prevP[dim]);\n                            lenNextSeg = Math.abs(p[dim] - nextP[dim]);\n                        }\n                        else {\n                            lenPrevSeg = vec2.dist(p, prevP);\n                            lenNextSeg = vec2.dist(p, nextP);\n                        }\n\n                        // Use ratio of seg length\n                        ratioNextSeg = lenNextSeg / (lenNextSeg + lenPrevSeg);\n\n                        scaleAndAdd(cp1, p, v, -smooth * (1 - ratioNextSeg));\n                    }\n                    // Smooth constraint\n                    vec2Min(cp0, cp0, smoothMax);\n                    vec2Max(cp0, cp0, smoothMin);\n                    vec2Min(cp1, cp1, smoothMax);\n                    vec2Max(cp1, cp1, smoothMin);\n\n                    ctx.bezierCurveTo(\n                        cp0[0], cp0[1],\n                        cp1[0], cp1[1],\n                        p[0], p[1]\n                    );\n                    // cp0 of next segment\n                    scaleAndAdd(cp0, p, v, smooth * ratioNextSeg);\n                }\n                else {\n                    ctx.lineTo(p[0], p[1]);\n                }\n            }\n\n            prevIdx = idx;\n            idx += dir;\n        }\n\n        return k;\n    }\n\n    function getBoundingBox(points, smoothConstraint) {\n        var ptMin = [Infinity, Infinity];\n        var ptMax = [-Infinity, -Infinity];\n        if (smoothConstraint) {\n            for (var i = 0; i < points.length; i++) {\n                var pt = points[i];\n                if (pt[0] < ptMin[0]) { ptMin[0] = pt[0]; }\n                if (pt[1] < ptMin[1]) { ptMin[1] = pt[1]; }\n                if (pt[0] > ptMax[0]) { ptMax[0] = pt[0]; }\n                if (pt[1] > ptMax[1]) { ptMax[1] = pt[1]; }\n            }\n        }\n        return {\n            min: smoothConstraint ? ptMin : ptMax,\n            max: smoothConstraint ? ptMax : ptMin\n        };\n    }\n\n    module.exports = {\n\n        Polyline: Path.extend({\n\n            type: 'ec-polyline',\n\n            shape: {\n                points: [],\n\n                smooth: 0,\n\n                smoothConstraint: true,\n\n                smoothMonotone: null,\n\n                connectNulls: false\n            },\n\n            style: {\n                fill: null,\n\n                stroke: '#000'\n            },\n\n            buildPath: function (ctx, shape) {\n                var points = shape.points;\n\n                var i = 0;\n                var len = points.length;\n\n                var result = getBoundingBox(points, shape.smoothConstraint);\n\n                if (shape.connectNulls) {\n                    // Must remove first and last null values avoid draw error in polygon\n                    for (; len > 0; len--) {\n                        if (!isPointNull(points[len - 1])) {\n                            break;\n                        }\n                    }\n                    for (; i < len; i++) {\n                        if (!isPointNull(points[i])) {\n                            break;\n                        }\n                    }\n                }\n                while (i < len) {\n                    i += drawSegment(\n                        ctx, points, i, len, len,\n                        1, result.min, result.max, shape.smooth,\n                        shape.smoothMonotone, shape.connectNulls\n                    ) + 1;\n                }\n            }\n        }),\n\n        Polygon: Path.extend({\n\n            type: 'ec-polygon',\n\n            shape: {\n                points: [],\n\n                // Offset between stacked base points and points\n                stackedOnPoints: [],\n\n                smooth: 0,\n\n                stackedOnSmooth: 0,\n\n                smoothConstraint: true,\n\n                smoothMonotone: null,\n\n                connectNulls: false\n            },\n\n            buildPath: function (ctx, shape) {\n                var points = shape.points;\n                var stackedOnPoints = shape.stackedOnPoints;\n\n                var i = 0;\n                var len = points.length;\n                var smoothMonotone = shape.smoothMonotone;\n                var bbox = getBoundingBox(points, shape.smoothConstraint);\n                var stackedOnBBox = getBoundingBox(stackedOnPoints, shape.smoothConstraint);\n\n                if (shape.connectNulls) {\n                    // Must remove first and last null values avoid draw error in polygon\n                    for (; len > 0; len--) {\n                        if (!isPointNull(points[len - 1])) {\n                            break;\n                        }\n                    }\n                    for (; i < len; i++) {\n                        if (!isPointNull(points[i])) {\n                            break;\n                        }\n                    }\n                }\n                while (i < len) {\n                    var k = drawSegment(\n                        ctx, points, i, len, len,\n                        1, bbox.min, bbox.max, shape.smooth,\n                        smoothMonotone, shape.connectNulls\n                    );\n                    drawSegment(\n                        ctx, stackedOnPoints, i + k - 1, k, len,\n                        -1, stackedOnBBox.min, stackedOnBBox.max, shape.stackedOnSmooth,\n                        smoothMonotone, shape.connectNulls\n                    );\n                    i += k + 1;\n\n                    ctx.closePath();\n                }\n            }\n        })\n    };\n\n\n/***/ }),\n/* 382 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n// TODO boundaryGap\n\n\n    __webpack_require__(351);\n\n    __webpack_require__(384);\n\n\n/***/ }),\n/* 383 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var zrUtil = __webpack_require__(315);\n    var formatUtil = __webpack_require__(322);\n    var graphic = __webpack_require__(317);\n    var Model = __webpack_require__(325);\n    var numberUtil = __webpack_require__(318);\n    var remRadian = numberUtil.remRadian;\n    var isRadianAroundZero = numberUtil.isRadianAroundZero;\n    var vec2 = __webpack_require__(319);\n    var v2ApplyTransform = vec2.applyTransform;\n    var retrieve = zrUtil.retrieve;\n\n    var PI = Math.PI;\n\n    function makeAxisEventDataBase(axisModel) {\n        var eventData = {\n            componentType: axisModel.mainType\n        };\n        eventData[axisModel.mainType + 'Index'] = axisModel.componentIndex;\n        return eventData;\n    }\n\n    /**\n     * A final axis is translated and rotated from a \"standard axis\".\n     * So opt.position and opt.rotation is required.\n     *\n     * A standard axis is and axis from [0, 0] to [0, axisExtent[1]],\n     * for example: (0, 0) ------------> (0, 50)\n     *\n     * nameDirection or tickDirection or labelDirection is 1 means tick\n     * or label is below the standard axis, whereas is -1 means above\n     * the standard axis. labelOffset means offset between label and axis,\n     * which is useful when 'onZero', where axisLabel is in the grid and\n     * label in outside grid.\n     *\n     * Tips: like always,\n     * positive rotation represents anticlockwise, and negative rotation\n     * represents clockwise.\n     * The direction of position coordinate is the same as the direction\n     * of screen coordinate.\n     *\n     * Do not need to consider axis 'inverse', which is auto processed by\n     * axis extent.\n     *\n     * @param {module:zrender/container/Group} group\n     * @param {Object} axisModel\n     * @param {Object} opt Standard axis parameters.\n     * @param {Array.<number>} opt.position [x, y]\n     * @param {number} opt.rotation by radian\n     * @param {number} [opt.nameDirection=1] 1 or -1 Used when nameLocation is 'middle'.\n     * @param {number} [opt.tickDirection=1] 1 or -1\n     * @param {number} [opt.labelDirection=1] 1 or -1\n     * @param {number} [opt.labelOffset=0] Usefull when onZero.\n     * @param {string} [opt.axisLabelShow] default get from axisModel.\n     * @param {string} [opt.axisName] default get from axisModel.\n     * @param {number} [opt.axisNameAvailableWidth]\n     * @param {number} [opt.labelRotation] by degree, default get from axisModel.\n     * @param {number} [opt.labelInterval] Default label interval when label\n     *                                     interval from model is null or 'auto'.\n     * @param {number} [opt.strokeContainThreshold] Default label interval when label\n     */\n    var AxisBuilder = function (axisModel, opt) {\n\n        /**\n         * @readOnly\n         */\n        this.opt = opt;\n\n        /**\n         * @readOnly\n         */\n        this.axisModel = axisModel;\n\n        // Default value\n        zrUtil.defaults(\n            opt,\n            {\n                labelOffset: 0,\n                nameDirection: 1,\n                tickDirection: 1,\n                labelDirection: 1,\n                silent: true\n            }\n        );\n\n        /**\n         * @readOnly\n         */\n        this.group = new graphic.Group();\n\n        // FIXME Not use a seperate text group?\n        var dumbGroup = new graphic.Group({\n            position: opt.position.slice(),\n            rotation: opt.rotation\n        });\n\n        // this.group.add(dumbGroup);\n        // this._dumbGroup = dumbGroup;\n\n        dumbGroup.updateTransform();\n        this._transform = dumbGroup.transform;\n\n        this._dumbGroup = dumbGroup;\n    };\n\n    AxisBuilder.prototype = {\n\n        constructor: AxisBuilder,\n\n        hasBuilder: function (name) {\n            return !!builders[name];\n        },\n\n        add: function (name) {\n            builders[name].call(this);\n        },\n\n        getGroup: function () {\n            return this.group;\n        }\n\n    };\n\n    var builders = {\n\n        /**\n         * @private\n         */\n        axisLine: function () {\n            var opt = this.opt;\n            var axisModel = this.axisModel;\n\n            if (!axisModel.get('axisLine.show')) {\n                return;\n            }\n\n            var extent = this.axisModel.axis.getExtent();\n\n            var matrix = this._transform;\n            var pt1 = [extent[0], 0];\n            var pt2 = [extent[1], 0];\n            if (matrix) {\n                v2ApplyTransform(pt1, pt1, matrix);\n                v2ApplyTransform(pt2, pt2, matrix);\n            }\n\n            this.group.add(new graphic.Line(graphic.subPixelOptimizeLine({\n\n                // Id for animation\n                anid: 'line',\n\n                shape: {\n                    x1: pt1[0],\n                    y1: pt1[1],\n                    x2: pt2[0],\n                    y2: pt2[1]\n                },\n                style: zrUtil.extend(\n                    {lineCap: 'round'},\n                    axisModel.getModel('axisLine.lineStyle').getLineStyle()\n                ),\n                strokeContainThreshold: opt.strokeContainThreshold || 5,\n                silent: true,\n                z2: 1\n            })));\n        },\n\n        /**\n         * @private\n         */\n        axisTick: function () {\n            var axisModel = this.axisModel;\n            var axis = axisModel.axis;\n\n            if (!axisModel.get('axisTick.show') || axis.isBlank()) {\n                return;\n            }\n\n            var tickModel = axisModel.getModel('axisTick');\n            var opt = this.opt;\n\n            var lineStyleModel = tickModel.getModel('lineStyle');\n            var tickLen = tickModel.get('length');\n\n            var tickInterval = getInterval(tickModel, opt.labelInterval);\n            var ticksCoords = axis.getTicksCoords(tickModel.get('alignWithLabel'));\n            var ticks = axis.scale.getTicks();\n\n            var pt1 = [];\n            var pt2 = [];\n            var matrix = this._transform;\n\n            for (var i = 0; i < ticksCoords.length; i++) {\n                // Only ordinal scale support tick interval\n                if (ifIgnoreOnTick(axis, i, tickInterval)) {\n                     continue;\n                }\n\n                var tickCoord = ticksCoords[i];\n\n                pt1[0] = tickCoord;\n                pt1[1] = 0;\n                pt2[0] = tickCoord;\n                pt2[1] = opt.tickDirection * tickLen;\n\n                if (matrix) {\n                    v2ApplyTransform(pt1, pt1, matrix);\n                    v2ApplyTransform(pt2, pt2, matrix);\n                }\n                // Tick line, Not use group transform to have better line draw\n                this.group.add(new graphic.Line(graphic.subPixelOptimizeLine({\n\n                    // Id for animation\n                    anid: 'tick_' + ticks[i],\n\n                    shape: {\n                        x1: pt1[0],\n                        y1: pt1[1],\n                        x2: pt2[0],\n                        y2: pt2[1]\n                    },\n                    style: zrUtil.defaults(\n                        lineStyleModel.getLineStyle(),\n                        {\n                            stroke: axisModel.get('axisLine.lineStyle.color')\n                        }\n                    ),\n                    z2: 2,\n                    silent: true\n                })));\n            }\n        },\n\n        /**\n         * @param {module:echarts/coord/cartesian/AxisModel} axisModel\n         * @param {module:echarts/coord/cartesian/GridModel} gridModel\n         * @private\n         */\n        axisLabel: function () {\n            var opt = this.opt;\n            var axisModel = this.axisModel;\n            var axis = axisModel.axis;\n            var show = retrieve(opt.axisLabelShow, axisModel.get('axisLabel.show'));\n\n            if (!show || axis.isBlank()) {\n                return;\n            }\n\n            var labelModel = axisModel.getModel('axisLabel');\n            var textStyleModel = labelModel.getModel('textStyle');\n            var labelMargin = labelModel.get('margin');\n            var ticks = axis.scale.getTicks();\n            var labels = axisModel.getFormattedLabels();\n\n            // Special label rotate.\n            var labelRotation = retrieve(opt.labelRotation, labelModel.get('rotate')) || 0;\n            // To radian.\n            labelRotation = labelRotation * PI / 180;\n\n            var labelLayout = innerTextLayout(opt, labelRotation, opt.labelDirection);\n            var categoryData = axisModel.get('data');\n\n            var textEls = [];\n            var silent = isSilent(axisModel);\n            var triggerEvent = axisModel.get('triggerEvent');\n\n            zrUtil.each(ticks, function (tickVal, index) {\n                if (ifIgnoreOnTick(axis, index, opt.labelInterval)) {\n                     return;\n                }\n\n                var itemTextStyleModel = textStyleModel;\n                if (categoryData && categoryData[tickVal] && categoryData[tickVal].textStyle) {\n                    itemTextStyleModel = new Model(\n                        categoryData[tickVal].textStyle, textStyleModel, axisModel.ecModel\n                    );\n                }\n                var textColor = itemTextStyleModel.getTextColor()\n                    || axisModel.get('axisLine.lineStyle.color');\n\n                var tickCoord = axis.dataToCoord(tickVal);\n                var pos = [\n                    tickCoord,\n                    opt.labelOffset + opt.labelDirection * labelMargin\n                ];\n                var labelBeforeFormat = axis.scale.getLabel(tickVal);\n\n                var textEl = new graphic.Text({\n\n                    // Id for animation\n                    anid: 'label_' + tickVal,\n\n                    style: {\n                        text: labels[index],\n                        textAlign: itemTextStyleModel.get('align', true) || labelLayout.textAlign,\n                        textVerticalAlign: itemTextStyleModel.get('baseline', true) || labelLayout.verticalAlign,\n                        textFont: itemTextStyleModel.getFont(),\n                        fill: typeof textColor === 'function' ? textColor(labelBeforeFormat) : textColor\n                    },\n                    position: pos,\n                    rotation: labelLayout.rotation,\n                    silent: silent,\n                    z2: 10\n                });\n\n                // Pack data for mouse event\n                if (triggerEvent) {\n                    textEl.eventData = makeAxisEventDataBase(axisModel);\n                    textEl.eventData.targetType = 'axisLabel';\n                    textEl.eventData.value = labelBeforeFormat;\n                }\n\n                // FIXME\n                this._dumbGroup.add(textEl);\n                textEl.updateTransform();\n\n                textEls.push(textEl);\n                this.group.add(textEl);\n\n                textEl.decomposeTransform();\n\n            }, this);\n\n            function isTwoLabelOverlapped(current, next) {\n                var firstRect = current && current.getBoundingRect().clone();\n                var nextRect = next && next.getBoundingRect().clone();\n                if (firstRect && nextRect) {\n                    firstRect.applyTransform(current.getLocalTransform());\n                    nextRect.applyTransform(next.getLocalTransform());\n                    return firstRect.intersect(nextRect);\n                }\n            }\n\n            // If min or max are user set, we need to check\n            // If the tick on min(max) are overlap on their neighbour tick\n            // If they are overlapped, we need to hide the min(max) tick label\n            if (axisModel.getMin() != null) {\n                var firstLabel = textEls[0];\n                var nextLabel = textEls[1];\n                if (isTwoLabelOverlapped(firstLabel, nextLabel)) {\n                    firstLabel.ignore = true;\n                }\n            }\n            if (axisModel.getMax() != null) {\n                var lastLabel = textEls[textEls.length - 1];\n                var prevLabel = textEls[textEls.length - 2];\n                if (isTwoLabelOverlapped(prevLabel, lastLabel)) {\n                    lastLabel.ignore = true;\n                }\n            }\n        },\n\n        /**\n         * @private\n         */\n        axisName: function () {\n            var opt = this.opt;\n            var axisModel = this.axisModel;\n            var name = retrieve(opt.axisName, axisModel.get('name'));\n\n            if (!name) {\n                return;\n            }\n\n            var nameLocation = axisModel.get('nameLocation');\n            var nameDirection = opt.nameDirection;\n            var textStyleModel = axisModel.getModel('nameTextStyle');\n            var gap = axisModel.get('nameGap') || 0;\n\n            var extent = this.axisModel.axis.getExtent();\n            var gapSignal = extent[0] > extent[1] ? -1 : 1;\n            var pos = [\n                nameLocation === 'start'\n                    ? extent[0] - gapSignal * gap\n                    : nameLocation === 'end'\n                    ? extent[1] + gapSignal * gap\n                    : (extent[0] + extent[1]) / 2, // 'middle'\n                // Reuse labelOffset.\n                nameLocation === 'middle' ? opt.labelOffset + nameDirection * gap : 0\n            ];\n\n            var labelLayout;\n\n            var nameRotation = axisModel.get('nameRotate');\n            if (nameRotation != null) {\n                nameRotation = nameRotation * PI / 180; // To radian.\n            }\n\n            var axisNameAvailableWidth;\n\n            if (nameLocation === 'middle') {\n                labelLayout = innerTextLayout(\n                    opt,\n                    nameRotation != null ? nameRotation : opt.rotation, // Adapt to axis.\n                    nameDirection\n                );\n            }\n            else {\n                labelLayout = endTextLayout(\n                    opt, nameLocation, nameRotation || 0, extent\n                );\n\n                axisNameAvailableWidth = opt.axisNameAvailableWidth;\n                if (axisNameAvailableWidth != null) {\n                    axisNameAvailableWidth = Math.abs(\n                        axisNameAvailableWidth / Math.sin(labelLayout.rotation)\n                    );\n                    !isFinite(axisNameAvailableWidth) && (axisNameAvailableWidth = null);\n                }\n            }\n\n            var textFont = textStyleModel.getFont();\n\n            var truncateOpt = axisModel.get('nameTruncate', true) || {};\n            var ellipsis = truncateOpt.ellipsis;\n            var maxWidth = retrieve(truncateOpt.maxWidth, axisNameAvailableWidth);\n            var truncatedText = (ellipsis != null && maxWidth != null)\n                ? formatUtil.truncateText(\n                    name, maxWidth, textFont, ellipsis,\n                    {minChar: 2, placeholder: truncateOpt.placeholder}\n                )\n                : name;\n\n            var tooltipOpt = axisModel.get('tooltip', true);\n\n            var mainType = axisModel.mainType;\n            var formatterParams = {\n                componentType: mainType,\n                name: name,\n                $vars: ['name']\n            };\n            formatterParams[mainType + 'Index'] = axisModel.componentIndex;\n\n            var textEl = new graphic.Text({\n\n                // Id for animation\n                anid: 'name',\n\n                __fullText: name,\n                __truncatedText: truncatedText,\n\n                style: {\n                    text: truncatedText,\n                    textFont: textFont,\n                    fill: textStyleModel.getTextColor()\n                        || axisModel.get('axisLine.lineStyle.color'),\n                    textAlign: labelLayout.textAlign,\n                    textVerticalAlign: labelLayout.verticalAlign\n                },\n                position: pos,\n                rotation: labelLayout.rotation,\n                silent: isSilent(axisModel),\n                z2: 1,\n                tooltip: (tooltipOpt && tooltipOpt.show)\n                    ? zrUtil.extend({\n                        content: name,\n                        formatter: function () {\n                            return name;\n                        },\n                        formatterParams: formatterParams\n                    }, tooltipOpt)\n                    : null\n            });\n\n            if (axisModel.get('triggerEvent')) {\n                textEl.eventData = makeAxisEventDataBase(axisModel);\n                textEl.eventData.targetType = 'axisName';\n                textEl.eventData.name = name;\n            }\n\n            // FIXME\n            this._dumbGroup.add(textEl);\n            textEl.updateTransform();\n\n            this.group.add(textEl);\n\n            textEl.decomposeTransform();\n        }\n\n    };\n\n    /**\n     * @inner\n     */\n    function innerTextLayout(opt, textRotation, direction) {\n        var rotationDiff = remRadian(textRotation - opt.rotation);\n        var textAlign;\n        var verticalAlign;\n\n        if (isRadianAroundZero(rotationDiff)) { // Label is parallel with axis line.\n            verticalAlign = direction > 0 ? 'top' : 'bottom';\n            textAlign = 'center';\n        }\n        else if (isRadianAroundZero(rotationDiff - PI)) { // Label is inverse parallel with axis line.\n            verticalAlign = direction > 0 ? 'bottom' : 'top';\n            textAlign = 'center';\n        }\n        else {\n            verticalAlign = 'middle';\n\n            if (rotationDiff > 0 && rotationDiff < PI) {\n                textAlign = direction > 0 ? 'right' : 'left';\n            }\n            else {\n                textAlign = direction > 0 ? 'left' : 'right';\n            }\n        }\n\n        return {\n            rotation: rotationDiff,\n            textAlign: textAlign,\n            verticalAlign: verticalAlign\n        };\n    }\n\n    /**\n     * @inner\n     */\n    function endTextLayout(opt, textPosition, textRotate, extent) {\n        var rotationDiff = remRadian(textRotate - opt.rotation);\n        var textAlign;\n        var verticalAlign;\n        var inverse = extent[0] > extent[1];\n        var onLeft = (textPosition === 'start' && !inverse)\n            || (textPosition !== 'start' && inverse);\n\n        if (isRadianAroundZero(rotationDiff - PI / 2)) {\n            verticalAlign = onLeft ? 'bottom' : 'top';\n            textAlign = 'center';\n        }\n        else if (isRadianAroundZero(rotationDiff - PI * 1.5)) {\n            verticalAlign = onLeft ? 'top' : 'bottom';\n            textAlign = 'center';\n        }\n        else {\n            verticalAlign = 'middle';\n            if (rotationDiff < PI * 1.5 && rotationDiff > PI / 2) {\n                textAlign = onLeft ? 'left' : 'right';\n            }\n            else {\n                textAlign = onLeft ? 'right' : 'left';\n            }\n        }\n\n        return {\n            rotation: rotationDiff,\n            textAlign: textAlign,\n            verticalAlign: verticalAlign\n        };\n    }\n\n    /**\n     * @inner\n     */\n    function isSilent(axisModel) {\n        var tooltipOpt = axisModel.get('tooltip');\n        return axisModel.get('silent')\n            // Consider mouse cursor, add these restrictions.\n            || !(\n                axisModel.get('triggerEvent') || (tooltipOpt && tooltipOpt.show)\n            );\n    }\n\n    /**\n     * @static\n     */\n    var ifIgnoreOnTick = AxisBuilder.ifIgnoreOnTick = function (axis, i, interval) {\n        var rawTick;\n        var scale = axis.scale;\n        return scale.type === 'ordinal'\n            && (\n                typeof interval === 'function'\n                    ? (\n                        rawTick = scale.getTicks()[i],\n                        !interval(rawTick, scale.getLabel(rawTick))\n                    )\n                    : i % (interval + 1)\n            );\n    };\n\n    /**\n     * @static\n     */\n    var getInterval = AxisBuilder.getInterval = function (model, labelInterval) {\n        var interval = model.get('interval');\n        if (interval == null || interval == 'auto') {\n            interval = labelInterval;\n        }\n        return interval;\n    };\n\n    module.exports = AxisBuilder;\n\n\n\n/***/ }),\n/* 384 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var zrUtil = __webpack_require__(315);\n    var graphic = __webpack_require__(317);\n    var AxisBuilder = __webpack_require__(383);\n    var ifIgnoreOnTick = AxisBuilder.ifIgnoreOnTick;\n    var getInterval = AxisBuilder.getInterval;\n\n    var axisBuilderAttrs = [\n        'axisLine', 'axisLabel', 'axisTick', 'axisName'\n    ];\n    var selfBuilderAttrs = [\n        'splitArea', 'splitLine'\n    ];\n\n    // function getAlignWithLabel(model, axisModel) {\n    //     var alignWithLabel = model.get('alignWithLabel');\n    //     if (alignWithLabel === 'auto') {\n    //         alignWithLabel = axisModel.get('axisTick.alignWithLabel');\n    //     }\n    //     return alignWithLabel;\n    // }\n\n    var AxisView = __webpack_require__(316).extendComponentView({\n\n        type: 'axis',\n\n        render: function (axisModel, ecModel) {\n\n            this.group.removeAll();\n\n            var oldAxisGroup = this._axisGroup;\n            this._axisGroup = new graphic.Group();\n\n            this.group.add(this._axisGroup);\n\n            if (!axisModel.get('show')) {\n                return;\n            }\n\n            var gridModel = axisModel.getCoordSysModel();\n\n            var layout = layoutAxis(gridModel, axisModel);\n\n            var axisBuilder = new AxisBuilder(axisModel, layout);\n\n            zrUtil.each(axisBuilderAttrs, axisBuilder.add, axisBuilder);\n\n            this._axisGroup.add(axisBuilder.getGroup());\n\n            zrUtil.each(selfBuilderAttrs, function (name) {\n                if (axisModel.get(name + '.show')) {\n                    this['_' + name](axisModel, gridModel, layout.labelInterval);\n                }\n            }, this);\n\n            graphic.groupTransition(oldAxisGroup, this._axisGroup, axisModel);\n        },\n\n        /**\n         * @param {module:echarts/coord/cartesian/AxisModel} axisModel\n         * @param {module:echarts/coord/cartesian/GridModel} gridModel\n         * @param {number|Function} labelInterval\n         * @private\n         */\n        _splitLine: function (axisModel, gridModel, labelInterval) {\n            var axis = axisModel.axis;\n\n            if (axis.isBlank()) {\n                return;\n            }\n\n            var splitLineModel = axisModel.getModel('splitLine');\n            var lineStyleModel = splitLineModel.getModel('lineStyle');\n            var lineColors = lineStyleModel.get('color');\n\n            var lineInterval = getInterval(splitLineModel, labelInterval);\n\n            lineColors = zrUtil.isArray(lineColors) ? lineColors : [lineColors];\n\n            var gridRect = gridModel.coordinateSystem.getRect();\n            var isHorizontal = axis.isHorizontal();\n\n            var lineCount = 0;\n\n            var ticksCoords = axis.getTicksCoords(\n                // splitLineModel.get('alignWithLabel')\n            );\n            var ticks = axis.scale.getTicks();\n\n            var p1 = [];\n            var p2 = [];\n            // Simple optimization\n            // Batching the lines if color are the same\n            var lineStyle = lineStyleModel.getLineStyle();\n            for (var i = 0; i < ticksCoords.length; i++) {\n                if (ifIgnoreOnTick(axis, i, lineInterval)) {\n                    continue;\n                }\n\n                var tickCoord = axis.toGlobalCoord(ticksCoords[i]);\n\n                if (isHorizontal) {\n                    p1[0] = tickCoord;\n                    p1[1] = gridRect.y;\n                    p2[0] = tickCoord;\n                    p2[1] = gridRect.y + gridRect.height;\n                }\n                else {\n                    p1[0] = gridRect.x;\n                    p1[1] = tickCoord;\n                    p2[0] = gridRect.x + gridRect.width;\n                    p2[1] = tickCoord;\n                }\n\n                var colorIndex = (lineCount++) % lineColors.length;\n                this._axisGroup.add(new graphic.Line(graphic.subPixelOptimizeLine({\n                    anid: 'line_' + ticks[i],\n\n                    shape: {\n                        x1: p1[0],\n                        y1: p1[1],\n                        x2: p2[0],\n                        y2: p2[1]\n                    },\n                    style: zrUtil.defaults({\n                        stroke: lineColors[colorIndex]\n                    }, lineStyle),\n                    silent: true\n                })));\n            }\n        },\n\n        /**\n         * @param {module:echarts/coord/cartesian/AxisModel} axisModel\n         * @param {module:echarts/coord/cartesian/GridModel} gridModel\n         * @param {number|Function} labelInterval\n         * @private\n         */\n        _splitArea: function (axisModel, gridModel, labelInterval) {\n            var axis = axisModel.axis;\n\n            if (axis.isBlank()) {\n                return;\n            }\n\n            var splitAreaModel = axisModel.getModel('splitArea');\n            var areaStyleModel = splitAreaModel.getModel('areaStyle');\n            var areaColors = areaStyleModel.get('color');\n\n            var gridRect = gridModel.coordinateSystem.getRect();\n\n            var ticksCoords = axis.getTicksCoords(\n                // splitAreaModel.get('alignWithLabel')\n            );\n            var ticks = axis.scale.getTicks();\n\n            var prevX = axis.toGlobalCoord(ticksCoords[0]);\n            var prevY = axis.toGlobalCoord(ticksCoords[0]);\n\n            var count = 0;\n\n            var areaInterval = getInterval(splitAreaModel, labelInterval);\n\n            var areaStyle = areaStyleModel.getAreaStyle();\n            areaColors = zrUtil.isArray(areaColors) ? areaColors : [areaColors];\n\n            for (var i = 1; i < ticksCoords.length; i++) {\n                if (ifIgnoreOnTick(axis, i, areaInterval)) {\n                    continue;\n                }\n\n                var tickCoord = axis.toGlobalCoord(ticksCoords[i]);\n\n                var x;\n                var y;\n                var width;\n                var height;\n                if (axis.isHorizontal()) {\n                    x = prevX;\n                    y = gridRect.y;\n                    width = tickCoord - x;\n                    height = gridRect.height;\n                }\n                else {\n                    x = gridRect.x;\n                    y = prevY;\n                    width = gridRect.width;\n                    height = tickCoord - y;\n                }\n\n                var colorIndex = (count++) % areaColors.length;\n                this._axisGroup.add(new graphic.Rect({\n                    anid: 'area_' + ticks[i],\n\n                    shape: {\n                        x: x,\n                        y: y,\n                        width: width,\n                        height: height\n                    },\n                    style: zrUtil.defaults({\n                        fill: areaColors[colorIndex]\n                    }, areaStyle),\n                    silent: true\n                }));\n\n                prevX = x + width;\n                prevY = y + height;\n            }\n        }\n    });\n\n    AxisView.extend({\n        type: 'xAxis'\n    });\n    AxisView.extend({\n        type: 'yAxis'\n    });\n\n    /**\n     * @inner\n     */\n    function layoutAxis(gridModel, axisModel) {\n        var grid = gridModel.coordinateSystem;\n        var axis = axisModel.axis;\n        var layout = {};\n\n        var rawAxisPosition = axis.position;\n        var axisPosition = axis.onZero ? 'onZero' : rawAxisPosition;\n        var axisDim = axis.dim;\n\n        // [left, right, top, bottom]\n        var rect = grid.getRect();\n        var rectBound = [rect.x, rect.x + rect.width, rect.y, rect.y + rect.height];\n\n        var axisOffset = axisModel.get('offset') || 0;\n\n        var posMap = {\n            x: { top: rectBound[2] - axisOffset, bottom: rectBound[3] + axisOffset },\n            y: { left: rectBound[0] - axisOffset, right: rectBound[1] + axisOffset }\n        };\n\n        posMap.x.onZero = Math.max(Math.min(getZero('y'), posMap.x.bottom), posMap.x.top);\n        posMap.y.onZero = Math.max(Math.min(getZero('x'), posMap.y.right), posMap.y.left);\n\n        function getZero(dim, val) {\n            var theAxis = grid.getAxis(dim);\n            return theAxis.toGlobalCoord(theAxis.dataToCoord(0));\n        }\n\n        // Axis position\n        layout.position = [\n            axisDim === 'y' ? posMap.y[axisPosition] : rectBound[0],\n            axisDim === 'x' ? posMap.x[axisPosition] : rectBound[3]\n        ];\n\n        // Axis rotation\n        layout.rotation = Math.PI / 2 * (axisDim === 'x' ? 0 : 1);\n\n        // Tick and label direction, x y is axisDim\n        var dirMap = {top: -1, bottom: 1, left: -1, right: 1};\n\n        layout.labelDirection = layout.tickDirection = layout.nameDirection = dirMap[rawAxisPosition];\n        if (axis.onZero) {\n            layout.labelOffset = posMap[axisDim][rawAxisPosition] - posMap[axisDim].onZero;\n        }\n\n        if (axisModel.getModel('axisTick').get('inside')) {\n            layout.tickDirection = -layout.tickDirection;\n        }\n        if (axisModel.getModel('axisLabel').get('inside')) {\n            layout.labelDirection = -layout.labelDirection;\n        }\n\n        // Special label rotation\n        var labelRotation = axisModel.getModel('axisLabel').get('rotate');\n        layout.labelRotation = axisPosition === 'top' ? -labelRotation : labelRotation;\n\n        // label interval when auto mode.\n        layout.labelInterval = axis.getLabelInterval();\n\n        // Over splitLine and splitArea\n        layout.z2 = 1;\n\n        return layout;\n    }\n\n\n/***/ }),\n/* 385 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * @module echarts/component/tooltip/TooltipContent\n */\n\n\n    var zrUtil = __webpack_require__(315);\n    var zrColor = __webpack_require__(330);\n    var eventUtil = __webpack_require__(333);\n    var formatUtil = __webpack_require__(322);\n    var each = zrUtil.each;\n    var toCamelCase = formatUtil.toCamelCase;\n    var env = __webpack_require__(321);\n\n    var vendors = ['', '-webkit-', '-moz-', '-o-'];\n\n    var gCssText = 'position:absolute;display:block;border-style:solid;white-space:nowrap;z-index:9999999;';\n\n    /**\n     * @param {number} duration\n     * @return {string}\n     * @inner\n     */\n    function assembleTransition(duration) {\n        var transitionCurve = 'cubic-bezier(0.23, 1, 0.32, 1)';\n        var transitionText = 'left ' + duration + 's ' + transitionCurve + ','\n                            + 'top ' + duration + 's ' + transitionCurve;\n        return zrUtil.map(vendors, function (vendorPrefix) {\n            return vendorPrefix + 'transition:' + transitionText;\n        }).join(';');\n    }\n\n    /**\n     * @param {Object} textStyle\n     * @return {string}\n     * @inner\n     */\n    function assembleFont(textStyleModel) {\n        var cssText = [];\n\n        var fontSize = textStyleModel.get('fontSize');\n        var color = textStyleModel.getTextColor();\n\n        color && cssText.push('color:' + color);\n\n        cssText.push('font:' + textStyleModel.getFont());\n\n        fontSize &&\n            cssText.push('line-height:' + Math.round(fontSize * 3 / 2) + 'px');\n\n        each(['decoration', 'align'], function (name) {\n            var val = textStyleModel.get(name);\n            val && cssText.push('text-' + name + ':' + val);\n        });\n\n        return cssText.join(';');\n    }\n\n    /**\n     * @param {Object} tooltipModel\n     * @return {string}\n     * @inner\n     */\n    function assembleCssText(tooltipModel) {\n\n        tooltipModel = tooltipModel;\n\n        var cssText = [];\n\n        var transitionDuration = tooltipModel.get('transitionDuration');\n        var backgroundColor = tooltipModel.get('backgroundColor');\n        var textStyleModel = tooltipModel.getModel('textStyle');\n        var padding = tooltipModel.get('padding');\n\n        // Animation transition\n        transitionDuration &&\n            cssText.push(assembleTransition(transitionDuration));\n\n        if (backgroundColor) {\n            if (env.canvasSupported) {\n                cssText.push('background-Color:' + backgroundColor);\n            }\n            else {\n                // for ie\n                cssText.push(\n                    'background-Color:#' + zrColor.toHex(backgroundColor)\n                );\n                cssText.push('filter:alpha(opacity=70)');\n            }\n        }\n\n        // Border style\n        each(['width', 'color', 'radius'], function (name) {\n            var borderName = 'border-' + name;\n            var camelCase = toCamelCase(borderName);\n            var val = tooltipModel.get(camelCase);\n            val != null &&\n                cssText.push(borderName + ':' + val + (name === 'color' ? '' : 'px'));\n        });\n\n        // Text style\n        cssText.push(assembleFont(textStyleModel));\n\n        // Padding\n        if (padding != null) {\n            cssText.push('padding:' + formatUtil.normalizeCssArray(padding).join('px ') + 'px');\n        }\n\n        return cssText.join(';') + ';';\n    }\n\n    /**\n     * @alias module:echarts/component/tooltip/TooltipContent\n     * @constructor\n     */\n    function TooltipContent(container, api) {\n        var el = document.createElement('div');\n        var zr = api.getZr();\n\n        this.el = el;\n\n        this._x = api.getWidth() / 2;\n        this._y = api.getHeight() / 2;\n\n        container.appendChild(el);\n\n        this._container = container;\n\n        this._show = false;\n\n        /**\n         * @private\n         */\n        this._hideTimeout;\n\n        var self = this;\n        el.onmouseenter = function () {\n            // clear the timeout in hideLater and keep showing tooltip\n            if (self.enterable) {\n                clearTimeout(self._hideTimeout);\n                self._show = true;\n            }\n            self._inContent = true;\n        };\n        el.onmousemove = function (e) {\n            e = e || window.event;\n            if (!self.enterable) {\n                // Try trigger zrender event to avoid mouse\n                // in and out shape too frequently\n                var handler = zr.handler;\n                eventUtil.normalizeEvent(container, e, true);\n                handler.dispatch('mousemove', e);\n            }\n        };\n        el.onmouseleave = function () {\n            if (self.enterable) {\n                if (self._show) {\n                    self.hideLater(self._hideDelay);\n                }\n            }\n            self._inContent = false;\n        };\n    }\n\n    TooltipContent.prototype = {\n\n        constructor: TooltipContent,\n\n        enterable: true,\n\n        /**\n         * Update when tooltip is rendered\n         */\n        update: function () {\n            var container = this._container;\n            var stl = container.currentStyle\n                || document.defaultView.getComputedStyle(container);\n            var domStyle = container.style;\n            if (domStyle.position !== 'absolute' && stl.position !== 'absolute') {\n                domStyle.position = 'relative';\n            }\n            // Hide the tooltip\n            // PENDING\n            // this.hide();\n        },\n\n        show: function (tooltipModel) {\n            clearTimeout(this._hideTimeout);\n            var el = this.el;\n\n            el.style.cssText = gCssText + assembleCssText(tooltipModel)\n                // http://stackoverflow.com/questions/21125587/css3-transition-not-working-in-chrome-anymore\n                + ';left:' + this._x + 'px;top:' + this._y + 'px;'\n                + (tooltipModel.get('extraCssText') || '');\n\n            el.style.display = el.innerHTML ?  'block' : 'none';\n\n            this._show = true;\n        },\n\n        setContent: function (content) {\n            var el = this.el;\n            el.innerHTML = content;\n            el.style.display = content ? 'block' : 'none';\n        },\n\n        moveTo: function (x, y) {\n            var style = this.el.style;\n            style.left = x + 'px';\n            style.top = y + 'px';\n\n            this._x = x;\n            this._y = y;\n        },\n\n        hide: function () {\n            this.el.style.display = 'none';\n            this._show = false;\n        },\n\n        // showLater: function ()\n\n        hideLater: function (time) {\n            if (this._show && !(this._inContent && this.enterable)) {\n                if (time) {\n                    this._hideDelay = time;\n                    // Set show false to avoid invoke hideLater mutiple times\n                    this._show = false;\n                    this._hideTimeout = setTimeout(zrUtil.bind(this.hide, this), time);\n                }\n                else {\n                    this.hide();\n                }\n            }\n        },\n\n        isShow: function () {\n            return this._show;\n        }\n    };\n\n    module.exports = TooltipContent;\n\n\n/***/ }),\n/* 386 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    __webpack_require__(316).extendComponentModel({\n\n        type: 'tooltip',\n\n        defaultOption: {\n            zlevel: 0,\n\n            z: 8,\n\n            show: true,\n\n            // tooltip主体内容\n            showContent: true,\n\n            // 触发类型，默认数据触发，见下图，可选为：'item' ¦ 'axis'\n            trigger: 'item',\n\n            // 触发条件，支持 'click' | 'mousemove' | 'none'\n            triggerOn: 'mousemove',\n\n            // 是否永远显示 content\n            alwaysShowContent: false,\n\n            // 位置 {Array} | {Function}\n            // position: null\n\n            // 是否约束 content 在 viewRect 中。默认 false 是为了兼容以前版本。\n            confine: false,\n\n            // 内容格式器：{string}（Template） ¦ {Function}\n            // formatter: null\n\n            showDelay: 0,\n\n            // 隐藏延迟，单位ms\n            hideDelay: 100,\n\n            // 动画变换时间，单位s\n            transitionDuration: 0.4,\n\n            enterable: false,\n\n            // 提示背景颜色，默认为透明度为0.7的黑色\n            backgroundColor: 'rgba(50,50,50,0.7)',\n\n            // 提示边框颜色\n            borderColor: '#333',\n\n            // 提示边框圆角，单位px，默认为4\n            borderRadius: 4,\n\n            // 提示边框线宽，单位px，默认为0（无边框）\n            borderWidth: 0,\n\n            // 提示内边距，单位px，默认各方向内边距为5，\n            // 接受数组分别设定上右下左边距，同css\n            padding: 5,\n\n            // Extra css text\n            extraCssText: '',\n\n            // 坐标轴指示器，坐标轴触发有效\n            axisPointer: {\n                // 默认为直线\n                // 可选为：'line' | 'shadow' | 'cross'\n                type: 'line',\n\n                // type 为 line 的时候有效，指定 tooltip line 所在的轴，可选\n                // 可选 'x' | 'y' | 'angle' | 'radius' | 'auto'\n                // 默认 'auto'，会选择类型为 cateogry 的轴，对于双数值轴，笛卡尔坐标系会默认选择 x 轴\n                // 极坐标系会默认选择 angle 轴\n                axis: 'auto',\n\n                animation: true,\n                animationDurationUpdate: 200,\n                animationEasingUpdate: 'exponentialOut',\n\n                // 直线指示器样式设置\n                lineStyle: {\n                    color: '#555',\n                    width: 1,\n                    type: 'solid'\n                },\n\n                crossStyle: {\n                    color: '#555',\n                    width: 1,\n                    type: 'dashed',\n\n                    // TODO formatter\n                    textStyle: {}\n                },\n\n                // 阴影指示器样式设置\n                shadowStyle: {\n                    color: 'rgba(150,150,150,0.3)'\n                }\n            },\n            textStyle: {\n                color: '#fff',\n                fontSize: 14\n            }\n        }\n    });\n\n\n/***/ }),\n/* 387 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var TooltipContent = __webpack_require__(385);\n    var graphic = __webpack_require__(317);\n    var zrUtil = __webpack_require__(315);\n    var formatUtil = __webpack_require__(322);\n    var numberUtil = __webpack_require__(318);\n    var modelUtil = __webpack_require__(323);\n    var parsePercent = numberUtil.parsePercent;\n    var env = __webpack_require__(321);\n    var Model = __webpack_require__(325);\n\n    function dataEqual(a, b) {\n        if (!a || !b) {\n            return false;\n        }\n        var round = numberUtil.round;\n        return round(a[0]) === round(b[0])\n            && round(a[1]) === round(b[1]);\n    }\n    /**\n     * @inner\n     */\n    function makeLineShape(x1, y1, x2, y2) {\n        return {\n            x1: x1,\n            y1: y1,\n            x2: x2,\n            y2: y2\n        };\n    }\n\n    /**\n     * @inner\n     */\n    function makeRectShape(x, y, width, height) {\n        return {\n            x: x,\n            y: y,\n            width: width,\n            height: height\n        };\n    }\n\n    /**\n     * @inner\n     */\n    function makeSectorShape(cx, cy, r0, r, startAngle, endAngle) {\n        return {\n            cx: cx,\n            cy: cy,\n            r0: r0,\n            r: r,\n            startAngle: startAngle,\n            endAngle: endAngle,\n            clockwise: true\n        };\n    }\n\n    function refixTooltipPosition(x, y, el, viewWidth, viewHeight) {\n        var width = el.clientWidth;\n        var height = el.clientHeight;\n        var gap = 20;\n\n        if (x + width + gap > viewWidth) {\n            x -= width + gap;\n        }\n        else {\n            x += gap;\n        }\n        if (y + height + gap > viewHeight) {\n            y -= height + gap;\n        }\n        else {\n            y += gap;\n        }\n        return [x, y];\n    }\n\n    function confineTooltipPosition(x, y, el, viewWidth, viewHeight) {\n        var width = el.clientWidth;\n        var height = el.clientHeight;\n\n        x = Math.min(x + width, viewWidth) - width;\n        y = Math.min(y + height, viewHeight) - height;\n        x = Math.max(x, 0);\n        y = Math.max(y, 0);\n\n        return [x, y];\n    }\n\n    function calcTooltipPosition(position, rect, dom) {\n        var domWidth = dom.clientWidth;\n        var domHeight = dom.clientHeight;\n        var gap = 5;\n        var x = 0;\n        var y = 0;\n        var rectWidth = rect.width;\n        var rectHeight = rect.height;\n        switch (position) {\n            case 'inside':\n                x = rect.x + rectWidth / 2 - domWidth / 2;\n                y = rect.y + rectHeight / 2 - domHeight / 2;\n                break;\n            case 'top':\n                x = rect.x + rectWidth / 2 - domWidth / 2;\n                y = rect.y - domHeight - gap;\n                break;\n            case 'bottom':\n                x = rect.x + rectWidth / 2 - domWidth / 2;\n                y = rect.y + rectHeight + gap;\n                break;\n            case 'left':\n                x = rect.x - domWidth - gap;\n                y = rect.y + rectHeight / 2 - domHeight / 2;\n                break;\n            case 'right':\n                x = rect.x + rectWidth + gap;\n                y = rect.y + rectHeight / 2 - domHeight / 2;\n        }\n        return [x, y];\n    }\n\n    /**\n     * @param  {string|Function|Array.<number>} positionExpr\n     * @param  {number} x Mouse x\n     * @param  {number} y Mouse y\n     * @param  {boolean} confine Whether confine tooltip content in view rect.\n     * @param  {module:echarts/component/tooltip/TooltipContent} content\n     * @param  {Object|<Array.<Object>} params\n     * @param  {module:zrender/Element} el target element\n     * @param  {module:echarts/ExtensionAPI} api\n     * @return {Array.<number>}\n     */\n    function updatePosition(positionExpr, x, y, confine, content, params, el, api) {\n        var viewWidth = api.getWidth();\n        var viewHeight = api.getHeight();\n\n        var rect = el && el.getBoundingRect().clone();\n        el && rect.applyTransform(el.transform);\n        if (typeof positionExpr === 'function') {\n            // Callback of position can be an array or a string specify the position\n            positionExpr = positionExpr([x, y], params, content.el, rect);\n        }\n\n        if (zrUtil.isArray(positionExpr)) {\n            x = parsePercent(positionExpr[0], viewWidth);\n            y = parsePercent(positionExpr[1], viewHeight);\n        }\n        // Specify tooltip position by string 'top' 'bottom' 'left' 'right' around graphic element\n        else if (typeof positionExpr === 'string' && el) {\n            var pos = calcTooltipPosition(\n                positionExpr, rect, content.el\n            );\n            x = pos[0];\n            y = pos[1];\n        }\n        else {\n            var pos = refixTooltipPosition(\n                x, y, content.el, viewWidth, viewHeight\n            );\n            x = pos[0];\n            y = pos[1];\n        }\n\n        if (confine) {\n            var pos = confineTooltipPosition(\n                x, y, content.el, viewWidth, viewHeight\n            );\n            x = pos[0];\n            y = pos[1];\n        }\n\n        content.moveTo(x, y);\n    }\n\n    function ifSeriesSupportAxisTrigger(seriesModel) {\n        var coordSys = seriesModel.coordinateSystem;\n        var trigger = seriesModel.get('tooltip.trigger', true);\n        // Ignore series use item tooltip trigger and series coordinate system is not cartesian or\n        return !(!coordSys\n            || (coordSys.type !== 'cartesian2d' && coordSys.type !== 'polar' && coordSys.type !== 'singleAxis')\n            || trigger === 'item');\n    }\n\n    __webpack_require__(316).extendComponentView({\n\n        type: 'tooltip',\n\n        _axisPointers: {},\n\n        init: function (ecModel, api) {\n            if (env.node) {\n                return;\n            }\n            var tooltipContent = new TooltipContent(api.getDom(), api);\n            this._tooltipContent = tooltipContent;\n        },\n\n        render: function (tooltipModel, ecModel, api) {\n            if (env.node) {\n                return;\n            }\n\n            // Reset\n            this.group.removeAll();\n\n            /**\n             * @type {Object}\n             * @private\n             */\n            this._axisPointers = {};\n\n            /**\n             * @private\n             * @type {module:echarts/component/tooltip/TooltipModel}\n             */\n            this._tooltipModel = tooltipModel;\n\n            /**\n             * @private\n             * @type {module:echarts/model/Global}\n             */\n            this._ecModel = ecModel;\n\n            /**\n             * @private\n             * @type {module:echarts/ExtensionAPI}\n             */\n            this._api = api;\n\n            /**\n             * @type {Object}\n             * @private\n             */\n            this._lastHover = {\n                // data\n                // payloadBatch\n            };\n\n            var tooltipContent = this._tooltipContent;\n            tooltipContent.update();\n            tooltipContent.enterable = tooltipModel.get('enterable');\n            this._alwaysShowContent = tooltipModel.get('alwaysShowContent');\n\n            /**\n             * @type {Object.<string, Array>}\n             */\n            this._seriesGroupByAxis = this._prepareAxisTriggerData(\n                tooltipModel, ecModel\n            );\n\n            var crossText = this._crossText;\n            if (crossText) {\n                this.group.add(crossText);\n            }\n\n            var triggerOn = tooltipModel.get('triggerOn');\n\n            // Try to keep the tooltip show when refreshing\n            if (this._lastX != null\n                && this._lastY != null\n                // When user is willing to control tooltip totally using API,\n                // self.manuallyShowTip({x, y}) might cause tooltip hide,\n                // which is not expected.\n                && triggerOn !== 'none'\n            ) {\n                var self = this;\n                clearTimeout(this._refreshUpdateTimeout);\n                this._refreshUpdateTimeout = setTimeout(function () {\n                    // Show tip next tick after other charts are rendered\n                    // In case highlight action has wrong result\n                    // FIXME\n                    self.manuallyShowTip(tooltipModel, ecModel, api, {\n                        x: self._lastX,\n                        y: self._lastY\n                    });\n                });\n            }\n\n            var zr = this._api.getZr();\n            zr.off('click', this._tryShow);\n            zr.off('mousemove', this._mousemove);\n            zr.off('mouseout', this._hide);\n            zr.off('globalout', this._hide);\n\n            if (triggerOn === 'click') {\n                zr.on('click', this._tryShow, this);\n            }\n            else if (triggerOn === 'mousemove') {\n                zr.on('mousemove', this._mousemove, this);\n                zr.on('mouseout', this._hide, this);\n                zr.on('globalout', this._hide, this);\n            }\n            // else triggerOn is 'none', which enable user\n            // to control tooltip totally using API.\n        },\n\n        _mousemove: function (e) {\n            var showDelay = this._tooltipModel.get('showDelay');\n            var self = this;\n            clearTimeout(this._showTimeout);\n            if (showDelay > 0) {\n                this._showTimeout = setTimeout(function () {\n                    self._tryShow(e);\n                }, showDelay);\n            }\n            else {\n                this._tryShow(e);\n            }\n        },\n\n        /**\n         * Show tip manually by\n         * dispatchAction({\n         *     type: 'showTip',\n         *     x: 10,\n         *     y: 10\n         * });\n         * Or\n         * dispatchAction({\n         *      type: 'showTip',\n         *      seriesIndex: 0,\n         *      dataIndex or dataIndexInside or name\n         * });\n         *\n         *  TODO Batch\n         */\n        manuallyShowTip: function (tooltipModel, ecModel, api, payload) {\n            // From self\n            if (payload.from === this.uid) {\n                return;\n            }\n\n            var ecModel = this._ecModel;\n            var seriesIndex = payload.seriesIndex;\n            var seriesModel = ecModel.getSeriesByIndex(seriesIndex);\n            var api = this._api;\n\n            var isTriggerAxis = this._tooltipModel.get('trigger') === 'axis';\n            function seriesHaveDataOnIndex(_series) {\n                var data = _series.getData();\n                var dataIndex = modelUtil.queryDataIndex(data, payload);\n                // Have single dataIndex\n                if (dataIndex != null && !zrUtil.isArray(dataIndex)\n                    && data.hasValue(dataIndex)\n                ) {\n                    return true;\n                }\n            }\n\n            if (payload.x == null || payload.y == null) {\n                if (isTriggerAxis) {\n                    // Find another series.\n                    if (seriesModel && !seriesHaveDataOnIndex(seriesModel)) {\n                        seriesModel = null;\n                    }\n                    if (!seriesModel) {\n                        // Find the first series can use axis trigger And data is not null\n                        ecModel.eachSeries(function (_series) {\n                            if (ifSeriesSupportAxisTrigger(_series) && !seriesModel) {\n                                if (seriesHaveDataOnIndex(_series)) {\n                                    seriesModel = _series;\n                                }\n                            }\n                        });\n                    }\n                }\n                else {\n                    // Use the first series by default.\n                    seriesModel = seriesModel || ecModel.getSeriesByIndex(0);\n                }\n                if (seriesModel) {\n                    var data = seriesModel.getData();\n                    var dataIndex = modelUtil.queryDataIndex(data, payload);\n\n                    if (dataIndex == null || zrUtil.isArray(dataIndex)) {\n                        return;\n                    }\n\n                    var el = data.getItemGraphicEl(dataIndex);\n                    var cx;\n                    var cy;\n                    // Try to get the point in coordinate system\n                    var coordSys = seriesModel.coordinateSystem;\n                    if (seriesModel.getTooltipPosition) {\n                        var point = seriesModel.getTooltipPosition(dataIndex) || [];\n                        cx = point[0];\n                        cy = point[1];\n                    }\n                    else if (coordSys && coordSys.dataToPoint) {\n                        var point = coordSys.dataToPoint(\n                            data.getValues(\n                                zrUtil.map(coordSys.dimensions, function (dim) {\n                                    return seriesModel.coordDimToDataDim(dim)[0];\n                                }), dataIndex, true\n                            )\n                        );\n                        cx = point && point[0];\n                        cy = point && point[1];\n                    }\n                    else if (el) {\n                        // Use graphic bounding rect\n                        var rect = el.getBoundingRect().clone();\n                        rect.applyTransform(el.transform);\n                        cx = rect.x + rect.width / 2;\n                        cy = rect.y + rect.height / 2;\n                    }\n\n                    if (cx != null && cy != null) {\n                        this._tryShow({\n                            offsetX: cx,\n                            offsetY: cy,\n                            position: payload.position,\n                            target: el,\n                            event: {}\n                        });\n                    }\n                }\n            }\n            else {\n                var el = api.getZr().handler.findHover(payload.x, payload.y);\n                this._tryShow({\n                    offsetX: payload.x,\n                    offsetY: payload.y,\n                    position: payload.position,\n                    target: el,\n                    event: {}\n                });\n            }\n        },\n\n        manuallyHideTip: function (tooltipModel, ecModel, api, payload) {\n            if (payload.from === this.uid) {\n                return;\n            }\n\n            this._hide();\n        },\n\n        _prepareAxisTriggerData: function (tooltipModel, ecModel) {\n            // Prepare data for axis trigger\n            var seriesGroupByAxis = {};\n            ecModel.eachSeries(function (seriesModel) {\n                if (ifSeriesSupportAxisTrigger(seriesModel)) {\n                    var coordSys = seriesModel.coordinateSystem;\n                    var baseAxis;\n                    var key;\n\n                    // Only cartesian2d, polar and single support axis trigger\n                    if (coordSys.type === 'cartesian2d') {\n                        // FIXME `axisPointer.axis` is not baseAxis\n                        baseAxis = coordSys.getBaseAxis();\n                        key = baseAxis.dim + baseAxis.index;\n                    }\n                    else if (coordSys.type === 'singleAxis') {\n                        baseAxis = coordSys.getAxis();\n                        key = baseAxis.dim + baseAxis.type;\n                    }\n                    else {\n                        baseAxis = coordSys.getBaseAxis();\n                        key = baseAxis.dim + coordSys.name;\n                    }\n\n                    seriesGroupByAxis[key] = seriesGroupByAxis[key] || {\n                        coordSys: [],\n                        series: []\n                    };\n                    seriesGroupByAxis[key].coordSys.push(coordSys);\n                    seriesGroupByAxis[key].series.push(seriesModel);\n                }\n            }, this);\n\n            return seriesGroupByAxis;\n        },\n\n        /**\n         * mousemove handler\n         * @param {Object} e\n         * @private\n         */\n        _tryShow: function (e) {\n            var el = e.target;\n            var tooltipModel = this._tooltipModel;\n            var globalTrigger = tooltipModel.get('trigger');\n            var ecModel = this._ecModel;\n            var api = this._api;\n\n            if (!tooltipModel) {\n                return;\n            }\n\n            // Save mouse x, mouse y. So we can try to keep showing the tip if chart is refreshed\n            this._lastX = e.offsetX;\n            this._lastY = e.offsetY;\n\n            // Always show item tooltip if mouse is on the element with dataIndex\n            if (el && el.dataIndex != null) {\n                // Use dataModel in element if possible\n                // Used when mouseover on a element like markPoint or edge\n                // In which case, the data is not main data in series.\n                var dataModel = el.dataModel || ecModel.getSeriesByIndex(el.seriesIndex);\n                var dataIndex = el.dataIndex;\n                var data = dataModel.getData();\n                var itemModel = data.getItemModel(dataIndex);\n                // Series or single data may use item trigger when global is axis trigger\n                if ((itemModel.get('tooltip.trigger') || globalTrigger) === 'axis') {\n                    this._showAxisTooltip(tooltipModel, ecModel, e);\n                }\n                else {\n                    // Reset ticket\n                    this._ticket = '';\n                    // If either single data or series use item trigger\n                    this._hideAxisPointer();\n                    // Reset last hover and dispatch downplay action\n                    this._resetLastHover();\n\n                    this._showItemTooltipContent(dataModel, dataIndex, el.dataType, e);\n                }\n\n                api.dispatchAction({\n                    type: 'showTip',\n                    from: this.uid,\n                    dataIndexInside: dataIndex,\n                    dataIndex: data.getRawIndex(dataIndex), // expose to user.\n                    seriesIndex: el.seriesIndex\n                });\n            }\n            // Tooltip provided directly. Like legend\n            else if (el && el.tooltip) {\n                var tooltipOpt = el.tooltip;\n                if (typeof tooltipOpt === 'string') {\n                    var content = tooltipOpt;\n                    tooltipOpt = {\n                        content: content,\n                        // Fixed formatter\n                        formatter: content\n                    };\n                }\n                var subTooltipModel = new Model(tooltipOpt, tooltipModel);\n                var defaultHtml = subTooltipModel.get('content');\n                var asyncTicket = Math.random();\n                this._showTooltipContent(\n                    // TODO params\n                    subTooltipModel, defaultHtml, subTooltipModel.get('formatterParams') || {},\n                    asyncTicket, e.offsetX, e.offsetY, e.position, el, api\n                );\n            }\n            else {\n                if (globalTrigger === 'item') {\n                    this._hide();\n                }\n                else {\n                    // Try show axis tooltip\n                    this._showAxisTooltip(tooltipModel, ecModel, e);\n                }\n\n                // Action of cross pointer\n                // other pointer types will trigger action in _dispatchAndShowSeriesTooltipContent method\n                if (tooltipModel.get('axisPointer.type') === 'cross') {\n                    api.dispatchAction({\n                        type: 'showTip',\n                        from: this.uid,\n                        x: e.offsetX,\n                        y: e.offsetY\n                    });\n                }\n            }\n        },\n\n        /**\n         * Show tooltip on axis\n         * @param {module:echarts/component/tooltip/TooltipModel} tooltipModel\n         * @param {module:echarts/model/Global} ecModel\n         * @param {Object} e\n         * @private\n         */\n        _showAxisTooltip: function (tooltipModel, ecModel, e) {\n            var axisPointerModel = tooltipModel.getModel('axisPointer');\n            var axisPointerType = axisPointerModel.get('type');\n\n            if (axisPointerType === 'cross') {\n                var el = e.target;\n                if (el && el.dataIndex != null) {\n                    var seriesModel = ecModel.getSeriesByIndex(el.seriesIndex);\n                    var dataIndex = el.dataIndex;\n                    this._showItemTooltipContent(seriesModel, dataIndex, el.dataType, e);\n                }\n            }\n\n            this._showAxisPointer();\n            var allNotShow = true;\n            zrUtil.each(this._seriesGroupByAxis, function (seriesCoordSysSameAxis) {\n                // Try show the axis pointer\n                var allCoordSys = seriesCoordSysSameAxis.coordSys;\n                var coordSys = allCoordSys[0];\n\n                // If mouse position is not in the grid or polar\n                var point = [e.offsetX, e.offsetY];\n\n                if (!coordSys.containPoint(point)) {\n                    // Hide axis pointer\n                    this._hideAxisPointer(coordSys.name);\n                    return;\n                }\n\n                allNotShow = false;\n                // Make sure point is discrete on cateogry axis\n                var dimensions = coordSys.dimensions;\n                var value = coordSys.pointToData(point, true);\n                point = coordSys.dataToPoint(value);\n\n                var baseAxis = coordSys.getBaseAxis();\n                var axisType = axisPointerModel.get('axis');\n                if (axisType === 'auto') {\n                    axisType = baseAxis.dim;\n                }\n\n                if (baseAxis.isBlank() || zrUtil.eqNaN(point[0]) || zrUtil.eqNaN(point[1])) {\n                    this._hideAxisPointer(coordSys.name);\n                    return;\n                }\n\n                var contentNotChange = false;\n                var lastHover = this._lastHover;\n                if (axisPointerType === 'cross') {\n                    // If hover data not changed\n                    // Possible when two axes are all category\n                    if (dataEqual(lastHover.data, value)) {\n                        contentNotChange = true;\n                    }\n                    lastHover.data = value;\n                }\n                else {\n                    var valIndex = zrUtil.indexOf(dimensions, axisType);\n\n                    // If hover data not changed on the axis dimension\n                    if (lastHover.data === value[valIndex]) {\n                        contentNotChange = true;\n                    }\n                    lastHover.data = value[valIndex];\n                }\n\n                var enableAnimation = tooltipModel.get('animation');\n\n                if (coordSys.type === 'cartesian2d' && !contentNotChange) {\n                    this._showCartesianPointer(\n                        axisPointerModel, coordSys, axisType, point, enableAnimation\n                    );\n                }\n                else if (coordSys.type === 'polar' && !contentNotChange) {\n                    this._showPolarPointer(\n                        axisPointerModel, coordSys, axisType, point, enableAnimation\n                    );\n                }\n                else if (coordSys.type === 'singleAxis' && !contentNotChange) {\n                    this._showSinglePointer(\n                        axisPointerModel, coordSys, axisType, point, enableAnimation\n                    );\n                }\n\n                if (axisPointerType !== 'cross') {\n                    this._dispatchAndShowSeriesTooltipContent(\n                        coordSys, seriesCoordSysSameAxis.series, point, value, contentNotChange, e.position\n                    );\n                }\n            }, this);\n\n            if (!this._tooltipModel.get('show')) {\n                this._hideAxisPointer();\n            }\n\n            if (allNotShow) {\n                this._hide();\n            }\n        },\n\n        /**\n         * Show tooltip on axis of cartesian coordinate\n         * @param {module:echarts/model/Model} axisPointerModel\n         * @param {module:echarts/coord/cartesian/Cartesian2D} cartesians\n         * @param {string} axisType\n         * @param {Array.<number>} point\n         * @private\n         */\n        _showCartesianPointer: function (axisPointerModel, cartesian, axisType, point, enableAnimation) {\n            var self = this;\n\n            var axisPointerType = axisPointerModel.get('type');\n            var baseAxis = cartesian.getBaseAxis();\n            var moveAnimation = enableAnimation\n                && axisPointerType !== 'cross'\n                && baseAxis.type === 'category'\n                && baseAxis.getBandWidth() > 20;\n\n            if (axisPointerType === 'cross') {\n                moveGridLine('x', point, cartesian.getAxis('y').getGlobalExtent());\n                moveGridLine('y', point, cartesian.getAxis('x').getGlobalExtent());\n\n                this._updateCrossText(cartesian, point, axisPointerModel);\n            }\n            else {\n                var otherAxis = cartesian.getAxis(axisType === 'x' ? 'y' : 'x');\n                var otherExtent = otherAxis.getGlobalExtent();\n\n                if (cartesian.type === 'cartesian2d') {\n                    (axisPointerType === 'line' ? moveGridLine : moveGridShadow)(\n                        axisType, point, otherExtent\n                    );\n                }\n            }\n\n            /**\n             * @inner\n             */\n            function moveGridLine(axisType, point, otherExtent) {\n                var targetShape = axisType === 'x'\n                    ? makeLineShape(point[0], otherExtent[0], point[0], otherExtent[1])\n                    : makeLineShape(otherExtent[0], point[1], otherExtent[1], point[1]);\n\n                var pointerEl = self._getPointerElement(\n                    cartesian, axisPointerModel, axisType, targetShape\n                );\n                graphic.subPixelOptimizeLine({\n                    shape: targetShape,\n                    style: pointerEl.style\n                });\n\n                moveAnimation\n                    ? graphic.updateProps(pointerEl, {\n                        shape: targetShape\n                    }, axisPointerModel)\n                    :  pointerEl.attr({\n                        shape: targetShape\n                    });\n            }\n\n            /**\n             * @inner\n             */\n            function moveGridShadow(axisType, point, otherExtent) {\n                var axis = cartesian.getAxis(axisType);\n                var bandWidth = axis.getBandWidth();\n                var span = otherExtent[1] - otherExtent[0];\n                var targetShape = axisType === 'x'\n                    ? makeRectShape(point[0] - bandWidth / 2, otherExtent[0], bandWidth, span)\n                    : makeRectShape(otherExtent[0], point[1] - bandWidth / 2, span, bandWidth);\n\n                var pointerEl = self._getPointerElement(\n                    cartesian, axisPointerModel, axisType, targetShape\n                );\n                moveAnimation\n                    ? graphic.updateProps(pointerEl, {\n                        shape: targetShape\n                    }, axisPointerModel)\n                    :  pointerEl.attr({\n                        shape: targetShape\n                    });\n            }\n        },\n\n        _showSinglePointer: function (axisPointerModel, single, axisType, point, enableAnimation) {\n            var self = this;\n            var axisPointerType = axisPointerModel.get('type');\n            var moveAnimation =\n                enableAnimation\n                && axisPointerType !== 'cross'\n                && single.getBaseAxis().type === 'category';\n            var rect = single.getRect();\n            var otherExtent = [rect.y, rect.y + rect.height];\n\n            moveSingleLine(axisType, point, otherExtent);\n\n            /**\n             * @inner\n             */\n            function moveSingleLine(axisType, point, otherExtent) {\n                var axis = single.getAxis();\n                var orient = axis.orient;\n\n                var targetShape = orient === 'horizontal'\n                    ? makeLineShape(point[0], otherExtent[0], point[0], otherExtent[1])\n                    : makeLineShape(otherExtent[0], point[1], otherExtent[1], point[1]);\n\n                var pointerEl = self._getPointerElement(\n                    single, axisPointerModel, axisType, targetShape\n                );\n                moveAnimation\n                    ? graphic.updateProps(pointerEl, {\n                        shape: targetShape\n                    }, axisPointerModel)\n                    :  pointerEl.attr({\n                        shape: targetShape\n                    });\n            }\n\n        },\n\n        /**\n         * Show tooltip on axis of polar coordinate\n         * @param {module:echarts/model/Model} axisPointerModel\n         * @param {Array.<module:echarts/coord/polar/Polar>} polar\n         * @param {string} axisType\n         * @param {Array.<number>} point\n         */\n        _showPolarPointer: function (axisPointerModel, polar, axisType, point, enableAnimation) {\n            var self = this;\n\n            var axisPointerType = axisPointerModel.get('type');\n\n            var angleAxis = polar.getAngleAxis();\n            var radiusAxis = polar.getRadiusAxis();\n\n            var moveAnimation = enableAnimation\n                && axisPointerType !== 'cross'\n                && polar.getBaseAxis().type === 'category';\n\n            if (axisPointerType === 'cross') {\n                movePolarLine('angle', point, radiusAxis.getExtent());\n                movePolarLine('radius', point, angleAxis.getExtent());\n\n                this._updateCrossText(polar, point, axisPointerModel);\n            }\n            else {\n                var otherAxis = polar.getAxis(axisType === 'radius' ? 'angle' : 'radius');\n                var otherExtent = otherAxis.getExtent();\n\n                (axisPointerType === 'line' ? movePolarLine : movePolarShadow)(\n                    axisType, point, otherExtent\n                );\n            }\n            /**\n             * @inner\n             */\n            function movePolarLine(axisType, point, otherExtent) {\n                var mouseCoord = polar.pointToCoord(point);\n\n                var targetShape;\n\n                if (axisType === 'angle') {\n                    var p1 = polar.coordToPoint([otherExtent[0], mouseCoord[1]]);\n                    var p2 = polar.coordToPoint([otherExtent[1], mouseCoord[1]]);\n                    targetShape = makeLineShape(p1[0], p1[1], p2[0], p2[1]);\n                }\n                else {\n                    targetShape = {\n                        cx: polar.cx,\n                        cy: polar.cy,\n                        r: mouseCoord[0]\n                    };\n                }\n\n                var pointerEl = self._getPointerElement(\n                    polar, axisPointerModel, axisType, targetShape\n                );\n\n                moveAnimation\n                    ? graphic.updateProps(pointerEl, {\n                        shape: targetShape\n                    }, axisPointerModel)\n                    :  pointerEl.attr({\n                        shape: targetShape\n                    });\n            }\n\n            /**\n             * @inner\n             */\n            function movePolarShadow(axisType, point, otherExtent) {\n                var axis = polar.getAxis(axisType);\n                var bandWidth = axis.getBandWidth();\n\n                var mouseCoord = polar.pointToCoord(point);\n\n                var targetShape;\n\n                var radian = Math.PI / 180;\n\n                if (axisType === 'angle') {\n                    targetShape = makeSectorShape(\n                        polar.cx, polar.cy,\n                        otherExtent[0], otherExtent[1],\n                        // In ECharts y is negative if angle is positive\n                        (-mouseCoord[1] - bandWidth / 2) * radian,\n                        (-mouseCoord[1] + bandWidth / 2) * radian\n                    );\n                }\n                else {\n                    targetShape = makeSectorShape(\n                        polar.cx, polar.cy,\n                        mouseCoord[0] - bandWidth / 2,\n                        mouseCoord[0] + bandWidth / 2,\n                        0, Math.PI * 2\n                    );\n                }\n\n                var pointerEl = self._getPointerElement(\n                    polar, axisPointerModel, axisType, targetShape\n                );\n                moveAnimation\n                    ? graphic.updateProps(pointerEl, {\n                        shape: targetShape\n                    }, axisPointerModel)\n                    :  pointerEl.attr({\n                        shape: targetShape\n                    });\n            }\n        },\n\n        _updateCrossText: function (coordSys, point, axisPointerModel) {\n            var crossStyleModel = axisPointerModel.getModel('crossStyle');\n            var textStyleModel = crossStyleModel.getModel('textStyle');\n\n            var tooltipModel = this._tooltipModel;\n\n            var text = this._crossText;\n            if (!text) {\n                text = this._crossText = new graphic.Text({\n                    style: {\n                        textAlign: 'left',\n                        textVerticalAlign: 'bottom'\n                    }\n                });\n                this.group.add(text);\n            }\n\n            var value = coordSys.pointToData(point);\n\n            var dims = coordSys.dimensions;\n            value = zrUtil.map(value, function (val, idx) {\n                var axis = coordSys.getAxis(dims[idx]);\n                if (axis.type === 'category' || axis.type === 'time') {\n                    val = axis.scale.getLabel(val);\n                }\n                else {\n                    val = formatUtil.addCommas(\n                        val.toFixed(axis.getPixelPrecision())\n                    );\n                }\n                return val;\n            });\n\n            text.setStyle({\n                fill: textStyleModel.getTextColor() || crossStyleModel.get('color'),\n                textFont: textStyleModel.getFont(),\n                text: value.join(', '),\n                x: point[0] + 5,\n                y: point[1] - 5\n            });\n            text.z = tooltipModel.get('z');\n            text.zlevel = tooltipModel.get('zlevel');\n        },\n\n        _getPointerElement: function (coordSys, pointerModel, axisType, initShape) {\n            var tooltipModel = this._tooltipModel;\n            var z = tooltipModel.get('z');\n            var zlevel = tooltipModel.get('zlevel');\n            var axisPointers = this._axisPointers;\n            var coordSysName = coordSys.name;\n            axisPointers[coordSysName] = axisPointers[coordSysName] || {};\n            if (axisPointers[coordSysName][axisType]) {\n                return axisPointers[coordSysName][axisType];\n            }\n\n            // Create if not exists\n            var pointerType = pointerModel.get('type');\n            var styleModel = pointerModel.getModel(pointerType + 'Style');\n            var isShadow = pointerType === 'shadow';\n            var style = styleModel[isShadow ? 'getAreaStyle' : 'getLineStyle']();\n\n            var elementType = coordSys.type === 'polar'\n                ? (isShadow ? 'Sector' : (axisType === 'radius' ? 'Circle' : 'Line'))\n                : (isShadow ? 'Rect' : 'Line');\n\n            isShadow ? (style.stroke = null) : (style.fill = null);\n\n            var el = axisPointers[coordSysName][axisType] = new graphic[elementType]({\n                style: style,\n                z: z,\n                zlevel: zlevel,\n                silent: true,\n                shape: initShape\n            });\n\n            this.group.add(el);\n            return el;\n        },\n\n        /**\n         * Dispatch actions and show tooltip on series\n         * @param {Array.<module:echarts/model/Series>} seriesList\n         * @param {Array.<number>} point\n         * @param {Array.<number>} value\n         * @param {boolean} contentNotChange\n         * @param {Array.<number>|string|Function} [positionExpr]\n         */\n        _dispatchAndShowSeriesTooltipContent: function (\n            coordSys, seriesList, point, value, contentNotChange, positionExpr\n        ) {\n\n            var rootTooltipModel = this._tooltipModel;\n\n            var baseAxis = coordSys.getBaseAxis();\n            var baseDimIndex = ({x: 1, radius: 1, single: 1})[baseAxis.dim] ? 0 : 1;\n\n            if (!seriesList.length) {\n                return;\n            }\n\n            var payloadBatch = zrUtil.map(seriesList, function (series) {\n                return {\n                    seriesIndex: series.seriesIndex,\n                    dataIndexInside: series.getAxisTooltipDataIndex\n                        ? series.getAxisTooltipDataIndex(series.coordDimToDataDim(baseAxis.dim), value, baseAxis)\n                        : series.getData().indexOfNearest(\n                            series.coordDimToDataDim(baseAxis.dim)[0],\n                            value[baseDimIndex],\n                            // Add a threshold to avoid find the wrong dataIndex when data length is not same\n                            false, baseAxis.type === 'category' ? 0.5 : null\n                        )\n                };\n            });\n            var sampleSeriesIndex;\n            zrUtil.each(payloadBatch, function (payload, idx) {\n                if (seriesList[idx].getData().hasValue(payload.dataIndexInside)) {\n                    sampleSeriesIndex = idx;\n                }\n            });\n            // Fallback to 0.\n            sampleSeriesIndex = sampleSeriesIndex || 0;\n\n            var lastHover = this._lastHover;\n            var api = this._api;\n            // Dispatch downplay action\n            if (lastHover.payloadBatch && !contentNotChange) {\n                api.dispatchAction({\n                    type: 'downplay',\n                    batch: lastHover.payloadBatch\n                });\n            }\n            // Dispatch highlight action\n            if (!contentNotChange) {\n                api.dispatchAction({\n                    type: 'highlight',\n                    batch: payloadBatch\n                });\n                lastHover.payloadBatch = payloadBatch;\n            }\n            // Dispatch showTip action\n            var dataIndex = payloadBatch[sampleSeriesIndex].dataIndexInside;\n            api.dispatchAction({\n                type: 'showTip',\n                dataIndexInside: dataIndex,\n                // expose to user.\n                dataIndex: seriesList[sampleSeriesIndex].getData().getRawIndex(dataIndex),\n                seriesIndex: payloadBatch[sampleSeriesIndex].seriesIndex,\n                from: this.uid\n            });\n\n            if (baseAxis && rootTooltipModel.get('showContent') && rootTooltipModel.get('show')) {\n                var paramsList = zrUtil.map(seriesList, function (series, index) {\n                    return series.getDataParams(payloadBatch[index].dataIndexInside);\n                });\n\n                if (!contentNotChange) {\n                    // Update html content\n                    var firstDataIndex = payloadBatch[sampleSeriesIndex].dataIndexInside;\n\n                    // Default tooltip content\n                    // FIXME\n                    // (1) shold be the first data which has name?\n                    // (2) themeRiver, firstDataIndex is array, and first line is unnecessary.\n                    var firstLine = baseAxis.type === 'time'\n                        ? baseAxis.scale.getLabel(value[baseDimIndex])\n                        : seriesList[sampleSeriesIndex].getData().getName(firstDataIndex);\n                    var defaultHtml = (firstLine ? formatUtil.encodeHTML(firstLine) + '<br />' : '')\n                        + zrUtil.map(seriesList, function (series, index) {\n                            return series.formatTooltip(payloadBatch[index].dataIndexInside, true);\n                        }).join('<br />');\n\n                    var asyncTicket = 'axis_' + coordSys.name + '_' + firstDataIndex;\n\n                    this._showTooltipContent(\n                        rootTooltipModel, defaultHtml, paramsList, asyncTicket,\n                        point[0], point[1], positionExpr, null, api\n                    );\n                }\n                else {\n                    updatePosition(\n                        positionExpr || rootTooltipModel.get('position'),\n                        point[0], point[1],\n                        rootTooltipModel.get('confine'),\n                        this._tooltipContent, paramsList, null, api\n                    );\n                }\n            }\n        },\n\n        /**\n         * Show tooltip on item\n         * @param {module:echarts/model/Series} seriesModel\n         * @param {number} dataIndex\n         * @param {string} dataType\n         * @param {Object} e\n         */\n        _showItemTooltipContent: function (seriesModel, dataIndex, dataType, e) {\n            // FIXME Graph data\n            var api = this._api;\n            var data = seriesModel.getData(dataType);\n            var itemModel = data.getItemModel(dataIndex);\n\n            var tooltipOpt = itemModel.get('tooltip', true);\n            if (typeof tooltipOpt === 'string') {\n                // In each data item tooltip can be simply write:\n                // {\n                //  value: 10,\n                //  tooltip: 'Something you need to know'\n                // }\n                var tooltipContent = tooltipOpt;\n                tooltipOpt = {\n                    formatter: tooltipContent\n                };\n            }\n            var rootTooltipModel = this._tooltipModel;\n            var seriesTooltipModel = seriesModel.getModel(\n                'tooltip', rootTooltipModel\n            );\n            var tooltipModel = new Model(tooltipOpt, seriesTooltipModel, seriesTooltipModel.ecModel);\n\n            var params = seriesModel.getDataParams(dataIndex, dataType);\n            var defaultHtml = seriesModel.formatTooltip(dataIndex, false, dataType);\n\n            var asyncTicket = 'item_' + seriesModel.name + '_' + dataIndex;\n\n            this._showTooltipContent(\n                tooltipModel, defaultHtml, params, asyncTicket,\n                e.offsetX, e.offsetY, e.position, e.target, api\n            );\n        },\n\n        _showTooltipContent: function (\n            tooltipModel, defaultHtml, params, asyncTicket, x, y, positionExpr, target, api\n        ) {\n            // Reset ticket\n            this._ticket = '';\n\n            if (tooltipModel.get('showContent') && tooltipModel.get('show')) {\n                var tooltipContent = this._tooltipContent;\n                var confine = tooltipModel.get('confine');\n\n                var formatter = tooltipModel.get('formatter');\n                positionExpr = positionExpr || tooltipModel.get('position');\n                var html = defaultHtml;\n\n                if (formatter) {\n                    if (typeof formatter === 'string') {\n                        html = formatUtil.formatTpl(formatter, params, true);\n                    }\n                    else if (typeof formatter === 'function') {\n                        var self = this;\n                        var ticket = asyncTicket;\n                        var callback = function (cbTicket, html) {\n                            if (cbTicket === self._ticket) {\n                                tooltipContent.setContent(html);\n\n                                updatePosition(\n                                    positionExpr, x, y, confine,\n                                    tooltipContent, params, target, api\n                                );\n                            }\n                        };\n                        self._ticket = ticket;\n                        html = formatter(params, ticket, callback);\n                    }\n                }\n\n                tooltipContent.show(tooltipModel);\n                tooltipContent.setContent(html);\n\n                updatePosition(\n                    positionExpr, x, y, confine,\n                    tooltipContent, params, target, api\n                );\n            }\n        },\n\n        /**\n         * Show axis pointer\n         * @param {string} [coordSysName]\n         */\n        _showAxisPointer: function (coordSysName) {\n            if (coordSysName) {\n                var axisPointers = this._axisPointers[coordSysName];\n                axisPointers && zrUtil.each(axisPointers, function (el) {\n                    el.show();\n                });\n            }\n            else {\n                this.group.eachChild(function (child) {\n                    child.show();\n                });\n                this.group.show();\n            }\n        },\n\n        _resetLastHover: function () {\n            var lastHover = this._lastHover;\n            if (lastHover.payloadBatch) {\n                this._api.dispatchAction({\n                    type: 'downplay',\n                    batch: lastHover.payloadBatch\n                });\n            }\n            // Reset lastHover\n            this._lastHover = {};\n        },\n        /**\n         * Hide axis pointer\n         * @param {string} [coordSysName]\n         */\n        _hideAxisPointer: function (coordSysName) {\n            if (coordSysName) {\n                var axisPointers = this._axisPointers[coordSysName];\n                axisPointers && zrUtil.each(axisPointers, function (el) {\n                    el.hide();\n                });\n            }\n            else {\n                if (this.group.children().length) {\n                    this.group.hide();\n                }\n            }\n        },\n\n        _hide: function () {\n            clearTimeout(this._showTimeout);\n\n            this._hideAxisPointer();\n            this._resetLastHover();\n            if (!this._alwaysShowContent) {\n                this._tooltipContent.hideLater(this._tooltipModel.get('hideDelay'));\n            }\n\n            this._api.dispatchAction({\n                type: 'hideTip',\n                from: this.uid\n            });\n\n            this._lastX = this._lastY = null;\n        },\n\n        dispose: function (ecModel, api) {\n            if (env.node) {\n                return;\n            }\n            var zr = api.getZr();\n            this._tooltipContent.hide();\n\n            zr.off('click', this._tryShow);\n            zr.off('mousemove', this._mousemove);\n            zr.off('mouseout', this._hide);\n            zr.off('globalout', this._hide);\n        }\n    });\n\n\n/***/ }),\n/* 388 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var numberUtil = __webpack_require__(318);\n    var linearMap = numberUtil.linearMap;\n    var zrUtil = __webpack_require__(315);\n\n    function fixExtentWithBands(extent, nTick) {\n        var size = extent[1] - extent[0];\n        var len = nTick;\n        var margin = size / len / 2;\n        extent[0] += margin;\n        extent[1] -= margin;\n    }\n\n    var normalizedExtent = [0, 1];\n    /**\n     * @name module:echarts/coord/CartesianAxis\n     * @constructor\n     */\n    var Axis = function (dim, scale, extent) {\n\n        /**\n         * Axis dimension. Such as 'x', 'y', 'z', 'angle', 'radius'\n         * @type {string}\n         */\n        this.dim = dim;\n\n        /**\n         * Axis scale\n         * @type {module:echarts/coord/scale/*}\n         */\n        this.scale = scale;\n\n        /**\n         * @type {Array.<number>}\n         * @private\n         */\n        this._extent = extent || [0, 0];\n\n        /**\n         * @type {boolean}\n         */\n        this.inverse = false;\n\n        /**\n         * Usually true when axis has a ordinal scale\n         * @type {boolean}\n         */\n        this.onBand = false;\n    };\n\n    Axis.prototype = {\n\n        constructor: Axis,\n\n        /**\n         * If axis extent contain given coord\n         * @param {number} coord\n         * @return {boolean}\n         */\n        contain: function (coord) {\n            var extent = this._extent;\n            var min = Math.min(extent[0], extent[1]);\n            var max = Math.max(extent[0], extent[1]);\n            return coord >= min && coord <= max;\n        },\n\n        /**\n         * If axis extent contain given data\n         * @param {number} data\n         * @return {boolean}\n         */\n        containData: function (data) {\n            return this.contain(this.dataToCoord(data));\n        },\n\n        /**\n         * Get coord extent.\n         * @return {Array.<number>}\n         */\n        getExtent: function () {\n            var ret = this._extent.slice();\n            return ret;\n        },\n\n        /**\n         * Get precision used for formatting\n         * @param {Array.<number>} [dataExtent]\n         * @return {number}\n         */\n        getPixelPrecision: function (dataExtent) {\n            return numberUtil.getPixelPrecision(\n                dataExtent || this.scale.getExtent(),\n                this._extent\n            );\n        },\n\n        /**\n         * Set coord extent\n         * @param {number} start\n         * @param {number} end\n         */\n        setExtent: function (start, end) {\n            var extent = this._extent;\n            extent[0] = start;\n            extent[1] = end;\n        },\n\n        /**\n         * Convert data to coord. Data is the rank if it has a ordinal scale\n         * @param {number} data\n         * @param  {boolean} clamp\n         * @return {number}\n         */\n        dataToCoord: function (data, clamp) {\n            var extent = this._extent;\n            var scale = this.scale;\n            data = scale.normalize(data);\n\n            if (this.onBand && scale.type === 'ordinal') {\n                extent = extent.slice();\n                fixExtentWithBands(extent, scale.count());\n            }\n\n            return linearMap(data, normalizedExtent, extent, clamp);\n        },\n\n        /**\n         * Convert coord to data. Data is the rank if it has a ordinal scale\n         * @param {number} coord\n         * @param  {boolean} clamp\n         * @return {number}\n         */\n        coordToData: function (coord, clamp) {\n            var extent = this._extent;\n            var scale = this.scale;\n\n            if (this.onBand && scale.type === 'ordinal') {\n                extent = extent.slice();\n                fixExtentWithBands(extent, scale.count());\n            }\n\n            var t = linearMap(coord, extent, normalizedExtent, clamp);\n\n            return this.scale.scale(t);\n        },\n        /**\n         * @return {Array.<number>}\n         */\n        getTicksCoords: function (alignWithLabel) {\n            if (this.onBand && !alignWithLabel) {\n                var bands = this.getBands();\n                var coords = [];\n                for (var i = 0; i < bands.length; i++) {\n                    coords.push(bands[i][0]);\n                }\n                if (bands[i - 1]) {\n                    coords.push(bands[i - 1][1]);\n                }\n                return coords;\n            }\n            else {\n                return zrUtil.map(this.scale.getTicks(), this.dataToCoord, this);\n            }\n        },\n\n        /**\n         * Coords of labels are on the ticks or on the middle of bands\n         * @return {Array.<number>}\n         */\n        getLabelsCoords: function () {\n            return zrUtil.map(this.scale.getTicks(), this.dataToCoord, this);\n        },\n\n        /**\n         * Get bands.\n         *\n         * If axis has labels [1, 2, 3, 4]. Bands on the axis are\n         * |---1---|---2---|---3---|---4---|.\n         *\n         * @return {Array}\n         */\n         // FIXME Situation when labels is on ticks\n        getBands: function () {\n            var extent = this.getExtent();\n            var bands = [];\n            var len = this.scale.count();\n            var start = extent[0];\n            var end = extent[1];\n            var span = end - start;\n\n            for (var i = 0; i < len; i++) {\n                bands.push([\n                    span * i / len + start,\n                    span * (i + 1) / len + start\n                ]);\n            }\n            return bands;\n        },\n\n        /**\n         * Get width of band\n         * @return {number}\n         */\n        getBandWidth: function () {\n            var axisExtent = this._extent;\n            var dataExtent = this.scale.getExtent();\n\n            var len = dataExtent[1] - dataExtent[0] + (this.onBand ? 1 : 0);\n            // Fix #2728, avoid NaN when only one data.\n            len === 0 && (len = 1);\n\n            var size = Math.abs(axisExtent[1] - axisExtent[0]);\n\n            return Math.abs(size) / len;\n        },\n\n        /**\n         * When axis extent depends on data and no data exists,\n         * axis ticks should not be drawn, which is named 'blank'.\n         */\n        isBlank: function () {\n            return this._isBlank;\n        },\n\n        /**\n         * When axis extent depends on data and no data exists,\n         * axis ticks should not be drawn, which is named 'blank'.\n         */\n        setBlank: function (isBlank) {\n            this._isBlank = isBlank;\n        }\n\n    };\n\n    module.exports = Axis;\n\n\n/***/ }),\n/* 389 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var zrUtil = __webpack_require__(315);\n\n    var defaultOption = {\n        show: true,\n        zlevel: 0,                  // 一级层叠\n        z: 0,                       // 二级层叠\n        // 反向坐标轴\n        inverse: false,\n\n        // 坐标轴名字，默认为空\n        name: '',\n        // 坐标轴名字位置，支持'start' | 'middle' | 'end'\n        nameLocation: 'end',\n        // 坐标轴名字旋转，degree。\n        nameRotate: null, // Adapt to axis rotate, when nameLocation is 'middle'.\n        nameTruncate: {\n            maxWidth: null,\n            ellipsis: '...',\n            placeholder: '.'\n        },\n        // 坐标轴文字样式，默认取全局样式\n        nameTextStyle: {},\n        // 文字与轴线距离\n        nameGap: 15,\n\n        silent: false, // Default false to support tooltip.\n        triggerEvent: false, // Default false to avoid legacy user event listener fail.\n\n        tooltip: {\n            show: false\n        },\n\n        // 坐标轴线\n        axisLine: {\n            // 默认显示，属性show控制显示与否\n            show: true,\n            onZero: true,\n            // 属性lineStyle控制线条样式\n            lineStyle: {\n                color: '#333',\n                width: 1,\n                type: 'solid'\n            }\n        },\n        // 坐标轴小标记\n        axisTick: {\n            // 属性show控制显示与否，默认显示\n            show: true,\n            // 控制小标记是否在grid里\n            inside: false,\n            // 属性length控制线长\n            length: 5,\n            // 属性lineStyle控制线条样式\n            lineStyle: {\n                width: 1\n            }\n        },\n        // 坐标轴文本标签，详见axis.axisLabel\n        axisLabel: {\n            show: true,\n            // 控制文本标签是否在grid里\n            inside: false,\n            rotate: 0,\n            margin: 8,\n            // formatter: null,\n            // 其余属性默认使用全局文本样式，详见TEXTSTYLE\n            textStyle: {\n                fontSize: 12\n            }\n        },\n        // 分隔线\n        splitLine: {\n            // 默认显示，属性show控制显示与否\n            show: true,\n            // 属性lineStyle（详见lineStyle）控制线条样式\n            lineStyle: {\n                color: ['#ccc'],\n                width: 1,\n                type: 'solid'\n            }\n        },\n        // 分隔区域\n        splitArea: {\n            // 默认不显示，属性show控制显示与否\n            show: false,\n            // 属性areaStyle（详见areaStyle）控制区域样式\n            areaStyle: {\n                color: ['rgba(250,250,250,0.3)','rgba(200,200,200,0.3)']\n            }\n        }\n    };\n\n    var categoryAxis = zrUtil.merge({\n        // 类目起始和结束两端空白策略\n        boundaryGap: true,\n        // splitArea: {\n            // show: false\n        // },\n        splitLine: {\n            show: false\n        },\n        // 坐标轴小标记\n        axisTick: {\n            // If tick is align with label when boundaryGap is true\n            // Default with axisTick\n            alignWithLabel: false,\n            interval: 'auto'\n        },\n        // 坐标轴文本标签，详见axis.axisLabel\n        axisLabel: {\n            interval: 'auto'\n        }\n    }, defaultOption);\n\n    var valueAxis = zrUtil.merge({\n        // 数值起始和结束两端空白策略\n        boundaryGap: [0, 0],\n        // 最小值, 设置成 'dataMin' 则从数据中计算最小值\n        // min: null,\n        // 最大值，设置成 'dataMax' 则从数据中计算最大值\n        // max: null,\n        // Readonly prop, specifies start value of the range when using data zoom.\n        // rangeStart: null\n        // Readonly prop, specifies end value of the range when using data zoom.\n        // rangeEnd: null\n        // 脱离0值比例，放大聚焦到最终_min，_max区间\n        // scale: false,\n        // 分割段数，默认为5\n        splitNumber: 5\n        // Minimum interval\n        // minInterval: null\n    }, defaultOption);\n\n    // FIXME\n    var timeAxis = zrUtil.defaults({\n        scale: true,\n        min: 'dataMin',\n        max: 'dataMax'\n    }, valueAxis);\n    var logAxis = zrUtil.defaults({\n        logBase: 10\n    }, valueAxis);\n    logAxis.scale = true;\n\n    module.exports = {\n        categoryAxis: categoryAxis,\n        valueAxis: valueAxis,\n        timeAxis: timeAxis,\n        logAxis: logAxis\n    };\n\n\n/***/ }),\n/* 390 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var zrUtil = __webpack_require__(315);\n    var axisHelper = __webpack_require__(341);\n\n    function getName(obj) {\n        if (zrUtil.isObject(obj) && obj.value != null) {\n            return obj.value;\n        }\n        else {\n            return obj;\n        }\n    }\n\n    module.exports = {\n\n        /**\n         * Format labels\n         * @return {Array.<string>}\n         */\n        getFormattedLabels: function () {\n            return axisHelper.getFormattedLabels(\n                this.axis,\n                this.get('axisLabel.formatter')\n            );\n        },\n\n        /**\n         * Get categories\n         */\n        getCategories: function () {\n            return this.get('type') === 'category'\n                && zrUtil.map(this.get('data'), getName);\n        },\n\n        /**\n         * @param {boolean} origin\n         * @return {number|string} min value or 'dataMin' or null/undefined (means auto) or NaN\n         */\n        getMin: function (origin) {\n            var option = this.option;\n            var min = (!origin && option.rangeStart != null)\n                ? option.rangeStart : option.min;\n\n            if (min != null && min !== 'dataMin' && !zrUtil.eqNaN(min)) {\n                min = this.axis.scale.parse(min);\n            }\n            return min;\n        },\n\n        /**\n         * @param {boolean} origin\n         * @return {number|string} max value or 'dataMax' or null/undefined (means auto) or NaN\n         */\n        getMax: function (origin) {\n            var option = this.option;\n            var max = (!origin && option.rangeEnd != null)\n                ? option.rangeEnd : option.max;\n\n            if (max != null && max !== 'dataMax' && !zrUtil.eqNaN(max)) {\n                max = this.axis.scale.parse(max);\n            }\n            return max;\n        },\n\n        /**\n         * @return {boolean}\n         */\n        getNeedCrossZero: function () {\n            var option = this.option;\n            return (option.rangeStart != null || option.rangeEnd != null)\n                ? false : !option.scale;\n        },\n\n        /**\n         * Should be implemented by each axis model if necessary.\n         * @return {module:echarts/model/Component} coordinate system model\n         */\n        getCoordSysModel: zrUtil.noop,\n\n        /**\n         * @param {number} rangeStart Can only be finite number or null/undefined or NaN.\n         * @param {number} rangeEnd Can only be finite number or null/undefined or NaN.\n         */\n        setRange: function (rangeStart, rangeEnd) {\n            this.option.rangeStart = rangeStart;\n            this.option.rangeEnd = rangeEnd;\n        },\n\n        /**\n         * Reset range\n         */\n        resetRange: function () {\n            // rangeStart and rangeEnd is readonly.\n            this.option.rangeStart = this.option.rangeEnd = null;\n        }\n    };\n\n\n/***/ }),\n/* 391 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var axisDefault = __webpack_require__(389);\n    var zrUtil = __webpack_require__(315);\n    var ComponentModel = __webpack_require__(327);\n    var layout = __webpack_require__(328);\n\n    // FIXME axisType is fixed ?\n    var AXIS_TYPES = ['value', 'category', 'time', 'log'];\n\n    /**\n     * Generate sub axis model class\n     * @param {string} axisName 'x' 'y' 'radius' 'angle' 'parallel'\n     * @param {module:echarts/model/Component} BaseAxisModelClass\n     * @param {Function} axisTypeDefaulter\n     * @param {Object} [extraDefaultOption]\n     */\n    module.exports = function (axisName, BaseAxisModelClass, axisTypeDefaulter, extraDefaultOption) {\n\n        zrUtil.each(AXIS_TYPES, function (axisType) {\n\n            BaseAxisModelClass.extend({\n\n                type: axisName + 'Axis.' + axisType,\n\n                mergeDefaultAndTheme: function (option, ecModel) {\n                    var layoutMode = this.layoutMode;\n                    var inputPositionParams = layoutMode\n                        ? layout.getLayoutParams(option) : {};\n\n                    var themeModel = ecModel.getTheme();\n                    zrUtil.merge(option, themeModel.get(axisType + 'Axis'));\n                    zrUtil.merge(option, this.getDefaultOption());\n\n                    option.type = axisTypeDefaulter(axisName, option);\n\n                    if (layoutMode) {\n                        layout.mergeLayoutParam(option, inputPositionParams, layoutMode);\n                    }\n                },\n\n                defaultOption: zrUtil.mergeAll(\n                    [\n                        {},\n                        axisDefault[axisType + 'Axis'],\n                        extraDefaultOption\n                    ],\n                    true\n                )\n            });\n        });\n\n        ComponentModel.registerSubTypeDefaulter(\n            axisName + 'Axis',\n            zrUtil.curry(axisTypeDefaulter, axisName)\n        );\n    };\n\n\n/***/ }),\n/* 392 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var zrUtil = __webpack_require__(315);\n    var Axis = __webpack_require__(388);\n    var axisLabelInterval = __webpack_require__(396);\n\n    /**\n     * Extend axis 2d\n     * @constructor module:echarts/coord/cartesian/Axis2D\n     * @extends {module:echarts/coord/cartesian/Axis}\n     * @param {string} dim\n     * @param {*} scale\n     * @param {Array.<number>} coordExtent\n     * @param {string} axisType\n     * @param {string} position\n     */\n    var Axis2D = function (dim, scale, coordExtent, axisType, position) {\n        Axis.call(this, dim, scale, coordExtent);\n        /**\n         * Axis type\n         *  - 'category'\n         *  - 'value'\n         *  - 'time'\n         *  - 'log'\n         * @type {string}\n         */\n        this.type = axisType || 'value';\n\n        /**\n         * Axis position\n         *  - 'top'\n         *  - 'bottom'\n         *  - 'left'\n         *  - 'right'\n         */\n        this.position = position || 'bottom';\n    };\n\n    Axis2D.prototype = {\n\n        constructor: Axis2D,\n\n        /**\n         * Index of axis, can be used as key\n         */\n        index: 0,\n        /**\n         * If axis is on the zero position of the other axis\n         * @type {boolean}\n         */\n        onZero: false,\n\n        /**\n         * Axis model\n         * @param {module:echarts/coord/cartesian/AxisModel}\n         */\n        model: null,\n\n        isHorizontal: function () {\n            var position = this.position;\n            return position === 'top' || position === 'bottom';\n        },\n\n        getGlobalExtent: function () {\n            var ret = this.getExtent();\n            ret[0] = this.toGlobalCoord(ret[0]);\n            ret[1] = this.toGlobalCoord(ret[1]);\n            return ret;\n        },\n\n        /**\n         * @return {number}\n         */\n        getLabelInterval: function () {\n            var labelInterval = this._labelInterval;\n            if (!labelInterval) {\n                labelInterval = this._labelInterval = axisLabelInterval(this);\n            }\n            return labelInterval;\n        },\n\n        /**\n         * If label is ignored.\n         * Automatically used when axis is category and label can not be all shown\n         * @param  {number}  idx\n         * @return {boolean}\n         */\n        isLabelIgnored: function (idx) {\n            if (this.type === 'category') {\n                var labelInterval = this.getLabelInterval();\n                return ((typeof labelInterval === 'function')\n                    && !labelInterval(idx, this.scale.getLabel(idx)))\n                    || idx % (labelInterval + 1);\n            }\n        },\n\n        /**\n         * Transform global coord to local coord,\n         * i.e. var localCoord = axis.toLocalCoord(80);\n         * designate by module:echarts/coord/cartesian/Grid.\n         * @type {Function}\n         */\n        toLocalCoord: null,\n\n        /**\n         * Transform global coord to local coord,\n         * i.e. var globalCoord = axis.toLocalCoord(40);\n         * designate by module:echarts/coord/cartesian/Grid.\n         * @type {Function}\n         */\n        toGlobalCoord: null\n\n    };\n    zrUtil.inherits(Axis2D, Axis);\n\n    module.exports = Axis2D;\n\n\n/***/ }),\n/* 393 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * Cartesian coordinate system\n * @module  echarts/coord/Cartesian\n *\n */\n\n\n    var zrUtil = __webpack_require__(315);\n\n    function dimAxisMapper(dim) {\n        return this._axes[dim];\n    }\n\n    /**\n     * @alias module:echarts/coord/Cartesian\n     * @constructor\n     */\n    var Cartesian = function (name) {\n        this._axes = {};\n\n        this._dimList = [];\n\n        /**\n         * @type {string}\n         */\n        this.name = name || '';\n    };\n\n    Cartesian.prototype = {\n\n        constructor: Cartesian,\n\n        type: 'cartesian',\n\n        /**\n         * Get axis\n         * @param  {number|string} dim\n         * @return {module:echarts/coord/Cartesian~Axis}\n         */\n        getAxis: function (dim) {\n            return this._axes[dim];\n        },\n\n        /**\n         * Get axes list\n         * @return {Array.<module:echarts/coord/Cartesian~Axis>}\n         */\n        getAxes: function () {\n            return zrUtil.map(this._dimList, dimAxisMapper, this);\n        },\n\n        /**\n         * Get axes list by given scale type\n         */\n        getAxesByScale: function (scaleType) {\n            scaleType = scaleType.toLowerCase();\n            return zrUtil.filter(\n                this.getAxes(),\n                function (axis) {\n                    return axis.scale.type === scaleType;\n                }\n            );\n        },\n\n        /**\n         * Add axis\n         * @param {module:echarts/coord/Cartesian.Axis}\n         */\n        addAxis: function (axis) {\n            var dim = axis.dim;\n\n            this._axes[dim] = axis;\n\n            this._dimList.push(dim);\n        },\n\n        /**\n         * Convert data to coord in nd space\n         * @param {Array.<number>|Object.<string, number>} val\n         * @return {Array.<number>|Object.<string, number>}\n         */\n        dataToCoord: function (val) {\n            return this._dataCoordConvert(val, 'dataToCoord');\n        },\n\n        /**\n         * Convert coord in nd space to data\n         * @param  {Array.<number>|Object.<string, number>} val\n         * @return {Array.<number>|Object.<string, number>}\n         */\n        coordToData: function (val) {\n            return this._dataCoordConvert(val, 'coordToData');\n        },\n\n        _dataCoordConvert: function (input, method) {\n            var dimList = this._dimList;\n\n            var output = input instanceof Array ? [] : {};\n\n            for (var i = 0; i < dimList.length; i++) {\n                var dim = dimList[i];\n                var axis = this._axes[dim];\n\n                output[dim] = axis[method](input[dim]);\n            }\n\n            return output;\n        }\n    };\n\n    module.exports = Cartesian;\n\n\n/***/ }),\n/* 394 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n\n    var zrUtil = __webpack_require__(315);\n    var Cartesian = __webpack_require__(393);\n\n    function Cartesian2D(name) {\n\n        Cartesian.call(this, name);\n    }\n\n    Cartesian2D.prototype = {\n\n        constructor: Cartesian2D,\n\n        type: 'cartesian2d',\n\n        /**\n         * @type {Array.<string>}\n         * @readOnly\n         */\n        dimensions: ['x', 'y'],\n\n        /**\n         * Base axis will be used on stacking.\n         *\n         * @return {module:echarts/coord/cartesian/Axis2D}\n         */\n        getBaseAxis: function () {\n            return this.getAxesByScale('ordinal')[0]\n                || this.getAxesByScale('time')[0]\n                || this.getAxis('x');\n        },\n\n        /**\n         * If contain point\n         * @param {Array.<number>} point\n         * @return {boolean}\n         */\n        containPoint: function (point) {\n            var axisX = this.getAxis('x');\n            var axisY = this.getAxis('y');\n            return axisX.contain(axisX.toLocalCoord(point[0]))\n                && axisY.contain(axisY.toLocalCoord(point[1]));\n        },\n\n        /**\n         * If contain data\n         * @param {Array.<number>} data\n         * @return {boolean}\n         */\n        containData: function (data) {\n            return this.getAxis('x').containData(data[0])\n                && this.getAxis('y').containData(data[1]);\n        },\n\n        /**\n         * Convert series data to an array of points\n         * @param {module:echarts/data/List} data\n         * @param {boolean} stack\n         * @return {Array}\n         *  Return array of points. For example:\n         *  `[[10, 10], [20, 20], [30, 30]]`\n         */\n        dataToPoints: function (data, stack) {\n            return data.mapArray(['x', 'y'], function (x, y) {\n                return this.dataToPoint([x, y]);\n            }, stack, this);\n        },\n\n        /**\n         * @param {Array.<number>} data\n         * @param {boolean} [clamp=false]\n         * @return {Array.<number>}\n         */\n        dataToPoint: function (data, clamp) {\n            var xAxis = this.getAxis('x');\n            var yAxis = this.getAxis('y');\n            return [\n                xAxis.toGlobalCoord(xAxis.dataToCoord(data[0], clamp)),\n                yAxis.toGlobalCoord(yAxis.dataToCoord(data[1], clamp))\n            ];\n        },\n\n        /**\n         * @param {Array.<number>} point\n         * @param {boolean} [clamp=false]\n         * @return {Array.<number>}\n         */\n        pointToData: function (point, clamp) {\n            var xAxis = this.getAxis('x');\n            var yAxis = this.getAxis('y');\n            return [\n                xAxis.coordToData(xAxis.toLocalCoord(point[0]), clamp),\n                yAxis.coordToData(yAxis.toLocalCoord(point[1]), clamp)\n            ];\n        },\n\n        /**\n         * Get other axis\n         * @param {module:echarts/coord/cartesian/Axis2D} axis\n         */\n        getOtherAxis: function (axis) {\n            return this.getAxis(axis.dim === 'x' ? 'y' : 'x');\n        }\n    };\n\n    zrUtil.inherits(Cartesian2D, Cartesian);\n\n    module.exports = Cartesian2D;\n\n\n/***/ }),\n/* 395 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n// Grid 是在有直角坐标系的时候必须要存在的\n// 所以这里也要被 Cartesian2D 依赖\n\n\n    __webpack_require__(351);\n    var ComponentModel = __webpack_require__(327);\n\n    module.exports = ComponentModel.extend({\n\n        type: 'grid',\n\n        dependencies: ['xAxis', 'yAxis'],\n\n        layoutMode: 'box',\n\n        /**\n         * @type {module:echarts/coord/cartesian/Grid}\n         */\n        coordinateSystem: null,\n\n        defaultOption: {\n            show: false,\n            zlevel: 0,\n            z: 0,\n            left: '10%',\n            top: 60,\n            right: '10%',\n            bottom: 60,\n            // If grid size contain label\n            containLabel: false,\n            // width: {totalWidth} - left - right,\n            // height: {totalHeight} - top - bottom,\n            backgroundColor: 'rgba(0,0,0,0)',\n            borderWidth: 1,\n            borderColor: '#ccc'\n        }\n    });\n\n\n/***/ }),\n/* 396 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * Helper function for axisLabelInterval calculation\n */\n\n\n\n    var zrUtil = __webpack_require__(315);\n    var axisHelper = __webpack_require__(341);\n\n    module.exports = function (axis) {\n        var axisModel = axis.model;\n        var labelModel = axisModel.getModel('axisLabel');\n        var labelInterval = labelModel.get('interval');\n        if (!(axis.type === 'category' && labelInterval === 'auto')) {\n            return labelInterval === 'auto' ? 0 : labelInterval;\n        }\n\n        return axisHelper.getAxisLabelInterval(\n            zrUtil.map(axis.scale.getTicks(), axis.dataToCoord, axis),\n            axisModel.getFormattedLabels(),\n            labelModel.getModel('textStyle').getFont(),\n            axis.isHorizontal()\n        );\n    };\n\n\n/***/ }),\n/* 397 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n\n    function defaultKeyGetter(item) {\n        return item;\n    }\n\n    function DataDiffer(oldArr, newArr, oldKeyGetter, newKeyGetter) {\n        this._old = oldArr;\n        this._new = newArr;\n\n        this._oldKeyGetter = oldKeyGetter || defaultKeyGetter;\n        this._newKeyGetter = newKeyGetter || defaultKeyGetter;\n    }\n\n    DataDiffer.prototype = {\n\n        constructor: DataDiffer,\n\n        /**\n         * Callback function when add a data\n         */\n        add: function (func) {\n            this._add = func;\n            return this;\n        },\n\n        /**\n         * Callback function when update a data\n         */\n        update: function (func) {\n            this._update = func;\n            return this;\n        },\n\n        /**\n         * Callback function when remove a data\n         */\n        remove: function (func) {\n            this._remove = func;\n            return this;\n        },\n\n        execute: function () {\n            var oldArr = this._old;\n            var newArr = this._new;\n            var oldKeyGetter = this._oldKeyGetter;\n            var newKeyGetter = this._newKeyGetter;\n\n            var oldDataIndexMap = {};\n            var newDataIndexMap = {};\n            var oldDataKeyArr = [];\n            var newDataKeyArr = [];\n            var i;\n\n            initIndexMap(oldArr, oldDataIndexMap, oldDataKeyArr, oldKeyGetter);\n            initIndexMap(newArr, newDataIndexMap, newDataKeyArr, newKeyGetter);\n\n            // Travel by inverted order to make sure order consistency\n            // when duplicate keys exists (consider newDataIndex.pop() below).\n            // For performance consideration, these code below do not look neat.\n            for (i = 0; i < oldArr.length; i++) {\n                var key = oldDataKeyArr[i];\n                var idx = newDataIndexMap[key];\n\n                // idx can never be empty array here. see 'set null' logic below.\n                if (idx != null) {\n                    // Consider there is duplicate key (for example, use dataItem.name as key).\n                    // We should make sure every item in newArr and oldArr can be visited.\n                    var len = idx.length;\n                    if (len) {\n                        len === 1 && (newDataIndexMap[key] = null);\n                        idx = idx.unshift();\n                    }\n                    else {\n                        newDataIndexMap[key] = null;\n                    }\n                    this._update && this._update(idx, i);\n                }\n                else {\n                    this._remove && this._remove(i);\n                }\n            }\n\n            for (var i = 0; i < newDataKeyArr.length; i++) {\n                var key = newDataKeyArr[i];\n                if (newDataIndexMap.hasOwnProperty(key)) {\n                    var idx = newDataIndexMap[key];\n                    if (idx == null) {\n                        continue;\n                    }\n                    // idx can never be empty array here. see 'set null' logic above.\n                    if (!idx.length) {\n                        this._add && this._add(idx);\n                    }\n                    else {\n                        for (var j = 0, len = idx.length; j < len; j++) {\n                            this._add && this._add(idx[j]);\n                        }\n                    }\n                }\n            }\n        }\n    };\n\n    function initIndexMap(arr, map, keyArr, keyGetter) {\n        for (var i = 0; i < arr.length; i++) {\n            var key = keyGetter(arr[i], i);\n            var existence = map[key];\n            if (existence == null) {\n                keyArr.push(key);\n                map[key] = i;\n            }\n            else {\n                if (!existence.length) {\n                    map[key] = existence = [existence];\n                }\n                existence.push(i);\n            }\n        }\n    }\n\n    module.exports = DataDiffer;\n\n\n/***/ }),\n/* 398 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * Complete dimensions by data (guess dimension).\n */\n\n\n    var zrUtil = __webpack_require__(315);\n\n    /**\n     * Complete the dimensions array guessed from the data structure.\n     * @param  {Array.<string>} dimensions      Necessary dimensions, like ['x', 'y']\n     * @param  {Array} data                     Data list. [[1, 2, 3], [2, 3, 4]]\n     * @param  {Array.<string>} [defaultNames]    Default names to fill not necessary dimensions, like ['value']\n     * @param  {string} [extraPrefix]             Prefix of name when filling the left dimensions.\n     * @return {Array.<string>}\n     */\n    function completeDimensions(dimensions, data, defaultNames, extraPrefix) {\n        if (!data) {\n            return dimensions;\n        }\n\n        var value0 = retrieveValue(data[0]);\n        var dimSize = zrUtil.isArray(value0) && value0.length || 1;\n\n        defaultNames = defaultNames || [];\n        extraPrefix = extraPrefix || 'extra';\n        for (var i = 0; i < dimSize; i++) {\n            if (!dimensions[i]) {\n                var name = defaultNames[i] || (extraPrefix + (i - defaultNames.length));\n                dimensions[i] = guessOrdinal(data, i)\n                    ? {type: 'ordinal', name: name}\n                    : name;\n            }\n        }\n\n        return dimensions;\n    }\n\n    // The rule should not be complex, otherwise user might not\n    // be able to known where the data is wrong.\n    var guessOrdinal = completeDimensions.guessOrdinal = function (data, dimIndex) {\n        for (var i = 0, len = data.length; i < len; i++) {\n            var value = retrieveValue(data[i]);\n\n            if (!zrUtil.isArray(value)) {\n                return false;\n            }\n\n            var value = value[dimIndex];\n            if (value != null && isFinite(value)) {\n                return false;\n            }\n            else if (zrUtil.isString(value) && value !== '-') {\n                return true;\n            }\n        }\n        return false;\n    };\n\n    function retrieveValue(o) {\n        return zrUtil.isArray(o) ? o : zrUtil.isObject(o) ? o.value: o;\n    }\n\n    module.exports = completeDimensions;\n\n\n\n/***/ }),\n/* 399 */\n/***/ (function(module, exports) {\n\n\n\n    module.exports = function (seriesType, ecModel) {\n        ecModel.eachSeriesByType(seriesType, function (seriesModel) {\n            var data = seriesModel.getData();\n            var coordSys = seriesModel.coordinateSystem;\n\n            if (coordSys) {\n                var dims = coordSys.dimensions;\n\n                if (coordSys.type === 'singleAxis') {\n                    data.each(dims[0], function (x, idx) {\n                        // Also {Array.<number>}, not undefined to avoid if...else... statement\n                        data.setItemLayout(idx, isNaN(x) ? [NaN, NaN] : coordSys.dataToPoint(x));\n                    });\n                }\n                else {\n                    data.each(dims, function (x, y, idx) {\n                        // Also {Array.<number>}, not undefined to avoid if...else... statement\n                        data.setItemLayout(\n                            idx, (isNaN(x) || isNaN(y)) ? [NaN, NaN] : coordSys.dataToPoint([x, y])\n                        );\n                    }, true);\n                }\n            }\n        });\n    };\n\n\n/***/ }),\n/* 400 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var graphic = __webpack_require__(317);\n    var zrUtil = __webpack_require__(315);\n    var PI = Math.PI;\n    /**\n     * @param {module:echarts/ExtensionAPI} api\n     * @param {Object} [opts]\n     * @param {string} [opts.text]\n     * @param {string} [opts.color]\n     * @param {string} [opts.textColor]\n     * @return {module:zrender/Element}\n     */\n    module.exports = function (api, opts) {\n        opts = opts || {};\n        zrUtil.defaults(opts, {\n            text: 'loading',\n            color: '#c23531',\n            textColor: '#000',\n            maskColor: 'rgba(255, 255, 255, 0.8)',\n            zlevel: 0\n        });\n        var mask = new graphic.Rect({\n            style: {\n                fill: opts.maskColor\n            },\n            zlevel: opts.zlevel,\n            z: 10000\n        });\n        var arc = new graphic.Arc({\n            shape: {\n                startAngle: -PI / 2,\n                endAngle: -PI / 2 + 0.1,\n                r: 10\n            },\n            style: {\n                stroke: opts.color,\n                lineCap: 'round',\n                lineWidth: 5\n            },\n            zlevel: opts.zlevel,\n            z: 10001\n        });\n        var labelRect = new graphic.Rect({\n            style: {\n                fill: 'none',\n                text: opts.text,\n                textPosition: 'right',\n                textDistance: 10,\n                textFill: opts.textColor\n            },\n            zlevel: opts.zlevel,\n            z: 10001\n        });\n\n        arc.animateShape(true)\n            .when(1000, {\n                endAngle: PI * 3 / 2\n            })\n            .start('circularInOut');\n        arc.animateShape(true)\n            .when(1000, {\n                startAngle: PI * 3 / 2\n            })\n            .delay(300)\n            .start('circularInOut');\n\n        var group = new graphic.Group();\n        group.add(arc);\n        group.add(labelRect);\n        group.add(mask);\n        // Inject resize\n        group.resize = function () {\n            var cx = api.getWidth() / 2;\n            var cy = api.getHeight() / 2;\n            arc.setShape({\n                cx: cx,\n                cy: cy\n            });\n            var r = arc.shape.r;\n            labelRect.setShape({\n                x: cx - r,\n                y: cy - r,\n                width: r * 2,\n                height: r * 2\n            });\n\n            mask.setShape({\n                x: 0,\n                y: 0,\n                width: api.getWidth(),\n                height: api.getHeight()\n            });\n        };\n        group.resize();\n        return group;\n    };\n\n\n/***/ }),\n/* 401 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * ECharts global model\n *\n * @module {echarts/model/Global}\n */\n\n\n\n    /**\n     * Caution: If the mechanism should be changed some day, these cases\n     * should be considered:\n     *\n     * (1) In `merge option` mode, if using the same option to call `setOption`\n     * many times, the result should be the same (try our best to ensure that).\n     * (2) In `merge option` mode, if a component has no id/name specified, it\n     * will be merged by index, and the result sequence of the components is\n     * consistent to the original sequence.\n     * (3) `reset` feature (in toolbox). Find detailed info in comments about\n     * `mergeOption` in module:echarts/model/OptionManager.\n     */\n\n    var zrUtil = __webpack_require__(315);\n    var modelUtil = __webpack_require__(323);\n    var Model = __webpack_require__(325);\n    var each = zrUtil.each;\n    var filter = zrUtil.filter;\n    var map = zrUtil.map;\n    var isArray = zrUtil.isArray;\n    var indexOf = zrUtil.indexOf;\n    var isObject = zrUtil.isObject;\n\n    var ComponentModel = __webpack_require__(327);\n\n    var globalDefault = __webpack_require__(403);\n\n    var OPTION_INNER_KEY = '\\0_ec_inner';\n\n    /**\n     * @alias module:echarts/model/Global\n     *\n     * @param {Object} option\n     * @param {module:echarts/model/Model} parentModel\n     * @param {Object} theme\n     */\n    var GlobalModel = Model.extend({\n\n        constructor: GlobalModel,\n\n        init: function (option, parentModel, theme, optionManager) {\n            theme = theme || {};\n\n            this.option = null; // Mark as not initialized.\n\n            /**\n             * @type {module:echarts/model/Model}\n             * @private\n             */\n            this._theme = new Model(theme);\n\n            /**\n             * @type {module:echarts/model/OptionManager}\n             */\n            this._optionManager = optionManager;\n        },\n\n        setOption: function (option, optionPreprocessorFuncs) {\n            zrUtil.assert(\n                !(OPTION_INNER_KEY in option),\n                'please use chart.getOption()'\n            );\n\n            this._optionManager.setOption(option, optionPreprocessorFuncs);\n\n            this.resetOption();\n        },\n\n        /**\n         * @param {string} type null/undefined: reset all.\n         *                      'recreate': force recreate all.\n         *                      'timeline': only reset timeline option\n         *                      'media': only reset media query option\n         * @return {boolean} Whether option changed.\n         */\n        resetOption: function (type) {\n            var optionChanged = false;\n            var optionManager = this._optionManager;\n\n            if (!type || type === 'recreate') {\n                var baseOption = optionManager.mountOption(type === 'recreate');\n\n                if (!this.option || type === 'recreate') {\n                    initBase.call(this, baseOption);\n                }\n                else {\n                    this.restoreData();\n                    this.mergeOption(baseOption);\n                }\n                optionChanged = true;\n            }\n\n            if (type === 'timeline' || type === 'media') {\n                this.restoreData();\n            }\n\n            if (!type || type === 'recreate' || type === 'timeline') {\n                var timelineOption = optionManager.getTimelineOption(this);\n                timelineOption && (this.mergeOption(timelineOption), optionChanged = true);\n            }\n\n            if (!type || type === 'recreate' || type === 'media') {\n                var mediaOptions = optionManager.getMediaOption(this, this._api);\n                if (mediaOptions.length) {\n                    each(mediaOptions, function (mediaOption) {\n                        this.mergeOption(mediaOption, optionChanged = true);\n                    }, this);\n                }\n            }\n\n            return optionChanged;\n        },\n\n        /**\n         * @protected\n         */\n        mergeOption: function (newOption) {\n            var option = this.option;\n            var componentsMap = this._componentsMap;\n            var newCptTypes = [];\n\n            // 如果不存在对应的 component model 则直接 merge\n            each(newOption, function (componentOption, mainType) {\n                if (componentOption == null) {\n                    return;\n                }\n\n                if (!ComponentModel.hasClass(mainType)) {\n                    option[mainType] = option[mainType] == null\n                        ? zrUtil.clone(componentOption)\n                        : zrUtil.merge(option[mainType], componentOption, true);\n                }\n                else {\n                    newCptTypes.push(mainType);\n                }\n            });\n\n            // FIXME OPTION 同步是否要改回原来的\n            ComponentModel.topologicalTravel(\n                newCptTypes, ComponentModel.getAllClassMainTypes(), visitComponent, this\n            );\n\n            this._seriesIndices = this._seriesIndices || [];\n\n            function visitComponent(mainType, dependencies) {\n                var newCptOptionList = modelUtil.normalizeToArray(newOption[mainType]);\n\n                var mapResult = modelUtil.mappingToExists(\n                    componentsMap[mainType], newCptOptionList\n                );\n\n                modelUtil.makeIdAndName(mapResult);\n\n                // Set mainType and complete subType.\n                each(mapResult, function (item, index) {\n                    var opt = item.option;\n                    if (isObject(opt)) {\n                        item.keyInfo.mainType = mainType;\n                        item.keyInfo.subType = determineSubType(mainType, opt, item.exist);\n                    }\n                });\n\n                var dependentModels = getComponentsByTypes(\n                    componentsMap, dependencies\n                );\n\n                option[mainType] = [];\n                componentsMap[mainType] = [];\n\n                each(mapResult, function (resultItem, index) {\n                    var componentModel = resultItem.exist;\n                    var newCptOption = resultItem.option;\n\n                    zrUtil.assert(\n                        isObject(newCptOption) || componentModel,\n                        'Empty component definition'\n                    );\n\n                    // Consider where is no new option and should be merged using {},\n                    // see removeEdgeAndAdd in topologicalTravel and\n                    // ComponentModel.getAllClassMainTypes.\n                    if (!newCptOption) {\n                        componentModel.mergeOption({}, this);\n                        componentModel.optionUpdated({}, false);\n                    }\n                    else {\n                        var ComponentModelClass = ComponentModel.getClass(\n                            mainType, resultItem.keyInfo.subType, true\n                        );\n\n                        if (componentModel && componentModel instanceof ComponentModelClass) {\n                            componentModel.name = resultItem.keyInfo.name;\n                            componentModel.mergeOption(newCptOption, this);\n                            componentModel.optionUpdated(newCptOption, false);\n                        }\n                        else {\n                            // PENDING Global as parent ?\n                            var extraOpt = zrUtil.extend(\n                                {\n                                    dependentModels: dependentModels,\n                                    componentIndex: index\n                                },\n                                resultItem.keyInfo\n                            );\n                            componentModel = new ComponentModelClass(\n                                newCptOption, this, this, extraOpt\n                            );\n                            zrUtil.extend(componentModel, extraOpt);\n                            componentModel.init(newCptOption, this, this, extraOpt);\n                            // Call optionUpdated after init.\n                            // newCptOption has been used as componentModel.option\n                            // and may be merged with theme and default, so pass null\n                            // to avoid confusion.\n                            componentModel.optionUpdated(null, true);\n                        }\n                    }\n\n                    componentsMap[mainType][index] = componentModel;\n                    option[mainType][index] = componentModel.option;\n                }, this);\n\n                // Backup series for filtering.\n                if (mainType === 'series') {\n                    this._seriesIndices = createSeriesIndices(componentsMap.series);\n                }\n            }\n        },\n\n        /**\n         * Get option for output (cloned option and inner info removed)\n         * @public\n         * @return {Object}\n         */\n        getOption: function () {\n            var option = zrUtil.clone(this.option);\n\n            each(option, function (opts, mainType) {\n                if (ComponentModel.hasClass(mainType)) {\n                    var opts = modelUtil.normalizeToArray(opts);\n                    for (var i = opts.length - 1; i >= 0; i--) {\n                        // Remove options with inner id.\n                        if (modelUtil.isIdInner(opts[i])) {\n                            opts.splice(i, 1);\n                        }\n                    }\n                    option[mainType] = opts;\n                }\n            });\n\n            delete option[OPTION_INNER_KEY];\n\n            return option;\n        },\n\n        /**\n         * @return {module:echarts/model/Model}\n         */\n        getTheme: function () {\n            return this._theme;\n        },\n\n        /**\n         * @param {string} mainType\n         * @param {number} [idx=0]\n         * @return {module:echarts/model/Component}\n         */\n        getComponent: function (mainType, idx) {\n            var list = this._componentsMap[mainType];\n            if (list) {\n                return list[idx || 0];\n            }\n        },\n\n        /**\n         * If none of index and id and name used, return all components with mainType.\n         * @param {Object} condition\n         * @param {string} condition.mainType\n         * @param {string} [condition.subType] If ignore, only query by mainType\n         * @param {number|Array.<number>} [condition.index] Either input index or id or name.\n         * @param {string|Array.<string>} [condition.id] Either input index or id or name.\n         * @param {string|Array.<string>} [condition.name] Either input index or id or name.\n         * @return {Array.<module:echarts/model/Component>}\n         */\n        queryComponents: function (condition) {\n            var mainType = condition.mainType;\n            if (!mainType) {\n                return [];\n            }\n\n            var index = condition.index;\n            var id = condition.id;\n            var name = condition.name;\n\n            var cpts = this._componentsMap[mainType];\n\n            if (!cpts || !cpts.length) {\n                return [];\n            }\n\n            var result;\n\n            if (index != null) {\n                if (!isArray(index)) {\n                    index = [index];\n                }\n                result = filter(map(index, function (idx) {\n                    return cpts[idx];\n                }), function (val) {\n                    return !!val;\n                });\n            }\n            else if (id != null) {\n                var isIdArray = isArray(id);\n                result = filter(cpts, function (cpt) {\n                    return (isIdArray && indexOf(id, cpt.id) >= 0)\n                        || (!isIdArray && cpt.id === id);\n                });\n            }\n            else if (name != null) {\n                var isNameArray = isArray(name);\n                result = filter(cpts, function (cpt) {\n                    return (isNameArray && indexOf(name, cpt.name) >= 0)\n                        || (!isNameArray && cpt.name === name);\n                });\n            }\n            else {\n                // Return all components with mainType\n                result = cpts;\n            }\n\n            return filterBySubType(result, condition);\n        },\n\n        /**\n         * The interface is different from queryComponents,\n         * which is convenient for inner usage.\n         *\n         * @usage\n         * var result = findComponents(\n         *     {mainType: 'dataZoom', query: {dataZoomId: 'abc'}}\n         * );\n         * var result = findComponents(\n         *     {mainType: 'series', subType: 'pie', query: {seriesName: 'uio'}}\n         * );\n         * var result = findComponents(\n         *     {mainType: 'series'},\n         *     function (model, index) {...}\n         * );\n         * // result like [component0, componnet1, ...]\n         *\n         * @param {Object} condition\n         * @param {string} condition.mainType Mandatory.\n         * @param {string} [condition.subType] Optional.\n         * @param {Object} [condition.query] like {xxxIndex, xxxId, xxxName},\n         *        where xxx is mainType.\n         *        If query attribute is null/undefined or has no index/id/name,\n         *        do not filtering by query conditions, which is convenient for\n         *        no-payload situations or when target of action is global.\n         * @param {Function} [condition.filter] parameter: component, return boolean.\n         * @return {Array.<module:echarts/model/Component>}\n         */\n        findComponents: function (condition) {\n            var query = condition.query;\n            var mainType = condition.mainType;\n\n            var queryCond = getQueryCond(query);\n            var result = queryCond\n                ? this.queryComponents(queryCond)\n                : this._componentsMap[mainType];\n\n            return doFilter(filterBySubType(result, condition));\n\n            function getQueryCond(q) {\n                var indexAttr = mainType + 'Index';\n                var idAttr = mainType + 'Id';\n                var nameAttr = mainType + 'Name';\n                return q && (\n                        q[indexAttr] != null\n                        || q[idAttr] != null\n                        || q[nameAttr] != null\n                    )\n                    ? {\n                        mainType: mainType,\n                        // subType will be filtered finally.\n                        index: q[indexAttr],\n                        id: q[idAttr],\n                        name: q[nameAttr]\n                    }\n                    : null;\n            }\n\n            function doFilter(res) {\n                return condition.filter\n                     ? filter(res, condition.filter)\n                     : res;\n            }\n        },\n\n        /**\n         * @usage\n         * eachComponent('legend', function (legendModel, index) {\n         *     ...\n         * });\n         * eachComponent(function (componentType, model, index) {\n         *     // componentType does not include subType\n         *     // (componentType is 'xxx' but not 'xxx.aa')\n         * });\n         * eachComponent(\n         *     {mainType: 'dataZoom', query: {dataZoomId: 'abc'}},\n         *     function (model, index) {...}\n         * );\n         * eachComponent(\n         *     {mainType: 'series', subType: 'pie', query: {seriesName: 'uio'}},\n         *     function (model, index) {...}\n         * );\n         *\n         * @param {string|Object=} mainType When mainType is object, the definition\n         *                                  is the same as the method 'findComponents'.\n         * @param {Function} cb\n         * @param {*} context\n         */\n        eachComponent: function (mainType, cb, context) {\n            var componentsMap = this._componentsMap;\n\n            if (typeof mainType === 'function') {\n                context = cb;\n                cb = mainType;\n                each(componentsMap, function (components, componentType) {\n                    each(components, function (component, index) {\n                        cb.call(context, componentType, component, index);\n                    });\n                });\n            }\n            else if (zrUtil.isString(mainType)) {\n                each(componentsMap[mainType], cb, context);\n            }\n            else if (isObject(mainType)) {\n                var queryResult = this.findComponents(mainType);\n                each(queryResult, cb, context);\n            }\n        },\n\n        /**\n         * @param {string} name\n         * @return {Array.<module:echarts/model/Series>}\n         */\n        getSeriesByName: function (name) {\n            var series = this._componentsMap.series;\n            return filter(series, function (oneSeries) {\n                return oneSeries.name === name;\n            });\n        },\n\n        /**\n         * @param {number} seriesIndex\n         * @return {module:echarts/model/Series}\n         */\n        getSeriesByIndex: function (seriesIndex) {\n            return this._componentsMap.series[seriesIndex];\n        },\n\n        /**\n         * @param {string} subType\n         * @return {Array.<module:echarts/model/Series>}\n         */\n        getSeriesByType: function (subType) {\n            var series = this._componentsMap.series;\n            return filter(series, function (oneSeries) {\n                return oneSeries.subType === subType;\n            });\n        },\n\n        /**\n         * @return {Array.<module:echarts/model/Series>}\n         */\n        getSeries: function () {\n            return this._componentsMap.series.slice();\n        },\n\n        /**\n         * After filtering, series may be different\n         * frome raw series.\n         *\n         * @param {Function} cb\n         * @param {*} context\n         */\n        eachSeries: function (cb, context) {\n            assertSeriesInitialized(this);\n            each(this._seriesIndices, function (rawSeriesIndex) {\n                var series = this._componentsMap.series[rawSeriesIndex];\n                cb.call(context, series, rawSeriesIndex);\n            }, this);\n        },\n\n        /**\n         * Iterate raw series before filtered.\n         *\n         * @param {Function} cb\n         * @param {*} context\n         */\n        eachRawSeries: function (cb, context) {\n            each(this._componentsMap.series, cb, context);\n        },\n\n        /**\n         * After filtering, series may be different.\n         * frome raw series.\n         *\n         * @parma {string} subType\n         * @param {Function} cb\n         * @param {*} context\n         */\n        eachSeriesByType: function (subType, cb, context) {\n            assertSeriesInitialized(this);\n            each(this._seriesIndices, function (rawSeriesIndex) {\n                var series = this._componentsMap.series[rawSeriesIndex];\n                if (series.subType === subType) {\n                    cb.call(context, series, rawSeriesIndex);\n                }\n            }, this);\n        },\n\n        /**\n         * Iterate raw series before filtered of given type.\n         *\n         * @parma {string} subType\n         * @param {Function} cb\n         * @param {*} context\n         */\n        eachRawSeriesByType: function (subType, cb, context) {\n            return each(this.getSeriesByType(subType), cb, context);\n        },\n\n        /**\n         * @param {module:echarts/model/Series} seriesModel\n         */\n        isSeriesFiltered: function (seriesModel) {\n            assertSeriesInitialized(this);\n            return zrUtil.indexOf(this._seriesIndices, seriesModel.componentIndex) < 0;\n        },\n\n        /**\n         * @param {Function} cb\n         * @param {*} context\n         */\n        filterSeries: function (cb, context) {\n            assertSeriesInitialized(this);\n            var filteredSeries = filter(\n                this._componentsMap.series, cb, context\n            );\n            this._seriesIndices = createSeriesIndices(filteredSeries);\n        },\n\n        restoreData: function () {\n            var componentsMap = this._componentsMap;\n\n            this._seriesIndices = createSeriesIndices(componentsMap.series);\n\n            var componentTypes = [];\n            each(componentsMap, function (components, componentType) {\n                componentTypes.push(componentType);\n            });\n\n            ComponentModel.topologicalTravel(\n                componentTypes,\n                ComponentModel.getAllClassMainTypes(),\n                function (componentType, dependencies) {\n                    each(componentsMap[componentType], function (component) {\n                        component.restoreData();\n                    });\n                }\n            );\n        }\n\n    });\n\n    /**\n     * @inner\n     */\n    function mergeTheme(option, theme) {\n        zrUtil.each(theme, function (themeItem, name) {\n            // 如果有 component model 则把具体的 merge 逻辑交给该 model 处理\n            if (!ComponentModel.hasClass(name)) {\n                if (typeof themeItem === 'object') {\n                    option[name] = !option[name]\n                        ? zrUtil.clone(themeItem)\n                        : zrUtil.merge(option[name], themeItem, false);\n                }\n                else {\n                    if (option[name] == null) {\n                        option[name] = themeItem;\n                    }\n                }\n            }\n        });\n    }\n\n    function initBase(baseOption) {\n        baseOption = baseOption;\n\n        // Using OPTION_INNER_KEY to mark that this option can not be used outside,\n        // i.e. `chart.setOption(chart.getModel().option);` is forbiden.\n        this.option = {};\n        this.option[OPTION_INNER_KEY] = 1;\n\n        /**\n         * @type {Object.<string, Array.<module:echarts/model/Model>>}\n         * @private\n         */\n        this._componentsMap = {};\n\n        /**\n         * Mapping between filtered series list and raw series list.\n         * key: filtered series indices, value: raw series indices.\n         * @type {Array.<nubmer>}\n         * @private\n         */\n        this._seriesIndices = null;\n\n        mergeTheme(baseOption, this._theme.option);\n\n        // TODO Needs clone when merging to the unexisted property\n        zrUtil.merge(baseOption, globalDefault, false);\n\n        this.mergeOption(baseOption);\n    }\n\n    /**\n     * @inner\n     * @param {Array.<string>|string} types model types\n     * @return {Object} key: {string} type, value: {Array.<Object>} models\n     */\n    function getComponentsByTypes(componentsMap, types) {\n        if (!zrUtil.isArray(types)) {\n            types = types ? [types] : [];\n        }\n\n        var ret = {};\n        each(types, function (type) {\n            ret[type] = (componentsMap[type] || []).slice();\n        });\n\n        return ret;\n    }\n\n    /**\n     * @inner\n     */\n    function determineSubType(mainType, newCptOption, existComponent) {\n        var subType = newCptOption.type\n            ? newCptOption.type\n            : existComponent\n            ? existComponent.subType\n            // Use determineSubType only when there is no existComponent.\n            : ComponentModel.determineSubType(mainType, newCptOption);\n\n        // tooltip, markline, markpoint may always has no subType\n        return subType;\n    }\n\n    /**\n     * @inner\n     */\n    function createSeriesIndices(seriesModels) {\n        return map(seriesModels, function (series) {\n            return series.componentIndex;\n        }) || [];\n    }\n\n    /**\n     * @inner\n     */\n    function filterBySubType(components, condition) {\n        // Using hasOwnProperty for restrict. Consider\n        // subType is undefined in user payload.\n        return condition.hasOwnProperty('subType')\n            ? filter(components, function (cpt) {\n                return cpt.subType === condition.subType;\n            })\n            : components;\n    }\n\n    /**\n     * @inner\n     */\n    function assertSeriesInitialized(ecModel) {\n        // Components that use _seriesIndices should depends on series component,\n        // which make sure that their initialization is after series.\n        if (__DEV__) {\n            if (!ecModel._seriesIndices) {\n                throw new Error('Series has not been initialized yet.');\n            }\n        }\n    }\n\n    zrUtil.mixin(GlobalModel, __webpack_require__(352));\n\n    module.exports = GlobalModel;\n\n\n/***/ }),\n/* 402 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * ECharts option manager\n *\n * @module {echarts/model/OptionManager}\n */\n\n\n\n    var zrUtil = __webpack_require__(315);\n    var modelUtil = __webpack_require__(323);\n    var ComponentModel = __webpack_require__(327);\n    var each = zrUtil.each;\n    var clone = zrUtil.clone;\n    var map = zrUtil.map;\n    var merge = zrUtil.merge;\n\n    var QUERY_REG = /^(min|max)?(.+)$/;\n\n    /**\n     * TERM EXPLANATIONS:\n     *\n     * [option]:\n     *\n     *     An object that contains definitions of components. For example:\n     *     var option = {\n     *         title: {...},\n     *         legend: {...},\n     *         visualMap: {...},\n     *         series: [\n     *             {data: [...]},\n     *             {data: [...]},\n     *             ...\n     *         ]\n     *     };\n     *\n     * [rawOption]:\n     *\n     *     An object input to echarts.setOption. 'rawOption' may be an\n     *     'option', or may be an object contains multi-options. For example:\n     *     var option = {\n     *         baseOption: {\n     *             title: {...},\n     *             legend: {...},\n     *             series: [\n     *                 {data: [...]},\n     *                 {data: [...]},\n     *                 ...\n     *             ]\n     *         },\n     *         timeline: {...},\n     *         options: [\n     *             {title: {...}, series: {data: [...]}},\n     *             {title: {...}, series: {data: [...]}},\n     *             ...\n     *         ],\n     *         media: [\n     *             {\n     *                 query: {maxWidth: 320},\n     *                 option: {series: {x: 20}, visualMap: {show: false}}\n     *             },\n     *             {\n     *                 query: {minWidth: 320, maxWidth: 720},\n     *                 option: {series: {x: 500}, visualMap: {show: true}}\n     *             },\n     *             {\n     *                 option: {series: {x: 1200}, visualMap: {show: true}}\n     *             }\n     *         ]\n     *     };\n     *\n     * @alias module:echarts/model/OptionManager\n     * @param {module:echarts/ExtensionAPI} api\n     */\n    function OptionManager(api) {\n\n        /**\n         * @private\n         * @type {module:echarts/ExtensionAPI}\n         */\n        this._api = api;\n\n        /**\n         * @private\n         * @type {Array.<number>}\n         */\n        this._timelineOptions = [];\n\n        /**\n         * @private\n         * @type {Array.<Object>}\n         */\n        this._mediaList = [];\n\n        /**\n         * @private\n         * @type {Object}\n         */\n        this._mediaDefault;\n\n        /**\n         * -1, means default.\n         * empty means no media.\n         * @private\n         * @type {Array.<number>}\n         */\n        this._currentMediaIndices = [];\n\n        /**\n         * @private\n         * @type {Object}\n         */\n        this._optionBackup;\n\n        /**\n         * @private\n         * @type {Object}\n         */\n        this._newBaseOption;\n    }\n\n    // timeline.notMerge is not supported in ec3. Firstly there is rearly\n    // case that notMerge is needed. Secondly supporting 'notMerge' requires\n    // rawOption cloned and backuped when timeline changed, which does no\n    // good to performance. What's more, that both timeline and setOption\n    // method supply 'notMerge' brings complex and some problems.\n    // Consider this case:\n    // (step1) chart.setOption({timeline: {notMerge: false}, ...}, false);\n    // (step2) chart.setOption({timeline: {notMerge: true}, ...}, false);\n\n    OptionManager.prototype = {\n\n        constructor: OptionManager,\n\n        /**\n         * @public\n         * @param {Object} rawOption Raw option.\n         * @param {module:echarts/model/Global} ecModel\n         * @param {Array.<Function>} optionPreprocessorFuncs\n         * @return {Object} Init option\n         */\n        setOption: function (rawOption, optionPreprocessorFuncs) {\n            rawOption = clone(rawOption, true);\n\n            // FIXME\n            // 如果 timeline options 或者 media 中设置了某个属性，而baseOption中没有设置，则进行警告。\n\n            var oldOptionBackup = this._optionBackup;\n            var newParsedOption = parseRawOption.call(\n                this, rawOption, optionPreprocessorFuncs, !oldOptionBackup\n            );\n            this._newBaseOption = newParsedOption.baseOption;\n\n            // For setOption at second time (using merge mode);\n            if (oldOptionBackup) {\n                // Only baseOption can be merged.\n                mergeOption(oldOptionBackup.baseOption, newParsedOption.baseOption);\n\n                // For simplicity, timeline options and media options do not support merge,\n                // that is, if you `setOption` twice and both has timeline options, the latter\n                // timeline opitons will not be merged to the formers, but just substitude them.\n                if (newParsedOption.timelineOptions.length) {\n                    oldOptionBackup.timelineOptions = newParsedOption.timelineOptions;\n                }\n                if (newParsedOption.mediaList.length) {\n                    oldOptionBackup.mediaList = newParsedOption.mediaList;\n                }\n                if (newParsedOption.mediaDefault) {\n                    oldOptionBackup.mediaDefault = newParsedOption.mediaDefault;\n                }\n            }\n            else {\n                this._optionBackup = newParsedOption;\n            }\n        },\n\n        /**\n         * @param {boolean} isRecreate\n         * @return {Object}\n         */\n        mountOption: function (isRecreate) {\n            var optionBackup = this._optionBackup;\n\n            // TODO\n            // 如果没有reset功能则不clone。\n\n            this._timelineOptions = map(optionBackup.timelineOptions, clone);\n            this._mediaList = map(optionBackup.mediaList, clone);\n            this._mediaDefault = clone(optionBackup.mediaDefault);\n            this._currentMediaIndices = [];\n\n            return clone(isRecreate\n                // this._optionBackup.baseOption, which is created at the first `setOption`\n                // called, and is merged into every new option by inner method `mergeOption`\n                // each time `setOption` called, can be only used in `isRecreate`, because\n                // its reliability is under suspicion. In other cases option merge is\n                // performed by `model.mergeOption`.\n                ? optionBackup.baseOption : this._newBaseOption\n            );\n        },\n\n        /**\n         * @param {module:echarts/model/Global} ecModel\n         * @return {Object}\n         */\n        getTimelineOption: function (ecModel) {\n            var option;\n            var timelineOptions = this._timelineOptions;\n\n            if (timelineOptions.length) {\n                // getTimelineOption can only be called after ecModel inited,\n                // so we can get currentIndex from timelineModel.\n                var timelineModel = ecModel.getComponent('timeline');\n                if (timelineModel) {\n                    option = clone(\n                        timelineOptions[timelineModel.getCurrentIndex()],\n                        true\n                    );\n                }\n            }\n\n            return option;\n        },\n\n        /**\n         * @param {module:echarts/model/Global} ecModel\n         * @return {Array.<Object>}\n         */\n        getMediaOption: function (ecModel) {\n            var ecWidth = this._api.getWidth();\n            var ecHeight = this._api.getHeight();\n            var mediaList = this._mediaList;\n            var mediaDefault = this._mediaDefault;\n            var indices = [];\n            var result = [];\n\n            // No media defined.\n            if (!mediaList.length && !mediaDefault) {\n                return result;\n            }\n\n            // Multi media may be applied, the latter defined media has higher priority.\n            for (var i = 0, len = mediaList.length; i < len; i++) {\n                if (applyMediaQuery(mediaList[i].query, ecWidth, ecHeight)) {\n                    indices.push(i);\n                }\n            }\n\n            // FIXME\n            // 是否mediaDefault应该强制用户设置，否则可能修改不能回归。\n            if (!indices.length && mediaDefault) {\n                indices = [-1];\n            }\n\n            if (indices.length && !indicesEquals(indices, this._currentMediaIndices)) {\n                result = map(indices, function (index) {\n                    return clone(\n                        index === -1 ? mediaDefault.option : mediaList[index].option\n                    );\n                });\n            }\n            // Otherwise return nothing.\n\n            this._currentMediaIndices = indices;\n\n            return result;\n        }\n    };\n\n    function parseRawOption(rawOption, optionPreprocessorFuncs, isNew) {\n        var timelineOptions = [];\n        var mediaList = [];\n        var mediaDefault;\n        var baseOption;\n\n        // Compatible with ec2.\n        var timelineOpt = rawOption.timeline;\n\n        if (rawOption.baseOption) {\n            baseOption = rawOption.baseOption;\n        }\n\n        // For timeline\n        if (timelineOpt || rawOption.options) {\n            baseOption = baseOption || {};\n            timelineOptions = (rawOption.options || []).slice();\n        }\n\n        // For media query\n        if (rawOption.media) {\n            baseOption = baseOption || {};\n            var media = rawOption.media;\n            each(media, function (singleMedia) {\n                if (singleMedia && singleMedia.option) {\n                    if (singleMedia.query) {\n                        mediaList.push(singleMedia);\n                    }\n                    else if (!mediaDefault) {\n                        // Use the first media default.\n                        mediaDefault = singleMedia;\n                    }\n                }\n            });\n        }\n\n        // For normal option\n        if (!baseOption) {\n            baseOption = rawOption;\n        }\n\n        // Set timelineOpt to baseOption in ec3,\n        // which is convenient for merge option.\n        if (!baseOption.timeline) {\n            baseOption.timeline = timelineOpt;\n        }\n\n        // Preprocess.\n        each([baseOption].concat(timelineOptions)\n            .concat(zrUtil.map(mediaList, function (media) {\n                return media.option;\n            })),\n            function (option) {\n                each(optionPreprocessorFuncs, function (preProcess) {\n                    preProcess(option, isNew);\n                });\n            }\n        );\n\n        return {\n            baseOption: baseOption,\n            timelineOptions: timelineOptions,\n            mediaDefault: mediaDefault,\n            mediaList: mediaList\n        };\n    }\n\n    /**\n     * @see <http://www.w3.org/TR/css3-mediaqueries/#media1>\n     * Support: width, height, aspectRatio\n     * Can use max or min as prefix.\n     */\n    function applyMediaQuery(query, ecWidth, ecHeight) {\n        var realMap = {\n            width: ecWidth,\n            height: ecHeight,\n            aspectratio: ecWidth / ecHeight // lowser case for convenientce.\n        };\n\n        var applicatable = true;\n\n        zrUtil.each(query, function (value, attr) {\n            var matched = attr.match(QUERY_REG);\n\n            if (!matched || !matched[1] || !matched[2]) {\n                return;\n            }\n\n            var operator = matched[1];\n            var realAttr = matched[2].toLowerCase();\n\n            if (!compare(realMap[realAttr], value, operator)) {\n                applicatable = false;\n            }\n        });\n\n        return applicatable;\n    }\n\n    function compare(real, expect, operator) {\n        if (operator === 'min') {\n            return real >= expect;\n        }\n        else if (operator === 'max') {\n            return real <= expect;\n        }\n        else { // Equals\n            return real === expect;\n        }\n    }\n\n    function indicesEquals(indices1, indices2) {\n        // indices is always order by asc and has only finite number.\n        return indices1.join(',') === indices2.join(',');\n    }\n\n    /**\n     * Consider case:\n     * `chart.setOption(opt1);`\n     * Then user do some interaction like dataZoom, dataView changing.\n     * `chart.setOption(opt2);`\n     * Then user press 'reset button' in toolbox.\n     *\n     * After doing that all of the interaction effects should be reset, the\n     * chart should be the same as the result of invoke\n     * `chart.setOption(opt1); chart.setOption(opt2);`.\n     *\n     * Although it is not able ensure that\n     * `chart.setOption(opt1); chart.setOption(opt2);` is equivalents to\n     * `chart.setOption(merge(opt1, opt2));` exactly,\n     * this might be the only simple way to implement that feature.\n     *\n     * MEMO: We've considered some other approaches:\n     * 1. Each model handle its self restoration but not uniform treatment.\n     *     (Too complex in logic and error-prone)\n     * 2. Use a shadow ecModel. (Performace expensive)\n     */\n    function mergeOption(oldOption, newOption) {\n        newOption = newOption || {};\n\n        each(newOption, function (newCptOpt, mainType) {\n            if (newCptOpt == null) {\n                return;\n            }\n\n            var oldCptOpt = oldOption[mainType];\n\n            if (!ComponentModel.hasClass(mainType)) {\n                oldOption[mainType] = merge(oldCptOpt, newCptOpt, true);\n            }\n            else {\n                newCptOpt = modelUtil.normalizeToArray(newCptOpt);\n                oldCptOpt = modelUtil.normalizeToArray(oldCptOpt);\n\n                var mapResult = modelUtil.mappingToExists(oldCptOpt, newCptOpt);\n\n                oldOption[mainType] = map(mapResult, function (item) {\n                    return (item.option && item.exist)\n                        ? merge(item.exist, item.option, true)\n                        : (item.exist || item.option);\n                });\n            }\n        });\n    }\n\n    module.exports = OptionManager;\n\n\n/***/ }),\n/* 403 */\n/***/ (function(module, exports) {\n\n\n    var platform = '';\n    // Navigator not exists in node\n    if (typeof navigator !== 'undefined') {\n        platform = navigator.platform || '';\n    }\n    module.exports = {\n        // 全图默认背景\n        // backgroundColor: 'rgba(0,0,0,0)',\n\n        // https://dribbble.com/shots/1065960-Infographic-Pie-chart-visualization\n        // color: ['#5793f3', '#d14a61', '#fd9c35', '#675bba', '#fec42c', '#dd4444', '#d4df5a', '#cd4870'],\n        // 浅色\n        // color: ['#bcd3bb', '#e88f70', '#edc1a5', '#9dc5c8', '#e1e8c8', '#7b7c68', '#e5b5b5', '#f0b489', '#928ea8', '#bda29a'],\n        // color: ['#cc5664', '#9bd6ec', '#ea946e', '#8acaaa', '#f1ec64', '#ee8686', '#a48dc1', '#5da6bc', '#b9dcae'],\n        // 深色\n        color: ['#c23531','#2f4554', '#61a0a8', '#d48265', '#91c7ae','#749f83',  '#ca8622', '#bda29a','#6e7074', '#546570', '#c4ccd3'],\n\n        // 默认需要 Grid 配置项\n        // grid: {},\n        // 主题，主题\n        textStyle: {\n            // color: '#000',\n            // decoration: 'none',\n            // PENDING\n            fontFamily: platform.match(/^Win/) ? 'Microsoft YaHei' : 'sans-serif',\n            // fontFamily: 'Arial, Verdana, sans-serif',\n            fontSize: 12,\n            fontStyle: 'normal',\n            fontWeight: 'normal'\n        },\n\n        // http://blogs.adobe.com/webplatform/2014/02/24/using-blend-modes-in-html-canvas/\n        // https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation\n        // Default is source-over\n        blendMode: null,\n\n        animation: true,\n        animationDuration: 1000,\n        animationDurationUpdate: 300,\n        animationEasing: 'exponentialOut',\n        animationEasingUpdate: 'cubicOut',\n\n        animationThreshold: 2000,\n        // Configuration for progressive/incremental rendering\n        progressiveThreshold: 3000,\n        progressive: 400,\n\n        // Threshold of if use single hover layer to optimize.\n        // It is recommended that `hoverLayerThreshold` is equivalent to or less than\n        // `progressiveThreshold`, otherwise hover will cause restart of progressive,\n        // which is unexpected.\n        // see example <echarts/test/heatmap-large.html>.\n        hoverLayerThreshold: 3000\n    };\n\n\n/***/ }),\n/* 404 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\n    module.exports = {\n        getAreaStyle: __webpack_require__(339)(\n            [\n                ['fill', 'color'],\n                ['shadowBlur'],\n                ['shadowOffsetX'],\n                ['shadowOffsetY'],\n                ['opacity'],\n                ['shadowColor']\n            ]\n        )\n    };\n\n\n/***/ }),\n/* 405 */\n/***/ (function(module, exports) {\n\n\n\n    module.exports = {\n        getBoxLayoutParams: function () {\n            return {\n                left: this.get('left'),\n                top: this.get('top'),\n                right: this.get('right'),\n                bottom: this.get('bottom'),\n                width: this.get('width'),\n                height: this.get('height')\n            };\n        }\n    };\n\n\n/***/ }),\n/* 406 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\n    var getItemStyle = __webpack_require__(339)(\n        [\n            ['fill', 'color'],\n            ['stroke', 'borderColor'],\n            ['lineWidth', 'borderWidth'],\n            ['opacity'],\n            ['shadowBlur'],\n            ['shadowOffsetX'],\n            ['shadowOffsetY'],\n            ['shadowColor'],\n            ['textPosition'],\n            ['textAlign']\n        ]\n    );\n    module.exports = {\n        getItemStyle: function (excludes) {\n            var style = getItemStyle.call(this, excludes);\n            var lineDash = this.getBorderLineDash();\n            lineDash && (style.lineDash = lineDash);\n            return style;\n        },\n\n        getBorderLineDash: function () {\n            var lineType = this.get('borderType');\n            return (lineType === 'solid' || lineType == null) ? null\n                : (lineType === 'dashed' ? [5, 5] : [1, 1]);\n        }\n    };\n\n\n/***/ }),\n/* 407 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\n    var getLineStyle = __webpack_require__(339)(\n        [\n            ['lineWidth', 'width'],\n            ['stroke', 'color'],\n            ['opacity'],\n            ['shadowBlur'],\n            ['shadowOffsetX'],\n            ['shadowOffsetY'],\n            ['shadowColor']\n        ]\n    );\n    module.exports = {\n        getLineStyle: function (excludes) {\n            var style = getLineStyle.call(this, excludes);\n            var lineDash = this.getLineDash(style.lineWidth);\n            lineDash && (style.lineDash = lineDash);\n            return style;\n        },\n\n        getLineDash: function (lineWidth) {\n            if (lineWidth == null) {\n                lineWidth = 1;\n            }\n            var lineType = this.get('type');\n            var dotSize = Math.max(lineWidth, 2);\n            var dashSize = lineWidth * 4;\n            return (lineType === 'solid' || lineType == null) ? null\n                : (lineType === 'dashed' ? [dashSize, dashSize] : [dotSize, dotSize]);\n        }\n    };\n\n\n/***/ }),\n/* 408 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var textContain = __webpack_require__(332);\n\n    function getShallow(model, path) {\n        return model && model.getShallow(path);\n    }\n\n    module.exports = {\n        /**\n         * Get color property or get color from option.textStyle.color\n         * @return {string}\n         */\n        getTextColor: function () {\n            var ecModel = this.ecModel;\n            return this.getShallow('color')\n                || (ecModel && ecModel.get('textStyle.color'));\n        },\n\n        /**\n         * Create font string from fontStyle, fontWeight, fontSize, fontFamily\n         * @return {string}\n         */\n        getFont: function () {\n            var ecModel = this.ecModel;\n            var gTextStyleModel = ecModel && ecModel.getModel('textStyle');\n            return [\n                // FIXME in node-canvas fontWeight is before fontStyle\n                this.getShallow('fontStyle') || getShallow(gTextStyleModel, 'fontStyle'),\n                this.getShallow('fontWeight') || getShallow(gTextStyleModel, 'fontWeight'),\n                (this.getShallow('fontSize') || getShallow(gTextStyleModel, 'fontSize') || 12) + 'px',\n                this.getShallow('fontFamily') || getShallow(gTextStyleModel, 'fontFamily') || 'sans-serif'\n            ].join(' ');\n        },\n\n        getTextRect: function (text) {\n            return textContain.getBoundingRect(\n                text,\n                this.getFont(),\n                this.getShallow('align'),\n                this.getShallow('baseline')\n            );\n        },\n\n        truncateText: function (text, containerWidth, ellipsis, options) {\n            return textContain.truncateText(\n                text, containerWidth, this.getFont(), ellipsis, options\n            );\n        }\n    };\n\n\n/***/ }),\n/* 409 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// Compatitable with 2.0\n\n\n    var zrUtil = __webpack_require__(315);\n    var compatStyle = __webpack_require__(410);\n\n    function get(opt, path) {\n        path = path.split(',');\n        var obj = opt;\n        for (var i = 0; i < path.length; i++) {\n            obj = obj && obj[path[i]];\n            if (obj == null) {\n                break;\n            }\n        }\n        return obj;\n    }\n\n    function set(opt, path, val, overwrite) {\n        path = path.split(',');\n        var obj = opt;\n        var key;\n        for (var i = 0; i < path.length - 1; i++) {\n            key = path[i];\n            if (obj[key] == null) {\n                obj[key] = {};\n            }\n            obj = obj[key];\n        }\n        if (overwrite || obj[path[i]] == null) {\n            obj[path[i]] = val;\n        }\n    }\n\n    function compatLayoutProperties(option) {\n        each(LAYOUT_PROPERTIES, function (prop) {\n            if (prop[0] in option && !(prop[1] in option)) {\n                option[prop[1]] = option[prop[0]];\n            }\n        });\n    }\n\n    var LAYOUT_PROPERTIES = [\n        ['x', 'left'], ['y', 'top'], ['x2', 'right'], ['y2', 'bottom']\n    ];\n\n    var COMPATITABLE_COMPONENTS = [\n        'grid', 'geo', 'parallel', 'legend', 'toolbox', 'title', 'visualMap', 'dataZoom', 'timeline'\n    ];\n\n    var COMPATITABLE_SERIES = [\n        'bar', 'boxplot', 'candlestick', 'chord', 'effectScatter',\n        'funnel', 'gauge', 'lines', 'graph', 'heatmap', 'line', 'map', 'parallel',\n        'pie', 'radar', 'sankey', 'scatter', 'treemap'\n    ];\n\n    var each = zrUtil.each;\n\n    module.exports = function (option) {\n        each(option.series, function (seriesOpt) {\n            if (!zrUtil.isObject(seriesOpt)) {\n                return;\n            }\n\n            var seriesType = seriesOpt.type;\n\n            compatStyle(seriesOpt);\n\n            if (seriesType === 'pie' || seriesType === 'gauge') {\n                if (seriesOpt.clockWise != null) {\n                    seriesOpt.clockwise = seriesOpt.clockWise;\n                }\n            }\n            if (seriesType === 'gauge') {\n                var pointerColor = get(seriesOpt, 'pointer.color');\n                pointerColor != null\n                    && set(seriesOpt, 'itemStyle.normal.color', pointerColor);\n            }\n\n            for (var i = 0; i < COMPATITABLE_SERIES.length; i++) {\n                if (COMPATITABLE_SERIES[i] === seriesOpt.type) {\n                    compatLayoutProperties(seriesOpt);\n                    break;\n                }\n            }\n        });\n\n        // dataRange has changed to visualMap\n        if (option.dataRange) {\n            option.visualMap = option.dataRange;\n        }\n\n        each(COMPATITABLE_COMPONENTS, function (componentName) {\n            var options = option[componentName];\n            if (options) {\n                if (!zrUtil.isArray(options)) {\n                    options = [options];\n                }\n                each(options, function (option) {\n                    compatLayoutProperties(option);\n                });\n            }\n        });\n    };\n\n\n/***/ }),\n/* 410 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var zrUtil = __webpack_require__(315);\n\n    var POSSIBLE_STYLES = [\n        'areaStyle', 'lineStyle', 'nodeStyle', 'linkStyle',\n        'chordStyle', 'label', 'labelLine'\n    ];\n\n    function compatItemStyle(opt) {\n        var itemStyleOpt = opt && opt.itemStyle;\n        if (itemStyleOpt) {\n            zrUtil.each(POSSIBLE_STYLES, function (styleName) {\n                var normalItemStyleOpt = itemStyleOpt.normal;\n                var emphasisItemStyleOpt = itemStyleOpt.emphasis;\n                if (normalItemStyleOpt && normalItemStyleOpt[styleName]) {\n                    opt[styleName] = opt[styleName] || {};\n                    if (!opt[styleName].normal) {\n                        opt[styleName].normal = normalItemStyleOpt[styleName];\n                    }\n                    else {\n                        zrUtil.merge(opt[styleName].normal, normalItemStyleOpt[styleName]);\n                    }\n                    normalItemStyleOpt[styleName] = null;\n                }\n                if (emphasisItemStyleOpt && emphasisItemStyleOpt[styleName]) {\n                    opt[styleName] = opt[styleName] || {};\n                    if (!opt[styleName].emphasis) {\n                        opt[styleName].emphasis = emphasisItemStyleOpt[styleName];\n                    }\n                    else {\n                        zrUtil.merge(opt[styleName].emphasis, emphasisItemStyleOpt[styleName]);\n                    }\n                    emphasisItemStyleOpt[styleName] = null;\n                }\n            });\n        }\n    }\n\n    module.exports = function (seriesOpt) {\n        if (!seriesOpt) {\n            return;\n        }\n        compatItemStyle(seriesOpt);\n        compatItemStyle(seriesOpt.markPoint);\n        compatItemStyle(seriesOpt.markLine);\n        var data = seriesOpt.data;\n        if (data) {\n            for (var i = 0; i < data.length; i++) {\n                compatItemStyle(data[i]);\n            }\n            // mark point data\n            var markPoint = seriesOpt.markPoint;\n            if (markPoint && markPoint.data) {\n                var mpData = markPoint.data;\n                for (var i = 0; i < mpData.length; i++) {\n                    compatItemStyle(mpData[i]);\n                }\n            }\n            // mark line data\n            var markLine = seriesOpt.markLine;\n            if (markLine && markLine.data) {\n                var mlData = markLine.data;\n                for (var i = 0; i < mlData.length; i++) {\n                    if (zrUtil.isArray(mlData[i])) {\n                        compatItemStyle(mlData[i][0]);\n                        compatItemStyle(mlData[i][1]);\n                    }\n                    else {\n                        compatItemStyle(mlData[i]);\n                    }\n                }\n            }\n        }\n    };\n\n\n/***/ }),\n/* 411 */\n/***/ (function(module, exports) {\n\n\n    var samplers = {\n        average: function (frame) {\n            var sum = 0;\n            var count = 0;\n            for (var i = 0; i < frame.length; i++) {\n                if (!isNaN(frame[i])) {\n                    sum += frame[i];\n                    count++;\n                }\n            }\n            // Return NaN if count is 0\n            return count === 0 ? NaN : sum / count;\n        },\n        sum: function (frame) {\n            var sum = 0;\n            for (var i = 0; i < frame.length; i++) {\n                // Ignore NaN\n                sum += frame[i] || 0;\n            }\n            return sum;\n        },\n        max: function (frame) {\n            var max = -Infinity;\n            for (var i = 0; i < frame.length; i++) {\n                frame[i] > max && (max = frame[i]);\n            }\n            return max;\n        },\n        min: function (frame) {\n            var min = Infinity;\n            for (var i = 0; i < frame.length; i++) {\n                frame[i] < min && (min = frame[i]);\n            }\n            return min;\n        },\n        // TODO\n        // Median\n        nearest: function (frame) {\n            return frame[0];\n        }\n    };\n\n    var indexSampler = function (frame, value) {\n        return Math.round(frame.length / 2);\n    };\n    module.exports = function (seriesType, ecModel, api) {\n        ecModel.eachSeriesByType(seriesType, function (seriesModel) {\n            var data = seriesModel.getData();\n            var sampling = seriesModel.get('sampling');\n            var coordSys = seriesModel.coordinateSystem;\n            // Only cartesian2d support down sampling\n            if (coordSys.type === 'cartesian2d' && sampling) {\n                var baseAxis = coordSys.getBaseAxis();\n                var valueAxis = coordSys.getOtherAxis(baseAxis);\n                var extent = baseAxis.getExtent();\n                // Coordinste system has been resized\n                var size = extent[1] - extent[0];\n                var rate = Math.round(data.count() / size);\n                if (rate > 1) {\n                    var sampler;\n                    if (typeof sampling === 'string') {\n                        sampler = samplers[sampling];\n                    }\n                    else if (typeof sampling === 'function') {\n                        sampler = sampling;\n                    }\n                    if (sampler) {\n                        data = data.downSample(\n                            valueAxis.dim, 1 / rate, sampler, indexSampler\n                        );\n                        seriesModel.setData(data);\n                    }\n                }\n            }\n        }, this);\n    };\n\n\n/***/ }),\n/* 412 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * Log scale\n * @module echarts/scale/Log\n */\n\n\n    var zrUtil = __webpack_require__(315);\n    var Scale = __webpack_require__(334);\n    var numberUtil = __webpack_require__(318);\n\n    // Use some method of IntervalScale\n    var IntervalScale = __webpack_require__(342);\n\n    var scaleProto = Scale.prototype;\n    var intervalScaleProto = IntervalScale.prototype;\n\n    var getPrecisionSafe = numberUtil.getPrecisionSafe;\n    var roundingErrorFix = numberUtil.round;\n\n    var mathFloor = Math.floor;\n    var mathCeil = Math.ceil;\n    var mathPow = Math.pow;\n\n    var mathLog = Math.log;\n\n    var LogScale = Scale.extend({\n\n        type: 'log',\n\n        base: 10,\n\n        $constructor: function () {\n            Scale.apply(this, arguments);\n            this._originalScale = new IntervalScale();\n        },\n\n        /**\n         * @return {Array.<number>}\n         */\n        getTicks: function () {\n            var originalScale = this._originalScale;\n            var extent = this._extent;\n            var originalExtent = originalScale.getExtent();\n\n            return zrUtil.map(intervalScaleProto.getTicks.call(this), function (val) {\n                var powVal = numberUtil.round(mathPow(this.base, val));\n\n                // Fix #4158\n                powVal = (val === extent[0] && originalScale.__fixMin)\n                    ? fixRoundingError(powVal, originalExtent[0])\n                    : powVal;\n                powVal = (val === extent[1] && originalScale.__fixMax)\n                    ? fixRoundingError(powVal, originalExtent[1])\n                    : powVal;\n\n                return powVal;\n            }, this);\n        },\n\n        /**\n         * @param {number} val\n         * @return {string}\n         */\n        getLabel: intervalScaleProto.getLabel,\n\n        /**\n         * @param  {number} val\n         * @return {number}\n         */\n        scale: function (val) {\n            val = scaleProto.scale.call(this, val);\n            return mathPow(this.base, val);\n        },\n\n        /**\n         * @param {number} start\n         * @param {number} end\n         */\n        setExtent: function (start, end) {\n            var base = this.base;\n            start = mathLog(start) / mathLog(base);\n            end = mathLog(end) / mathLog(base);\n            intervalScaleProto.setExtent.call(this, start, end);\n        },\n\n        /**\n         * @return {number} end\n         */\n        getExtent: function () {\n            var base = this.base;\n            var extent = scaleProto.getExtent.call(this);\n            extent[0] = mathPow(base, extent[0]);\n            extent[1] = mathPow(base, extent[1]);\n\n            // Fix #4158\n            var originalScale = this._originalScale;\n            var originalExtent = originalScale.getExtent();\n            originalScale.__fixMin && (extent[0] = fixRoundingError(extent[0], originalExtent[0]));\n            originalScale.__fixMax && (extent[1] = fixRoundingError(extent[1], originalExtent[1]));\n\n            return extent;\n        },\n\n        /**\n         * @param  {Array.<number>} extent\n         */\n        unionExtent: function (extent) {\n            this._originalScale.unionExtent(extent);\n\n            var base = this.base;\n            extent[0] = mathLog(extent[0]) / mathLog(base);\n            extent[1] = mathLog(extent[1]) / mathLog(base);\n            scaleProto.unionExtent.call(this, extent);\n        },\n\n        /**\n         * @override\n         */\n        unionExtentFromData: function (data, dim) {\n            this.unionExtent(data.getDataExtent(dim, true, function (val) {\n                return val > 0;\n            }));\n        },\n\n        /**\n         * Update interval and extent of intervals for nice ticks\n         * @param  {number} [approxTickNum = 10] Given approx tick number\n         */\n        niceTicks: function (approxTickNum) {\n            approxTickNum = approxTickNum || 10;\n            var extent = this._extent;\n            var span = extent[1] - extent[0];\n            if (span === Infinity || span <= 0) {\n                return;\n            }\n\n            var interval = numberUtil.quantity(span);\n            var err = approxTickNum / span * interval;\n\n            // Filter ticks to get closer to the desired count.\n            if (err <= 0.5) {\n                interval *= 10;\n            }\n\n            // Interval should be integer\n            while (!isNaN(interval) && Math.abs(interval) < 1 && Math.abs(interval) > 0) {\n                interval *= 10;\n            }\n\n            var niceExtent = [\n                numberUtil.round(mathCeil(extent[0] / interval) * interval),\n                numberUtil.round(mathFloor(extent[1] / interval) * interval)\n            ];\n\n            this._interval = interval;\n            this._niceExtent = niceExtent;\n        },\n\n        /**\n         * Nice extent.\n         * @param {number} [approxTickNum = 10] Given approx tick number\n         * @param {boolean} [fixMin=false]\n         * @param {boolean} [fixMax=false]\n         */\n        niceExtent: function (splitNumber, fixMin, fixMax) {\n            intervalScaleProto.niceExtent.call(this, splitNumber, fixMin, fixMax);\n\n            var originalScale = this._originalScale;\n            originalScale.__fixMin = fixMin;\n            originalScale.__fixMax = fixMax;\n        }\n\n    });\n\n    zrUtil.each(['contain', 'normalize'], function (methodName) {\n        LogScale.prototype[methodName] = function (val) {\n            val = mathLog(val) / mathLog(this.base);\n            return scaleProto[methodName].call(this, val);\n        };\n    });\n\n    LogScale.create = function () {\n        return new LogScale();\n    };\n\n    function fixRoundingError(val, originalVal) {\n        return roundingErrorFix(val, getPrecisionSafe(originalVal));\n    }\n\n    module.exports = LogScale;\n\n\n/***/ }),\n/* 413 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * Linear continuous scale\n * @module echarts/coord/scale/Ordinal\n *\n * http://en.wikipedia.org/wiki/Level_of_measurement\n */\n\n// FIXME only one data\n\n\n    var zrUtil = __webpack_require__(315);\n    var Scale = __webpack_require__(334);\n\n    var scaleProto = Scale.prototype;\n\n    var OrdinalScale = Scale.extend({\n\n        type: 'ordinal',\n\n        init: function (data, extent) {\n            this._data = data;\n            this._extent = extent || [0, data.length - 1];\n        },\n\n        parse: function (val) {\n            return typeof val === 'string'\n                ? zrUtil.indexOf(this._data, val)\n                // val might be float.\n                : Math.round(val);\n        },\n\n        contain: function (rank) {\n            rank = this.parse(rank);\n            return scaleProto.contain.call(this, rank)\n                && this._data[rank] != null;\n        },\n\n        /**\n         * Normalize given rank or name to linear [0, 1]\n         * @param {number|string} [val]\n         * @return {number}\n         */\n        normalize: function (val) {\n            return scaleProto.normalize.call(this, this.parse(val));\n        },\n\n        scale: function (val) {\n            return Math.round(scaleProto.scale.call(this, val));\n        },\n\n        /**\n         * @return {Array}\n         */\n        getTicks: function () {\n            var ticks = [];\n            var extent = this._extent;\n            var rank = extent[0];\n\n            while (rank <= extent[1]) {\n                ticks.push(rank);\n                rank++;\n            }\n\n            return ticks;\n        },\n\n        /**\n         * Get item on rank n\n         * @param {number} n\n         * @return {string}\n         */\n        getLabel: function (n) {\n            return this._data[n];\n        },\n\n        /**\n         * @return {number}\n         */\n        count: function () {\n            return this._extent[1] - this._extent[0] + 1;\n        },\n\n        /**\n         * @override\n         */\n        unionExtentFromData: function (data, dim) {\n            this.unionExtent(data.getDataExtent(dim, false));\n        },\n\n        niceTicks: zrUtil.noop,\n        niceExtent: zrUtil.noop\n    });\n\n    /**\n     * @return {module:echarts/scale/Time}\n     */\n    OrdinalScale.create = function () {\n        return new OrdinalScale();\n    };\n\n    module.exports = OrdinalScale;\n\n\n/***/ }),\n/* 414 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * Interval scale\n * @module echarts/coord/scale/Time\n */\n\n\n\n    var zrUtil = __webpack_require__(315);\n    var numberUtil = __webpack_require__(318);\n    var formatUtil = __webpack_require__(322);\n\n    var IntervalScale = __webpack_require__(342);\n\n    var intervalScaleProto = IntervalScale.prototype;\n\n    var mathCeil = Math.ceil;\n    var mathFloor = Math.floor;\n    var ONE_SECOND = 1000;\n    var ONE_MINUTE = ONE_SECOND * 60;\n    var ONE_HOUR = ONE_MINUTE * 60;\n    var ONE_DAY = ONE_HOUR * 24;\n\n    // FIXME 公用？\n    var bisect = function (a, x, lo, hi) {\n        while (lo < hi) {\n            var mid = lo + hi >>> 1;\n            if (a[mid][2] < x) {\n                lo = mid + 1;\n            }\n            else {\n                hi  = mid;\n            }\n        }\n        return lo;\n    };\n\n    /**\n     * @alias module:echarts/coord/scale/Time\n     * @constructor\n     */\n    var TimeScale = IntervalScale.extend({\n        type: 'time',\n\n        // Overwrite\n        getLabel: function (val) {\n            var stepLvl = this._stepLvl;\n\n            var date = new Date(val);\n\n            return formatUtil.formatTime(stepLvl[0], date);\n        },\n\n        // Overwrite\n        niceExtent: function (approxTickNum, fixMin, fixMax) {\n            var extent = this._extent;\n            // If extent start and end are same, expand them\n            if (extent[0] === extent[1]) {\n                // Expand extent\n                extent[0] -= ONE_DAY;\n                extent[1] += ONE_DAY;\n            }\n            // If there are no data and extent are [Infinity, -Infinity]\n            if (extent[1] === -Infinity && extent[0] === Infinity) {\n                var d = new Date();\n                extent[1] = new Date(d.getFullYear(), d.getMonth(), d.getDate());\n                extent[0] = extent[1] - ONE_DAY;\n            }\n\n            this.niceTicks(approxTickNum);\n\n            // var extent = this._extent;\n            var interval = this._interval;\n\n            if (!fixMin) {\n                extent[0] = numberUtil.round(mathFloor(extent[0] / interval) * interval);\n            }\n            if (!fixMax) {\n                extent[1] = numberUtil.round(mathCeil(extent[1] / interval) * interval);\n            }\n        },\n\n        // Overwrite\n        niceTicks: function (approxTickNum) {\n            approxTickNum = approxTickNum || 10;\n\n            var extent = this._extent;\n            var span = extent[1] - extent[0];\n            var approxInterval = span / approxTickNum;\n            var scaleLevelsLen = scaleLevels.length;\n            var idx = bisect(scaleLevels, approxInterval, 0, scaleLevelsLen);\n\n            var level = scaleLevels[Math.min(idx, scaleLevelsLen - 1)];\n            var interval = level[2];\n            // Same with interval scale if span is much larger than 1 year\n            if (level[0] === 'year') {\n                var yearSpan = span / interval;\n\n                // From \"Nice Numbers for Graph Labels\" of Graphic Gems\n                // var niceYearSpan = numberUtil.nice(yearSpan, false);\n                var yearStep = numberUtil.nice(yearSpan / approxTickNum, true);\n\n                interval *= yearStep;\n            }\n\n            var niceExtent = [\n                mathCeil(extent[0] / interval) * interval,\n                mathFloor(extent[1] / interval) * interval\n            ];\n\n            this._stepLvl = level;\n            // Interval will be used in getTicks\n            this._interval = interval;\n            this._niceExtent = niceExtent;\n        },\n\n        parse: function (val) {\n            // val might be float.\n            return +numberUtil.parseDate(val);\n        }\n    });\n\n    zrUtil.each(['contain', 'normalize'], function (methodName) {\n        TimeScale.prototype[methodName] = function (val) {\n            return intervalScaleProto[methodName].call(this, this.parse(val));\n        };\n    });\n\n    // Steps from d3\n    var scaleLevels = [\n        // Format       step    interval\n        ['hh:mm:ss',    1,      ONE_SECOND],           // 1s\n        ['hh:mm:ss',    5,      ONE_SECOND * 5],       // 5s\n        ['hh:mm:ss',    10,     ONE_SECOND * 10],      // 10s\n        ['hh:mm:ss',    15,     ONE_SECOND * 15],      // 15s\n        ['hh:mm:ss',    30,     ONE_SECOND * 30],      // 30s\n        ['hh:mm\\nMM-dd',1,      ONE_MINUTE],          // 1m\n        ['hh:mm\\nMM-dd',5,      ONE_MINUTE * 5],      // 5m\n        ['hh:mm\\nMM-dd',10,     ONE_MINUTE * 10],     // 10m\n        ['hh:mm\\nMM-dd',15,     ONE_MINUTE * 15],     // 15m\n        ['hh:mm\\nMM-dd',30,     ONE_MINUTE * 30],     // 30m\n        ['hh:mm\\nMM-dd',1,      ONE_HOUR],        // 1h\n        ['hh:mm\\nMM-dd',2,      ONE_HOUR * 2],    // 2h\n        ['hh:mm\\nMM-dd',6,      ONE_HOUR * 6],    // 6h\n        ['hh:mm\\nMM-dd',12,     ONE_HOUR * 12],   // 12h\n        ['MM-dd\\nyyyy', 1,      ONE_DAY],   // 1d\n        ['week',        7,      ONE_DAY * 7],        // 7d\n        ['month',       1,      ONE_DAY * 31],       // 1M\n        ['quarter',     3,      ONE_DAY * 380 / 4],  // 3M\n        ['half-year',   6,      ONE_DAY * 380 / 2],  // 6M\n        ['year',        1,      ONE_DAY * 380]       // 1Y\n    ];\n\n    /**\n     * @return {module:echarts/scale/Time}\n     */\n    TimeScale.create = function () {\n        return new TimeScale();\n    };\n\n    module.exports = TimeScale;\n\n\n/***/ }),\n/* 415 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\n    var Gradient = __webpack_require__(346);\n    module.exports = function (ecModel) {\n        function encodeColor(seriesModel) {\n            var colorAccessPath = (seriesModel.visualColorAccessPath || 'itemStyle.normal.color').split('.');\n            var data = seriesModel.getData();\n            var color = seriesModel.get(colorAccessPath) // Set in itemStyle\n                || seriesModel.getColorFromPalette(seriesModel.get('name'));  // Default color\n\n            // FIXME Set color function or use the platte color\n            data.setVisual('color', color);\n\n            // Only visible series has each data be visual encoded\n            if (!ecModel.isSeriesFiltered(seriesModel)) {\n                if (typeof color === 'function' && !(color instanceof Gradient)) {\n                    data.each(function (idx) {\n                        data.setItemVisual(\n                            idx, 'color', color(seriesModel.getDataParams(idx))\n                        );\n                    });\n                }\n\n                // itemStyle in each data item\n                data.each(function (idx) {\n                    var itemModel = data.getItemModel(idx);\n                    var color = itemModel.get(colorAccessPath, true);\n                    if (color != null) {\n                        data.setItemVisual(idx, 'color', color);\n                    }\n                });\n            }\n        }\n        ecModel.eachRawSeries(encodeColor);\n    };\n\n\n/***/ }),\n/* 416 */\n/***/ (function(module, exports) {\n\n\n\n    module.exports = function (seriesType, defaultSymbolType, legendSymbol, ecModel, api) {\n\n        // Encoding visual for all series include which is filtered for legend drawing\n        ecModel.eachRawSeriesByType(seriesType, function (seriesModel) {\n            var data = seriesModel.getData();\n\n            var symbolType = seriesModel.get('symbol') || defaultSymbolType;\n            var symbolSize = seriesModel.get('symbolSize');\n\n            data.setVisual({\n                legendSymbol: legendSymbol || symbolType,\n                symbol: symbolType,\n                symbolSize: symbolSize\n            });\n\n            // Only visible series has each data be visual encoded\n            if (!ecModel.isSeriesFiltered(seriesModel)) {\n                if (typeof symbolSize === 'function') {\n                    data.each(function (idx) {\n                        var rawValue = seriesModel.getRawValue(idx);\n                        // FIXME\n                        var params = seriesModel.getDataParams(idx);\n                        data.setItemVisual(idx, 'symbolSize', symbolSize(rawValue, params));\n                    });\n                }\n                data.each(function (idx) {\n                    var itemModel = data.getItemModel(idx);\n                    var itemSymbolType = itemModel.getShallow('symbol', true);\n                    var itemSymbolSize = itemModel.getShallow('symbolSize', true);\n                    // If has item symbol\n                    if (itemSymbolType != null) {\n                        data.setItemVisual(idx, 'symbol', itemSymbolType);\n                    }\n                    if (itemSymbolSize != null) {\n                        // PENDING Transform symbolSize ?\n                        data.setItemVisual(idx, 'symbolSize', itemSymbolSize);\n                    }\n                });\n            }\n        });\n    };\n\n\n/***/ }),\n/* 417 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * Handler\n * @module zrender/Handler\n * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)\n *         errorrik (errorrik@gmail.com)\n *         pissang (shenyi.914@gmail.com)\n */\n\n\n    var util = __webpack_require__(315);\n    var Draggable = __webpack_require__(450);\n\n    var Eventful = __webpack_require__(331);\n\n    var SILENT = 'silent';\n\n    function makeEventPacket(eveType, targetInfo, event) {\n        return {\n            type: eveType,\n            event: event,\n            // target can only be an element that is not silent.\n            target: targetInfo.target,\n            // topTarget can be a silent element.\n            topTarget: targetInfo.topTarget,\n            cancelBubble: false,\n            offsetX: event.zrX,\n            offsetY: event.zrY,\n            gestureEvent: event.gestureEvent,\n            pinchX: event.pinchX,\n            pinchY: event.pinchY,\n            pinchScale: event.pinchScale,\n            wheelDelta: event.zrDelta,\n            zrByTouch: event.zrByTouch\n        };\n    }\n\n    function EmptyProxy () {}\n    EmptyProxy.prototype.dispose = function () {};\n\n    var handlerNames = [\n        'click', 'dblclick', 'mousewheel', 'mouseout',\n        'mouseup', 'mousedown', 'mousemove', 'contextmenu'\n    ];\n    /**\n     * @alias module:zrender/Handler\n     * @constructor\n     * @extends module:zrender/mixin/Eventful\n     * @param {module:zrender/Storage} storage Storage instance.\n     * @param {module:zrender/Painter} painter Painter instance.\n     * @param {module:zrender/dom/HandlerProxy} proxy HandlerProxy instance.\n     * @param {HTMLElement} painterRoot painter.root (not painter.getViewportRoot()).\n     */\n    var Handler = function(storage, painter, proxy, painterRoot) {\n        Eventful.call(this);\n\n        this.storage = storage;\n\n        this.painter = painter;\n\n        this.painterRoot = painterRoot;\n\n        proxy = proxy || new EmptyProxy();\n\n        /**\n         * Proxy of event. can be Dom, WebGLSurface, etc.\n         */\n        this.proxy = proxy;\n\n        // Attach handler\n        proxy.handler = this;\n\n        /**\n         * {target, topTarget}\n         * @private\n         * @type {Object}\n         */\n        this._hovered = {};\n\n        /**\n         * @private\n         * @type {Date}\n         */\n        this._lastTouchMoment;\n\n        /**\n         * @private\n         * @type {number}\n         */\n        this._lastX;\n\n        /**\n         * @private\n         * @type {number}\n         */\n        this._lastY;\n\n\n        Draggable.call(this);\n\n        util.each(handlerNames, function (name) {\n            proxy.on && proxy.on(name, this[name], this);\n        }, this);\n    };\n\n    Handler.prototype = {\n\n        constructor: Handler,\n\n        mousemove: function (event) {\n            var x = event.zrX;\n            var y = event.zrY;\n\n            var lastHovered = this._hovered;\n            var hovered = this._hovered = this.findHover(x, y);\n            var hoveredTarget = hovered.target;\n            var lastHoveredTarget = lastHovered.target;\n\n            var proxy = this.proxy;\n            proxy.setCursor && proxy.setCursor(hoveredTarget ? hoveredTarget.cursor : 'default');\n\n            // Mouse out on previous hovered element\n            if (lastHoveredTarget && hoveredTarget !== lastHoveredTarget && lastHoveredTarget.__zr) {\n                this.dispatchToElement(lastHovered, 'mouseout', event);\n            }\n\n            // Mouse moving on one element\n            this.dispatchToElement(hovered, 'mousemove', event);\n\n            // Mouse over on a new element\n            if (hoveredTarget && hoveredTarget !== lastHoveredTarget) {\n                this.dispatchToElement(hovered, 'mouseover', event);\n            }\n        },\n\n        mouseout: function (event) {\n            this.dispatchToElement(this._hovered, 'mouseout', event);\n\n            // There might be some doms created by upper layer application\n            // at the same level of painter.getViewportRoot() (e.g., tooltip\n            // dom created by echarts), where 'globalout' event should not\n            // be triggered when mouse enters these doms. (But 'mouseout'\n            // should be triggered at the original hovered element as usual).\n            var element = event.toElement || event.relatedTarget;\n            var innerDom;\n            do {\n                element = element && element.parentNode;\n            }\n            while (element && element.nodeType != 9 && !(\n                innerDom = element === this.painterRoot\n            ));\n\n            !innerDom && this.trigger('globalout', {event: event});\n        },\n\n        /**\n         * Resize\n         */\n        resize: function (event) {\n            this._hovered = {};\n        },\n\n        /**\n         * Dispatch event\n         * @param {string} eventName\n         * @param {event=} eventArgs\n         */\n        dispatch: function (eventName, eventArgs) {\n            var handler = this[eventName];\n            handler && handler.call(this, eventArgs);\n        },\n\n        /**\n         * Dispose\n         */\n        dispose: function () {\n\n            this.proxy.dispose();\n\n            this.storage =\n            this.proxy =\n            this.painter = null;\n        },\n\n        /**\n         * 设置默认的cursor style\n         * @param {string} [cursorStyle='default'] 例如 crosshair\n         */\n        setCursorStyle: function (cursorStyle) {\n            var proxy = this.proxy;\n            proxy.setCursor && proxy.setCursor(cursorStyle);\n        },\n\n        /**\n         * 事件分发代理\n         *\n         * @private\n         * @param {Object} targetInfo {target, topTarget} 目标图形元素\n         * @param {string} eventName 事件名称\n         * @param {Object} event 事件对象\n         */\n        dispatchToElement: function (targetInfo, eventName, event) {\n            targetInfo = targetInfo || {};\n            var eventHandler = 'on' + eventName;\n            var eventPacket = makeEventPacket(eventName, targetInfo, event);\n\n            var el = targetInfo.target;\n            while (el) {\n                el[eventHandler]\n                    && (eventPacket.cancelBubble = el[eventHandler].call(el, eventPacket));\n\n                el.trigger(eventName, eventPacket);\n\n                el = el.parent;\n\n                if (eventPacket.cancelBubble) {\n                    break;\n                }\n            }\n\n            if (!eventPacket.cancelBubble) {\n                // 冒泡到顶级 zrender 对象\n                this.trigger(eventName, eventPacket);\n                // 分发事件到用户自定义层\n                // 用户有可能在全局 click 事件中 dispose，所以需要判断下 painter 是否存在\n                this.painter && this.painter.eachOtherLayer(function (layer) {\n                    if (typeof(layer[eventHandler]) == 'function') {\n                        layer[eventHandler].call(layer, eventPacket);\n                    }\n                    if (layer.trigger) {\n                        layer.trigger(eventName, eventPacket);\n                    }\n                });\n            }\n        },\n\n        /**\n         * @private\n         * @param {number} x\n         * @param {number} y\n         * @param {module:zrender/graphic/Displayable} exclude\n         * @return {model:zrender/Element}\n         * @method\n         */\n        findHover: function(x, y, exclude) {\n            var list = this.storage.getDisplayList();\n            var out = {};\n\n            for (var i = list.length - 1; i >= 0 ; i--) {\n                var hoverCheckResult;\n                if (list[i] !== exclude\n                    // getDisplayList may include ignored item in VML mode\n                    && !list[i].ignore\n                    && (hoverCheckResult = isHover(list[i], x, y))\n                ) {\n                    !out.topTarget && (out.topTarget = list[i]);\n                    if (hoverCheckResult !== SILENT) {\n                        out.target = list[i];\n                        break;\n                    }\n                }\n            }\n\n            return out;\n        }\n    };\n\n    // Common handlers\n    util.each(['click', 'mousedown', 'mouseup', 'mousewheel', 'dblclick', 'contextmenu'], function (name) {\n        Handler.prototype[name] = function (event) {\n            // Find hover again to avoid click event is dispatched manually. Or click is triggered without mouseover\n            var hovered = this.findHover(event.zrX, event.zrY);\n            var hoveredTarget = hovered.target;\n\n            if (name === 'mousedown') {\n                this._downel = hoveredTarget;\n                // In case click triggered before mouseup\n                this._upel = hoveredTarget;\n            }\n            else if (name === 'mosueup') {\n                this._upel = hoveredTarget;\n            }\n            else if (name === 'click') {\n                if (this._downel !== this._upel) {\n                    return;\n                }\n            }\n\n            this.dispatchToElement(hovered, name, event);\n        };\n    });\n\n    function isHover(displayable, x, y) {\n        if (displayable[displayable.rectHover ? 'rectContain' : 'contain'](x, y)) {\n            var el = displayable;\n            var isSilent;\n            while (el) {\n                // If clipped by ancestor.\n                if (el.clipPath && !el.clipPath.contain(x, y))  {\n                    return false;\n                }\n                if (el.silent) {\n                    isSilent = true;\n                }\n                el = el.parent;\n            }\n            return isSilent ? SILENT : true;\n        }\n\n        return false;\n    }\n\n    util.mixin(Handler, Eventful);\n    util.mixin(Handler, Draggable);\n\n    module.exports = Handler;\n\n\n/***/ }),\n/* 418 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * @module zrender/Layer\n * @author pissang(https://www.github.com/pissang)\n */\n\n\n    var util = __webpack_require__(315);\n    var config = __webpack_require__(335);\n    var Style = __webpack_require__(364);\n    var Pattern = __webpack_require__(363);\n\n    function returnFalse() {\n        return false;\n    }\n\n    /**\n     * 创建dom\n     *\n     * @inner\n     * @param {string} id dom id 待用\n     * @param {string} type dom type，such as canvas, div etc.\n     * @param {Painter} painter painter instance\n     * @param {number} number\n     */\n    function createDom(id, type, painter, dpr) {\n        var newDom = document.createElement(type);\n        var width = painter.getWidth();\n        var height = painter.getHeight();\n\n        var newDomStyle = newDom.style;\n        // 没append呢，请原谅我这样写，清晰~\n        newDomStyle.position = 'absolute';\n        newDomStyle.left = 0;\n        newDomStyle.top = 0;\n        newDomStyle.width = width + 'px';\n        newDomStyle.height = height + 'px';\n        newDom.width = width * dpr;\n        newDom.height = height * dpr;\n\n        // id不作为索引用，避免可能造成的重名，定义为私有属性\n        newDom.setAttribute('data-zr-dom-id', id);\n        return newDom;\n    }\n\n    /**\n     * @alias module:zrender/Layer\n     * @constructor\n     * @extends module:zrender/mixin/Transformable\n     * @param {string} id\n     * @param {module:zrender/Painter} painter\n     * @param {number} [dpr]\n     */\n    var Layer = function(id, painter, dpr) {\n        var dom;\n        dpr = dpr || config.devicePixelRatio;\n        if (typeof id === 'string') {\n            dom = createDom(id, 'canvas', painter, dpr);\n        }\n        // Not using isDom because in node it will return false\n        else if (util.isObject(id)) {\n            dom = id;\n            id = dom.id;\n        }\n        this.id = id;\n        this.dom = dom;\n\n        var domStyle = dom.style;\n        if (domStyle) { // Not in node\n            dom.onselectstart = returnFalse; // 避免页面选中的尴尬\n            domStyle['-webkit-user-select'] = 'none';\n            domStyle['user-select'] = 'none';\n            domStyle['-webkit-touch-callout'] = 'none';\n            domStyle['-webkit-tap-highlight-color'] = 'rgba(0,0,0,0)';\n            domStyle['padding'] = 0;\n            domStyle['margin'] = 0;\n            domStyle['border-width'] = 0;\n        }\n\n        this.domBack = null;\n        this.ctxBack = null;\n\n        this.painter = painter;\n\n        this.config = null;\n\n        // Configs\n        /**\n         * 每次清空画布的颜色\n         * @type {string}\n         * @default 0\n         */\n        this.clearColor = 0;\n        /**\n         * 是否开启动态模糊\n         * @type {boolean}\n         * @default false\n         */\n        this.motionBlur = false;\n        /**\n         * 在开启动态模糊的时候使用，与上一帧混合的alpha值，值越大尾迹越明显\n         * @type {number}\n         * @default 0.7\n         */\n        this.lastFrameAlpha = 0.7;\n\n        /**\n         * Layer dpr\n         * @type {number}\n         */\n        this.dpr = dpr;\n    };\n\n    Layer.prototype = {\n\n        constructor: Layer,\n\n        elCount: 0,\n\n        __dirty: true,\n\n        initContext: function () {\n            this.ctx = this.dom.getContext('2d');\n\n            this.ctx.dpr = this.dpr;\n        },\n\n        createBackBuffer: function () {\n            var dpr = this.dpr;\n\n            this.domBack = createDom('back-' + this.id, 'canvas', this.painter, dpr);\n            this.ctxBack = this.domBack.getContext('2d');\n\n            if (dpr != 1) {\n                this.ctxBack.scale(dpr, dpr);\n            }\n        },\n\n        /**\n         * @param  {number} width\n         * @param  {number} height\n         */\n        resize: function (width, height) {\n            var dpr = this.dpr;\n\n            var dom = this.dom;\n            var domStyle = dom.style;\n            var domBack = this.domBack;\n\n            domStyle.width = width + 'px';\n            domStyle.height = height + 'px';\n\n            dom.width = width * dpr;\n            dom.height = height * dpr;\n\n            if (domBack) {\n                domBack.width = width * dpr;\n                domBack.height = height * dpr;\n\n                if (dpr != 1) {\n                    this.ctxBack.scale(dpr, dpr);\n                }\n            }\n        },\n\n        /**\n         * 清空该层画布\n         * @param {boolean} clearAll Clear all with out motion blur\n         */\n        clear: function (clearAll) {\n            var dom = this.dom;\n            var ctx = this.ctx;\n            var width = dom.width;\n            var height = dom.height;\n\n            var clearColor = this.clearColor;\n            var haveMotionBLur = this.motionBlur && !clearAll;\n            var lastFrameAlpha = this.lastFrameAlpha;\n\n            var dpr = this.dpr;\n\n            if (haveMotionBLur) {\n                if (!this.domBack) {\n                    this.createBackBuffer();\n                }\n\n                this.ctxBack.globalCompositeOperation = 'copy';\n                this.ctxBack.drawImage(\n                    dom, 0, 0,\n                    width / dpr,\n                    height / dpr\n                );\n            }\n\n            ctx.clearRect(0, 0, width, height);\n            if (clearColor) {\n                var clearColorGradientOrPattern;\n                // Gradient\n                if (clearColor.colorStops) {\n                    // Cache canvas gradient\n                    clearColorGradientOrPattern = clearColor.__canvasGradient || Style.getGradient(ctx, clearColor, {\n                        x: 0,\n                        y: 0,\n                        width: width,\n                        height: height\n                    });\n\n                    clearColor.__canvasGradient = clearColorGradientOrPattern;\n                }\n                // Pattern\n                else if (clearColor.image) {\n                    clearColorGradientOrPattern = Pattern.prototype.getCanvasPattern.call(clearColor, ctx);\n                }\n                ctx.save();\n                ctx.fillStyle = clearColorGradientOrPattern || clearColor;\n                ctx.fillRect(0, 0, width, height);\n                ctx.restore();\n            }\n\n            if (haveMotionBLur) {\n                var domBack = this.domBack;\n                ctx.save();\n                ctx.globalAlpha = lastFrameAlpha;\n                ctx.drawImage(domBack, 0, 0, width, height);\n                ctx.restore();\n            }\n        }\n    };\n\n    module.exports = Layer;\n\n\n/***/ }),\n/* 419 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * Default canvas painter\n * @module zrender/Painter\n * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)\n *         errorrik (errorrik@gmail.com)\n *         pissang (https://www.github.com/pissang)\n */\n \n\n    var config = __webpack_require__(335);\n    var util = __webpack_require__(315);\n    var log = __webpack_require__(361);\n    var BoundingRect = __webpack_require__(324);\n    var timsort = __webpack_require__(344);\n\n    var Layer = __webpack_require__(418);\n\n    var requestAnimationFrame = __webpack_require__(357);\n\n    // PENDIGN\n    // Layer exceeds MAX_PROGRESSIVE_LAYER_NUMBER may have some problem when flush directly second time.\n    //\n    // Maximum progressive layer. When exceeding this number. All elements will be drawed in the last layer.\n    var MAX_PROGRESSIVE_LAYER_NUMBER = 5;\n\n    function parseInt10(val) {\n        return parseInt(val, 10);\n    }\n\n    function isLayerValid(layer) {\n        if (!layer) {\n            return false;\n        }\n\n        if (layer.__builtin__) {\n            return true;\n        }\n\n        if (typeof(layer.resize) !== 'function'\n            || typeof(layer.refresh) !== 'function'\n        ) {\n            return false;\n        }\n\n        return true;\n    }\n\n    function preProcessLayer(layer) {\n        layer.__unusedCount++;\n    }\n\n    function postProcessLayer(layer) {\n        if (layer.__unusedCount == 1) {\n            layer.clear();\n        }\n    }\n\n    var tmpRect = new BoundingRect(0, 0, 0, 0);\n    var viewRect = new BoundingRect(0, 0, 0, 0);\n    function isDisplayableCulled(el, width, height) {\n        tmpRect.copy(el.getBoundingRect());\n        if (el.transform) {\n            tmpRect.applyTransform(el.transform);\n        }\n        viewRect.width = width;\n        viewRect.height = height;\n        return !tmpRect.intersect(viewRect);\n    }\n\n    function isClipPathChanged(clipPaths, prevClipPaths) {\n        if (clipPaths == prevClipPaths) { // Can both be null or undefined\n            return false;\n        }\n\n        if (!clipPaths || !prevClipPaths || (clipPaths.length !== prevClipPaths.length)) {\n            return true;\n        }\n        for (var i = 0; i < clipPaths.length; i++) {\n            if (clipPaths[i] !== prevClipPaths[i]) {\n                return true;\n            }\n        }\n    }\n\n    function doClip(clipPaths, ctx) {\n        for (var i = 0; i < clipPaths.length; i++) {\n            var clipPath = clipPaths[i];\n\n            clipPath.setTransform(ctx);\n            ctx.beginPath();\n            clipPath.buildPath(ctx, clipPath.shape);\n            ctx.clip();\n            // Transform back\n            clipPath.restoreTransform(ctx);\n        }\n    }\n\n    function createRoot(width, height) {\n        var domRoot = document.createElement('div');\n\n        // domRoot.onselectstart = returnFalse; // 避免页面选中的尴尬\n        domRoot.style.cssText = [\n            'position:relative',\n            'overflow:hidden',\n            'width:' + width + 'px',\n            'height:' + height + 'px',\n            'padding:0',\n            'margin:0',\n            'border-width:0'\n        ].join(';') + ';';\n\n        return domRoot;\n    }\n\n    /**\n     * @alias module:zrender/Painter\n     * @constructor\n     * @param {HTMLElement} root 绘图容器\n     * @param {module:zrender/Storage} storage\n     * @param {Ojbect} opts\n     */\n    var Painter = function (root, storage, opts) {\n        // In node environment using node-canvas\n        var singleCanvas = !root.nodeName // In node ?\n            || root.nodeName.toUpperCase() === 'CANVAS';\n\n        this._opts = opts = util.extend({}, opts || {});\n\n        /**\n         * @type {number}\n         */\n        this.dpr = opts.devicePixelRatio || config.devicePixelRatio;\n        /**\n         * @type {boolean}\n         * @private\n         */\n        this._singleCanvas = singleCanvas;\n        /**\n         * 绘图容器\n         * @type {HTMLElement}\n         */\n        this.root = root;\n\n        var rootStyle = root.style;\n\n        if (rootStyle) {\n            rootStyle['-webkit-tap-highlight-color'] = 'transparent';\n            rootStyle['-webkit-user-select'] =\n            rootStyle['user-select'] =\n            rootStyle['-webkit-touch-callout'] = 'none';\n\n            root.innerHTML = '';\n        }\n\n        /**\n         * @type {module:zrender/Storage}\n         */\n        this.storage = storage;\n\n        /**\n         * @type {Array.<number>}\n         * @private\n         */\n        var zlevelList = this._zlevelList = [];\n\n        /**\n         * @type {Object.<string, module:zrender/Layer>}\n         * @private\n         */\n        var layers = this._layers = {};\n\n        /**\n         * @type {Object.<string, Object>}\n         * @type {private}\n         */\n        this._layerConfig = {};\n\n        if (!singleCanvas) {\n            this._width = this._getSize(0);\n            this._height = this._getSize(1);\n\n            var domRoot = this._domRoot = createRoot(\n                this._width, this._height\n            );\n            root.appendChild(domRoot);\n        }\n        else {\n            if (opts.width != null) {\n                root.width = opts.width;\n            }\n            if (opts.height != null) {\n                root.height = opts.height;\n            }\n            // Use canvas width and height directly\n            var width = root.width;\n            var height = root.height;\n            this._width = width;\n            this._height = height;\n\n            // Create layer if only one given canvas\n            // Device pixel ratio is fixed to 1 because given canvas has its specified width and height\n            var mainLayer = new Layer(root, this, 1);\n            mainLayer.initContext();\n            // FIXME Use canvas width and height\n            // mainLayer.resize(width, height);\n            layers[0] = mainLayer;\n            zlevelList.push(0);\n\n            this._domRoot = root;\n        }\n\n        // Layers for progressive rendering\n        this._progressiveLayers = [];\n\n        /**\n         * @type {module:zrender/Layer}\n         * @private\n         */\n        this._hoverlayer;\n\n        this._hoverElements = [];\n    };\n\n    Painter.prototype = {\n\n        constructor: Painter,\n\n        /**\n         * If painter use a single canvas\n         * @return {boolean}\n         */\n        isSingleCanvas: function () {\n            return this._singleCanvas;\n        },\n        /**\n         * @return {HTMLDivElement}\n         */\n        getViewportRoot: function () {\n            return this._domRoot;\n        },\n\n        /**\n         * 刷新\n         * @param {boolean} [paintAll=false] 强制绘制所有displayable\n         */\n        refresh: function (paintAll) {\n\n            var list = this.storage.getDisplayList(true);\n\n            var zlevelList = this._zlevelList;\n\n            this._paintList(list, paintAll);\n\n            // Paint custum layers\n            for (var i = 0; i < zlevelList.length; i++) {\n                var z = zlevelList[i];\n                var layer = this._layers[z];\n                if (!layer.__builtin__ && layer.refresh) {\n                    layer.refresh();\n                }\n            }\n\n            this.refreshHover();\n\n            if (this._progressiveLayers.length) {\n                this._startProgessive();\n            }\n\n            return this;\n        },\n\n        addHover: function (el, hoverStyle) {\n            if (el.__hoverMir) {\n                return;\n            }\n            var elMirror = new el.constructor({\n                style: el.style,\n                shape: el.shape\n            });\n            elMirror.__from = el;\n            el.__hoverMir = elMirror;\n            elMirror.setStyle(hoverStyle);\n            this._hoverElements.push(elMirror);\n        },\n\n        removeHover: function (el) {\n            var elMirror = el.__hoverMir;\n            var hoverElements = this._hoverElements;\n            var idx = util.indexOf(hoverElements, elMirror);\n            if (idx >= 0) {\n                hoverElements.splice(idx, 1);\n            }\n            el.__hoverMir = null;\n        },\n\n        clearHover: function (el) {\n            var hoverElements = this._hoverElements;\n            for (var i = 0; i < hoverElements.length; i++) {\n                var from = hoverElements[i].__from;\n                if (from) {\n                    from.__hoverMir = null;\n                }\n            }\n            hoverElements.length = 0;\n        },\n\n        refreshHover: function () {\n            var hoverElements = this._hoverElements;\n            var len = hoverElements.length;\n            var hoverLayer = this._hoverlayer;\n            hoverLayer && hoverLayer.clear();\n\n            if (!len) {\n                return;\n            }\n            timsort(hoverElements, this.storage.displayableSortFunc);\n\n            // Use a extream large zlevel\n            // FIXME?\n            if (!hoverLayer) {\n                hoverLayer = this._hoverlayer = this.getLayer(1e5);\n            }\n\n            var scope = {};\n            hoverLayer.ctx.save();\n            for (var i = 0; i < len;) {\n                var el = hoverElements[i];\n                var originalEl = el.__from;\n                // Original el is removed\n                // PENDING\n                if (!(originalEl && originalEl.__zr)) {\n                    hoverElements.splice(i, 1);\n                    originalEl.__hoverMir = null;\n                    len--;\n                    continue;\n                }\n                i++;\n\n                // Use transform\n                // FIXME style and shape ?\n                if (!originalEl.invisible) {\n                    el.transform = originalEl.transform;\n                    el.invTransform = originalEl.invTransform;\n                    el.__clipPaths = originalEl.__clipPaths;\n                    // el.\n                    this._doPaintEl(el, hoverLayer, true, scope);\n                }\n            }\n            hoverLayer.ctx.restore();\n        },\n\n        _startProgessive: function () {\n            var self = this;\n\n            if (!self._furtherProgressive) {\n                return;\n            }\n\n            // Use a token to stop progress steps triggered by\n            // previous zr.refresh calling.\n            var token = self._progressiveToken = +new Date();\n\n            self._progress++;\n            requestAnimationFrame(step);\n\n            function step() {\n                // In case refreshed or disposed\n                if (token === self._progressiveToken && self.storage) {\n\n                    self._doPaintList(self.storage.getDisplayList());\n\n                    if (self._furtherProgressive) {\n                        self._progress++;\n                        requestAnimationFrame(step);\n                    }\n                    else {\n                        self._progressiveToken = -1;\n                    }\n                }\n            }\n        },\n\n        _clearProgressive: function () {\n            this._progressiveToken = -1;\n            this._progress = 0;\n            util.each(this._progressiveLayers, function (layer) {\n                layer.__dirty && layer.clear();\n            });\n        },\n\n        _paintList: function (list, paintAll) {\n\n            if (paintAll == null) {\n                paintAll = false;\n            }\n\n            this._updateLayerStatus(list);\n\n            this._clearProgressive();\n\n            this.eachBuiltinLayer(preProcessLayer);\n\n            this._doPaintList(list, paintAll);\n\n            this.eachBuiltinLayer(postProcessLayer);\n        },\n\n        _doPaintList: function (list, paintAll) {\n            var currentLayer;\n            var currentZLevel;\n            var ctx;\n\n            // var invTransform = [];\n            var scope;\n\n            var progressiveLayerIdx = 0;\n            var currentProgressiveLayer;\n\n            var width = this._width;\n            var height = this._height;\n            var layerProgress;\n            var frame = this._progress;\n            function flushProgressiveLayer(layer) {\n                var dpr = ctx.dpr || 1;\n                ctx.save();\n                ctx.globalAlpha = 1;\n                ctx.shadowBlur = 0;\n                // Avoid layer don't clear in next progressive frame\n                currentLayer.__dirty = true;\n                ctx.setTransform(1, 0, 0, 1, 0, 0);\n                ctx.drawImage(layer.dom, 0, 0, width * dpr, height * dpr);\n                ctx.restore();\n            }\n\n            for (var i = 0, l = list.length; i < l; i++) {\n                var el = list[i];\n                var elZLevel = this._singleCanvas ? 0 : el.zlevel;\n\n                var elFrame = el.__frame;\n\n                // Flush at current context\n                // PENDING\n                if (elFrame < 0 && currentProgressiveLayer) {\n                    flushProgressiveLayer(currentProgressiveLayer);\n                    currentProgressiveLayer = null;\n                }\n\n                // Change draw layer\n                if (currentZLevel !== elZLevel) {\n                    if (ctx) {\n                        ctx.restore();\n                    }\n\n                    // Reset scope\n                    scope = {};\n\n                    // Only 0 zlevel if only has one canvas\n                    currentZLevel = elZLevel;\n                    currentLayer = this.getLayer(currentZLevel);\n\n                    if (!currentLayer.__builtin__) {\n                        log(\n                            'ZLevel ' + currentZLevel\n                            + ' has been used by unkown layer ' + currentLayer.id\n                        );\n                    }\n\n                    ctx = currentLayer.ctx;\n                    ctx.save();\n\n                    // Reset the count\n                    currentLayer.__unusedCount = 0;\n\n                    if (currentLayer.__dirty || paintAll) {\n                        currentLayer.clear();\n                    }\n                }\n\n                if (!(currentLayer.__dirty || paintAll)) {\n                    continue;\n                }\n\n                if (elFrame >= 0) {\n                    // Progressive layer changed\n                    if (!currentProgressiveLayer) {\n                        currentProgressiveLayer = this._progressiveLayers[\n                            Math.min(progressiveLayerIdx++, MAX_PROGRESSIVE_LAYER_NUMBER - 1)\n                        ];\n\n                        currentProgressiveLayer.ctx.save();\n                        currentProgressiveLayer.renderScope = {};\n\n                        if (currentProgressiveLayer\n                            && (currentProgressiveLayer.__progress > currentProgressiveLayer.__maxProgress)\n                        ) {\n                            // flushProgressiveLayer(currentProgressiveLayer);\n                            // Quick jump all progressive elements\n                            // All progressive element are not dirty, jump over and flush directly\n                            i = currentProgressiveLayer.__nextIdxNotProg - 1;\n                            // currentProgressiveLayer = null;\n                            continue;\n                        }\n\n                        layerProgress = currentProgressiveLayer.__progress;\n\n                        if (!currentProgressiveLayer.__dirty) {\n                            // Keep rendering\n                            frame = layerProgress;\n                        }\n\n                        currentProgressiveLayer.__progress = frame + 1;\n                    }\n\n                    if (elFrame === frame) {\n                        this._doPaintEl(el, currentProgressiveLayer, true, currentProgressiveLayer.renderScope);\n                    }\n                }\n                else {\n                    this._doPaintEl(el, currentLayer, paintAll, scope);\n                }\n\n                el.__dirty = false;\n            }\n\n            if (currentProgressiveLayer) {\n                flushProgressiveLayer(currentProgressiveLayer);\n            }\n\n            // Restore the lastLayer ctx\n            ctx && ctx.restore();\n            // If still has clipping state\n            // if (scope.prevElClipPaths) {\n            //     ctx.restore();\n            // }\n\n            this._furtherProgressive = false;\n            util.each(this._progressiveLayers, function (layer) {\n                if (layer.__maxProgress >= layer.__progress) {\n                    this._furtherProgressive = true;\n                }\n            }, this);\n        },\n\n        _doPaintEl: function (el, currentLayer, forcePaint, scope) {\n            var ctx = currentLayer.ctx;\n            var m = el.transform;\n            if (\n                (currentLayer.__dirty || forcePaint)\n                // Ignore invisible element\n                && !el.invisible\n                // Ignore transparent element\n                && el.style.opacity !== 0\n                // Ignore scale 0 element, in some environment like node-canvas\n                // Draw a scale 0 element can cause all following draw wrong\n                // And setTransform with scale 0 will cause set back transform failed.\n                && !(m && !m[0] && !m[3])\n                // Ignore culled element\n                && !(el.culling && isDisplayableCulled(el, this._width, this._height))\n            ) {\n\n                var clipPaths = el.__clipPaths;\n\n                // Optimize when clipping on group with several elements\n                if (scope.prevClipLayer !== currentLayer\n                    || isClipPathChanged(clipPaths, scope.prevElClipPaths)\n                ) {\n                    // If has previous clipping state, restore from it\n                    if (scope.prevElClipPaths) {\n                        scope.prevClipLayer.ctx.restore();\n                        scope.prevClipLayer = scope.prevElClipPaths = null;\n\n                        // Reset prevEl since context has been restored\n                        scope.prevEl = null;\n                    }\n                    // New clipping state\n                    if (clipPaths) {\n                        ctx.save();\n                        doClip(clipPaths, ctx);\n                        scope.prevClipLayer = currentLayer;\n                        scope.prevElClipPaths = clipPaths;\n                    }\n                }\n                el.beforeBrush && el.beforeBrush(ctx);\n\n                el.brush(ctx, scope.prevEl || null);\n                scope.prevEl = el;\n\n                el.afterBrush && el.afterBrush(ctx);\n            }\n        },\n\n        /**\n         * 获取 zlevel 所在层，如果不存在则会创建一个新的层\n         * @param {number} zlevel\n         * @return {module:zrender/Layer}\n         */\n        getLayer: function (zlevel) {\n            if (this._singleCanvas) {\n                return this._layers[0];\n            }\n\n            var layer = this._layers[zlevel];\n            if (!layer) {\n                // Create a new layer\n                layer = new Layer('zr_' + zlevel, this, this.dpr);\n                layer.__builtin__ = true;\n\n                if (this._layerConfig[zlevel]) {\n                    util.merge(layer, this._layerConfig[zlevel], true);\n                }\n\n                this.insertLayer(zlevel, layer);\n\n                // Context is created after dom inserted to document\n                // Or excanvas will get 0px clientWidth and clientHeight\n                layer.initContext();\n            }\n\n            return layer;\n        },\n\n        insertLayer: function (zlevel, layer) {\n\n            var layersMap = this._layers;\n            var zlevelList = this._zlevelList;\n            var len = zlevelList.length;\n            var prevLayer = null;\n            var i = -1;\n            var domRoot = this._domRoot;\n\n            if (layersMap[zlevel]) {\n                log('ZLevel ' + zlevel + ' has been used already');\n                return;\n            }\n            // Check if is a valid layer\n            if (!isLayerValid(layer)) {\n                log('Layer of zlevel ' + zlevel + ' is not valid');\n                return;\n            }\n\n            if (len > 0 && zlevel > zlevelList[0]) {\n                for (i = 0; i < len - 1; i++) {\n                    if (\n                        zlevelList[i] < zlevel\n                        && zlevelList[i + 1] > zlevel\n                    ) {\n                        break;\n                    }\n                }\n                prevLayer = layersMap[zlevelList[i]];\n            }\n            zlevelList.splice(i + 1, 0, zlevel);\n\n            layersMap[zlevel] = layer;\n\n            // Vitual layer will not directly show on the screen.\n            // (It can be a WebGL layer and assigned to a ZImage element)\n            // But it still under management of zrender.\n            if (!layer.virtual) {\n                if (prevLayer) {\n                    var prevDom = prevLayer.dom;\n                    if (prevDom.nextSibling) {\n                        domRoot.insertBefore(\n                            layer.dom,\n                            prevDom.nextSibling\n                        );\n                    }\n                    else {\n                        domRoot.appendChild(layer.dom);\n                    }\n                }\n                else {\n                    if (domRoot.firstChild) {\n                        domRoot.insertBefore(layer.dom, domRoot.firstChild);\n                    }\n                    else {\n                        domRoot.appendChild(layer.dom);\n                    }\n                }\n            }\n        },\n\n        // Iterate each layer\n        eachLayer: function (cb, context) {\n            var zlevelList = this._zlevelList;\n            var z;\n            var i;\n            for (i = 0; i < zlevelList.length; i++) {\n                z = zlevelList[i];\n                cb.call(context, this._layers[z], z);\n            }\n        },\n\n        // Iterate each buildin layer\n        eachBuiltinLayer: function (cb, context) {\n            var zlevelList = this._zlevelList;\n            var layer;\n            var z;\n            var i;\n            for (i = 0; i < zlevelList.length; i++) {\n                z = zlevelList[i];\n                layer = this._layers[z];\n                if (layer.__builtin__) {\n                    cb.call(context, layer, z);\n                }\n            }\n        },\n\n        // Iterate each other layer except buildin layer\n        eachOtherLayer: function (cb, context) {\n            var zlevelList = this._zlevelList;\n            var layer;\n            var z;\n            var i;\n            for (i = 0; i < zlevelList.length; i++) {\n                z = zlevelList[i];\n                layer = this._layers[z];\n                if (!layer.__builtin__) {\n                    cb.call(context, layer, z);\n                }\n            }\n        },\n\n        /**\n         * 获取所有已创建的层\n         * @param {Array.<module:zrender/Layer>} [prevLayer]\n         */\n        getLayers: function () {\n            return this._layers;\n        },\n\n        _updateLayerStatus: function (list) {\n\n            var layers = this._layers;\n            var progressiveLayers = this._progressiveLayers;\n\n            var elCountsLastFrame = {};\n            var progressiveElCountsLastFrame = {};\n\n            this.eachBuiltinLayer(function (layer, z) {\n                elCountsLastFrame[z] = layer.elCount;\n                layer.elCount = 0;\n                layer.__dirty = false;\n            });\n\n            util.each(progressiveLayers, function (layer, idx) {\n                progressiveElCountsLastFrame[idx] = layer.elCount;\n                layer.elCount = 0;\n                layer.__dirty = false;\n            });\n\n            var progressiveLayerCount = 0;\n            var currentProgressiveLayer;\n            var lastProgressiveKey;\n            var frameCount = 0;\n            for (var i = 0, l = list.length; i < l; i++) {\n                var el = list[i];\n                var zlevel = this._singleCanvas ? 0 : el.zlevel;\n                var layer = layers[zlevel];\n                var elProgress = el.progressive;\n                if (layer) {\n                    layer.elCount++;\n                    layer.__dirty = layer.__dirty || el.__dirty;\n                }\n\n                /////// Update progressive\n                if (elProgress >= 0) {\n                    // Fix wrong progressive sequence problem.\n                    if (lastProgressiveKey !== elProgress) {\n                        lastProgressiveKey = elProgress;\n                        frameCount++;\n                    }\n                    var elFrame = el.__frame = frameCount - 1;\n                    if (!currentProgressiveLayer) {\n                        var idx = Math.min(progressiveLayerCount, MAX_PROGRESSIVE_LAYER_NUMBER - 1);\n                        currentProgressiveLayer = progressiveLayers[idx];\n                        if (!currentProgressiveLayer) {\n                            currentProgressiveLayer = progressiveLayers[idx] = new Layer(\n                                'progressive', this, this.dpr\n                            );\n                            currentProgressiveLayer.initContext();\n                        }\n                        currentProgressiveLayer.__maxProgress = 0;\n                    }\n                    currentProgressiveLayer.__dirty = currentProgressiveLayer.__dirty || el.__dirty;\n                    currentProgressiveLayer.elCount++;\n\n                    currentProgressiveLayer.__maxProgress = Math.max(\n                        currentProgressiveLayer.__maxProgress, elFrame\n                    );\n\n                    if (currentProgressiveLayer.__maxProgress >= currentProgressiveLayer.__progress) {\n                        // Should keep rendering this  layer because progressive rendering is not finished yet\n                        layer.__dirty = true;\n                    }\n                }\n                else {\n                    el.__frame = -1;\n\n                    if (currentProgressiveLayer) {\n                        currentProgressiveLayer.__nextIdxNotProg = i;\n                        progressiveLayerCount++;\n                        currentProgressiveLayer = null;\n                    }\n                }\n            }\n\n            if (currentProgressiveLayer) {\n                progressiveLayerCount++;\n                currentProgressiveLayer.__nextIdxNotProg = i;\n            }\n\n            // 层中的元素数量有发生变化\n            this.eachBuiltinLayer(function (layer, z) {\n                if (elCountsLastFrame[z] !== layer.elCount) {\n                    layer.__dirty = true;\n                }\n            });\n\n            progressiveLayers.length = Math.min(progressiveLayerCount, MAX_PROGRESSIVE_LAYER_NUMBER);\n            util.each(progressiveLayers, function (layer, idx) {\n                if (progressiveElCountsLastFrame[idx] !== layer.elCount) {\n                    el.__dirty = true;\n                }\n                if (layer.__dirty) {\n                    layer.__progress = 0;\n                }\n            });\n        },\n\n        /**\n         * 清除hover层外所有内容\n         */\n        clear: function () {\n            this.eachBuiltinLayer(this._clearLayer);\n            return this;\n        },\n\n        _clearLayer: function (layer) {\n            layer.clear();\n        },\n\n        /**\n         * 修改指定zlevel的绘制参数\n         *\n         * @param {string} zlevel\n         * @param {Object} config 配置对象\n         * @param {string} [config.clearColor=0] 每次清空画布的颜色\n         * @param {string} [config.motionBlur=false] 是否开启动态模糊\n         * @param {number} [config.lastFrameAlpha=0.7]\n         *                 在开启动态模糊的时候使用，与上一帧混合的alpha值，值越大尾迹越明显\n         */\n        configLayer: function (zlevel, config) {\n            if (config) {\n                var layerConfig = this._layerConfig;\n                if (!layerConfig[zlevel]) {\n                    layerConfig[zlevel] = config;\n                }\n                else {\n                    util.merge(layerConfig[zlevel], config, true);\n                }\n\n                var layer = this._layers[zlevel];\n\n                if (layer) {\n                    util.merge(layer, layerConfig[zlevel], true);\n                }\n            }\n        },\n\n        /**\n         * 删除指定层\n         * @param {number} zlevel 层所在的zlevel\n         */\n        delLayer: function (zlevel) {\n            var layers = this._layers;\n            var zlevelList = this._zlevelList;\n            var layer = layers[zlevel];\n            if (!layer) {\n                return;\n            }\n            layer.dom.parentNode.removeChild(layer.dom);\n            delete layers[zlevel];\n\n            zlevelList.splice(util.indexOf(zlevelList, zlevel), 1);\n        },\n\n        /**\n         * 区域大小变化后重绘\n         */\n        resize: function (width, height) {\n            var domRoot = this._domRoot;\n            // FIXME Why ?\n            domRoot.style.display = 'none';\n\n            // Save input w/h\n            var opts = this._opts;\n            width != null && (opts.width = width);\n            height != null && (opts.height = height);\n\n            width = this._getSize(0);\n            height = this._getSize(1);\n\n            domRoot.style.display = '';\n\n            // 优化没有实际改变的resize\n            if (this._width != width || height != this._height) {\n                domRoot.style.width = width + 'px';\n                domRoot.style.height = height + 'px';\n\n                for (var id in this._layers) {\n                    if (this._layers.hasOwnProperty(id)) {\n                        this._layers[id].resize(width, height);\n                    }\n                }\n                util.each(this._progressiveLayers, function (layer) {\n                    layer.resize(width, height);\n                });\n\n                this.refresh(true);\n            }\n\n            this._width = width;\n            this._height = height;\n\n            return this;\n        },\n\n        /**\n         * 清除单独的一个层\n         * @param {number} zlevel\n         */\n        clearLayer: function (zlevel) {\n            var layer = this._layers[zlevel];\n            if (layer) {\n                layer.clear();\n            }\n        },\n\n        /**\n         * 释放\n         */\n        dispose: function () {\n            this.root.innerHTML = '';\n\n            this.root =\n            this.storage =\n\n            this._domRoot =\n            this._layers = null;\n        },\n\n        /**\n         * Get canvas which has all thing rendered\n         * @param {Object} opts\n         * @param {string} [opts.backgroundColor]\n         */\n        getRenderedCanvas: function (opts) {\n            opts = opts || {};\n            if (this._singleCanvas) {\n                return this._layers[0].dom;\n            }\n\n            var imageLayer = new Layer('image', this, opts.pixelRatio || this.dpr);\n            imageLayer.initContext();\n\n            imageLayer.clearColor = opts.backgroundColor;\n            imageLayer.clear();\n\n            var displayList = this.storage.getDisplayList(true);\n\n            var scope = {};\n            for (var i = 0; i < displayList.length; i++) {\n                var el = displayList[i];\n                this._doPaintEl(el, imageLayer, true, scope);\n            }\n\n            return imageLayer.dom;\n        },\n        /**\n         * 获取绘图区域宽度\n         */\n        getWidth: function () {\n            return this._width;\n        },\n\n        /**\n         * 获取绘图区域高度\n         */\n        getHeight: function () {\n            return this._height;\n        },\n\n        _getSize: function (whIdx) {\n            var opts = this._opts;\n            var wh = ['width', 'height'][whIdx];\n            var cwh = ['clientWidth', 'clientHeight'][whIdx];\n            var plt = ['paddingLeft', 'paddingTop'][whIdx];\n            var prb = ['paddingRight', 'paddingBottom'][whIdx];\n\n            if (opts[wh] != null && opts[wh] !== 'auto') {\n                return parseFloat(opts[wh]);\n            }\n\n            var root = this.root;\n            var stl = document.defaultView.getComputedStyle(root);\n\n            return (\n                (root[cwh] || parseInt10(stl[wh]) || parseInt10(root.style[wh]))\n                - (parseInt10(stl[plt]) || 0)\n                - (parseInt10(stl[prb]) || 0)\n            ) | 0;\n        },\n\n        pathToImage: function (path, dpr) {\n            dpr = dpr || this.dpr;\n\n            var canvas = document.createElement('canvas');\n            var ctx = canvas.getContext('2d');\n            var rect = path.getBoundingRect();\n            var style = path.style;\n            var shadowBlurSize = style.shadowBlur;\n            var shadowOffsetX = style.shadowOffsetX;\n            var shadowOffsetY = style.shadowOffsetY;\n            var lineWidth = style.hasStroke() ? style.lineWidth : 0;\n\n            var leftMargin = Math.max(lineWidth / 2, -shadowOffsetX + shadowBlurSize);\n            var rightMargin = Math.max(lineWidth / 2, shadowOffsetX + shadowBlurSize);\n            var topMargin = Math.max(lineWidth / 2, -shadowOffsetY + shadowBlurSize);\n            var bottomMargin = Math.max(lineWidth / 2, shadowOffsetY + shadowBlurSize);\n            var width = rect.width + leftMargin + rightMargin;\n            var height = rect.height + topMargin + bottomMargin;\n\n            canvas.width = width * dpr;\n            canvas.height = height * dpr;\n\n            ctx.scale(dpr, dpr);\n            ctx.clearRect(0, 0, width, height);\n            ctx.dpr = dpr;\n\n            var pathTransform = {\n                position: path.position,\n                rotation: path.rotation,\n                scale: path.scale\n            };\n            path.position = [leftMargin - rect.x, topMargin - rect.y];\n            path.rotation = 0;\n            path.scale = [1, 1];\n            path.updateTransform();\n            if (path) {\n                path.brush(ctx);\n            }\n\n            var ImageShape = __webpack_require__(362);\n            var imgShape = new ImageShape({\n                style: {\n                    x: 0,\n                    y: 0,\n                    image: canvas\n                }\n            });\n\n            if (pathTransform.position != null) {\n                imgShape.position = path.position = pathTransform.position;\n            }\n\n            if (pathTransform.rotation != null) {\n                imgShape.rotation = path.rotation = pathTransform.rotation;\n            }\n\n            if (pathTransform.scale != null) {\n                imgShape.scale = path.scale = pathTransform.scale;\n            }\n\n            return imgShape;\n        }\n    };\n\n    module.exports = Painter;\n\n\n\n/***/ }),\n/* 420 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * Storage内容仓库模块\n * @module zrender/Storage\n * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)\n * @author errorrik (errorrik@gmail.com)\n * @author pissang (https://github.com/pissang/)\n */\n\n\n    var util = __webpack_require__(315);\n    var env = __webpack_require__(321);\n\n    var Group = __webpack_require__(336);\n\n    // Use timsort because in most case elements are partially sorted\n    // https://jsfiddle.net/pissang/jr4x7mdm/8/\n    var timsort = __webpack_require__(344);\n\n    function shapeCompareFunc(a, b) {\n        if (a.zlevel === b.zlevel) {\n            if (a.z === b.z) {\n                // if (a.z2 === b.z2) {\n                //     // FIXME Slow has renderidx compare\n                //     // http://stackoverflow.com/questions/20883421/sorting-in-javascript-should-every-compare-function-have-a-return-0-statement\n                //     // https://github.com/v8/v8/blob/47cce544a31ed5577ffe2963f67acb4144ee0232/src/js/array.js#L1012\n                //     return a.__renderidx - b.__renderidx;\n                // }\n                return a.z2 - b.z2;\n            }\n            return a.z - b.z;\n        }\n        return a.zlevel - b.zlevel;\n    }\n    /**\n     * 内容仓库 (M)\n     * @alias module:zrender/Storage\n     * @constructor\n     */\n    var Storage = function () {\n        this._roots = [];\n\n        this._displayList = [];\n\n        this._displayListLen = 0;\n    };\n\n    Storage.prototype = {\n\n        constructor: Storage,\n\n        /**\n         * @param  {Function} cb\n         *\n         */\n        traverse: function (cb, context) {\n            for (var i = 0; i < this._roots.length; i++) {\n                this._roots[i].traverse(cb, context);\n            }\n        },\n\n        /**\n         * 返回所有图形的绘制队列\n         * @param {boolean} [update=false] 是否在返回前更新该数组\n         * @param {boolean} [includeIgnore=false] 是否包含 ignore 的数组, 在 update 为 true 的时候有效\n         *\n         * 详见{@link module:zrender/graphic/Displayable.prototype.updateDisplayList}\n         * @return {Array.<module:zrender/graphic/Displayable>}\n         */\n        getDisplayList: function (update, includeIgnore) {\n            includeIgnore = includeIgnore || false;\n            if (update) {\n                this.updateDisplayList(includeIgnore);\n            }\n            return this._displayList;\n        },\n\n        /**\n         * 更新图形的绘制队列。\n         * 每次绘制前都会调用，该方法会先深度优先遍历整个树，更新所有Group和Shape的变换并且把所有可见的Shape保存到数组中，\n         * 最后根据绘制的优先级（zlevel > z > 插入顺序）排序得到绘制队列\n         * @param {boolean} [includeIgnore=false] 是否包含 ignore 的数组\n         */\n        updateDisplayList: function (includeIgnore) {\n            this._displayListLen = 0;\n            var roots = this._roots;\n            var displayList = this._displayList;\n            for (var i = 0, len = roots.length; i < len; i++) {\n                this._updateAndAddDisplayable(roots[i], null, includeIgnore);\n            }\n            displayList.length = this._displayListLen;\n\n            // for (var i = 0, len = displayList.length; i < len; i++) {\n            //     displayList[i].__renderidx = i;\n            // }\n\n            // displayList.sort(shapeCompareFunc);\n            env.canvasSupported && timsort(displayList, shapeCompareFunc);\n        },\n\n        _updateAndAddDisplayable: function (el, clipPaths, includeIgnore) {\n\n            if (el.ignore && !includeIgnore) {\n                return;\n            }\n\n            el.beforeUpdate();\n\n            if (el.__dirty) {\n\n                el.update();\n\n            }\n\n            el.afterUpdate();\n\n            var userSetClipPath = el.clipPath;\n            if (userSetClipPath) {\n\n                // FIXME 效率影响\n                if (clipPaths) {\n                    clipPaths = clipPaths.slice();\n                }\n                else {\n                    clipPaths = [];\n                }\n\n                var currentClipPath = userSetClipPath;\n                var parentClipPath = el;\n                // Recursively add clip path\n                while (currentClipPath) {\n                    // clipPath 的变换是基于使用这个 clipPath 的元素\n                    currentClipPath.parent = parentClipPath;\n                    currentClipPath.updateTransform();\n\n                    clipPaths.push(currentClipPath);\n\n                    parentClipPath = currentClipPath;\n                    currentClipPath = currentClipPath.clipPath;\n                }\n            }\n\n            if (el.isGroup) {\n                var children = el._children;\n\n                for (var i = 0; i < children.length; i++) {\n                    var child = children[i];\n\n                    // Force to mark as dirty if group is dirty\n                    // FIXME __dirtyPath ?\n                    if (el.__dirty) {\n                        child.__dirty = true;\n                    }\n\n                    this._updateAndAddDisplayable(child, clipPaths, includeIgnore);\n                }\n\n                // Mark group clean here\n                el.__dirty = false;\n\n            }\n            else {\n                el.__clipPaths = clipPaths;\n\n                this._displayList[this._displayListLen++] = el;\n            }\n        },\n\n        /**\n         * 添加图形(Shape)或者组(Group)到根节点\n         * @param {module:zrender/Element} el\n         */\n        addRoot: function (el) {\n            if (el.__storage === this) {\n                return;\n            }\n\n            if (el instanceof Group) {\n                el.addChildrenToStorage(this);\n            }\n\n            this.addToStorage(el);\n            this._roots.push(el);\n        },\n\n        /**\n         * 删除指定的图形(Shape)或者组(Group)\n         * @param {string|Array.<string>} [el] 如果为空清空整个Storage\n         */\n        delRoot: function (el) {\n            if (el == null) {\n                // 不指定el清空\n                for (var i = 0; i < this._roots.length; i++) {\n                    var root = this._roots[i];\n                    if (root instanceof Group) {\n                        root.delChildrenFromStorage(this);\n                    }\n                }\n\n                this._roots = [];\n                this._displayList = [];\n                this._displayListLen = 0;\n\n                return;\n            }\n\n            if (el instanceof Array) {\n                for (var i = 0, l = el.length; i < l; i++) {\n                    this.delRoot(el[i]);\n                }\n                return;\n            }\n\n\n            var idx = util.indexOf(this._roots, el);\n            if (idx >= 0) {\n                this.delFromStorage(el);\n                this._roots.splice(idx, 1);\n                if (el instanceof Group) {\n                    el.delChildrenFromStorage(this);\n                }\n            }\n        },\n\n        addToStorage: function (el) {\n            el.__storage = this;\n            el.dirty(false);\n\n            return this;\n        },\n\n        delFromStorage: function (el) {\n            if (el) {\n                el.__storage = null;\n            }\n\n            return this;\n        },\n\n        /**\n         * 清空并且释放Storage\n         */\n        dispose: function () {\n            this._renderList =\n            this._roots = null;\n        },\n\n        displayableSortFunc: shapeCompareFunc\n    };\n\n    module.exports = Storage;\n\n\n\n/***/ }),\n/* 421 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * 动画主类, 调度和管理所有动画控制器\n *\n * @module zrender/animation/Animation\n * @author pissang(https://github.com/pissang)\n */\n// TODO Additive animation\n// http://iosoteric.com/additive-animations-animatewithduration-in-ios-8/\n// https://developer.apple.com/videos/wwdc2014/#236\n\n\n    var util = __webpack_require__(315);\n    var Dispatcher = __webpack_require__(333).Dispatcher;\n\n    var requestAnimationFrame = __webpack_require__(357);\n\n    var Animator = __webpack_require__(356);\n    /**\n     * @typedef {Object} IZRenderStage\n     * @property {Function} update\n     */\n\n    /**\n     * @alias module:zrender/animation/Animation\n     * @constructor\n     * @param {Object} [options]\n     * @param {Function} [options.onframe]\n     * @param {IZRenderStage} [options.stage]\n     * @example\n     *     var animation = new Animation();\n     *     var obj = {\n     *         x: 100,\n     *         y: 100\n     *     };\n     *     animation.animate(node.position)\n     *         .when(1000, {\n     *             x: 500,\n     *             y: 500\n     *         })\n     *         .when(2000, {\n     *             x: 100,\n     *             y: 100\n     *         })\n     *         .start('spline');\n     */\n    var Animation = function (options) {\n\n        options = options || {};\n\n        this.stage = options.stage || {};\n\n        this.onframe = options.onframe || function() {};\n\n        // private properties\n        this._clips = [];\n\n        this._running = false;\n\n        this._time;\n\n        this._pausedTime;\n\n        this._pauseStart;\n\n        this._paused = false;\n\n        Dispatcher.call(this);\n    };\n\n    Animation.prototype = {\n\n        constructor: Animation,\n        /**\n         * 添加 clip\n         * @param {module:zrender/animation/Clip} clip\n         */\n        addClip: function (clip) {\n            this._clips.push(clip);\n        },\n        /**\n         * 添加 animator\n         * @param {module:zrender/animation/Animator} animator\n         */\n        addAnimator: function (animator) {\n            animator.animation = this;\n            var clips = animator.getClips();\n            for (var i = 0; i < clips.length; i++) {\n                this.addClip(clips[i]);\n            }\n        },\n        /**\n         * 删除动画片段\n         * @param {module:zrender/animation/Clip} clip\n         */\n        removeClip: function(clip) {\n            var idx = util.indexOf(this._clips, clip);\n            if (idx >= 0) {\n                this._clips.splice(idx, 1);\n            }\n        },\n\n        /**\n         * 删除动画片段\n         * @param {module:zrender/animation/Animator} animator\n         */\n        removeAnimator: function (animator) {\n            var clips = animator.getClips();\n            for (var i = 0; i < clips.length; i++) {\n                this.removeClip(clips[i]);\n            }\n            animator.animation = null;\n        },\n\n        _update: function() {\n\n            var time = new Date().getTime() - this._pausedTime;\n            var delta = time - this._time;\n            var clips = this._clips;\n            var len = clips.length;\n\n            var deferredEvents = [];\n            var deferredClips = [];\n            for (var i = 0; i < len; i++) {\n                var clip = clips[i];\n                var e = clip.step(time, delta);\n                // Throw out the events need to be called after\n                // stage.update, like destroy\n                if (e) {\n                    deferredEvents.push(e);\n                    deferredClips.push(clip);\n                }\n            }\n\n            // Remove the finished clip\n            for (var i = 0; i < len;) {\n                if (clips[i]._needsRemove) {\n                    clips[i] = clips[len - 1];\n                    clips.pop();\n                    len--;\n                }\n                else {\n                    i++;\n                }\n            }\n\n            len = deferredEvents.length;\n            for (var i = 0; i < len; i++) {\n                deferredClips[i].fire(deferredEvents[i]);\n            }\n\n            this._time = time;\n\n            this.onframe(delta);\n\n            this.trigger('frame', delta);\n\n            if (this.stage.update) {\n                this.stage.update();\n            }\n        },\n\n        _startLoop: function () {\n            var self = this;\n\n            this._running = true;\n\n            function step() {\n                if (self._running) {\n\n                    requestAnimationFrame(step);\n\n                    !self._paused && self._update();\n                }\n            }\n\n            requestAnimationFrame(step);\n        },\n\n        /**\n         * 开始运行动画\n         */\n        start: function () {\n\n            this._time = new Date().getTime();\n            this._pausedTime = 0;\n\n            this._startLoop();\n        },\n        /**\n         * 停止运行动画\n         */\n        stop: function () {\n            this._running = false;\n        },\n\n        /**\n         * Pause\n         */\n        pause: function () {\n            if (!this._paused) {\n                this._pauseStart = new Date().getTime();\n                this._paused = true;\n            }\n        },\n\n        /**\n         * Resume\n         */\n        resume: function () {\n            if (this._paused) {\n                this._pausedTime += (new Date().getTime()) - this._pauseStart;\n                this._paused = false;\n            }\n        },\n\n        /**\n         * 清除所有动画片段\n         */\n        clear: function () {\n            this._clips = [];\n        },\n        /**\n         * 对一个目标创建一个animator对象，可以指定目标中的属性使用动画\n         * @param  {Object} target\n         * @param  {Object} options\n         * @param  {boolean} [options.loop=false] 是否循环播放动画\n         * @param  {Function} [options.getter=null]\n         *         如果指定getter函数，会通过getter函数取属性值\n         * @param  {Function} [options.setter=null]\n         *         如果指定setter函数，会通过setter函数设置属性值\n         * @return {module:zrender/animation/Animation~Animator}\n         */\n        // TODO Gap\n        animate: function (target, options) {\n            options = options || {};\n\n            var animator = new Animator(\n                target,\n                options.loop,\n                options.getter,\n                options.setter\n            );\n\n            this.addAnimator(animator);\n\n            return animator;\n        }\n    };\n\n    util.mixin(Animation, Dispatcher);\n\n    module.exports = Animation;\n\n\n\n/***/ }),\n/* 422 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * 动画主控制器\n * @config target 动画对象，可以是数组，如果是数组的话会批量分发onframe等事件\n * @config life(1000) 动画时长\n * @config delay(0) 动画延迟时间\n * @config loop(true)\n * @config gap(0) 循环的间隔时间\n * @config onframe\n * @config easing(optional)\n * @config ondestroy(optional)\n * @config onrestart(optional)\n *\n * TODO pause\n */\n\n\n    var easingFuncs = __webpack_require__(423);\n\n    function Clip(options) {\n\n        this._target = options.target;\n\n        // 生命周期\n        this._life = options.life || 1000;\n        // 延时\n        this._delay = options.delay || 0;\n        // 开始时间\n        // this._startTime = new Date().getTime() + this._delay;// 单位毫秒\n        this._initialized = false;\n\n        // 是否循环\n        this.loop = options.loop == null ? false : options.loop;\n\n        this.gap = options.gap || 0;\n\n        this.easing = options.easing || 'Linear';\n\n        this.onframe = options.onframe;\n        this.ondestroy = options.ondestroy;\n        this.onrestart = options.onrestart;\n\n        this._pausedTime = 0;\n        this._paused = false;\n    }\n\n    Clip.prototype = {\n\n        constructor: Clip,\n\n        step: function (globalTime, deltaTime) {\n            // Set startTime on first step, or _startTime may has milleseconds different between clips\n            // PENDING\n            if (!this._initialized) {\n                this._startTime = globalTime + this._delay;\n                this._initialized = true;\n            }\n\n            if (this._paused) {\n                this._pausedTime += deltaTime;\n                return;\n            }\n\n            var percent = (globalTime - this._startTime - this._pausedTime) / this._life;\n\n            // 还没开始\n            if (percent < 0) {\n                return;\n            }\n\n            percent = Math.min(percent, 1);\n\n            var easing = this.easing;\n            var easingFunc = typeof easing == 'string' ? easingFuncs[easing] : easing;\n            var schedule = typeof easingFunc === 'function'\n                ? easingFunc(percent)\n                : percent;\n\n            this.fire('frame', schedule);\n\n            // 结束\n            if (percent == 1) {\n                if (this.loop) {\n                    this.restart (globalTime);\n                    // 重新开始周期\n                    // 抛出而不是直接调用事件直到 stage.update 后再统一调用这些事件\n                    return 'restart';\n                }\n\n                // 动画完成将这个控制器标识为待删除\n                // 在Animation.update中进行批量删除\n                this._needsRemove = true;\n                return 'destroy';\n            }\n\n            return null;\n        },\n\n        restart: function (globalTime) {\n            var remainder = (globalTime - this._startTime - this._pausedTime) % this._life;\n            this._startTime = globalTime - remainder + this.gap;\n            this._pausedTime = 0;\n\n            this._needsRemove = false;\n        },\n\n        fire: function (eventType, arg) {\n            eventType = 'on' + eventType;\n            if (this[eventType]) {\n                this[eventType](this._target, arg);\n            }\n        },\n\n        pause: function () {\n            this._paused = true;\n        },\n\n        resume: function () {\n            this._paused = false;\n        }\n    };\n\n    module.exports = Clip;\n\n\n\n/***/ }),\n/* 423 */\n/***/ (function(module, exports) {\n\n/**\n * 缓动代码来自 https://github.com/sole/tween.js/blob/master/src/Tween.js\n * @see http://sole.github.io/tween.js/examples/03_graphs.html\n * @exports zrender/animation/easing\n */\n\n    var easing = {\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        linear: function (k) {\n            return k;\n        },\n\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        quadraticIn: function (k) {\n            return k * k;\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        quadraticOut: function (k) {\n            return k * (2 - k);\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        quadraticInOut: function (k) {\n            if ((k *= 2) < 1) {\n                return 0.5 * k * k;\n            }\n            return -0.5 * (--k * (k - 2) - 1);\n        },\n\n        // 三次方的缓动（t^3）\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        cubicIn: function (k) {\n            return k * k * k;\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        cubicOut: function (k) {\n            return --k * k * k + 1;\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        cubicInOut: function (k) {\n            if ((k *= 2) < 1) {\n                return 0.5 * k * k * k;\n            }\n            return 0.5 * ((k -= 2) * k * k + 2);\n        },\n\n        // 四次方的缓动（t^4）\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        quarticIn: function (k) {\n            return k * k * k * k;\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        quarticOut: function (k) {\n            return 1 - (--k * k * k * k);\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        quarticInOut: function (k) {\n            if ((k *= 2) < 1) {\n                return 0.5 * k * k * k * k;\n            }\n            return -0.5 * ((k -= 2) * k * k * k - 2);\n        },\n\n        // 五次方的缓动（t^5）\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        quinticIn: function (k) {\n            return k * k * k * k * k;\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        quinticOut: function (k) {\n            return --k * k * k * k * k + 1;\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        quinticInOut: function (k) {\n            if ((k *= 2) < 1) {\n                return 0.5 * k * k * k * k * k;\n            }\n            return 0.5 * ((k -= 2) * k * k * k * k + 2);\n        },\n\n        // 正弦曲线的缓动（sin(t)）\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        sinusoidalIn: function (k) {\n            return 1 - Math.cos(k * Math.PI / 2);\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        sinusoidalOut: function (k) {\n            return Math.sin(k * Math.PI / 2);\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        sinusoidalInOut: function (k) {\n            return 0.5 * (1 - Math.cos(Math.PI * k));\n        },\n\n        // 指数曲线的缓动（2^t）\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        exponentialIn: function (k) {\n            return k === 0 ? 0 : Math.pow(1024, k - 1);\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        exponentialOut: function (k) {\n            return k === 1 ? 1 : 1 - Math.pow(2, -10 * k);\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        exponentialInOut: function (k) {\n            if (k === 0) {\n                return 0;\n            }\n            if (k === 1) {\n                return 1;\n            }\n            if ((k *= 2) < 1) {\n                return 0.5 * Math.pow(1024, k - 1);\n            }\n            return 0.5 * (-Math.pow(2, -10 * (k - 1)) + 2);\n        },\n\n        // 圆形曲线的缓动（sqrt(1-t^2)）\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        circularIn: function (k) {\n            return 1 - Math.sqrt(1 - k * k);\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        circularOut: function (k) {\n            return Math.sqrt(1 - (--k * k));\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        circularInOut: function (k) {\n            if ((k *= 2) < 1) {\n                return -0.5 * (Math.sqrt(1 - k * k) - 1);\n            }\n            return 0.5 * (Math.sqrt(1 - (k -= 2) * k) + 1);\n        },\n\n        // 创建类似于弹簧在停止前来回振荡的动画\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        elasticIn: function (k) {\n            var s;\n            var a = 0.1;\n            var p = 0.4;\n            if (k === 0) {\n                return 0;\n            }\n            if (k === 1) {\n                return 1;\n            }\n            if (!a || a < 1) {\n                a = 1; s = p / 4;\n            }\n            else {\n                s = p * Math.asin(1 / a) / (2 * Math.PI);\n            }\n            return -(a * Math.pow(2, 10 * (k -= 1)) *\n                        Math.sin((k - s) * (2 * Math.PI) / p));\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        elasticOut: function (k) {\n            var s;\n            var a = 0.1;\n            var p = 0.4;\n            if (k === 0) {\n                return 0;\n            }\n            if (k === 1) {\n                return 1;\n            }\n            if (!a || a < 1) {\n                a = 1; s = p / 4;\n            }\n            else {\n                s = p * Math.asin(1 / a) / (2 * Math.PI);\n            }\n            return (a * Math.pow(2, -10 * k) *\n                    Math.sin((k - s) * (2 * Math.PI) / p) + 1);\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        elasticInOut: function (k) {\n            var s;\n            var a = 0.1;\n            var p = 0.4;\n            if (k === 0) {\n                return 0;\n            }\n            if (k === 1) {\n                return 1;\n            }\n            if (!a || a < 1) {\n                a = 1; s = p / 4;\n            }\n            else {\n                s = p * Math.asin(1 / a) / (2 * Math.PI);\n            }\n            if ((k *= 2) < 1) {\n                return -0.5 * (a * Math.pow(2, 10 * (k -= 1))\n                    * Math.sin((k - s) * (2 * Math.PI) / p));\n            }\n            return a * Math.pow(2, -10 * (k -= 1))\n                    * Math.sin((k - s) * (2 * Math.PI) / p) * 0.5 + 1;\n\n        },\n\n        // 在某一动画开始沿指示的路径进行动画处理前稍稍收回该动画的移动\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        backIn: function (k) {\n            var s = 1.70158;\n            return k * k * ((s + 1) * k - s);\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        backOut: function (k) {\n            var s = 1.70158;\n            return --k * k * ((s + 1) * k + s) + 1;\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        backInOut: function (k) {\n            var s = 1.70158 * 1.525;\n            if ((k *= 2) < 1) {\n                return 0.5 * (k * k * ((s + 1) * k - s));\n            }\n            return 0.5 * ((k -= 2) * k * ((s + 1) * k + s) + 2);\n        },\n\n        // 创建弹跳效果\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        bounceIn: function (k) {\n            return 1 - easing.bounceOut(1 - k);\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        bounceOut: function (k) {\n            if (k < (1 / 2.75)) {\n                return 7.5625 * k * k;\n            }\n            else if (k < (2 / 2.75)) {\n                return 7.5625 * (k -= (1.5 / 2.75)) * k + 0.75;\n            }\n            else if (k < (2.5 / 2.75)) {\n                return 7.5625 * (k -= (2.25 / 2.75)) * k + 0.9375;\n            }\n            else {\n                return 7.5625 * (k -= (2.625 / 2.75)) * k + 0.984375;\n            }\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        bounceInOut: function (k) {\n            if (k < 0.5) {\n                return easing.bounceIn(k * 2) * 0.5;\n            }\n            return easing.bounceOut(k * 2 - 1) * 0.5 + 0.5;\n        }\n    };\n\n    module.exports = easing;\n\n\n\n\n/***/ }),\n/* 424 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var normalizeRadian = __webpack_require__(358).normalizeRadian;\n    var PI2 = Math.PI * 2;\n\n    module.exports = {\n        /**\n         * 圆弧描边包含判断\n         * @param  {number}  cx\n         * @param  {number}  cy\n         * @param  {number}  r\n         * @param  {number}  startAngle\n         * @param  {number}  endAngle\n         * @param  {boolean}  anticlockwise\n         * @param  {number} lineWidth\n         * @param  {number}  x\n         * @param  {number}  y\n         * @return {Boolean}\n         */\n        containStroke: function (\n            cx, cy, r, startAngle, endAngle, anticlockwise,\n            lineWidth, x, y\n        ) {\n\n            if (lineWidth === 0) {\n                return false;\n            }\n            var _l = lineWidth;\n\n            x -= cx;\n            y -= cy;\n            var d = Math.sqrt(x * x + y * y);\n\n            if ((d - _l > r) || (d + _l < r)) {\n                return false;\n            }\n            if (Math.abs(startAngle - endAngle) % PI2 < 1e-4) {\n                // Is a circle\n                return true;\n            }\n            if (anticlockwise) {\n                var tmp = startAngle;\n                startAngle = normalizeRadian(endAngle);\n                endAngle = normalizeRadian(tmp);\n            } else {\n                startAngle = normalizeRadian(startAngle);\n                endAngle = normalizeRadian(endAngle);\n            }\n            if (startAngle > endAngle) {\n                endAngle += PI2;\n            }\n\n            var angle = Math.atan2(y, x);\n            if (angle < 0) {\n                angle += PI2;\n            }\n            return (angle >= startAngle && angle <= endAngle)\n                || (angle + PI2 >= startAngle && angle + PI2 <= endAngle);\n        }\n    };\n\n\n/***/ }),\n/* 425 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var curve = __webpack_require__(329);\n\n    module.exports = {\n        /**\n         * 三次贝塞尔曲线描边包含判断\n         * @param  {number}  x0\n         * @param  {number}  y0\n         * @param  {number}  x1\n         * @param  {number}  y1\n         * @param  {number}  x2\n         * @param  {number}  y2\n         * @param  {number}  x3\n         * @param  {number}  y3\n         * @param  {number}  lineWidth\n         * @param  {number}  x\n         * @param  {number}  y\n         * @return {boolean}\n         */\n        containStroke: function(x0, y0, x1, y1, x2, y2, x3, y3, lineWidth, x, y) {\n            if (lineWidth === 0) {\n                return false;\n            }\n            var _l = lineWidth;\n            // Quick reject\n            if (\n                (y > y0 + _l && y > y1 + _l && y > y2 + _l && y > y3 + _l)\n                || (y < y0 - _l && y < y1 - _l && y < y2 - _l && y < y3 - _l)\n                || (x > x0 + _l && x > x1 + _l && x > x2 + _l && x > x3 + _l)\n                || (x < x0 - _l && x < x1 - _l && x < x2 - _l && x < x3 - _l)\n            ) {\n                return false;\n            }\n            var d = curve.cubicProjectPoint(\n                x0, y0, x1, y1, x2, y2, x3, y3,\n                x, y, null\n            );\n            return d <= _l / 2;\n        }\n    };\n\n\n/***/ }),\n/* 426 */\n/***/ (function(module, exports) {\n\n\n    module.exports = {\n        /**\n         * 线段包含判断\n         * @param  {number}  x0\n         * @param  {number}  y0\n         * @param  {number}  x1\n         * @param  {number}  y1\n         * @param  {number}  lineWidth\n         * @param  {number}  x\n         * @param  {number}  y\n         * @return {boolean}\n         */\n        containStroke: function (x0, y0, x1, y1, lineWidth, x, y) {\n            if (lineWidth === 0) {\n                return false;\n            }\n            var _l = lineWidth;\n            var _a = 0;\n            var _b = x0;\n            // Quick reject\n            if (\n                (y > y0 + _l && y > y1 + _l)\n                || (y < y0 - _l && y < y1 - _l)\n                || (x > x0 + _l && x > x1 + _l)\n                || (x < x0 - _l && x < x1 - _l)\n            ) {\n                return false;\n            }\n\n            if (x0 !== x1) {\n                _a = (y0 - y1) / (x0 - x1);\n                _b = (x0 * y1 - x1 * y0) / (x0 - x1) ;\n            }\n            else {\n                return Math.abs(x - x0) <= _l / 2;\n            }\n            var tmp = _a * x - y + _b;\n            var _s = tmp * tmp / (_a * _a + 1);\n            return _s <= _l / 2 * _l / 2;\n        }\n    };\n\n\n/***/ }),\n/* 427 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n\n    var CMD = __webpack_require__(337).CMD;\n    var line = __webpack_require__(426);\n    var cubic = __webpack_require__(425);\n    var quadratic = __webpack_require__(428);\n    var arc = __webpack_require__(424);\n    var normalizeRadian = __webpack_require__(358).normalizeRadian;\n    var curve = __webpack_require__(329);\n\n    var windingLine = __webpack_require__(429);\n\n    var containStroke = line.containStroke;\n\n    var PI2 = Math.PI * 2;\n\n    var EPSILON = 1e-4;\n\n    function isAroundEqual(a, b) {\n        return Math.abs(a - b) < EPSILON;\n    }\n\n    // 临时数组\n    var roots = [-1, -1, -1];\n    var extrema = [-1, -1];\n\n    function swapExtrema() {\n        var tmp = extrema[0];\n        extrema[0] = extrema[1];\n        extrema[1] = tmp;\n    }\n\n    function windingCubic(x0, y0, x1, y1, x2, y2, x3, y3, x, y) {\n        // Quick reject\n        if (\n            (y > y0 && y > y1 && y > y2 && y > y3)\n            || (y < y0 && y < y1 && y < y2 && y < y3)\n        ) {\n            return 0;\n        }\n        var nRoots = curve.cubicRootAt(y0, y1, y2, y3, y, roots);\n        if (nRoots === 0) {\n            return 0;\n        }\n        else {\n            var w = 0;\n            var nExtrema = -1;\n            var y0_, y1_;\n            for (var i = 0; i < nRoots; i++) {\n                var t = roots[i];\n\n                // Avoid winding error when intersection point is the connect point of two line of polygon\n                var unit = (t === 0 || t === 1) ? 0.5 : 1;\n\n                var x_ = curve.cubicAt(x0, x1, x2, x3, t);\n                if (x_ < x) { // Quick reject\n                    continue;\n                }\n                if (nExtrema < 0) {\n                    nExtrema = curve.cubicExtrema(y0, y1, y2, y3, extrema);\n                    if (extrema[1] < extrema[0] && nExtrema > 1) {\n                        swapExtrema();\n                    }\n                    y0_ = curve.cubicAt(y0, y1, y2, y3, extrema[0]);\n                    if (nExtrema > 1) {\n                        y1_ = curve.cubicAt(y0, y1, y2, y3, extrema[1]);\n                    }\n                }\n                if (nExtrema == 2) {\n                    // 分成三段单调函数\n                    if (t < extrema[0]) {\n                        w += y0_ < y0 ? unit : -unit;\n                    }\n                    else if (t < extrema[1]) {\n                        w += y1_ < y0_ ? unit : -unit;\n                    }\n                    else {\n                        w += y3 < y1_ ? unit : -unit;\n                    }\n                }\n                else {\n                    // 分成两段单调函数\n                    if (t < extrema[0]) {\n                        w += y0_ < y0 ? unit : -unit;\n                    }\n                    else {\n                        w += y3 < y0_ ? unit : -unit;\n                    }\n                }\n            }\n            return w;\n        }\n    }\n\n    function windingQuadratic(x0, y0, x1, y1, x2, y2, x, y) {\n        // Quick reject\n        if (\n            (y > y0 && y > y1 && y > y2)\n            || (y < y0 && y < y1 && y < y2)\n        ) {\n            return 0;\n        }\n        var nRoots = curve.quadraticRootAt(y0, y1, y2, y, roots);\n        if (nRoots === 0) {\n            return 0;\n        }\n        else {\n            var t = curve.quadraticExtremum(y0, y1, y2);\n            if (t >= 0 && t <= 1) {\n                var w = 0;\n                var y_ = curve.quadraticAt(y0, y1, y2, t);\n                for (var i = 0; i < nRoots; i++) {\n                    // Remove one endpoint.\n                    var unit = (roots[i] === 0 || roots[i] === 1) ? 0.5 : 1;\n\n                    var x_ = curve.quadraticAt(x0, x1, x2, roots[i]);\n                    if (x_ < x) {   // Quick reject\n                        continue;\n                    }\n                    if (roots[i] < t) {\n                        w += y_ < y0 ? unit : -unit;\n                    }\n                    else {\n                        w += y2 < y_ ? unit : -unit;\n                    }\n                }\n                return w;\n            }\n            else {\n                // Remove one endpoint.\n                var unit = (roots[0] === 0 || roots[0] === 1) ? 0.5 : 1;\n\n                var x_ = curve.quadraticAt(x0, x1, x2, roots[0]);\n                if (x_ < x) {   // Quick reject\n                    return 0;\n                }\n                return y2 < y0 ? unit : -unit;\n            }\n        }\n    }\n\n    // TODO\n    // Arc 旋转\n    function windingArc(\n        cx, cy, r, startAngle, endAngle, anticlockwise, x, y\n    ) {\n        y -= cy;\n        if (y > r || y < -r) {\n            return 0;\n        }\n        var tmp = Math.sqrt(r * r - y * y);\n        roots[0] = -tmp;\n        roots[1] = tmp;\n\n        var diff = Math.abs(startAngle - endAngle);\n        if (diff < 1e-4) {\n            return 0;\n        }\n        if (diff % PI2 < 1e-4) {\n            // Is a circle\n            startAngle = 0;\n            endAngle = PI2;\n            var dir = anticlockwise ? 1 : -1;\n            if (x >= roots[0] + cx && x <= roots[1] + cx) {\n                return dir;\n            } else {\n                return 0;\n            }\n        }\n\n        if (anticlockwise) {\n            var tmp = startAngle;\n            startAngle = normalizeRadian(endAngle);\n            endAngle = normalizeRadian(tmp);\n        }\n        else {\n            startAngle = normalizeRadian(startAngle);\n            endAngle = normalizeRadian(endAngle);\n        }\n        if (startAngle > endAngle) {\n            endAngle += PI2;\n        }\n\n        var w = 0;\n        for (var i = 0; i < 2; i++) {\n            var x_ = roots[i];\n            if (x_ + cx > x) {\n                var angle = Math.atan2(y, x_);\n                var dir = anticlockwise ? 1 : -1;\n                if (angle < 0) {\n                    angle = PI2 + angle;\n                }\n                if (\n                    (angle >= startAngle && angle <= endAngle)\n                    || (angle + PI2 >= startAngle && angle + PI2 <= endAngle)\n                ) {\n                    if (angle > Math.PI / 2 && angle < Math.PI * 1.5) {\n                        dir = -dir;\n                    }\n                    w += dir;\n                }\n            }\n        }\n        return w;\n    }\n\n    function containPath(data, lineWidth, isStroke, x, y) {\n        var w = 0;\n        var xi = 0;\n        var yi = 0;\n        var x0 = 0;\n        var y0 = 0;\n\n        for (var i = 0; i < data.length;) {\n            var cmd = data[i++];\n            // Begin a new subpath\n            if (cmd === CMD.M && i > 1) {\n                // Close previous subpath\n                if (!isStroke) {\n                    w += windingLine(xi, yi, x0, y0, x, y);\n                }\n                // 如果被任何一个 subpath 包含\n                // if (w !== 0) {\n                //     return true;\n                // }\n            }\n\n            if (i == 1) {\n                // 如果第一个命令是 L, C, Q\n                // 则 previous point 同绘制命令的第一个 point\n                //\n                // 第一个命令为 Arc 的情况下会在后面特殊处理\n                xi = data[i];\n                yi = data[i + 1];\n\n                x0 = xi;\n                y0 = yi;\n            }\n\n            switch (cmd) {\n                case CMD.M:\n                    // moveTo 命令重新创建一个新的 subpath, 并且更新新的起点\n                    // 在 closePath 的时候使用\n                    x0 = data[i++];\n                    y0 = data[i++];\n                    xi = x0;\n                    yi = y0;\n                    break;\n                case CMD.L:\n                    if (isStroke) {\n                        if (containStroke(xi, yi, data[i], data[i + 1], lineWidth, x, y)) {\n                            return true;\n                        }\n                    }\n                    else {\n                        // NOTE 在第一个命令为 L, C, Q 的时候会计算出 NaN\n                        w += windingLine(xi, yi, data[i], data[i + 1], x, y) || 0;\n                    }\n                    xi = data[i++];\n                    yi = data[i++];\n                    break;\n                case CMD.C:\n                    if (isStroke) {\n                        if (cubic.containStroke(xi, yi,\n                            data[i++], data[i++], data[i++], data[i++], data[i], data[i + 1],\n                            lineWidth, x, y\n                        )) {\n                            return true;\n                        }\n                    }\n                    else {\n                        w += windingCubic(\n                            xi, yi,\n                            data[i++], data[i++], data[i++], data[i++], data[i], data[i + 1],\n                            x, y\n                        ) || 0;\n                    }\n                    xi = data[i++];\n                    yi = data[i++];\n                    break;\n                case CMD.Q:\n                    if (isStroke) {\n                        if (quadratic.containStroke(xi, yi,\n                            data[i++], data[i++], data[i], data[i + 1],\n                            lineWidth, x, y\n                        )) {\n                            return true;\n                        }\n                    }\n                    else {\n                        w += windingQuadratic(\n                            xi, yi,\n                            data[i++], data[i++], data[i], data[i + 1],\n                            x, y\n                        ) || 0;\n                    }\n                    xi = data[i++];\n                    yi = data[i++];\n                    break;\n                case CMD.A:\n                    // TODO Arc 判断的开销比较大\n                    var cx = data[i++];\n                    var cy = data[i++];\n                    var rx = data[i++];\n                    var ry = data[i++];\n                    var theta = data[i++];\n                    var dTheta = data[i++];\n                    // TODO Arc 旋转\n                    var psi = data[i++];\n                    var anticlockwise = 1 - data[i++];\n                    var x1 = Math.cos(theta) * rx + cx;\n                    var y1 = Math.sin(theta) * ry + cy;\n                    // 不是直接使用 arc 命令\n                    if (i > 1) {\n                        w += windingLine(xi, yi, x1, y1, x, y);\n                    }\n                    else {\n                        // 第一个命令起点还未定义\n                        x0 = x1;\n                        y0 = y1;\n                    }\n                    // zr 使用scale来模拟椭圆, 这里也对x做一定的缩放\n                    var _x = (x - cx) * ry / rx + cx;\n                    if (isStroke) {\n                        if (arc.containStroke(\n                            cx, cy, ry, theta, theta + dTheta, anticlockwise,\n                            lineWidth, _x, y\n                        )) {\n                            return true;\n                        }\n                    }\n                    else {\n                        w += windingArc(\n                            cx, cy, ry, theta, theta + dTheta, anticlockwise,\n                            _x, y\n                        );\n                    }\n                    xi = Math.cos(theta + dTheta) * rx + cx;\n                    yi = Math.sin(theta + dTheta) * ry + cy;\n                    break;\n                case CMD.R:\n                    x0 = xi = data[i++];\n                    y0 = yi = data[i++];\n                    var width = data[i++];\n                    var height = data[i++];\n                    var x1 = x0 + width;\n                    var y1 = y0 + height;\n                    if (isStroke) {\n                        if (containStroke(x0, y0, x1, y0, lineWidth, x, y)\n                          || containStroke(x1, y0, x1, y1, lineWidth, x, y)\n                          || containStroke(x1, y1, x0, y1, lineWidth, x, y)\n                          || containStroke(x0, y1, x0, y0, lineWidth, x, y)\n                        ) {\n                            return true;\n                        }\n                    }\n                    else {\n                        // FIXME Clockwise ?\n                        w += windingLine(x1, y0, x1, y1, x, y);\n                        w += windingLine(x0, y1, x0, y0, x, y);\n                    }\n                    break;\n                case CMD.Z:\n                    if (isStroke) {\n                        if (containStroke(\n                            xi, yi, x0, y0, lineWidth, x, y\n                        )) {\n                            return true;\n                        }\n                    }\n                    else {\n                        // Close a subpath\n                        w += windingLine(xi, yi, x0, y0, x, y);\n                        // 如果被任何一个 subpath 包含\n                        // FIXME subpaths may overlap\n                        // if (w !== 0) {\n                        //     return true;\n                        // }\n                    }\n                    xi = x0;\n                    yi = y0;\n                    break;\n            }\n        }\n        if (!isStroke && !isAroundEqual(yi, y0)) {\n            w += windingLine(xi, yi, x0, y0, x, y) || 0;\n        }\n        return w !== 0;\n    }\n\n    module.exports = {\n        contain: function (pathData, x, y) {\n            return containPath(pathData, 0, false, x, y);\n        },\n\n        containStroke: function (pathData, lineWidth, x, y) {\n            return containPath(pathData, lineWidth, true, x, y);\n        }\n    };\n\n\n/***/ }),\n/* 428 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var curve = __webpack_require__(329);\n\n    module.exports = {\n        /**\n         * 二次贝塞尔曲线描边包含判断\n         * @param  {number}  x0\n         * @param  {number}  y0\n         * @param  {number}  x1\n         * @param  {number}  y1\n         * @param  {number}  x2\n         * @param  {number}  y2\n         * @param  {number}  lineWidth\n         * @param  {number}  x\n         * @param  {number}  y\n         * @return {boolean}\n         */\n        containStroke: function (x0, y0, x1, y1, x2, y2, lineWidth, x, y) {\n            if (lineWidth === 0) {\n                return false;\n            }\n            var _l = lineWidth;\n            // Quick reject\n            if (\n                (y > y0 + _l && y > y1 + _l && y > y2 + _l)\n                || (y < y0 - _l && y < y1 - _l && y < y2 - _l)\n                || (x > x0 + _l && x > x1 + _l && x > x2 + _l)\n                || (x < x0 - _l && x < x1 - _l && x < x2 - _l)\n            ) {\n                return false;\n            }\n            var d = curve.quadraticProjectPoint(\n                x0, y0, x1, y1, x2, y2,\n                x, y, null\n            );\n            return d <= _l / 2;\n        }\n    };\n\n\n/***/ }),\n/* 429 */\n/***/ (function(module, exports) {\n\n\n    module.exports = function windingLine(x0, y0, x1, y1, x, y) {\n        if ((y > y0 && y > y1) || (y < y0 && y < y1)) {\n            return 0;\n        }\n        // Ignore horizontal line\n        if (y1 === y0) {\n            return 0;\n        }\n        var dir = y1 < y0 ? 1 : -1;\n        var t = (y - y0) / (y1 - y0);\n\n        // Avoid winding error when intersection point is the connect point of two line of polygon\n        if (t === 1 || t === 0) {\n            dir = y1 < y0 ? 0.5 : -0.5;\n        }\n\n        var x_ = t * (x1 - x0) + x0;\n\n        return x_ > x ? dir : 0;\n    };\n\n\n/***/ }),\n/* 430 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * Only implements needed gestures for mobile.\n */\n\n\n    var eventUtil = __webpack_require__(333);\n\n    var GestureMgr = function () {\n\n        /**\n         * @private\n         * @type {Array.<Object>}\n         */\n        this._track = [];\n    };\n\n    GestureMgr.prototype = {\n\n        constructor: GestureMgr,\n\n        recognize: function (event, target, root) {\n            this._doTrack(event, target, root);\n            return this._recognize(event);\n        },\n\n        clear: function () {\n            this._track.length = 0;\n            return this;\n        },\n\n        _doTrack: function (event, target, root) {\n            var touches = event.touches;\n\n            if (!touches) {\n                return;\n            }\n\n            var trackItem = {\n                points: [],\n                touches: [],\n                target: target,\n                event: event\n            };\n\n            for (var i = 0, len = touches.length; i < len; i++) {\n                var touch = touches[i];\n                var pos = eventUtil.clientToLocal(root, touch, {});\n                trackItem.points.push([pos.zrX, pos.zrY]);\n                trackItem.touches.push(touch);\n            }\n\n            this._track.push(trackItem);\n        },\n\n        _recognize: function (event) {\n            for (var eventName in recognizers) {\n                if (recognizers.hasOwnProperty(eventName)) {\n                    var gestureInfo = recognizers[eventName](this._track, event);\n                    if (gestureInfo) {\n                        return gestureInfo;\n                    }\n                }\n            }\n        }\n    };\n\n    function dist(pointPair) {\n        var dx = pointPair[1][0] - pointPair[0][0];\n        var dy = pointPair[1][1] - pointPair[0][1];\n\n        return Math.sqrt(dx * dx + dy * dy);\n    }\n\n    function center(pointPair) {\n        return [\n            (pointPair[0][0] + pointPair[1][0]) / 2,\n            (pointPair[0][1] + pointPair[1][1]) / 2\n        ];\n    }\n\n    var recognizers = {\n\n        pinch: function (track, event) {\n            var trackLen = track.length;\n\n            if (!trackLen) {\n                return;\n            }\n\n            var pinchEnd = (track[trackLen - 1] || {}).points;\n            var pinchPre = (track[trackLen - 2] || {}).points || pinchEnd;\n\n            if (pinchPre\n                && pinchPre.length > 1\n                && pinchEnd\n                && pinchEnd.length > 1\n            ) {\n                var pinchScale = dist(pinchEnd) / dist(pinchPre);\n                !isFinite(pinchScale) && (pinchScale = 1);\n\n                event.pinchScale = pinchScale;\n\n                var pinchCenter = center(pinchEnd);\n                event.pinchX = pinchCenter[0];\n                event.pinchY = pinchCenter[1];\n\n                return {\n                    type: 'pinch',\n                    target: track[0].target,\n                    event: event\n                };\n            }\n        }\n\n        // Only pinch currently.\n    };\n\n    module.exports = GestureMgr;\n\n\n\n/***/ }),\n/* 431 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * @author Yi Shen(https://github.com/pissang)\n */\n\n\n    var vec2 = __webpack_require__(319);\n    var curve = __webpack_require__(329);\n\n    var bbox = {};\n    var mathMin = Math.min;\n    var mathMax = Math.max;\n    var mathSin = Math.sin;\n    var mathCos = Math.cos;\n\n    var start = vec2.create();\n    var end = vec2.create();\n    var extremity = vec2.create();\n\n    var PI2 = Math.PI * 2;\n    /**\n     * 从顶点数组中计算出最小包围盒，写入`min`和`max`中\n     * @module zrender/core/bbox\n     * @param {Array<Object>} points 顶点数组\n     * @param {number} min\n     * @param {number} max\n     */\n    bbox.fromPoints = function(points, min, max) {\n        if (points.length === 0) {\n            return;\n        }\n        var p = points[0];\n        var left = p[0];\n        var right = p[0];\n        var top = p[1];\n        var bottom = p[1];\n        var i;\n\n        for (i = 1; i < points.length; i++) {\n            p = points[i];\n            left = mathMin(left, p[0]);\n            right = mathMax(right, p[0]);\n            top = mathMin(top, p[1]);\n            bottom = mathMax(bottom, p[1]);\n        }\n\n        min[0] = left;\n        min[1] = top;\n        max[0] = right;\n        max[1] = bottom;\n    };\n\n    /**\n     * @memberOf module:zrender/core/bbox\n     * @param {number} x0\n     * @param {number} y0\n     * @param {number} x1\n     * @param {number} y1\n     * @param {Array.<number>} min\n     * @param {Array.<number>} max\n     */\n    bbox.fromLine = function (x0, y0, x1, y1, min, max) {\n        min[0] = mathMin(x0, x1);\n        min[1] = mathMin(y0, y1);\n        max[0] = mathMax(x0, x1);\n        max[1] = mathMax(y0, y1);\n    };\n\n    var xDim = [];\n    var yDim = [];\n    /**\n     * 从三阶贝塞尔曲线(p0, p1, p2, p3)中计算出最小包围盒，写入`min`和`max`中\n     * @memberOf module:zrender/core/bbox\n     * @param {number} x0\n     * @param {number} y0\n     * @param {number} x1\n     * @param {number} y1\n     * @param {number} x2\n     * @param {number} y2\n     * @param {number} x3\n     * @param {number} y3\n     * @param {Array.<number>} min\n     * @param {Array.<number>} max\n     */\n    bbox.fromCubic = function(\n        x0, y0, x1, y1, x2, y2, x3, y3, min, max\n    ) {\n        var cubicExtrema = curve.cubicExtrema;\n        var cubicAt = curve.cubicAt;\n        var i;\n        var n = cubicExtrema(x0, x1, x2, x3, xDim);\n        min[0] = Infinity;\n        min[1] = Infinity;\n        max[0] = -Infinity;\n        max[1] = -Infinity;\n\n        for (i = 0; i < n; i++) {\n            var x = cubicAt(x0, x1, x2, x3, xDim[i]);\n            min[0] = mathMin(x, min[0]);\n            max[0] = mathMax(x, max[0]);\n        }\n        n = cubicExtrema(y0, y1, y2, y3, yDim);\n        for (i = 0; i < n; i++) {\n            var y = cubicAt(y0, y1, y2, y3, yDim[i]);\n            min[1] = mathMin(y, min[1]);\n            max[1] = mathMax(y, max[1]);\n        }\n\n        min[0] = mathMin(x0, min[0]);\n        max[0] = mathMax(x0, max[0]);\n        min[0] = mathMin(x3, min[0]);\n        max[0] = mathMax(x3, max[0]);\n\n        min[1] = mathMin(y0, min[1]);\n        max[1] = mathMax(y0, max[1]);\n        min[1] = mathMin(y3, min[1]);\n        max[1] = mathMax(y3, max[1]);\n    };\n\n    /**\n     * 从二阶贝塞尔曲线(p0, p1, p2)中计算出最小包围盒，写入`min`和`max`中\n     * @memberOf module:zrender/core/bbox\n     * @param {number} x0\n     * @param {number} y0\n     * @param {number} x1\n     * @param {number} y1\n     * @param {number} x2\n     * @param {number} y2\n     * @param {Array.<number>} min\n     * @param {Array.<number>} max\n     */\n    bbox.fromQuadratic = function(x0, y0, x1, y1, x2, y2, min, max) {\n        var quadraticExtremum = curve.quadraticExtremum;\n        var quadraticAt = curve.quadraticAt;\n        // Find extremities, where derivative in x dim or y dim is zero\n        var tx =\n            mathMax(\n                mathMin(quadraticExtremum(x0, x1, x2), 1), 0\n            );\n        var ty =\n            mathMax(\n                mathMin(quadraticExtremum(y0, y1, y2), 1), 0\n            );\n\n        var x = quadraticAt(x0, x1, x2, tx);\n        var y = quadraticAt(y0, y1, y2, ty);\n\n        min[0] = mathMin(x0, x2, x);\n        min[1] = mathMin(y0, y2, y);\n        max[0] = mathMax(x0, x2, x);\n        max[1] = mathMax(y0, y2, y);\n    };\n\n    /**\n     * 从圆弧中计算出最小包围盒，写入`min`和`max`中\n     * @method\n     * @memberOf module:zrender/core/bbox\n     * @param {number} x\n     * @param {number} y\n     * @param {number} rx\n     * @param {number} ry\n     * @param {number} startAngle\n     * @param {number} endAngle\n     * @param {number} anticlockwise\n     * @param {Array.<number>} min\n     * @param {Array.<number>} max\n     */\n    bbox.fromArc = function (\n        x, y, rx, ry, startAngle, endAngle, anticlockwise, min, max\n    ) {\n        var vec2Min = vec2.min;\n        var vec2Max = vec2.max;\n\n        var diff = Math.abs(startAngle - endAngle);\n\n\n        if (diff % PI2 < 1e-4 && diff > 1e-4) {\n            // Is a circle\n            min[0] = x - rx;\n            min[1] = y - ry;\n            max[0] = x + rx;\n            max[1] = y + ry;\n            return;\n        }\n\n        start[0] = mathCos(startAngle) * rx + x;\n        start[1] = mathSin(startAngle) * ry + y;\n\n        end[0] = mathCos(endAngle) * rx + x;\n        end[1] = mathSin(endAngle) * ry + y;\n\n        vec2Min(min, start, end);\n        vec2Max(max, start, end);\n\n        // Thresh to [0, Math.PI * 2]\n        startAngle = startAngle % (PI2);\n        if (startAngle < 0) {\n            startAngle = startAngle + PI2;\n        }\n        endAngle = endAngle % (PI2);\n        if (endAngle < 0) {\n            endAngle = endAngle + PI2;\n        }\n\n        if (startAngle > endAngle && !anticlockwise) {\n            endAngle += PI2;\n        }\n        else if (startAngle < endAngle && anticlockwise) {\n            startAngle += PI2;\n        }\n        if (anticlockwise) {\n            var tmp = endAngle;\n            endAngle = startAngle;\n            startAngle = tmp;\n        }\n\n        // var number = 0;\n        // var step = (anticlockwise ? -Math.PI : Math.PI) / 2;\n        for (var angle = 0; angle < endAngle; angle += Math.PI / 2) {\n            if (angle > startAngle) {\n                extremity[0] = mathCos(angle) * rx + x;\n                extremity[1] = mathSin(angle) * ry + y;\n\n                vec2Min(min, extremity, min);\n                vec2Max(max, extremity, max);\n            }\n        }\n    };\n\n    module.exports = bbox;\n\n\n\n/***/ }),\n/* 432 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var eventTool = __webpack_require__(333);\n    var zrUtil = __webpack_require__(315);\n    var Eventful = __webpack_require__(331);\n    var env = __webpack_require__(321);\n    var GestureMgr = __webpack_require__(430);\n\n    var addEventListener = eventTool.addEventListener;\n    var removeEventListener = eventTool.removeEventListener;\n    var normalizeEvent = eventTool.normalizeEvent;\n\n    var TOUCH_CLICK_DELAY = 300;\n\n    var mouseHandlerNames = [\n        'click', 'dblclick', 'mousewheel', 'mouseout',\n        'mouseup', 'mousedown', 'mousemove', 'contextmenu'\n    ];\n\n    var touchHandlerNames = [\n        'touchstart', 'touchend', 'touchmove'\n    ];\n\n    var pointerEventNames = {\n        pointerdown: 1, pointerup: 1, pointermove: 1, pointerout: 1\n    };\n\n    var pointerHandlerNames = zrUtil.map(mouseHandlerNames, function (name) {\n        var nm = name.replace('mouse', 'pointer');\n        return pointerEventNames[nm] ? nm : name;\n    });\n\n    function eventNameFix(name) {\n        return (name === 'mousewheel' && env.browser.firefox) ? 'DOMMouseScroll' : name;\n    }\n\n    function processGesture(proxy, event, stage) {\n        var gestureMgr = proxy._gestureMgr;\n\n        stage === 'start' && gestureMgr.clear();\n\n        var gestureInfo = gestureMgr.recognize(\n            event,\n            proxy.handler.findHover(event.zrX, event.zrY, null).target,\n            proxy.dom\n        );\n\n        stage === 'end' && gestureMgr.clear();\n\n        // Do not do any preventDefault here. Upper application do that if necessary.\n        if (gestureInfo) {\n            var type = gestureInfo.type;\n            event.gestureEvent = type;\n\n            proxy.handler.dispatchToElement({target: gestureInfo.target}, type, gestureInfo.event);\n        }\n    }\n\n    // function onMSGestureChange(proxy, event) {\n    //     if (event.translationX || event.translationY) {\n    //         // mousemove is carried by MSGesture to reduce the sensitivity.\n    //         proxy.handler.dispatchToElement(event.target, 'mousemove', event);\n    //     }\n    //     if (event.scale !== 1) {\n    //         event.pinchX = event.offsetX;\n    //         event.pinchY = event.offsetY;\n    //         event.pinchScale = event.scale;\n    //         proxy.handler.dispatchToElement(event.target, 'pinch', event);\n    //     }\n    // }\n\n    /**\n     * Prevent mouse event from being dispatched after Touch Events action\n     * @see <https://github.com/deltakosh/handjs/blob/master/src/hand.base.js>\n     * 1. Mobile browsers dispatch mouse events 300ms after touchend.\n     * 2. Chrome for Android dispatch mousedown for long-touch about 650ms\n     * Result: Blocking Mouse Events for 700ms.\n     */\n    function setTouchTimer(instance) {\n        instance._touching = true;\n        clearTimeout(instance._touchTimer);\n        instance._touchTimer = setTimeout(function () {\n            instance._touching = false;\n        }, 700);\n    }\n\n\n    var domHandlers = {\n        /**\n         * Mouse move handler\n         * @inner\n         * @param {Event} event\n         */\n        mousemove: function (event) {\n            event = normalizeEvent(this.dom, event);\n\n            this.trigger('mousemove', event);\n        },\n\n        /**\n         * Mouse out handler\n         * @inner\n         * @param {Event} event\n         */\n        mouseout: function (event) {\n            event = normalizeEvent(this.dom, event);\n\n            var element = event.toElement || event.relatedTarget;\n            if (element != this.dom) {\n                while (element && element.nodeType != 9) {\n                    // 忽略包含在root中的dom引起的mouseOut\n                    if (element === this.dom) {\n                        return;\n                    }\n\n                    element = element.parentNode;\n                }\n            }\n\n            this.trigger('mouseout', event);\n        },\n\n        /**\n         * Touch开始响应函数\n         * @inner\n         * @param {Event} event\n         */\n        touchstart: function (event) {\n            // Default mouse behaviour should not be disabled here.\n            // For example, page may needs to be slided.\n            event = normalizeEvent(this.dom, event);\n\n            // Mark touch, which is useful in distinguish touch and\n            // mouse event in upper applicatoin.\n            event.zrByTouch = true;\n\n            this._lastTouchMoment = new Date();\n\n            processGesture(this, event, 'start');\n\n            // In touch device, trigger `mousemove`(`mouseover`) should\n            // be triggered, and must before `mousedown` triggered.\n            domHandlers.mousemove.call(this, event);\n\n            domHandlers.mousedown.call(this, event);\n\n            setTouchTimer(this);\n        },\n\n        /**\n         * Touch移动响应函数\n         * @inner\n         * @param {Event} event\n         */\n        touchmove: function (event) {\n\n            event = normalizeEvent(this.dom, event);\n\n            // Mark touch, which is useful in distinguish touch and\n            // mouse event in upper applicatoin.\n            event.zrByTouch = true;\n\n            processGesture(this, event, 'change');\n\n            // Mouse move should always be triggered no matter whether\n            // there is gestrue event, because mouse move and pinch may\n            // be used at the same time.\n            domHandlers.mousemove.call(this, event);\n\n            setTouchTimer(this);\n        },\n\n        /**\n         * Touch结束响应函数\n         * @inner\n         * @param {Event} event\n         */\n        touchend: function (event) {\n\n            event = normalizeEvent(this.dom, event);\n\n            // Mark touch, which is useful in distinguish touch and\n            // mouse event in upper applicatoin.\n            event.zrByTouch = true;\n\n            processGesture(this, event, 'end');\n\n            domHandlers.mouseup.call(this, event);\n\n            // Do not trigger `mouseout` here, in spite of `mousemove`(`mouseover`) is\n            // triggered in `touchstart`. This seems to be illogical, but by this mechanism,\n            // we can conveniently implement \"hover style\" in both PC and touch device just\n            // by listening to `mouseover` to add \"hover style\" and listening to `mouseout`\n            // to remove \"hover style\" on an element, without any additional code for\n            // compatibility. (`mouseout` will not be triggered in `touchend`, so \"hover\n            // style\" will remain for user view)\n\n            // click event should always be triggered no matter whether\n            // there is gestrue event. System click can not be prevented.\n            if (+new Date() - this._lastTouchMoment < TOUCH_CLICK_DELAY) {\n                domHandlers.click.call(this, event);\n            }\n\n            setTouchTimer(this);\n        },\n\n        pointerdown: function (event) {\n            domHandlers.mousedown.call(this, event);\n\n            // if (useMSGuesture(this, event)) {\n            //     this._msGesture.addPointer(event.pointerId);\n            // }\n        },\n\n        pointermove: function (event) {\n            // FIXME\n            // pointermove is so sensitive that it always triggered when\n            // tap(click) on touch screen, which affect some judgement in\n            // upper application. So, we dont support mousemove on MS touch\n            // device yet.\n            if (!isPointerFromTouch(event)) {\n                domHandlers.mousemove.call(this, event);\n            }\n        },\n\n        pointerup: function (event) {\n            domHandlers.mouseup.call(this, event);\n        },\n\n        pointerout: function (event) {\n            // pointerout will be triggered when tap on touch screen\n            // (IE11+/Edge on MS Surface) after click event triggered,\n            // which is inconsistent with the mousout behavior we defined\n            // in touchend. So we unify them.\n            // (check domHandlers.touchend for detailed explanation)\n            if (!isPointerFromTouch(event)) {\n                domHandlers.mouseout.call(this, event);\n            }\n        }\n    };\n\n    function isPointerFromTouch(event) {\n        var pointerType = event.pointerType;\n        return pointerType === 'pen' || pointerType === 'touch';\n    }\n\n    // function useMSGuesture(handlerProxy, event) {\n    //     return isPointerFromTouch(event) && !!handlerProxy._msGesture;\n    // }\n\n    // Common handlers\n    zrUtil.each(['click', 'mousedown', 'mouseup', 'mousewheel', 'dblclick', 'contextmenu'], function (name) {\n        domHandlers[name] = function (event) {\n            event = normalizeEvent(this.dom, event);\n            this.trigger(name, event);\n        };\n    });\n\n    /**\n     * 为控制类实例初始化dom 事件处理函数\n     *\n     * @inner\n     * @param {module:zrender/Handler} instance 控制类实例\n     */\n    function initDomHandler(instance) {\n        zrUtil.each(touchHandlerNames, function (name) {\n            instance._handlers[name] = zrUtil.bind(domHandlers[name], instance);\n        });\n\n        zrUtil.each(pointerHandlerNames, function (name) {\n            instance._handlers[name] = zrUtil.bind(domHandlers[name], instance);\n        });\n\n        zrUtil.each(mouseHandlerNames, function (name) {\n            instance._handlers[name] = makeMouseHandler(domHandlers[name], instance);\n        });\n\n        function makeMouseHandler(fn, instance) {\n            return function () {\n                if (instance._touching) {\n                    return;\n                }\n                return fn.apply(instance, arguments);\n            };\n        }\n    }\n\n\n    function HandlerDomProxy(dom) {\n        Eventful.call(this);\n\n        this.dom = dom;\n\n        /**\n         * @private\n         * @type {boolean}\n         */\n        this._touching = false;\n\n        /**\n         * @private\n         * @type {number}\n         */\n        this._touchTimer;\n\n        /**\n         * @private\n         * @type {module:zrender/core/GestureMgr}\n         */\n        this._gestureMgr = new GestureMgr();\n\n        this._handlers = {};\n\n        initDomHandler(this);\n\n        if (env.pointerEventsSupported) { // Only IE11+/Edge\n            // 1. On devices that both enable touch and mouse (e.g., MS Surface and lenovo X240),\n            // IE11+/Edge do not trigger touch event, but trigger pointer event and mouse event\n            // at the same time.\n            // 2. On MS Surface, it probablely only trigger mousedown but no mouseup when tap on\n            // screen, which do not occurs in pointer event.\n            // So we use pointer event to both detect touch gesture and mouse behavior.\n            mountHandlers(pointerHandlerNames, this);\n\n            // FIXME\n            // Note: MS Gesture require CSS touch-action set. But touch-action is not reliable,\n            // which does not prevent defuault behavior occasionally (which may cause view port\n            // zoomed in but use can not zoom it back). And event.preventDefault() does not work.\n            // So we have to not to use MSGesture and not to support touchmove and pinch on MS\n            // touch screen. And we only support click behavior on MS touch screen now.\n\n            // MS Gesture Event is only supported on IE11+/Edge and on Windows 8+.\n            // We dont support touch on IE on win7.\n            // See <https://msdn.microsoft.com/en-us/library/dn433243(v=vs.85).aspx>\n            // if (typeof MSGesture === 'function') {\n            //     (this._msGesture = new MSGesture()).target = dom; // jshint ignore:line\n            //     dom.addEventListener('MSGestureChange', onMSGestureChange);\n            // }\n        }\n        else {\n            if (env.touchEventsSupported) {\n                mountHandlers(touchHandlerNames, this);\n                // Handler of 'mouseout' event is needed in touch mode, which will be mounted below.\n                // addEventListener(root, 'mouseout', this._mouseoutHandler);\n            }\n\n            // 1. Considering some devices that both enable touch and mouse event (like on MS Surface\n            // and lenovo X240, @see #2350), we make mouse event be always listened, otherwise\n            // mouse event can not be handle in those devices.\n            // 2. On MS Surface, Chrome will trigger both touch event and mouse event. How to prevent\n            // mouseevent after touch event triggered, see `setTouchTimer`.\n            mountHandlers(mouseHandlerNames, this);\n        }\n\n        function mountHandlers(handlerNames, instance) {\n            zrUtil.each(handlerNames, function (name) {\n                addEventListener(dom, eventNameFix(name), instance._handlers[name]);\n            }, instance);\n        }\n    }\n\n    var handlerDomProxyProto = HandlerDomProxy.prototype;\n    handlerDomProxyProto.dispose = function () {\n        var handlerNames = mouseHandlerNames.concat(touchHandlerNames);\n\n        for (var i = 0; i < handlerNames.length; i++) {\n            var name = handlerNames[i];\n            removeEventListener(this.dom, eventNameFix(name), this._handlers[name]);\n        }\n    };\n\n    handlerDomProxyProto.setCursor = function (cursorStyle) {\n        this.dom.style.cursor = cursorStyle || 'default';\n    };\n\n    zrUtil.mixin(HandlerDomProxy, Eventful);\n\n    module.exports = HandlerDomProxy;\n\n\n/***/ }),\n/* 433 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// CompoundPath to improve performance\n\n\n    var Path = __webpack_require__(320);\n\n    module.exports = Path.extend({\n\n        type: 'compound',\n\n        shape: {\n\n            paths: null\n        },\n\n        _updatePathDirty: function () {\n            var dirtyPath = this.__dirtyPath;\n            var paths = this.shape.paths;\n            for (var i = 0; i < paths.length; i++) {\n                // Mark as dirty if any subpath is dirty\n                dirtyPath = dirtyPath || paths[i].__dirtyPath;\n            }\n            this.__dirtyPath = dirtyPath;\n            this.__dirty = this.__dirty || dirtyPath;\n        },\n\n        beforeBrush: function () {\n            this._updatePathDirty();\n            var paths = this.shape.paths || [];\n            var scale = this.getGlobalScale();\n            // Update path scale\n            for (var i = 0; i < paths.length; i++) {\n                if (!paths[i].path) {\n                    paths[i].createPathProxy();\n                }\n                paths[i].path.setScale(scale[0], scale[1]);\n            }\n        },\n\n        buildPath: function (ctx, shape) {\n            var paths = shape.paths || [];\n            for (var i = 0; i < paths.length; i++) {\n                paths[i].buildPath(ctx, paths[i].shape, true);\n            }\n        },\n\n        afterBrush: function () {\n            var paths = this.shape.paths;\n            for (var i = 0; i < paths.length; i++) {\n                paths[i].__dirtyPath = false;\n            }\n        },\n\n        getBoundingRect: function () {\n            this._updatePathDirty();\n            return Path.prototype.getBoundingRect.call(this);\n        }\n    });\n\n\n/***/ }),\n/* 434 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n\n    var zrUtil = __webpack_require__(315);\n\n    var Gradient = __webpack_require__(346);\n\n    /**\n     * x, y, r are all percent from 0 to 1\n     * @param {number} [x=0.5]\n     * @param {number} [y=0.5]\n     * @param {number} [r=0.5]\n     * @param {Array.<Object>} [colorStops]\n     * @param {boolean} [globalCoord=false]\n     */\n    var RadialGradient = function (x, y, r, colorStops, globalCoord) {\n        // Should do nothing more in this constructor. Because gradient can be\n        // declard by `color: {type: 'radial', colorStops: ...}`, where\n        // this constructor will not be called.\n\n        this.x = x == null ? 0.5 : x;\n\n        this.y = y == null ? 0.5 : y;\n\n        this.r = r == null ? 0.5 : r;\n\n        // Can be cloned\n        this.type = 'radial';\n\n        // If use global coord\n        this.global = globalCoord || false;\n\n        Gradient.call(this, colorStops);\n    };\n\n    RadialGradient.prototype = {\n\n        constructor: RadialGradient\n    };\n\n    zrUtil.inherits(RadialGradient, Gradient);\n\n    module.exports = RadialGradient;\n\n\n/***/ }),\n/* 435 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * Text element\n * @module zrender/graphic/Text\n *\n * TODO Wrapping\n *\n * Text not support gradient\n */\n\n\n\n    var Displayable = __webpack_require__(345);\n    var zrUtil = __webpack_require__(315);\n    var textContain = __webpack_require__(332);\n\n    /**\n     * @alias zrender/graphic/Text\n     * @extends module:zrender/graphic/Displayable\n     * @constructor\n     * @param {Object} opts\n     */\n    var Text = function (opts) {\n        Displayable.call(this, opts);\n    };\n\n    Text.prototype = {\n\n        constructor: Text,\n\n        type: 'text',\n\n        brush: function (ctx, prevEl) {\n            var style = this.style;\n            var x = style.x || 0;\n            var y = style.y || 0;\n            // Convert to string\n            var text = style.text;\n\n            // Convert to string\n            text != null && (text += '');\n\n            // Always bind style\n            style.bind(ctx, this, prevEl);\n\n            if (text) {\n\n                this.setTransform(ctx);\n\n                var textBaseline;\n                var textAlign = style.textAlign;\n                var font = style.textFont || style.font;\n                if (style.textVerticalAlign) {\n                    var rect = textContain.getBoundingRect(\n                        text, font, style.textAlign, 'top'\n                    );\n                    // Ignore textBaseline\n                    textBaseline = 'middle';\n                    switch (style.textVerticalAlign) {\n                        case 'middle':\n                            y -= rect.height / 2 - rect.lineHeight / 2;\n                            break;\n                        case 'bottom':\n                            y -= rect.height - rect.lineHeight / 2;\n                            break;\n                        default:\n                            y += rect.lineHeight / 2;\n                    }\n                }\n                else {\n                    textBaseline = style.textBaseline;\n                }\n\n                // TODO Invalid font\n                ctx.font = font || '12px sans-serif';\n                ctx.textAlign = textAlign || 'left';\n                // Use canvas default left textAlign. Giving invalid value will cause state not change\n                if (ctx.textAlign !== textAlign) {\n                    ctx.textAlign = 'left';\n                }\n                // FIXME in text contain default is top\n                ctx.textBaseline = textBaseline || 'alphabetic';\n                // Use canvas default alphabetic baseline\n                if (ctx.textBaseline !== textBaseline) {\n                    ctx.textBaseline = 'alphabetic';\n                }\n\n                var lineHeight = textContain.measureText('国', ctx.font).width;\n\n                var textLines = text.split('\\n');\n                for (var i = 0; i < textLines.length; i++) {\n                    // Fill after stroke so the outline will not cover the main part.\n                    style.hasStroke() && ctx.strokeText(textLines[i], x, y);\n                    style.hasFill() && ctx.fillText(textLines[i], x, y);\n                    y += lineHeight;\n                }\n\n                this.restoreTransform(ctx);\n            }\n        },\n\n        getBoundingRect: function () {\n            var style = this.style;\n            if (!this._rect) {\n                var textVerticalAlign = style.textVerticalAlign;\n                var rect = textContain.getBoundingRect(\n                    style.text + '', style.textFont || style.font, style.textAlign,\n                    textVerticalAlign ? 'top' : style.textBaseline\n                );\n                switch (textVerticalAlign) {\n                    case 'middle':\n                        rect.y -= rect.height / 2;\n                        break;\n                    case 'bottom':\n                        rect.y -= rect.height;\n                        break;\n                }\n                rect.x += style.x || 0;\n                rect.y += style.y || 0;\n                if (style.hasStroke()) {\n                    var w = style.lineWidth;\n                    rect.x -= w / 2;\n                    rect.y -= w / 2;\n                    rect.width += w;\n                    rect.height += w;\n                }\n                this._rect = rect;\n            }\n\n            return this._rect;\n        }\n    };\n\n    zrUtil.inherits(Text, Displayable);\n\n    module.exports = Text;\n\n\n/***/ }),\n/* 436 */\n/***/ (function(module, exports) {\n\n\n\n    module.exports = {\n        buildPath: function (ctx, shape) {\n            var x = shape.x;\n            var y = shape.y;\n            var width = shape.width;\n            var height = shape.height;\n            var r = shape.r;\n            var r1;\n            var r2;\n            var r3;\n            var r4;\n\n            // Convert width and height to positive for better borderRadius\n            if (width < 0) {\n                x = x + width;\n                width = -width;\n            }\n            if (height < 0) {\n                y = y + height;\n                height = -height;\n            }\n\n            if (typeof r === 'number') {\n                r1 = r2 = r3 = r4 = r;\n            }\n            else if (r instanceof Array) {\n                if (r.length === 1) {\n                    r1 = r2 = r3 = r4 = r[0];\n                }\n                else if (r.length === 2) {\n                    r1 = r3 = r[0];\n                    r2 = r4 = r[1];\n                }\n                else if (r.length === 3) {\n                    r1 = r[0];\n                    r2 = r4 = r[1];\n                    r3 = r[2];\n                }\n                else {\n                    r1 = r[0];\n                    r2 = r[1];\n                    r3 = r[2];\n                    r4 = r[3];\n                }\n            }\n            else {\n                r1 = r2 = r3 = r4 = 0;\n            }\n\n            var total;\n            if (r1 + r2 > width) {\n                total = r1 + r2;\n                r1 *= width / total;\n                r2 *= width / total;\n            }\n            if (r3 + r4 > width) {\n                total = r3 + r4;\n                r3 *= width / total;\n                r4 *= width / total;\n            }\n            if (r2 + r3 > height) {\n                total = r2 + r3;\n                r2 *= height / total;\n                r3 *= height / total;\n            }\n            if (r1 + r4 > height) {\n                total = r1 + r4;\n                r1 *= height / total;\n                r4 *= height / total;\n            }\n            ctx.moveTo(x + r1, y);\n            ctx.lineTo(x + width - r2, y);\n            r2 !== 0 && ctx.quadraticCurveTo(\n                x + width, y, x + width, y + r2\n            );\n            ctx.lineTo(x + width, y + height - r3);\n            r3 !== 0 && ctx.quadraticCurveTo(\n                x + width, y + height, x + width - r3, y + height\n            );\n            ctx.lineTo(x + r4, y + height);\n            r4 !== 0 && ctx.quadraticCurveTo(\n                x, y + height, x, y + height - r4\n            );\n            ctx.lineTo(x, y + r1);\n            r1 !== 0 && ctx.quadraticCurveTo(x, y, x + r1, y);\n        }\n    };\n\n\n/***/ }),\n/* 437 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * 贝塞尔平滑曲线\n * @module zrender/shape/util/smoothBezier\n * @author pissang (https://www.github.com/pissang)\n *         Kener (@Kener-林峰, kener.linfeng@gmail.com)\n *         errorrik (errorrik@gmail.com)\n */\n\n\n    var vec2 = __webpack_require__(319);\n    var v2Min = vec2.min;\n    var v2Max = vec2.max;\n    var v2Scale = vec2.scale;\n    var v2Distance = vec2.distance;\n    var v2Add = vec2.add;\n\n    /**\n     * 贝塞尔平滑曲线\n     * @alias module:zrender/shape/util/smoothBezier\n     * @param {Array} points 线段顶点数组\n     * @param {number} smooth 平滑等级, 0-1\n     * @param {boolean} isLoop\n     * @param {Array} constraint 将计算出来的控制点约束在一个包围盒内\n     *                           比如 [[0, 0], [100, 100]], 这个包围盒会与\n     *                           整个折线的包围盒做一个并集用来约束控制点。\n     * @param {Array} 计算出来的控制点数组\n     */\n    module.exports = function (points, smooth, isLoop, constraint) {\n        var cps = [];\n\n        var v = [];\n        var v1 = [];\n        var v2 = [];\n        var prevPoint;\n        var nextPoint;\n\n        var min, max;\n        if (constraint) {\n            min = [Infinity, Infinity];\n            max = [-Infinity, -Infinity];\n            for (var i = 0, len = points.length; i < len; i++) {\n                v2Min(min, min, points[i]);\n                v2Max(max, max, points[i]);\n            }\n            // 与指定的包围盒做并集\n            v2Min(min, min, constraint[0]);\n            v2Max(max, max, constraint[1]);\n        }\n\n        for (var i = 0, len = points.length; i < len; i++) {\n            var point = points[i];\n\n            if (isLoop) {\n                prevPoint = points[i ? i - 1 : len - 1];\n                nextPoint = points[(i + 1) % len];\n            }\n            else {\n                if (i === 0 || i === len - 1) {\n                    cps.push(vec2.clone(points[i]));\n                    continue;\n                }\n                else {\n                    prevPoint = points[i - 1];\n                    nextPoint = points[i + 1];\n                }\n            }\n\n            vec2.sub(v, nextPoint, prevPoint);\n\n            // use degree to scale the handle length\n            v2Scale(v, v, smooth);\n\n            var d0 = v2Distance(point, prevPoint);\n            var d1 = v2Distance(point, nextPoint);\n            var sum = d0 + d1;\n            if (sum !== 0) {\n                d0 /= sum;\n                d1 /= sum;\n            }\n\n            v2Scale(v1, v, -d0);\n            v2Scale(v2, v, d1);\n            var cp0 = v2Add([], point, v1);\n            var cp1 = v2Add([], point, v2);\n            if (constraint) {\n                v2Max(cp0, cp0, min);\n                v2Min(cp0, cp0, max);\n                v2Max(cp1, cp1, min);\n                v2Min(cp1, cp1, max);\n            }\n            cps.push(cp0);\n            cps.push(cp1);\n        }\n\n        if (isLoop) {\n            cps.push(cps.shift());\n        }\n\n        return cps;\n    };\n\n\n\n/***/ }),\n/* 438 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * Catmull-Rom spline 插值折线\n * @module zrender/shape/util/smoothSpline\n * @author pissang (https://www.github.com/pissang)\n *         Kener (@Kener-林峰, kener.linfeng@gmail.com)\n *         errorrik (errorrik@gmail.com)\n */\n\n    var vec2 = __webpack_require__(319);\n\n    /**\n     * @inner\n     */\n    function interpolate(p0, p1, p2, p3, t, t2, t3) {\n        var v0 = (p2 - p0) * 0.5;\n        var v1 = (p3 - p1) * 0.5;\n        return (2 * (p1 - p2) + v0 + v1) * t3\n                + (-3 * (p1 - p2) - 2 * v0 - v1) * t2\n                + v0 * t + p1;\n    }\n\n    /**\n     * @alias module:zrender/shape/util/smoothSpline\n     * @param {Array} points 线段顶点数组\n     * @param {boolean} isLoop\n     * @return {Array}\n     */\n    module.exports = function (points, isLoop) {\n        var len = points.length;\n        var ret = [];\n\n        var distance = 0;\n        for (var i = 1; i < len; i++) {\n            distance += vec2.distance(points[i - 1], points[i]);\n        }\n\n        var segs = distance / 2;\n        segs = segs < len ? len : segs;\n        for (var i = 0; i < segs; i++) {\n            var pos = i / (segs - 1) * (isLoop ? len : len - 1);\n            var idx = Math.floor(pos);\n\n            var w = pos - idx;\n\n            var p0;\n            var p1 = points[idx % len];\n            var p2;\n            var p3;\n            if (!isLoop) {\n                p0 = points[idx === 0 ? idx : idx - 1];\n                p2 = points[idx > len - 2 ? len - 1 : idx + 1];\n                p3 = points[idx > len - 3 ? len - 1 : idx + 2];\n            }\n            else {\n                p0 = points[(idx - 1 + len) % len];\n                p2 = points[(idx + 1) % len];\n                p3 = points[(idx + 2) % len];\n            }\n\n            var w2 = w * w;\n            var w3 = w * w2;\n\n            ret.push([\n                interpolate(p0[0], p1[0], p2[0], p3[0], w, w2, w3),\n                interpolate(p0[1], p1[1], p2[1], p3[1], w, w2, w3)\n            ]);\n        }\n        return ret;\n    };\n\n\n\n/***/ }),\n/* 439 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * Mixin for drawing text in a element bounding rect\n * @module zrender/mixin/RectText\n */\n\n\n\n    var textContain = __webpack_require__(332);\n    var BoundingRect = __webpack_require__(324);\n\n    var tmpRect = new BoundingRect();\n\n    var RectText = function () {};\n\n    function parsePercent(value, maxValue) {\n        if (typeof value === 'string') {\n            if (value.lastIndexOf('%') >= 0) {\n                return parseFloat(value) / 100 * maxValue;\n            }\n            return parseFloat(value);\n        }\n        return value;\n    }\n\n    RectText.prototype = {\n\n        constructor: RectText,\n\n        /**\n         * Draw text in a rect with specified position.\n         * @param  {CanvasRenderingContext} ctx\n         * @param  {Object} rect Displayable rect\n         * @return {Object} textRect Alternative precalculated text bounding rect\n         */\n        drawRectText: function (ctx, rect, textRect) {\n            var style = this.style;\n            var text = style.text;\n            // Convert to string\n            text != null && (text += '');\n            if (!text) {\n                return;\n            }\n\n            // FIXME\n            ctx.save();\n\n            var x;\n            var y;\n            var textPosition = style.textPosition;\n            var textOffset = style.textOffset;\n            var distance = style.textDistance;\n            var align = style.textAlign;\n            var font = style.textFont || style.font;\n            var baseline = style.textBaseline;\n            var verticalAlign = style.textVerticalAlign;\n\n            textRect = textRect || textContain.getBoundingRect(text, font, align, baseline);\n\n            // Transform rect to view space\n            var transform = this.transform;\n            if (!style.textTransform) {\n                if (transform) {\n                    tmpRect.copy(rect);\n                    tmpRect.applyTransform(transform);\n                    rect = tmpRect;\n                }\n            }\n            else {\n                this.setTransform(ctx);\n            }\n\n            // Text position represented by coord\n            if (textPosition instanceof Array) {\n                // Percent\n                x = rect.x + parsePercent(textPosition[0], rect.width);\n                y = rect.y + parsePercent(textPosition[1], rect.height);\n                align = align || 'left';\n                baseline = baseline || 'top';\n\n                if (verticalAlign) {\n                    switch (verticalAlign) {\n                        case 'middle':\n                            y -= textRect.height / 2 - textRect.lineHeight / 2;\n                            break;\n                        case 'bottom':\n                            y -= textRect.height - textRect.lineHeight / 2;\n                            break;\n                        default:\n                            y += textRect.lineHeight / 2;\n                    }\n                    // Force bseline to be middle\n                    baseline = 'middle';\n                }\n            }\n            else {\n                var res = textContain.adjustTextPositionOnRect(\n                    textPosition, rect, textRect, distance\n                );\n                x = res.x;\n                y = res.y;\n                // Default align and baseline when has textPosition\n                align = align || res.textAlign;\n                baseline = baseline || res.textBaseline;\n            }\n\n            if (textOffset) {\n                x += textOffset[0];\n                y += textOffset[1];\n            }\n\n            // Use canvas default left textAlign. Giving invalid value will cause state not change\n            ctx.textAlign = align || 'left';\n            // Use canvas default alphabetic baseline\n            ctx.textBaseline = baseline || 'alphabetic';\n\n            var textFill = style.textFill;\n            var textStroke = style.textStroke;\n            textFill && (ctx.fillStyle = textFill);\n            textStroke && (ctx.strokeStyle = textStroke);\n\n            // TODO Invalid font\n            ctx.font = font || '12px sans-serif';\n\n            // Text shadow\n            // Always set shadowBlur and shadowOffset to avoid leak from displayable\n            ctx.shadowBlur = style.textShadowBlur;\n            ctx.shadowColor = style.textShadowColor || 'transparent';\n            ctx.shadowOffsetX = style.textShadowOffsetX;\n            ctx.shadowOffsetY = style.textShadowOffsetY;\n\n            var textLines = text.split('\\n');\n\n            if (style.textRotation) {\n                transform && ctx.translate(transform[4], transform[5]);\n                ctx.rotate(style.textRotation);\n                transform && ctx.translate(-transform[4], -transform[5]);\n            }\n\n            for (var i = 0; i < textLines.length; i++) {\n                    // Fill after stroke so the outline will not cover the main part.\n                textStroke && ctx.strokeText(textLines[i], x, y);\n                textFill && ctx.fillText(textLines[i], x, y);\n                y += textRect.lineHeight;\n            }\n\n            ctx.restore();\n        }\n    };\n\n    module.exports = RectText;\n\n\n/***/ }),\n/* 440 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * 圆弧\n * @module zrender/graphic/shape/Arc\n */\n \n\n    module.exports = __webpack_require__(320).extend({\n\n        type: 'arc',\n\n        shape: {\n\n            cx: 0,\n\n            cy: 0,\n\n            r: 0,\n\n            startAngle: 0,\n\n            endAngle: Math.PI * 2,\n\n            clockwise: true\n        },\n\n        style: {\n\n            stroke: '#000',\n\n            fill: null\n        },\n\n        buildPath: function (ctx, shape) {\n\n            var x = shape.cx;\n            var y = shape.cy;\n            var r = Math.max(shape.r, 0);\n            var startAngle = shape.startAngle;\n            var endAngle = shape.endAngle;\n            var clockwise = shape.clockwise;\n\n            var unitX = Math.cos(startAngle);\n            var unitY = Math.sin(startAngle);\n\n            ctx.moveTo(unitX * r + x, unitY * r + y);\n            ctx.arc(x, y, r, startAngle, endAngle, !clockwise);\n        }\n    });\n\n\n/***/ }),\n/* 441 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * 贝塞尔曲线\n * @module zrender/shape/BezierCurve\n */\n\n\n    var curveTool = __webpack_require__(329);\n    var vec2 = __webpack_require__(319);\n    var quadraticSubdivide = curveTool.quadraticSubdivide;\n    var cubicSubdivide = curveTool.cubicSubdivide;\n    var quadraticAt = curveTool.quadraticAt;\n    var cubicAt = curveTool.cubicAt;\n    var quadraticDerivativeAt = curveTool.quadraticDerivativeAt;\n    var cubicDerivativeAt = curveTool.cubicDerivativeAt;\n\n    var out = [];\n\n    function someVectorAt(shape, t, isTangent) {\n        var cpx2 = shape.cpx2;\n        var cpy2 = shape.cpy2;\n        if (cpx2 === null || cpy2 === null) {\n            return [\n                (isTangent ? cubicDerivativeAt : cubicAt)(shape.x1, shape.cpx1, shape.cpx2, shape.x2, t),\n                (isTangent ? cubicDerivativeAt : cubicAt)(shape.y1, shape.cpy1, shape.cpy2, shape.y2, t)\n            ];\n        }\n        else {\n            return [\n                (isTangent ? quadraticDerivativeAt : quadraticAt)(shape.x1, shape.cpx1, shape.x2, t),\n                (isTangent ? quadraticDerivativeAt : quadraticAt)(shape.y1, shape.cpy1, shape.y2, t)\n            ];\n        }\n    }\n    module.exports = __webpack_require__(320).extend({\n\n        type: 'bezier-curve',\n\n        shape: {\n            x1: 0,\n            y1: 0,\n            x2: 0,\n            y2: 0,\n            cpx1: 0,\n            cpy1: 0,\n            // cpx2: 0,\n            // cpy2: 0\n\n            // Curve show percent, for animating\n            percent: 1\n        },\n\n        style: {\n            stroke: '#000',\n            fill: null\n        },\n\n        buildPath: function (ctx, shape) {\n            var x1 = shape.x1;\n            var y1 = shape.y1;\n            var x2 = shape.x2;\n            var y2 = shape.y2;\n            var cpx1 = shape.cpx1;\n            var cpy1 = shape.cpy1;\n            var cpx2 = shape.cpx2;\n            var cpy2 = shape.cpy2;\n            var percent = shape.percent;\n            if (percent === 0) {\n                return;\n            }\n\n            ctx.moveTo(x1, y1);\n\n            if (cpx2 == null || cpy2 == null) {\n                if (percent < 1) {\n                    quadraticSubdivide(\n                        x1, cpx1, x2, percent, out\n                    );\n                    cpx1 = out[1];\n                    x2 = out[2];\n                    quadraticSubdivide(\n                        y1, cpy1, y2, percent, out\n                    );\n                    cpy1 = out[1];\n                    y2 = out[2];\n                }\n\n                ctx.quadraticCurveTo(\n                    cpx1, cpy1,\n                    x2, y2\n                );\n            }\n            else {\n                if (percent < 1) {\n                    cubicSubdivide(\n                        x1, cpx1, cpx2, x2, percent, out\n                    );\n                    cpx1 = out[1];\n                    cpx2 = out[2];\n                    x2 = out[3];\n                    cubicSubdivide(\n                        y1, cpy1, cpy2, y2, percent, out\n                    );\n                    cpy1 = out[1];\n                    cpy2 = out[2];\n                    y2 = out[3];\n                }\n                ctx.bezierCurveTo(\n                    cpx1, cpy1,\n                    cpx2, cpy2,\n                    x2, y2\n                );\n            }\n        },\n\n        /**\n         * Get point at percent\n         * @param  {number} t\n         * @return {Array.<number>}\n         */\n        pointAt: function (t) {\n            return someVectorAt(this.shape, t, false);\n        },\n\n        /**\n         * Get tangent at percent\n         * @param  {number} t\n         * @return {Array.<number>}\n         */\n        tangentAt: function (t) {\n            var p = someVectorAt(this.shape, t, true);\n            return vec2.normalize(p, p);\n        }\n    });\n\n\n\n/***/ }),\n/* 442 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * 圆形\n * @module zrender/shape/Circle\n */\n\n\n\n    module.exports = __webpack_require__(320).extend({\n\n        type: 'circle',\n\n        shape: {\n            cx: 0,\n            cy: 0,\n            r: 0\n        },\n\n\n        buildPath : function (ctx, shape, inBundle) {\n            // Better stroking in ShapeBundle\n            // Always do it may have performence issue ( fill may be 2x more cost)\n            if (inBundle) {\n                ctx.moveTo(shape.cx + shape.r, shape.cy);\n            }\n            // else {\n            //     if (ctx.allocate && !ctx.data.length) {\n            //         ctx.allocate(ctx.CMD_MEM_SIZE.A);\n            //     }\n            // }\n            // Better stroking in ShapeBundle\n            // ctx.moveTo(shape.cx + shape.r, shape.cy);\n            ctx.arc(shape.cx, shape.cy, shape.r, 0, Math.PI * 2, true);\n        }\n    });\n\n\n\n/***/ }),\n/* 443 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * 直线\n * @module zrender/graphic/shape/Line\n */\n\n    module.exports = __webpack_require__(320).extend({\n\n        type: 'line',\n\n        shape: {\n            // Start point\n            x1: 0,\n            y1: 0,\n            // End point\n            x2: 0,\n            y2: 0,\n\n            percent: 1\n        },\n\n        style: {\n            stroke: '#000',\n            fill: null\n        },\n\n        buildPath: function (ctx, shape) {\n            var x1 = shape.x1;\n            var y1 = shape.y1;\n            var x2 = shape.x2;\n            var y2 = shape.y2;\n            var percent = shape.percent;\n\n            if (percent === 0) {\n                return;\n            }\n\n            ctx.moveTo(x1, y1);\n\n            if (percent < 1) {\n                x2 = x1 * (1 - percent) + x2 * percent;\n                y2 = y1 * (1 - percent) + y2 * percent;\n            }\n            ctx.lineTo(x2, y2);\n        },\n\n        /**\n         * Get point at percent\n         * @param  {number} percent\n         * @return {Array.<number>}\n         */\n        pointAt: function (p) {\n            var shape = this.shape;\n            return [\n                shape.x1 * (1 - p) + shape.x2 * p,\n                shape.y1 * (1 - p) + shape.y2 * p\n            ];\n        }\n    });\n\n\n\n/***/ }),\n/* 444 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * 多边形\n * @module zrender/shape/Polygon\n */\n\n\n    var polyHelper = __webpack_require__(365);\n\n    module.exports = __webpack_require__(320).extend({\n        \n        type: 'polygon',\n\n        shape: {\n            points: null,\n\n            smooth: false,\n\n            smoothConstraint: null\n        },\n\n        buildPath: function (ctx, shape) {\n            polyHelper.buildPath(ctx, shape, true);\n        }\n    });\n\n\n/***/ }),\n/* 445 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * @module zrender/graphic/shape/Polyline\n */\n\n\n    var polyHelper = __webpack_require__(365);\n\n    module.exports = __webpack_require__(320).extend({\n        \n        type: 'polyline',\n\n        shape: {\n            points: null,\n\n            smooth: false,\n\n            smoothConstraint: null\n        },\n\n        style: {\n            stroke: '#000',\n\n            fill: null\n        },\n\n        buildPath: function (ctx, shape) {\n            polyHelper.buildPath(ctx, shape, false);\n        }\n    });\n\n\n/***/ }),\n/* 446 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * 矩形\n * @module zrender/graphic/shape/Rect\n */\n\n\n    var roundRectHelper = __webpack_require__(436);\n\n    module.exports = __webpack_require__(320).extend({\n\n        type: 'rect',\n\n        shape: {\n            // 左上、右上、右下、左下角的半径依次为r1、r2、r3、r4\n            // r缩写为1         相当于 [1, 1, 1, 1]\n            // r缩写为[1]       相当于 [1, 1, 1, 1]\n            // r缩写为[1, 2]    相当于 [1, 2, 1, 2]\n            // r缩写为[1, 2, 3] 相当于 [1, 2, 3, 2]\n            r: 0,\n\n            x: 0,\n            y: 0,\n            width: 0,\n            height: 0\n        },\n\n        buildPath: function (ctx, shape) {\n            var x = shape.x;\n            var y = shape.y;\n            var width = shape.width;\n            var height = shape.height;\n            if (!shape.r) {\n                ctx.rect(x, y, width, height);\n            }\n            else {\n                roundRectHelper.buildPath(ctx, shape);\n            }\n            ctx.closePath();\n            return;\n        }\n    });\n\n\n\n/***/ }),\n/* 447 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * 圆环\n * @module zrender/graphic/shape/Ring\n */\n\n\n    module.exports = __webpack_require__(320).extend({\n\n        type: 'ring',\n\n        shape: {\n            cx: 0,\n            cy: 0,\n            r: 0,\n            r0: 0\n        },\n\n        buildPath: function (ctx, shape) {\n            var x = shape.cx;\n            var y = shape.cy;\n            var PI2 = Math.PI * 2;\n            ctx.moveTo(x + shape.r, y);\n            ctx.arc(x, y, shape.r, 0, PI2, false);\n            ctx.moveTo(x + shape.r0, y);\n            ctx.arc(x, y, shape.r0, 0, PI2, true);\n        }\n    });\n\n\n\n/***/ }),\n/* 448 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * 扇形\n * @module zrender/graphic/shape/Sector\n */\n\n\n\n    var env = __webpack_require__(321);\n    var Path = __webpack_require__(320);\n\n    var shadowTemp = [\n        ['shadowBlur', 0],\n        ['shadowColor', '#000'],\n        ['shadowOffsetX', 0],\n        ['shadowOffsetY', 0]\n    ];\n\n    module.exports = Path.extend({\n\n        type: 'sector',\n\n        shape: {\n\n            cx: 0,\n\n            cy: 0,\n\n            r0: 0,\n\n            r: 0,\n\n            startAngle: 0,\n\n            endAngle: Math.PI * 2,\n\n            clockwise: true\n        },\n\n        brush: (env.browser.ie && env.browser.version >= 11) // version: '11.0'\n            // Fix weird bug in some version of IE11 (like 11.0.9600.17801),\n            // where exception \"unexpected call to method or property access\"\n            // might be thrown when calling ctx.fill after a path whose area size\n            // is zero is drawn and ctx.clip() is called and shadowBlur is set.\n            // (e.g.,\n            //  ctx.moveTo(10, 10);\n            //  ctx.lineTo(20, 10);\n            //  ctx.closePath();\n            //  ctx.clip();\n            //  ctx.shadowBlur = 10;\n            //  ...\n            //  ctx.fill();\n            // )\n            ? function () {\n                var clipPaths = this.__clipPaths;\n                var style = this.style;\n                var modified;\n\n                if (clipPaths) {\n                    for (var i = 0; i < clipPaths.length; i++) {\n                        var shape = clipPaths[i] && clipPaths[i].shape;\n                        if (shape && shape.startAngle === shape.endAngle) {\n                            for (var j = 0; j < shadowTemp.length; j++) {\n                                shadowTemp[j][2] = style[shadowTemp[j][0]];\n                                style[shadowTemp[j][0]] = shadowTemp[j][1];\n                            }\n                            modified = true;\n                            break;\n                        }\n                    }\n                }\n\n                Path.prototype.brush.apply(this, arguments);\n\n                if (modified) {\n                    for (var j = 0; j < shadowTemp.length; j++) {\n                        style[shadowTemp[j][0]] = shadowTemp[j][2];\n                    }\n                }\n            }\n            : Path.prototype.brush,\n\n        buildPath: function (ctx, shape) {\n\n            var x = shape.cx;\n            var y = shape.cy;\n            var r0 = Math.max(shape.r0 || 0, 0);\n            var r = Math.max(shape.r, 0);\n            var startAngle = shape.startAngle;\n            var endAngle = shape.endAngle;\n            var clockwise = shape.clockwise;\n\n            var unitX = Math.cos(startAngle);\n            var unitY = Math.sin(startAngle);\n\n            ctx.moveTo(unitX * r0 + x, unitY * r0 + y);\n\n            ctx.lineTo(unitX * r + x, unitY * r + y);\n\n            ctx.arc(x, y, r, startAngle, endAngle, !clockwise);\n\n            ctx.lineTo(\n                Math.cos(endAngle) * r0 + x,\n                Math.sin(endAngle) * r0 + y\n            );\n\n            if (r0 !== 0) {\n                ctx.arc(x, y, r0, endAngle, startAngle, clockwise);\n            }\n\n            ctx.closePath();\n        }\n    });\n\n\n\n/***/ }),\n/* 449 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * @module zrender/mixin/Animatable\n */\n\n\n    var Animator = __webpack_require__(356);\n    var util = __webpack_require__(315);\n    var isString = util.isString;\n    var isFunction = util.isFunction;\n    var isObject = util.isObject;\n    var log = __webpack_require__(361);\n\n    /**\n     * @alias modue:zrender/mixin/Animatable\n     * @constructor\n     */\n    var Animatable = function () {\n\n        /**\n         * @type {Array.<module:zrender/animation/Animator>}\n         * @readOnly\n         */\n        this.animators = [];\n    };\n\n    Animatable.prototype = {\n\n        constructor: Animatable,\n\n        /**\n         * 动画\n         *\n         * @param {string} path 需要添加动画的属性获取路径，可以通过a.b.c来获取深层的属性\n         * @param {boolean} [loop] 动画是否循环\n         * @return {module:zrender/animation/Animator}\n         * @example:\n         *     el.animate('style', false)\n         *         .when(1000, {x: 10} )\n         *         .done(function(){ // Animation done })\n         *         .start()\n         */\n        animate: function (path, loop) {\n            var target;\n            var animatingShape = false;\n            var el = this;\n            var zr = this.__zr;\n            if (path) {\n                var pathSplitted = path.split('.');\n                var prop = el;\n                // If animating shape\n                animatingShape = pathSplitted[0] === 'shape';\n                for (var i = 0, l = pathSplitted.length; i < l; i++) {\n                    if (!prop) {\n                        continue;\n                    }\n                    prop = prop[pathSplitted[i]];\n                }\n                if (prop) {\n                    target = prop;\n                }\n            }\n            else {\n                target = el;\n            }\n\n            if (!target) {\n                log(\n                    'Property \"'\n                    + path\n                    + '\" is not existed in element '\n                    + el.id\n                );\n                return;\n            }\n\n            var animators = el.animators;\n\n            var animator = new Animator(target, loop);\n\n            animator.during(function (target) {\n                el.dirty(animatingShape);\n            })\n            .done(function () {\n                // FIXME Animator will not be removed if use `Animator#stop` to stop animation\n                animators.splice(util.indexOf(animators, animator), 1);\n            });\n\n            animators.push(animator);\n\n            // If animate after added to the zrender\n            if (zr) {\n                zr.animation.addAnimator(animator);\n            }\n\n            return animator;\n        },\n\n        /**\n         * 停止动画\n         * @param {boolean} forwardToLast If move to last frame before stop\n         */\n        stopAnimation: function (forwardToLast) {\n            var animators = this.animators;\n            var len = animators.length;\n            for (var i = 0; i < len; i++) {\n                animators[i].stop(forwardToLast);\n            }\n            animators.length = 0;\n\n            return this;\n        },\n\n        /**\n         * @param {Object} target\n         * @param {number} [time=500] Time in ms\n         * @param {string} [easing='linear']\n         * @param {number} [delay=0]\n         * @param {Function} [callback]\n         *\n         * @example\n         *  // Animate position\n         *  el.animateTo({\n         *      position: [10, 10]\n         *  }, function () { // done })\n         *\n         *  // Animate shape, style and position in 100ms, delayed 100ms, with cubicOut easing\n         *  el.animateTo({\n         *      shape: {\n         *          width: 500\n         *      },\n         *      style: {\n         *          fill: 'red'\n         *      }\n         *      position: [10, 10]\n         *  }, 100, 100, 'cubicOut', function () { // done })\n         */\n         // TODO Return animation key\n        animateTo: function (target, time, delay, easing, callback) {\n            // animateTo(target, time, easing, callback);\n            if (isString(delay)) {\n                callback = easing;\n                easing = delay;\n                delay = 0;\n            }\n            // animateTo(target, time, delay, callback);\n            else if (isFunction(easing)) {\n                callback = easing;\n                easing = 'linear';\n                delay = 0;\n            }\n            // animateTo(target, time, callback);\n            else if (isFunction(delay)) {\n                callback = delay;\n                delay = 0;\n            }\n            // animateTo(target, callback)\n            else if (isFunction(time)) {\n                callback = time;\n                time = 500;\n            }\n            // animateTo(target)\n            else if (!time) {\n                time = 500;\n            }\n            // Stop all previous animations\n            this.stopAnimation();\n            this._animateToShallow('', this, target, time, delay, easing, callback);\n\n            // Animators may be removed immediately after start\n            // if there is nothing to animate\n            var animators = this.animators.slice();\n            var count = animators.length;\n            function done() {\n                count--;\n                if (!count) {\n                    callback && callback();\n                }\n            }\n\n            // No animators. This should be checked before animators[i].start(),\n            // because 'done' may be executed immediately if no need to animate.\n            if (!count) {\n                callback && callback();\n            }\n            // Start after all animators created\n            // Incase any animator is done immediately when all animation properties are not changed\n            for (var i = 0; i < animators.length; i++) {\n                animators[i]\n                    .done(done)\n                    .start(easing);\n            }\n        },\n\n        /**\n         * @private\n         * @param {string} path=''\n         * @param {Object} source=this\n         * @param {Object} target\n         * @param {number} [time=500]\n         * @param {number} [delay=0]\n         *\n         * @example\n         *  // Animate position\n         *  el._animateToShallow({\n         *      position: [10, 10]\n         *  })\n         *\n         *  // Animate shape, style and position in 100ms, delayed 100ms\n         *  el._animateToShallow({\n         *      shape: {\n         *          width: 500\n         *      },\n         *      style: {\n         *          fill: 'red'\n         *      }\n         *      position: [10, 10]\n         *  }, 100, 100)\n         */\n        _animateToShallow: function (path, source, target, time, delay) {\n            var objShallow = {};\n            var propertyCount = 0;\n            for (var name in target) {\n                if (!target.hasOwnProperty(name)) {\n                    continue;\n                }\n\n                if (source[name] != null) {\n                    if (isObject(target[name]) && !util.isArrayLike(target[name])) {\n                        this._animateToShallow(\n                            path ? path + '.' + name : name,\n                            source[name],\n                            target[name],\n                            time,\n                            delay\n                        );\n                    }\n                    else {\n                        objShallow[name] = target[name];\n                        propertyCount++;\n                    }\n                }\n                else if (target[name] != null) {\n                    // Attr directly if not has property\n                    // FIXME, if some property not needed for element ?\n                    if (!path) {\n                        this.attr(name, target[name]);\n                    }\n                    else {  // Shape or style\n                        var props = {};\n                        props[path] = {};\n                        props[path][name] = target[name];\n                        this.attr(props);\n                    }\n                }\n            }\n\n            if (propertyCount > 0) {\n                this.animate(path, false)\n                    .when(time == null ? 500 : time, objShallow)\n                    .delay(delay || 0);\n            }\n\n            return this;\n        }\n    };\n\n    module.exports = Animatable;\n\n\n/***/ }),\n/* 450 */\n/***/ (function(module, exports) {\n\n// TODO Draggable for group\n// FIXME Draggable on element which has parent rotation or scale\n\n    function Draggable() {\n\n        this.on('mousedown', this._dragStart, this);\n        this.on('mousemove', this._drag, this);\n        this.on('mouseup', this._dragEnd, this);\n        this.on('globalout', this._dragEnd, this);\n        // this._dropTarget = null;\n        // this._draggingTarget = null;\n\n        // this._x = 0;\n        // this._y = 0;\n    }\n\n    Draggable.prototype = {\n\n        constructor: Draggable,\n\n        _dragStart: function (e) {\n            var draggingTarget = e.target;\n            if (draggingTarget && draggingTarget.draggable) {\n                this._draggingTarget = draggingTarget;\n                draggingTarget.dragging = true;\n                this._x = e.offsetX;\n                this._y = e.offsetY;\n\n                this.dispatchToElement(param(draggingTarget, e), 'dragstart', e.event);\n            }\n        },\n\n        _drag: function (e) {\n            var draggingTarget = this._draggingTarget;\n            if (draggingTarget) {\n\n                var x = e.offsetX;\n                var y = e.offsetY;\n\n                var dx = x - this._x;\n                var dy = y - this._y;\n                this._x = x;\n                this._y = y;\n\n                draggingTarget.drift(dx, dy, e);\n                this.dispatchToElement(param(draggingTarget, e), 'drag', e.event);\n\n                var dropTarget = this.findHover(x, y, draggingTarget).target;\n                var lastDropTarget = this._dropTarget;\n                this._dropTarget = dropTarget;\n\n                if (draggingTarget !== dropTarget) {\n                    if (lastDropTarget && dropTarget !== lastDropTarget) {\n                        this.dispatchToElement(param(lastDropTarget, e), 'dragleave', e.event);\n                    }\n                    if (dropTarget && dropTarget !== lastDropTarget) {\n                        this.dispatchToElement(param(dropTarget, e), 'dragenter', e.event);\n                    }\n                }\n            }\n        },\n\n        _dragEnd: function (e) {\n            var draggingTarget = this._draggingTarget;\n\n            if (draggingTarget) {\n                draggingTarget.dragging = false;\n            }\n\n            this.dispatchToElement(param(draggingTarget, e), 'dragend', e.event);\n\n            if (this._dropTarget) {\n                this.dispatchToElement(param(this._dropTarget, e), 'drop', e.event);\n            }\n\n            this._draggingTarget = null;\n            this._dropTarget = null;\n        }\n\n    };\n\n    function param(target, e) {\n        return {target: target, topTarget: e && e.topTarget};\n    }\n\n    module.exports = Draggable;\n\n\n/***/ }),\n/* 451 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * 提供变换扩展\n * @module zrender/mixin/Transformable\n * @author pissang (https://www.github.com/pissang)\n */\n\n\n    var matrix = __webpack_require__(338);\n    var vector = __webpack_require__(319);\n    var mIdentity = matrix.identity;\n\n    var EPSILON = 5e-5;\n\n    function isNotAroundZero(val) {\n        return val > EPSILON || val < -EPSILON;\n    }\n\n    /**\n     * @alias module:zrender/mixin/Transformable\n     * @constructor\n     */\n    var Transformable = function (opts) {\n        opts = opts || {};\n        // If there are no given position, rotation, scale\n        if (!opts.position) {\n            /**\n             * 平移\n             * @type {Array.<number>}\n             * @default [0, 0]\n             */\n            this.position = [0, 0];\n        }\n        if (opts.rotation == null) {\n            /**\n             * 旋转\n             * @type {Array.<number>}\n             * @default 0\n             */\n            this.rotation = 0;\n        }\n        if (!opts.scale) {\n            /**\n             * 缩放\n             * @type {Array.<number>}\n             * @default [1, 1]\n             */\n            this.scale = [1, 1];\n        }\n        /**\n         * 旋转和缩放的原点\n         * @type {Array.<number>}\n         * @default null\n         */\n        this.origin = this.origin || null;\n    };\n\n    var transformableProto = Transformable.prototype;\n    transformableProto.transform = null;\n\n    /**\n     * 判断是否需要有坐标变换\n     * 如果有坐标变换, 则从position, rotation, scale以及父节点的transform计算出自身的transform矩阵\n     */\n    transformableProto.needLocalTransform = function () {\n        return isNotAroundZero(this.rotation)\n            || isNotAroundZero(this.position[0])\n            || isNotAroundZero(this.position[1])\n            || isNotAroundZero(this.scale[0] - 1)\n            || isNotAroundZero(this.scale[1] - 1);\n    };\n\n    transformableProto.updateTransform = function () {\n        var parent = this.parent;\n        var parentHasTransform = parent && parent.transform;\n        var needLocalTransform = this.needLocalTransform();\n\n        var m = this.transform;\n        if (!(needLocalTransform || parentHasTransform)) {\n            m && mIdentity(m);\n            return;\n        }\n\n        m = m || matrix.create();\n\n        if (needLocalTransform) {\n            this.getLocalTransform(m);\n        }\n        else {\n            mIdentity(m);\n        }\n\n        // 应用父节点变换\n        if (parentHasTransform) {\n            if (needLocalTransform) {\n                matrix.mul(m, parent.transform, m);\n            }\n            else {\n                matrix.copy(m, parent.transform);\n            }\n        }\n        // 保存这个变换矩阵\n        this.transform = m;\n\n        this.invTransform = this.invTransform || matrix.create();\n        matrix.invert(this.invTransform, m);\n    };\n\n    transformableProto.getLocalTransform = function (m) {\n        return Transformable.getLocalTransform(this, m);\n    };\n\n    /**\n     * 将自己的transform应用到context上\n     * @param {Context2D} ctx\n     */\n    transformableProto.setTransform = function (ctx) {\n        var m = this.transform;\n        var dpr = ctx.dpr || 1;\n        if (m) {\n            ctx.setTransform(dpr * m[0], dpr * m[1], dpr * m[2], dpr * m[3], dpr * m[4], dpr * m[5]);\n        }\n        else {\n            ctx.setTransform(dpr, 0, 0, dpr, 0, 0);\n        }\n    };\n\n    transformableProto.restoreTransform = function (ctx) {\n        var dpr = ctx.dpr || 1;\n        ctx.setTransform(dpr, 0, 0, dpr, 0, 0);\n    };\n\n    var tmpTransform = [];\n\n    /**\n     * 分解`transform`矩阵到`position`, `rotation`, `scale`\n     */\n    transformableProto.decomposeTransform = function () {\n        if (!this.transform) {\n            return;\n        }\n        var parent = this.parent;\n        var m = this.transform;\n        if (parent && parent.transform) {\n            // Get local transform and decompose them to position, scale, rotation\n            matrix.mul(tmpTransform, parent.invTransform, m);\n            m = tmpTransform;\n        }\n        var sx = m[0] * m[0] + m[1] * m[1];\n        var sy = m[2] * m[2] + m[3] * m[3];\n        var position = this.position;\n        var scale = this.scale;\n        if (isNotAroundZero(sx - 1)) {\n            sx = Math.sqrt(sx);\n        }\n        if (isNotAroundZero(sy - 1)) {\n            sy = Math.sqrt(sy);\n        }\n        if (m[0] < 0) {\n            sx = -sx;\n        }\n        if (m[3] < 0) {\n            sy = -sy;\n        }\n        position[0] = m[4];\n        position[1] = m[5];\n        scale[0] = sx;\n        scale[1] = sy;\n        this.rotation = Math.atan2(-m[1] / sy, m[0] / sx);\n    };\n\n    /**\n     * Get global scale\n     * @return {Array.<number>}\n     */\n    transformableProto.getGlobalScale = function () {\n        var m = this.transform;\n        if (!m) {\n            return [1, 1];\n        }\n        var sx = Math.sqrt(m[0] * m[0] + m[1] * m[1]);\n        var sy = Math.sqrt(m[2] * m[2] + m[3] * m[3]);\n        if (m[0] < 0) {\n            sx = -sx;\n        }\n        if (m[3] < 0) {\n            sy = -sy;\n        }\n        return [sx, sy];\n    };\n    /**\n     * 变换坐标位置到 shape 的局部坐标空间\n     * @method\n     * @param {number} x\n     * @param {number} y\n     * @return {Array.<number>}\n     */\n    transformableProto.transformCoordToLocal = function (x, y) {\n        var v2 = [x, y];\n        var invTransform = this.invTransform;\n        if (invTransform) {\n            vector.applyTransform(v2, v2, invTransform);\n        }\n        return v2;\n    };\n\n    /**\n     * 变换局部坐标位置到全局坐标空间\n     * @method\n     * @param {number} x\n     * @param {number} y\n     * @return {Array.<number>}\n     */\n    transformableProto.transformCoordToGlobal = function (x, y) {\n        var v2 = [x, y];\n        var transform = this.transform;\n        if (transform) {\n            vector.applyTransform(v2, v2, transform);\n        }\n        return v2;\n    };\n\n    /**\n     * @static\n     * @param {Object} target\n     * @param {Array.<number>} target.origin\n     * @param {number} target.rotation\n     * @param {Array.<number>} target.position\n     * @param {Array.<number>} [m]\n     */\n    Transformable.getLocalTransform = function (target, m) {\n        m = m || [];\n        mIdentity(m);\n\n        var origin = target.origin;\n        var scale = target.scale || [1, 1];\n        var rotation = target.rotation || 0;\n        var position = target.position || [0, 0];\n\n        if (origin) {\n            // Translate to origin\n            m[4] -= origin[0];\n            m[5] -= origin[1];\n        }\n        matrix.scale(m, m, scale);\n        if (rotation) {\n            matrix.rotate(m, m, rotation);\n        }\n        if (origin) {\n            // Translate back from origin\n            m[4] += origin[0];\n            m[5] += origin[1];\n        }\n\n        m[4] += position[0];\n        m[5] += position[1];\n\n        return m;\n    };\n\n    module.exports = Transformable;\n\n\n\n/***/ }),\n/* 452 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var Path = __webpack_require__(320);\n    var PathProxy = __webpack_require__(337);\n    var transformPath = __webpack_require__(453);\n\n    // command chars\n    var cc = [\n        'm', 'M', 'l', 'L', 'v', 'V', 'h', 'H', 'z', 'Z',\n        'c', 'C', 'q', 'Q', 't', 'T', 's', 'S', 'a', 'A'\n    ];\n\n    var mathSqrt = Math.sqrt;\n    var mathSin = Math.sin;\n    var mathCos = Math.cos;\n    var PI = Math.PI;\n\n    var vMag = function(v) {\n        return Math.sqrt(v[0] * v[0] + v[1] * v[1]);\n    };\n    var vRatio = function(u, v) {\n        return (u[0] * v[0] + u[1] * v[1]) / (vMag(u) * vMag(v));\n    };\n    var vAngle = function(u, v) {\n        return (u[0] * v[1] < u[1] * v[0] ? -1 : 1)\n                * Math.acos(vRatio(u, v));\n    };\n\n    function processArc(x1, y1, x2, y2, fa, fs, rx, ry, psiDeg, cmd, path) {\n        var psi = psiDeg * (PI / 180.0);\n        var xp = mathCos(psi) * (x1 - x2) / 2.0\n                 + mathSin(psi) * (y1 - y2) / 2.0;\n        var yp = -1 * mathSin(psi) * (x1 - x2) / 2.0\n                 + mathCos(psi) * (y1 - y2) / 2.0;\n\n        var lambda = (xp * xp) / (rx * rx) + (yp * yp) / (ry * ry);\n\n        if (lambda > 1) {\n            rx *= mathSqrt(lambda);\n            ry *= mathSqrt(lambda);\n        }\n\n        var f = (fa === fs ? -1 : 1)\n            * mathSqrt((((rx * rx) * (ry * ry))\n                    - ((rx * rx) * (yp * yp))\n                    - ((ry * ry) * (xp * xp))) / ((rx * rx) * (yp * yp)\n                    + (ry * ry) * (xp * xp))\n                ) || 0;\n\n        var cxp = f * rx * yp / ry;\n        var cyp = f * -ry * xp / rx;\n\n        var cx = (x1 + x2) / 2.0\n                 + mathCos(psi) * cxp\n                 - mathSin(psi) * cyp;\n        var cy = (y1 + y2) / 2.0\n                + mathSin(psi) * cxp\n                + mathCos(psi) * cyp;\n\n        var theta = vAngle([ 1, 0 ], [ (xp - cxp) / rx, (yp - cyp) / ry ]);\n        var u = [ (xp - cxp) / rx, (yp - cyp) / ry ];\n        var v = [ (-1 * xp - cxp) / rx, (-1 * yp - cyp) / ry ];\n        var dTheta = vAngle(u, v);\n\n        if (vRatio(u, v) <= -1) {\n            dTheta = PI;\n        }\n        if (vRatio(u, v) >= 1) {\n            dTheta = 0;\n        }\n        if (fs === 0 && dTheta > 0) {\n            dTheta = dTheta - 2 * PI;\n        }\n        if (fs === 1 && dTheta < 0) {\n            dTheta = dTheta + 2 * PI;\n        }\n\n        path.addData(cmd, cx, cy, rx, ry, theta, dTheta, psi, fs);\n    }\n\n    function createPathProxyFromString(data) {\n        if (!data) {\n            return [];\n        }\n\n        // command string\n        var cs = data.replace(/-/g, ' -')\n            .replace(/  /g, ' ')\n            .replace(/ /g, ',')\n            .replace(/,,/g, ',');\n\n        var n;\n        // create pipes so that we can split the data\n        for (n = 0; n < cc.length; n++) {\n            cs = cs.replace(new RegExp(cc[n], 'g'), '|' + cc[n]);\n        }\n\n        // create array\n        var arr = cs.split('|');\n        // init context point\n        var cpx = 0;\n        var cpy = 0;\n\n        var path = new PathProxy();\n        var CMD = PathProxy.CMD;\n\n        var prevCmd;\n        for (n = 1; n < arr.length; n++) {\n            var str = arr[n];\n            var c = str.charAt(0);\n            var off = 0;\n            var p = str.slice(1).replace(/e,-/g, 'e-').split(',');\n            var cmd;\n\n            if (p.length > 0 && p[0] === '') {\n                p.shift();\n            }\n\n            for (var i = 0; i < p.length; i++) {\n                p[i] = parseFloat(p[i]);\n            }\n            while (off < p.length && !isNaN(p[off])) {\n                if (isNaN(p[0])) {\n                    break;\n                }\n                var ctlPtx;\n                var ctlPty;\n\n                var rx;\n                var ry;\n                var psi;\n                var fa;\n                var fs;\n\n                var x1 = cpx;\n                var y1 = cpy;\n\n                // convert l, H, h, V, and v to L\n                switch (c) {\n                    case 'l':\n                        cpx += p[off++];\n                        cpy += p[off++];\n                        cmd = CMD.L;\n                        path.addData(cmd, cpx, cpy);\n                        break;\n                    case 'L':\n                        cpx = p[off++];\n                        cpy = p[off++];\n                        cmd = CMD.L;\n                        path.addData(cmd, cpx, cpy);\n                        break;\n                    case 'm':\n                        cpx += p[off++];\n                        cpy += p[off++];\n                        cmd = CMD.M;\n                        path.addData(cmd, cpx, cpy);\n                        c = 'l';\n                        break;\n                    case 'M':\n                        cpx = p[off++];\n                        cpy = p[off++];\n                        cmd = CMD.M;\n                        path.addData(cmd, cpx, cpy);\n                        c = 'L';\n                        break;\n                    case 'h':\n                        cpx += p[off++];\n                        cmd = CMD.L;\n                        path.addData(cmd, cpx, cpy);\n                        break;\n                    case 'H':\n                        cpx = p[off++];\n                        cmd = CMD.L;\n                        path.addData(cmd, cpx, cpy);\n                        break;\n                    case 'v':\n                        cpy += p[off++];\n                        cmd = CMD.L;\n                        path.addData(cmd, cpx, cpy);\n                        break;\n                    case 'V':\n                        cpy = p[off++];\n                        cmd = CMD.L;\n                        path.addData(cmd, cpx, cpy);\n                        break;\n                    case 'C':\n                        cmd = CMD.C;\n                        path.addData(\n                            cmd, p[off++], p[off++], p[off++], p[off++], p[off++], p[off++]\n                        );\n                        cpx = p[off - 2];\n                        cpy = p[off - 1];\n                        break;\n                    case 'c':\n                        cmd = CMD.C;\n                        path.addData(\n                            cmd,\n                            p[off++] + cpx, p[off++] + cpy,\n                            p[off++] + cpx, p[off++] + cpy,\n                            p[off++] + cpx, p[off++] + cpy\n                        );\n                        cpx += p[off - 2];\n                        cpy += p[off - 1];\n                        break;\n                    case 'S':\n                        ctlPtx = cpx;\n                        ctlPty = cpy;\n                        var len = path.len();\n                        var pathData = path.data;\n                        if (prevCmd === CMD.C) {\n                            ctlPtx += cpx - pathData[len - 4];\n                            ctlPty += cpy - pathData[len - 3];\n                        }\n                        cmd = CMD.C;\n                        x1 = p[off++];\n                        y1 = p[off++];\n                        cpx = p[off++];\n                        cpy = p[off++];\n                        path.addData(cmd, ctlPtx, ctlPty, x1, y1, cpx, cpy);\n                        break;\n                    case 's':\n                        ctlPtx = cpx;\n                        ctlPty = cpy;\n                        var len = path.len();\n                        var pathData = path.data;\n                        if (prevCmd === CMD.C) {\n                            ctlPtx += cpx - pathData[len - 4];\n                            ctlPty += cpy - pathData[len - 3];\n                        }\n                        cmd = CMD.C;\n                        x1 = cpx + p[off++];\n                        y1 = cpy + p[off++];\n                        cpx += p[off++];\n                        cpy += p[off++];\n                        path.addData(cmd, ctlPtx, ctlPty, x1, y1, cpx, cpy);\n                        break;\n                    case 'Q':\n                        x1 = p[off++];\n                        y1 = p[off++];\n                        cpx = p[off++];\n                        cpy = p[off++];\n                        cmd = CMD.Q;\n                        path.addData(cmd, x1, y1, cpx, cpy);\n                        break;\n                    case 'q':\n                        x1 = p[off++] + cpx;\n                        y1 = p[off++] + cpy;\n                        cpx += p[off++];\n                        cpy += p[off++];\n                        cmd = CMD.Q;\n                        path.addData(cmd, x1, y1, cpx, cpy);\n                        break;\n                    case 'T':\n                        ctlPtx = cpx;\n                        ctlPty = cpy;\n                        var len = path.len();\n                        var pathData = path.data;\n                        if (prevCmd === CMD.Q) {\n                            ctlPtx += cpx - pathData[len - 4];\n                            ctlPty += cpy - pathData[len - 3];\n                        }\n                        cpx = p[off++];\n                        cpy = p[off++];\n                        cmd = CMD.Q;\n                        path.addData(cmd, ctlPtx, ctlPty, cpx, cpy);\n                        break;\n                    case 't':\n                        ctlPtx = cpx;\n                        ctlPty = cpy;\n                        var len = path.len();\n                        var pathData = path.data;\n                        if (prevCmd === CMD.Q) {\n                            ctlPtx += cpx - pathData[len - 4];\n                            ctlPty += cpy - pathData[len - 3];\n                        }\n                        cpx += p[off++];\n                        cpy += p[off++];\n                        cmd = CMD.Q;\n                        path.addData(cmd, ctlPtx, ctlPty, cpx, cpy);\n                        break;\n                    case 'A':\n                        rx = p[off++];\n                        ry = p[off++];\n                        psi = p[off++];\n                        fa = p[off++];\n                        fs = p[off++];\n\n                        x1 = cpx, y1 = cpy;\n                        cpx = p[off++];\n                        cpy = p[off++];\n                        cmd = CMD.A;\n                        processArc(\n                            x1, y1, cpx, cpy, fa, fs, rx, ry, psi, cmd, path\n                        );\n                        break;\n                    case 'a':\n                        rx = p[off++];\n                        ry = p[off++];\n                        psi = p[off++];\n                        fa = p[off++];\n                        fs = p[off++];\n\n                        x1 = cpx, y1 = cpy;\n                        cpx += p[off++];\n                        cpy += p[off++];\n                        cmd = CMD.A;\n                        processArc(\n                            x1, y1, cpx, cpy, fa, fs, rx, ry, psi, cmd, path\n                        );\n                        break;\n                }\n            }\n\n            if (c === 'z' || c === 'Z') {\n                cmd = CMD.Z;\n                path.addData(cmd);\n            }\n\n            prevCmd = cmd;\n        }\n\n        path.toStatic();\n\n        return path;\n    }\n\n    // TODO Optimize double memory cost problem\n    function createPathOptions(str, opts) {\n        var pathProxy = createPathProxyFromString(str);\n        opts = opts || {};\n        opts.buildPath = function (path) {\n            if (path.setData) {\n                path.setData(pathProxy.data);\n                // Svg and vml renderer don't have context\n                var ctx = path.getContext();\n                if (ctx) {\n                    path.rebuildPath(ctx);\n                }\n            }\n            else {\n                var ctx = path;\n                pathProxy.rebuildPath(ctx);\n            }\n        };\n\n        opts.applyTransform = function (m) {\n            transformPath(pathProxy, m);\n\n            this.dirty(true);\n        };\n\n        return opts;\n    }\n\n    module.exports = {\n        /**\n         * Create a Path object from path string data\n         * http://www.w3.org/TR/SVG/paths.html#PathData\n         * @param  {Object} opts Other options\n         */\n        createFromString: function (str, opts) {\n            return new Path(createPathOptions(str, opts));\n        },\n\n        /**\n         * Create a Path class from path string data\n         * @param  {string} str\n         * @param  {Object} opts Other options\n         */\n        extendFromString: function (str, opts) {\n            return Path.extend(createPathOptions(str, opts));\n        },\n\n        /**\n         * Merge multiple paths\n         */\n        // TODO Apply transform\n        // TODO stroke dash\n        // TODO Optimize double memory cost problem\n        mergePath: function (pathEls, opts) {\n            var pathList = [];\n            var len = pathEls.length;\n            for (var i = 0; i < len; i++) {\n                var pathEl = pathEls[i];\n                if (!pathEl.path) {\n                    pathEl.createPathProxy();\n                }\n                if (pathEl.__dirtyPath) {\n                    pathEl.buildPath(pathEl.path, pathEl.shape, true);\n                }\n                pathList.push(pathEl.path);\n            }\n\n            var pathBundle = new Path(opts);\n            // Need path proxy.\n            pathBundle.createPathProxy();\n            pathBundle.buildPath = function (path) {\n                path.appendPath(pathList);\n                // Svg and vml renderer don't have context\n                var ctx = path.getContext();\n                if (ctx) {\n                    path.rebuildPath(ctx);\n                }\n            };\n\n            return pathBundle;\n        }\n    };\n\n\n/***/ }),\n/* 453 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var CMD = __webpack_require__(337).CMD;\n    var vec2 = __webpack_require__(319);\n    var v2ApplyTransform = vec2.applyTransform;\n\n    var points = [[], [], []];\n    var mathSqrt = Math.sqrt;\n    var mathAtan2 = Math.atan2;\n    function transformPath(path, m) {\n        var data = path.data;\n        var cmd;\n        var nPoint;\n        var i;\n        var j;\n        var k;\n        var p;\n\n        var M = CMD.M;\n        var C = CMD.C;\n        var L = CMD.L;\n        var R = CMD.R;\n        var A = CMD.A;\n        var Q = CMD.Q;\n\n        for (i = 0, j = 0; i < data.length;) {\n            cmd = data[i++];\n            j = i;\n            nPoint = 0;\n\n            switch (cmd) {\n                case M:\n                    nPoint = 1;\n                    break;\n                case L:\n                    nPoint = 1;\n                    break;\n                case C:\n                    nPoint = 3;\n                    break;\n                case Q:\n                    nPoint = 2;\n                    break;\n                case A:\n                    var x = m[4];\n                    var y = m[5];\n                    var sx = mathSqrt(m[0] * m[0] + m[1] * m[1]);\n                    var sy = mathSqrt(m[2] * m[2] + m[3] * m[3]);\n                    var angle = mathAtan2(-m[1] / sy, m[0] / sx);\n                    // cx\n                    data[i] *= sx;\n                    data[i++] += x;\n                    // cy\n                    data[i] *= sy;\n                    data[i++] += y;\n                    // Scale rx and ry\n                    // FIXME Assume psi is 0 here\n                    data[i++] *= sx;\n                    data[i++] *= sy;\n\n                    // Start angle\n                    data[i++] += angle;\n                    // end angle\n                    data[i++] += angle;\n                    // FIXME psi\n                    i += 2;\n                    j = i;\n                    break;\n                case R:\n                    // x0, y0\n                    p[0] = data[i++];\n                    p[1] = data[i++];\n                    v2ApplyTransform(p, p, m);\n                    data[j++] = p[0];\n                    data[j++] = p[1];\n                    // x1, y1\n                    p[0] += data[i++];\n                    p[1] += data[i++];\n                    v2ApplyTransform(p, p, m);\n                    data[j++] = p[0];\n                    data[j++] = p[1];\n            }\n\n            for (k = 0; k < nPoint; k++) {\n                var p = points[k];\n                p[0] = data[i++];\n                p[1] = data[i++];\n\n                v2ApplyTransform(p, p, m);\n                // Write back\n                data[j++] = p[0];\n                data[j++] = p[1];\n            }\n        }\n    }\n\n    module.exports = transformPath;\n\n\n/***/ }),\n/* 454 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/*!\n * ZRender, a high performance 2d drawing library.\n *\n * Copyright (c) 2013, Baidu Inc.\n * All rights reserved.\n *\n * LICENSE\n * https://github.com/ecomfe/zrender/blob/master/LICENSE.txt\n */\n// Global defines\n\n    var guid = __webpack_require__(360);\n    var env = __webpack_require__(321);\n    var zrUtil = __webpack_require__(315);\n\n    var Handler = __webpack_require__(417);\n    var Storage = __webpack_require__(420);\n    var Animation = __webpack_require__(421);\n    var HandlerProxy = __webpack_require__(432);\n\n    var useVML = !env.canvasSupported;\n\n    var painterCtors = {\n        canvas: __webpack_require__(419)\n    };\n\n    var instances = {};    // ZRender实例map索引\n\n    var zrender = {};\n\n    /**\n     * @type {string}\n     */\n    zrender.version = '3.4.4';\n\n    /**\n     * Initializing a zrender instance\n     * @param {HTMLElement} dom\n     * @param {Object} opts\n     * @param {string} [opts.renderer='canvas'] 'canvas' or 'svg'\n     * @param {number} [opts.devicePixelRatio]\n     * @param {number|string} [opts.width] Can be 'auto' (the same as null/undefined)\n     * @param {number|string} [opts.height] Can be 'auto' (the same as null/undefined)\n     * @return {module:zrender/ZRender}\n     */\n    zrender.init = function(dom, opts) {\n        var zr = new ZRender(guid(), dom, opts);\n        instances[zr.id] = zr;\n        return zr;\n    };\n\n    /**\n     * Dispose zrender instance\n     * @param {module:zrender/ZRender} zr\n     */\n    zrender.dispose = function (zr) {\n        if (zr) {\n            zr.dispose();\n        }\n        else {\n            for (var key in instances) {\n                if (instances.hasOwnProperty(key)) {\n                    instances[key].dispose();\n                }\n            }\n            instances = {};\n        }\n\n        return zrender;\n    };\n\n    /**\n     * Get zrender instance by id\n     * @param {string} id zrender instance id\n     * @return {module:zrender/ZRender}\n     */\n    zrender.getInstance = function (id) {\n        return instances[id];\n    };\n\n    zrender.registerPainter = function (name, Ctor) {\n        painterCtors[name] = Ctor;\n    };\n\n    function delInstance(id) {\n        delete instances[id];\n    }\n\n    /**\n     * @module zrender/ZRender\n     */\n    /**\n     * @constructor\n     * @alias module:zrender/ZRender\n     * @param {string} id\n     * @param {HTMLDomElement} dom\n     * @param {Object} opts\n     * @param {string} [opts.renderer='canvas'] 'canvas' or 'svg'\n     * @param {number} [opts.devicePixelRatio]\n     * @param {number} [opts.width] Can be 'auto' (the same as null/undefined)\n     * @param {number} [opts.height] Can be 'auto' (the same as null/undefined)\n     */\n    var ZRender = function(id, dom, opts) {\n\n        opts = opts || {};\n\n        /**\n         * @type {HTMLDomElement}\n         */\n        this.dom = dom;\n\n        /**\n         * @type {string}\n         */\n        this.id = id;\n\n        var self = this;\n        var storage = new Storage();\n\n        var rendererType = opts.renderer;\n        // TODO WebGL\n        if (useVML) {\n            if (!painterCtors.vml) {\n                throw new Error('You need to require \\'zrender/vml/vml\\' to support IE8');\n            }\n            rendererType = 'vml';\n        }\n        else if (!rendererType || !painterCtors[rendererType]) {\n            rendererType = 'canvas';\n        }\n        var painter = new painterCtors[rendererType](dom, storage, opts);\n\n        this.storage = storage;\n        this.painter = painter;\n\n        var handerProxy = !env.node ? new HandlerProxy(painter.getViewportRoot()) : null;\n        this.handler = new Handler(storage, painter, handerProxy, painter.root);\n\n        /**\n         * @type {module:zrender/animation/Animation}\n         */\n        this.animation = new Animation({\n            stage: {\n                update: zrUtil.bind(this.flush, this)\n            }\n        });\n        this.animation.start();\n\n        /**\n         * @type {boolean}\n         * @private\n         */\n        this._needsRefresh;\n\n        // 修改 storage.delFromStorage, 每次删除元素之前删除动画\n        // FIXME 有点ugly\n        var oldDelFromStorage = storage.delFromStorage;\n        var oldAddToStorage = storage.addToStorage;\n\n        storage.delFromStorage = function (el) {\n            oldDelFromStorage.call(storage, el);\n\n            el && el.removeSelfFromZr(self);\n        };\n\n        storage.addToStorage = function (el) {\n            oldAddToStorage.call(storage, el);\n\n            el.addSelfToZr(self);\n        };\n    };\n\n    ZRender.prototype = {\n\n        constructor: ZRender,\n        /**\n         * 获取实例唯一标识\n         * @return {string}\n         */\n        getId: function () {\n            return this.id;\n        },\n\n        /**\n         * 添加元素\n         * @param  {module:zrender/Element} el\n         */\n        add: function (el) {\n            this.storage.addRoot(el);\n            this._needsRefresh = true;\n        },\n\n        /**\n         * 删除元素\n         * @param  {module:zrender/Element} el\n         */\n        remove: function (el) {\n            this.storage.delRoot(el);\n            this._needsRefresh = true;\n        },\n\n        /**\n         * Change configuration of layer\n         * @param {string} zLevel\n         * @param {Object} config\n         * @param {string} [config.clearColor=0] Clear color\n         * @param {string} [config.motionBlur=false] If enable motion blur\n         * @param {number} [config.lastFrameAlpha=0.7] Motion blur factor. Larger value cause longer trailer\n        */\n        configLayer: function (zLevel, config) {\n            this.painter.configLayer(zLevel, config);\n            this._needsRefresh = true;\n        },\n\n        /**\n         * Repaint the canvas immediately\n         */\n        refreshImmediately: function () {\n            // Clear needsRefresh ahead to avoid something wrong happens in refresh\n            // Or it will cause zrender refreshes again and again.\n            this._needsRefresh = false;\n            this.painter.refresh();\n            /**\n             * Avoid trigger zr.refresh in Element#beforeUpdate hook\n             */\n            this._needsRefresh = false;\n        },\n\n        /**\n         * Mark and repaint the canvas in the next frame of browser\n         */\n        refresh: function() {\n            this._needsRefresh = true;\n        },\n\n        /**\n         * Perform all refresh\n         */\n        flush: function () {\n            if (this._needsRefresh) {\n                this.refreshImmediately();\n            }\n            if (this._needsRefreshHover) {\n                this.refreshHoverImmediately();\n            }\n        },\n\n        /**\n         * Add element to hover layer\n         * @param  {module:zrender/Element} el\n         * @param {Object} style\n         */\n        addHover: function (el, style) {\n            if (this.painter.addHover) {\n                this.painter.addHover(el, style);\n                this.refreshHover();\n            }\n        },\n\n        /**\n         * Add element from hover layer\n         * @param  {module:zrender/Element} el\n         */\n        removeHover: function (el) {\n            if (this.painter.removeHover) {\n                this.painter.removeHover(el);\n                this.refreshHover();\n            }\n        },\n\n        /**\n         * Clear all hover elements in hover layer\n         * @param  {module:zrender/Element} el\n         */\n        clearHover: function () {\n            if (this.painter.clearHover) {\n                this.painter.clearHover();\n                this.refreshHover();\n            }\n        },\n\n        /**\n         * Refresh hover in next frame\n         */\n        refreshHover: function () {\n            this._needsRefreshHover = true;\n        },\n\n        /**\n         * Refresh hover immediately\n         */\n        refreshHoverImmediately: function () {\n            this._needsRefreshHover = false;\n            this.painter.refreshHover && this.painter.refreshHover();\n        },\n\n        /**\n         * Resize the canvas.\n         * Should be invoked when container size is changed\n         * @param {Object} [opts]\n         * @param {number|string} [opts.width] Can be 'auto' (the same as null/undefined)\n         * @param {number|string} [opts.height] Can be 'auto' (the same as null/undefined)\n         */\n        resize: function(opts) {\n            opts = opts || {};\n            this.painter.resize(opts.width, opts.height);\n            this.handler.resize();\n        },\n\n        /**\n         * Stop and clear all animation immediately\n         */\n        clearAnimation: function () {\n            this.animation.clear();\n        },\n\n        /**\n         * Get container width\n         */\n        getWidth: function() {\n            return this.painter.getWidth();\n        },\n\n        /**\n         * Get container height\n         */\n        getHeight: function() {\n            return this.painter.getHeight();\n        },\n\n        /**\n         * Export the canvas as Base64 URL\n         * @param {string} type\n         * @param {string} [backgroundColor='#fff']\n         * @return {string} Base64 URL\n         */\n        // toDataURL: function(type, backgroundColor) {\n        //     return this.painter.getRenderedCanvas({\n        //         backgroundColor: backgroundColor\n        //     }).toDataURL(type);\n        // },\n\n        /**\n         * Converting a path to image.\n         * It has much better performance of drawing image rather than drawing a vector path.\n         * @param {module:zrender/graphic/Path} e\n         * @param {number} width\n         * @param {number} height\n         */\n        pathToImage: function(e, dpr) {\n            return this.painter.pathToImage(e, dpr);\n        },\n\n        /**\n         * Set default cursor\n         * @param {string} [cursorStyle='default'] 例如 crosshair\n         */\n        setCursorStyle: function (cursorStyle) {\n            this.handler.setCursorStyle(cursorStyle);\n        },\n\n        /**\n         * Find hovered element\n         * @param {number} x\n         * @param {number} y\n         * @return {Object} {target, topTarget}\n         */\n        findHover: function (x, y) {\n            return this.handler.findHover(x, y);\n        },\n\n        /**\n         * Bind event\n         *\n         * @param {string} eventName Event name\n         * @param {Function} eventHandler Handler function\n         * @param {Object} [context] Context object\n         */\n        on: function(eventName, eventHandler, context) {\n            this.handler.on(eventName, eventHandler, context);\n        },\n\n        /**\n         * Unbind event\n         * @param {string} eventName Event name\n         * @param {Function} [eventHandler] Handler function\n         */\n        off: function(eventName, eventHandler) {\n            this.handler.off(eventName, eventHandler);\n        },\n\n        /**\n         * Trigger event manually\n         *\n         * @param {string} eventName Event name\n         * @param {event=} event Event object\n         */\n        trigger: function (eventName, event) {\n            this.handler.trigger(eventName, event);\n        },\n\n\n        /**\n         * Clear all objects and the canvas.\n         */\n        clear: function () {\n            this.storage.delRoot();\n            this.painter.clear();\n        },\n\n        /**\n         * Dispose self.\n         */\n        dispose: function () {\n            this.animation.stop();\n\n            this.clear();\n            this.storage.dispose();\n            this.painter.dispose();\n            this.handler.dispose();\n\n            this.animation =\n            this.storage =\n            this.painter =\n            this.handler = null;\n\n            delInstance(this.id);\n        }\n    };\n\n    module.exports = zrender;\n\n\n\n/***/ }),\n/* 455 */,\n/* 456 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var zrUtil = __webpack_require__(315);\n\n    __webpack_require__(368);\n\n    __webpack_require__(457);\n    __webpack_require__(458);\n\n    var barLayoutGrid = __webpack_require__(463);\n    var echarts = __webpack_require__(316);\n\n    echarts.registerLayout(zrUtil.curry(barLayoutGrid, 'bar'));\n    // Visual coding for legend\n    echarts.registerVisual(function (ecModel) {\n        ecModel.eachSeriesByType('bar', function (seriesModel) {\n            var data = seriesModel.getData();\n            data.setVisual('legendSymbol', 'roundRect');\n        });\n    });\n\n    // In case developer forget to include grid component\n    __webpack_require__(367);\n\n\n/***/ }),\n/* 457 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    module.exports = __webpack_require__(459).extend({\n\n        type: 'series.bar',\n\n        dependencies: ['grid', 'polar'],\n\n        brushSelector: 'rect'\n    });\n\n\n/***/ }),\n/* 458 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n\n    var zrUtil = __webpack_require__(315);\n    var graphic = __webpack_require__(317);\n    var helper = __webpack_require__(461);\n\n    var BAR_BORDER_WIDTH_QUERY = ['itemStyle', 'normal', 'barBorderWidth'];\n\n    // FIXME\n    // Just for compatible with ec2.\n    zrUtil.extend(__webpack_require__(325).prototype, __webpack_require__(460));\n\n    var BarView = __webpack_require__(316).extendChartView({\n\n        type: 'bar',\n\n        render: function (seriesModel, ecModel, api) {\n            var coordinateSystemType = seriesModel.get('coordinateSystem');\n\n            if (coordinateSystemType === 'cartesian2d') {\n                this._renderOnCartesian(seriesModel, ecModel, api);\n            }\n\n            return this.group;\n        },\n\n        dispose: zrUtil.noop,\n\n        _renderOnCartesian: function (seriesModel, ecModel, api) {\n            var group = this.group;\n            var data = seriesModel.getData();\n            var oldData = this._data;\n\n            var cartesian = seriesModel.coordinateSystem;\n            var baseAxis = cartesian.getBaseAxis();\n            var isHorizontal = baseAxis.isHorizontal();\n            var animationModel = seriesModel.isAnimationEnabled() ? seriesModel : null;\n\n            data.diff(oldData)\n                .add(function (dataIndex) {\n                    if (!data.hasValue(dataIndex)) {\n                        return;\n                    }\n\n                    var itemModel = data.getItemModel(dataIndex);\n                    var layout = getRectItemLayout(data, dataIndex, itemModel);\n                    var el = createRect(data, dataIndex, itemModel, layout, isHorizontal, animationModel);\n                    data.setItemGraphicEl(dataIndex, el);\n                    group.add(el);\n\n                    updateStyle(el, data, dataIndex, itemModel, layout, seriesModel, isHorizontal);\n                })\n                .update(function (newIndex, oldIndex) {\n                    var el = oldData.getItemGraphicEl(oldIndex);\n\n                    if (!data.hasValue(newIndex)) {\n                        group.remove(el);\n                        return;\n                    }\n\n                    var itemModel = data.getItemModel(newIndex);\n                    var layout = getRectItemLayout(data, newIndex, itemModel);\n\n                    if (el) {\n                        graphic.updateProps(el, {shape: layout}, animationModel, newIndex);\n                    }\n                    else {\n                        el = createRect(data, newIndex, itemModel, layout, isHorizontal, animationModel, true);\n                    }\n\n                    data.setItemGraphicEl(newIndex, el);\n                    // Add back\n                    group.add(el);\n\n                    updateStyle(el, data, newIndex, itemModel, layout, seriesModel, isHorizontal);\n                })\n                .remove(function (dataIndex) {\n                    var el = oldData.getItemGraphicEl(dataIndex);\n                    el && removeRect(dataIndex, animationModel, el);\n                })\n                .execute();\n\n            this._data = data;\n        },\n\n        remove: function (ecModel, api) {\n            var group = this.group;\n            var data = this._data;\n            if (ecModel.get('animation')) {\n                if (data) {\n                    data.eachItemGraphicEl(function (el) {\n                        removeRect(el.dataIndex, ecModel, el);\n                    });\n                }\n            }\n            else {\n                group.removeAll();\n            }\n        }\n    });\n\n    function createRect(data, dataIndex, itemModel, layout, isHorizontal, animationModel, isUpdate) {\n        var rect = new graphic.Rect({shape: zrUtil.extend({}, layout)});\n\n        // Animation\n        if (animationModel) {\n            var rectShape = rect.shape;\n            var animateProperty = isHorizontal ? 'height' : 'width';\n            var animateTarget = {};\n            rectShape[animateProperty] = 0;\n            animateTarget[animateProperty] = layout[animateProperty];\n            graphic[isUpdate ? 'updateProps' : 'initProps'](rect, {\n                shape: animateTarget\n            }, animationModel, dataIndex);\n        }\n\n        return rect;\n    }\n\n    function removeRect(dataIndex, animationModel, el) {\n        // Not show text when animating\n        el.style.text = '';\n        graphic.updateProps(el, {\n            shape: {\n                width: 0\n            }\n        }, animationModel, dataIndex, function () {\n            el.parent && el.parent.remove(el);\n        });\n    }\n\n    function getRectItemLayout(data, dataIndex, itemModel) {\n        var layout = data.getItemLayout(dataIndex);\n        var fixedLineWidth = getLineWidth(itemModel, layout);\n\n        // fix layout with lineWidth\n        var signX = layout.width > 0 ? 1 : -1;\n        var signY = layout.height > 0 ? 1 : -1;\n        return {\n            x: layout.x + signX * fixedLineWidth / 2,\n            y: layout.y + signY * fixedLineWidth / 2,\n            width: layout.width - signX * fixedLineWidth,\n            height: layout.height - signY * fixedLineWidth\n        };\n    }\n\n    function updateStyle(el, data, dataIndex, itemModel, layout, seriesModel, isHorizontal) {\n        var color = data.getItemVisual(dataIndex, 'color');\n        var opacity = data.getItemVisual(dataIndex, 'opacity');\n        var itemStyleModel = itemModel.getModel('itemStyle.normal');\n        var hoverStyle = itemModel.getModel('itemStyle.emphasis').getBarItemStyle();\n\n        el.setShape('r', itemStyleModel.get('barBorderRadius') || 0);\n\n        el.useStyle(zrUtil.defaults(\n            {\n                fill: color,\n                opacity: opacity\n            },\n            itemStyleModel.getBarItemStyle()\n        ));\n\n        var labelPositionOutside = isHorizontal\n            ? (layout.height > 0 ? 'bottom' : 'top')\n            : (layout.width > 0 ? 'left' : 'right');\n\n        helper.setLabel(\n            el.style, hoverStyle, itemModel, color,\n            seriesModel, dataIndex, labelPositionOutside\n        );\n\n        graphic.setHoverStyle(el, hoverStyle);\n    }\n\n    // In case width or height are too small.\n    function getLineWidth(itemModel, rawLayout) {\n        var lineWidth = itemModel.get(BAR_BORDER_WIDTH_QUERY) || 0;\n        return Math.min(lineWidth, Math.abs(rawLayout.width), Math.abs(rawLayout.height));\n    }\n\n    module.exports = BarView;\n\n\n/***/ }),\n/* 459 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n\n    var SeriesModel = __webpack_require__(347);\n    var createListFromArray = __webpack_require__(366);\n\n    module.exports = SeriesModel.extend({\n\n        type: 'series.__base_bar__',\n\n        getInitialData: function (option, ecModel) {\n            if (__DEV__) {\n                var coordSys = option.coordinateSystem;\n                if (coordSys !== 'cartesian2d') {\n                    throw new Error('Bar only support cartesian2d coordinateSystem');\n                }\n            }\n            return createListFromArray(option.data, this, ecModel);\n        },\n\n        getMarkerPosition: function (value) {\n            var coordSys = this.coordinateSystem;\n            if (coordSys) {\n                // PENDING if clamp ?\n                var pt = coordSys.dataToPoint(value, true);\n                var data = this.getData();\n                var offset = data.getLayout('offset');\n                var size = data.getLayout('size');\n                var offsetIndex = coordSys.getBaseAxis().isHorizontal() ? 0 : 1;\n                pt[offsetIndex] += offset + size / 2;\n                return pt;\n            }\n            return [NaN, NaN];\n        },\n\n        defaultOption: {\n            zlevel: 0,                  // 一级层叠\n            z: 2,                       // 二级层叠\n            coordinateSystem: 'cartesian2d',\n            legendHoverLink: true,\n            // stack: null\n\n            // Cartesian coordinate system\n            // xAxisIndex: 0,\n            // yAxisIndex: 0,\n\n            // 最小高度改为0\n            barMinHeight: 0,\n\n            // barMaxWidth: null,\n            // 默认自适应\n            // barWidth: null,\n            // 柱间距离，默认为柱形宽度的30%，可设固定值\n            // barGap: '30%',\n            // 类目间柱形距离，默认为类目间距的20%，可设固定值\n            // barCategoryGap: '20%',\n            // label: {\n            //     normal: {\n            //         show: false\n            //     }\n            // },\n            itemStyle: {\n                normal: {\n                    // color: '各异'\n                },\n                emphasis: {}\n            }\n        }\n    });\n\n\n/***/ }),\n/* 460 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n\n    var getBarItemStyle = __webpack_require__(339)(\n        [\n            ['fill', 'color'],\n            ['stroke', 'borderColor'],\n            ['lineWidth', 'borderWidth'],\n            // Compatitable with 2\n            ['stroke', 'barBorderColor'],\n            ['lineWidth', 'barBorderWidth'],\n            ['opacity'],\n            ['shadowBlur'],\n            ['shadowOffsetX'],\n            ['shadowOffsetY'],\n            ['shadowColor']\n        ]\n    );\n    module.exports = {\n        getBarItemStyle: function (excludes) {\n            var style = getBarItemStyle.call(this, excludes);\n            if (this.getBorderLineDash) {\n                var lineDash = this.getBorderLineDash();\n                lineDash && (style.lineDash = lineDash);\n            }\n            return style;\n        }\n    };\n\n\n/***/ }),\n/* 461 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var zrUtil = __webpack_require__(315);\n    var graphic = __webpack_require__(317);\n\n    var helper = {};\n\n    helper.setLabel = function (\n        normalStyle, hoverStyle, itemModel, color, seriesModel, dataIndex, labelPositionOutside\n    ) {\n        var labelModel = itemModel.getModel('label.normal');\n        var hoverLabelModel = itemModel.getModel('label.emphasis');\n\n        if (labelModel.get('show')) {\n            setLabel(\n                normalStyle, labelModel, color,\n                zrUtil.retrieve(\n                    seriesModel.getFormattedLabel(dataIndex, 'normal'),\n                    seriesModel.getRawValue(dataIndex)\n                ),\n                labelPositionOutside\n            );\n        }\n        else {\n            normalStyle.text = '';\n        }\n\n        if (hoverLabelModel.get('show')) {\n            setLabel(\n                hoverStyle, hoverLabelModel, color,\n                zrUtil.retrieve(\n                    seriesModel.getFormattedLabel(dataIndex, 'emphasis'),\n                    seriesModel.getRawValue(dataIndex)\n                ),\n                labelPositionOutside\n            );\n        }\n        else {\n            hoverStyle.text = '';\n        }\n    };\n\n    function setLabel(style, model, color, labelText, labelPositionOutside) {\n        graphic.setText(style, model, color);\n        style.text = labelText;\n        if (style.textPosition === 'outside') {\n            style.textPosition = labelPositionOutside;\n        }\n    }\n\n    module.exports = helper;\n\n\n/***/ }),\n/* 462 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n\n    var echarts = __webpack_require__(316);\n    var graphic = __webpack_require__(317);\n    var layout = __webpack_require__(328);\n\n    // Model\n    echarts.extendComponentModel({\n\n        type: 'title',\n\n        layoutMode: {type: 'box', ignoreSize: true},\n\n        defaultOption: {\n            // 一级层叠\n            zlevel: 0,\n            // 二级层叠\n            z: 6,\n            show: true,\n\n            text: '',\n            // 超链接跳转\n            // link: null,\n            // 仅支持self | blank\n            target: 'blank',\n            subtext: '',\n\n            // 超链接跳转\n            // sublink: null,\n            // 仅支持self | blank\n            subtarget: 'blank',\n\n            // 'center' ¦ 'left' ¦ 'right'\n            // ¦ {number}（x坐标，单位px）\n            left: 0,\n            // 'top' ¦ 'bottom' ¦ 'center'\n            // ¦ {number}（y坐标，单位px）\n            top: 0,\n\n            // 水平对齐\n            // 'auto' | 'left' | 'right' | 'center'\n            // 默认根据 left 的位置判断是左对齐还是右对齐\n            // textAlign: null\n            //\n            // 垂直对齐\n            // 'auto' | 'top' | 'bottom' | 'middle'\n            // 默认根据 top 位置判断是上对齐还是下对齐\n            // textBaseline: null\n\n            backgroundColor: 'rgba(0,0,0,0)',\n\n            // 标题边框颜色\n            borderColor: '#ccc',\n\n            // 标题边框线宽，单位px，默认为0（无边框）\n            borderWidth: 0,\n\n            // 标题内边距，单位px，默认各方向内边距为5，\n            // 接受数组分别设定上右下左边距，同css\n            padding: 5,\n\n            // 主副标题纵向间隔，单位px，默认为10，\n            itemGap: 10,\n            textStyle: {\n                fontSize: 18,\n                fontWeight: 'bolder',\n                color: '#333'\n            },\n            subtextStyle: {\n                color: '#aaa'\n            }\n        }\n    });\n\n    // View\n    echarts.extendComponentView({\n\n        type: 'title',\n\n        render: function (titleModel, ecModel, api) {\n            this.group.removeAll();\n\n            if (!titleModel.get('show')) {\n                return;\n            }\n\n            var group = this.group;\n\n            var textStyleModel = titleModel.getModel('textStyle');\n            var subtextStyleModel = titleModel.getModel('subtextStyle');\n\n            var textAlign = titleModel.get('textAlign');\n            var textBaseline = titleModel.get('textBaseline');\n\n            var textEl = new graphic.Text({\n                style: {\n                    text: titleModel.get('text'),\n                    textFont: textStyleModel.getFont(),\n                    fill: textStyleModel.getTextColor()\n                },\n                z2: 10\n            });\n\n            var textRect = textEl.getBoundingRect();\n\n            var subText = titleModel.get('subtext');\n            var subTextEl = new graphic.Text({\n                style: {\n                    text: subText,\n                    textFont: subtextStyleModel.getFont(),\n                    fill: subtextStyleModel.getTextColor(),\n                    y: textRect.height + titleModel.get('itemGap'),\n                    textBaseline: 'top'\n                },\n                z2: 10\n            });\n\n            var link = titleModel.get('link');\n            var sublink = titleModel.get('sublink');\n\n            textEl.silent = !link;\n            subTextEl.silent = !sublink;\n\n            if (link) {\n                textEl.on('click', function () {\n                    window.open(link, '_' + titleModel.get('target'));\n                });\n            }\n            if (sublink) {\n                subTextEl.on('click', function () {\n                    window.open(sublink, '_' + titleModel.get('subtarget'));\n                });\n            }\n\n            group.add(textEl);\n            subText && group.add(subTextEl);\n            // If no subText, but add subTextEl, there will be an empty line.\n\n            var groupRect = group.getBoundingRect();\n            var layoutOption = titleModel.getBoxLayoutParams();\n            layoutOption.width = groupRect.width;\n            layoutOption.height = groupRect.height;\n            var layoutRect = layout.getLayoutRect(\n                layoutOption, {\n                    width: api.getWidth(),\n                    height: api.getHeight()\n                }, titleModel.get('padding')\n            );\n            // Adjust text align based on position\n            if (!textAlign) {\n                // Align left if title is on the left. center and right is same\n                textAlign = titleModel.get('left') || titleModel.get('right');\n                if (textAlign === 'middle') {\n                    textAlign = 'center';\n                }\n                // Adjust layout by text align\n                if (textAlign === 'right') {\n                    layoutRect.x += layoutRect.width;\n                }\n                else if (textAlign === 'center') {\n                    layoutRect.x += layoutRect.width / 2;\n                }\n            }\n            if (!textBaseline) {\n                textBaseline = titleModel.get('top') || titleModel.get('bottom');\n                if (textBaseline === 'center') {\n                    textBaseline = 'middle';\n                }\n                if (textBaseline === 'bottom') {\n                    layoutRect.y += layoutRect.height;\n                }\n                else if (textBaseline === 'middle') {\n                    layoutRect.y += layoutRect.height / 2;\n                }\n\n                textBaseline = textBaseline || 'top';\n            }\n\n            group.attr('position', [layoutRect.x, layoutRect.y]);\n            var alignStyle = {\n                textAlign: textAlign,\n                textVerticalAlign: textBaseline\n            };\n            textEl.setStyle(alignStyle);\n            subTextEl.setStyle(alignStyle);\n\n            // Render background\n            // Get groupRect again because textAlign has been changed\n            groupRect = group.getBoundingRect();\n            var padding = layoutRect.margin;\n            var style = titleModel.getItemStyle(['color', 'opacity']);\n            style.fill = titleModel.get('backgroundColor');\n            var rect = new graphic.Rect({\n                shape: {\n                    x: groupRect.x - padding[3],\n                    y: groupRect.y - padding[0],\n                    width: groupRect.width + padding[1] + padding[3],\n                    height: groupRect.height + padding[0] + padding[2]\n                },\n                style: style,\n                silent: true\n            });\n            graphic.subPixelOptimizeRect(rect);\n\n            group.add(rect);\n        }\n    });\n\n\n/***/ }),\n/* 463 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n\n    var zrUtil = __webpack_require__(315);\n    var numberUtil = __webpack_require__(318);\n    var parsePercent = numberUtil.parsePercent;\n\n    function getSeriesStackId(seriesModel) {\n        return seriesModel.get('stack') || '__ec_stack_' + seriesModel.seriesIndex;\n    }\n\n    function getAxisKey(axis) {\n        return axis.dim + axis.index;\n    }\n\n    function calBarWidthAndOffset(barSeries, api) {\n        // Columns info on each category axis. Key is cartesian name\n        var columnsMap = {};\n\n        zrUtil.each(barSeries, function (seriesModel, idx) {\n            var data = seriesModel.getData();\n            var cartesian = seriesModel.coordinateSystem;\n\n            var baseAxis = cartesian.getBaseAxis();\n            var axisExtent = baseAxis.getExtent();\n            var bandWidth = baseAxis.type === 'category'\n                ? baseAxis.getBandWidth()\n                : (Math.abs(axisExtent[1] - axisExtent[0]) / data.count());\n\n            var columnsOnAxis = columnsMap[getAxisKey(baseAxis)] || {\n                bandWidth: bandWidth,\n                remainedWidth: bandWidth,\n                autoWidthCount: 0,\n                categoryGap: '20%',\n                gap: '30%',\n                stacks: {}\n            };\n            var stacks = columnsOnAxis.stacks;\n            columnsMap[getAxisKey(baseAxis)] = columnsOnAxis;\n\n            var stackId = getSeriesStackId(seriesModel);\n\n            if (!stacks[stackId]) {\n                columnsOnAxis.autoWidthCount++;\n            }\n            stacks[stackId] = stacks[stackId] || {\n                width: 0,\n                maxWidth: 0\n            };\n\n            var barWidth = parsePercent(\n                seriesModel.get('barWidth'), bandWidth\n            );\n            var barMaxWidth = parsePercent(\n                seriesModel.get('barMaxWidth'), bandWidth\n            );\n            var barGap = seriesModel.get('barGap');\n            var barCategoryGap = seriesModel.get('barCategoryGap');\n\n            // Caution: In a single coordinate system, these barGrid attributes\n            // will be shared by series. Consider that they have default values,\n            // only the attributes set on the last series will work.\n            // Do not change this fact unless there will be a break change.\n\n            // TODO\n            if (barWidth && !stacks[stackId].width) {\n                barWidth = Math.min(columnsOnAxis.remainedWidth, barWidth);\n                stacks[stackId].width = barWidth;\n                columnsOnAxis.remainedWidth -= barWidth;\n            }\n\n            barMaxWidth && (stacks[stackId].maxWidth = barMaxWidth);\n            (barGap != null) && (columnsOnAxis.gap = barGap);\n            (barCategoryGap != null) && (columnsOnAxis.categoryGap = barCategoryGap);\n        });\n\n        var result = {};\n\n        zrUtil.each(columnsMap, function (columnsOnAxis, coordSysName) {\n\n            result[coordSysName] = {};\n\n            var stacks = columnsOnAxis.stacks;\n            var bandWidth = columnsOnAxis.bandWidth;\n            var categoryGap = parsePercent(columnsOnAxis.categoryGap, bandWidth);\n            var barGapPercent = parsePercent(columnsOnAxis.gap, 1);\n\n            var remainedWidth = columnsOnAxis.remainedWidth;\n            var autoWidthCount = columnsOnAxis.autoWidthCount;\n            var autoWidth = (remainedWidth - categoryGap)\n                / (autoWidthCount + (autoWidthCount - 1) * barGapPercent);\n            autoWidth = Math.max(autoWidth, 0);\n\n            // Find if any auto calculated bar exceeded maxBarWidth\n            zrUtil.each(stacks, function (column, stack) {\n                var maxWidth = column.maxWidth;\n                if (!column.width && maxWidth && maxWidth < autoWidth) {\n                    maxWidth = Math.min(maxWidth, remainedWidth);\n                    remainedWidth -= maxWidth;\n                    column.width = maxWidth;\n                    autoWidthCount--;\n                }\n            });\n\n            // Recalculate width again\n            autoWidth = (remainedWidth - categoryGap)\n                / (autoWidthCount + (autoWidthCount - 1) * barGapPercent);\n            autoWidth = Math.max(autoWidth, 0);\n\n            var widthSum = 0;\n            var lastColumn;\n            zrUtil.each(stacks, function (column, idx) {\n                if (!column.width) {\n                    column.width = autoWidth;\n                }\n                lastColumn = column;\n                widthSum += column.width * (1 + barGapPercent);\n            });\n            if (lastColumn) {\n                widthSum -= lastColumn.width * barGapPercent;\n            }\n\n            var offset = -widthSum / 2;\n            zrUtil.each(stacks, function (column, stackId) {\n                result[coordSysName][stackId] = result[coordSysName][stackId] || {\n                    offset: offset,\n                    width: column.width\n                };\n\n                offset += column.width * (1 + barGapPercent);\n            });\n        });\n\n        return result;\n    }\n\n    /**\n     * @param {string} seriesType\n     * @param {module:echarts/model/Global} ecModel\n     * @param {module:echarts/ExtensionAPI} api\n     */\n    function barLayoutGrid(seriesType, ecModel, api) {\n\n        var barWidthAndOffset = calBarWidthAndOffset(\n            zrUtil.filter(\n                ecModel.getSeriesByType(seriesType),\n                function (seriesModel) {\n                    return !ecModel.isSeriesFiltered(seriesModel)\n                        && seriesModel.coordinateSystem\n                        && seriesModel.coordinateSystem.type === 'cartesian2d';\n                }\n            )\n        );\n\n        var lastStackCoords = {};\n        var lastStackCoordsOrigin = {};\n\n        ecModel.eachSeriesByType(seriesType, function (seriesModel) {\n\n            var data = seriesModel.getData();\n            var cartesian = seriesModel.coordinateSystem;\n            var baseAxis = cartesian.getBaseAxis();\n\n            var stackId = getSeriesStackId(seriesModel);\n            var columnLayoutInfo = barWidthAndOffset[getAxisKey(baseAxis)][stackId];\n            var columnOffset = columnLayoutInfo.offset;\n            var columnWidth = columnLayoutInfo.width;\n            var valueAxis = cartesian.getOtherAxis(baseAxis);\n\n            var barMinHeight = seriesModel.get('barMinHeight') || 0;\n\n            var valueAxisStart = baseAxis.onZero\n                ? valueAxis.toGlobalCoord(valueAxis.dataToCoord(0))\n                : valueAxis.getGlobalExtent()[0];\n\n            var coords = cartesian.dataToPoints(data, true);\n            lastStackCoords[stackId] = lastStackCoords[stackId] || [];\n            lastStackCoordsOrigin[stackId] = lastStackCoordsOrigin[stackId] || []; // Fix #4243\n\n            data.setLayout({\n                offset: columnOffset,\n                size: columnWidth\n            });\n\n            data.each(valueAxis.dim, function (value, idx) {\n                if (isNaN(value)) {\n                    return;\n                }\n\n                if (!lastStackCoords[stackId][idx]) {\n                    lastStackCoords[stackId][idx] = {\n                        p: valueAxisStart, // Positive stack\n                        n: valueAxisStart  // Negative stack\n                    };\n                    lastStackCoordsOrigin[stackId][idx] = {\n                        p: valueAxisStart, // Positive stack\n                        n: valueAxisStart  // Negative stack\n                    };\n                }\n                var sign = value >= 0 ? 'p' : 'n';\n                var coord = coords[idx];\n                var lastCoord = lastStackCoords[stackId][idx][sign];\n                var lastCoordOrigin = lastStackCoordsOrigin[stackId][idx][sign];\n                var x;\n                var y;\n                var width;\n                var height;\n\n                if (valueAxis.isHorizontal()) {\n                    x = lastCoord;\n                    y = coord[1] + columnOffset;\n                    width = coord[0] - lastCoordOrigin;\n                    height = columnWidth;\n\n                    lastStackCoordsOrigin[stackId][idx][sign] += width;\n                    if (Math.abs(width) < barMinHeight) {\n                        width = (width < 0 ? -1 : 1) * barMinHeight;\n                    }\n                    lastStackCoords[stackId][idx][sign] += width;\n                }\n                else {\n                    x = coord[0] + columnOffset;\n                    y = lastCoord;\n                    width = columnWidth;\n                    height = coord[1] - lastCoordOrigin;\n\n                    lastStackCoordsOrigin[stackId][idx][sign] += height;\n                    if (Math.abs(height) < barMinHeight) {\n                        // Include zero to has a positive bar\n                        height = (height <= 0 ? -1 : 1) * barMinHeight;\n                    }\n                    lastStackCoords[stackId][idx][sign] += height;\n                }\n\n                data.setItemLayout(idx, {\n                    x: x,\n                    y: y,\n                    width: width,\n                    height: height\n                });\n            }, true);\n\n        }, this);\n    }\n\n    module.exports = barLayoutGrid;\n\n\n/***/ }),\n/* 464 */\n/***/ (function(module, exports) {\n\n\n\n    /**\n     * Calculate slider move result.\n     *\n     * @param {number} delta Move length.\n     * @param {Array.<number>} handleEnds handleEnds[0] and be bigger then handleEnds[1].\n     *                                    handleEnds will be modified in this method.\n     * @param {Array.<number>} extent handleEnds is restricted by extent.\n     *                                extent[0] should less or equals than extent[1].\n     * @param {string} mode 'rigid': Math.abs(handleEnds[0] - handleEnds[1]) remain unchanged,\n     *                      'cross' handleEnds[0] can be bigger then handleEnds[1],\n     *                      'push' handleEnds[0] can not be bigger then handleEnds[1],\n     *                              when they touch, one push other.\n     * @param {number} handleIndex If mode is 'rigid', handleIndex is not required.\n     * @param {Array.<number>} The input handleEnds.\n     */\n    module.exports = function (delta, handleEnds, extent, mode, handleIndex) {\n        if (!delta) {\n            return handleEnds;\n        }\n\n        if (mode === 'rigid') {\n            delta = getRealDelta(delta, handleEnds, extent);\n            handleEnds[0] += delta;\n            handleEnds[1] += delta;\n        }\n        else {\n            delta = getRealDelta(delta, handleEnds[handleIndex], extent);\n            handleEnds[handleIndex] += delta;\n\n            if (mode === 'push' && handleEnds[0] > handleEnds[1]) {\n                handleEnds[1 - handleIndex] = handleEnds[handleIndex];\n            }\n        }\n\n        return handleEnds;\n\n        function getRealDelta(delta, handleEnds, extent) {\n            var handleMinMax = !handleEnds.length\n                ? [handleEnds, handleEnds]\n                : handleEnds.slice();\n            handleEnds[0] > handleEnds[1] && handleMinMax.reverse();\n\n            if (delta < 0 && handleMinMax[0] + delta < extent[0]) {\n                delta = extent[0] - handleMinMax[0];\n            }\n            if (delta > 0 && handleMinMax[1] + delta > extent[1]) {\n                delta = extent[1] - handleMinMax[1];\n            }\n            return delta;\n        }\n    };\n\n\n/***/ }),\n/* 465 */,\n/* 466 */,\n/* 467 */,\n/* 468 */,\n/* 469 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * @file Controller visual map model\n */\n\n\n    var echarts = __webpack_require__(316);\n    var zrUtil = __webpack_require__(315);\n    var env = __webpack_require__(321);\n    var visualDefault = __webpack_require__(476);\n    var VisualMapping = __webpack_require__(370);\n    var visualSolution = __webpack_require__(477);\n    var mapVisual = VisualMapping.mapVisual;\n    var modelUtil = __webpack_require__(323);\n    var eachVisual = VisualMapping.eachVisual;\n    var numberUtil = __webpack_require__(318);\n    var isArray = zrUtil.isArray;\n    var each = zrUtil.each;\n    var asc = numberUtil.asc;\n    var linearMap = numberUtil.linearMap;\n    var noop = zrUtil.noop;\n\n    var DEFAULT_COLOR = ['#f6efa6', '#d88273', '#bf444c'];\n\n    var VisualMapModel = echarts.extendComponentModel({\n\n        type: 'visualMap',\n\n        dependencies: ['series'],\n\n        /**\n         * @readOnly\n         * @type {Array.<string>}\n         */\n        stateList: ['inRange', 'outOfRange'],\n\n        /**\n         * @readOnly\n         * @type {Array.<string>}\n         */\n        replacableOptionKeys: [\n            'inRange', 'outOfRange', 'target', 'controller', 'color'\n        ],\n\n        /**\n         * [lowerBound, upperBound]\n         *\n         * @readOnly\n         * @type {Array.<number>}\n         */\n        dataBound: [-Infinity, Infinity],\n\n        /**\n         * @readOnly\n         * @type {string|Object}\n         */\n        layoutMode: {type: 'box', ignoreSize: true},\n\n        /**\n         * @protected\n         */\n        defaultOption: {\n            show: true,\n\n            zlevel: 0,\n            z: 4,\n\n            seriesIndex: null,       // 所控制的series indices，默认所有有value的series.\n\n                                    // set min: 0, max: 200, only for campatible with ec2.\n                                    // In fact min max should not have default value.\n            min: 0,                 // min value, must specified if pieces is not specified.\n            max: 200,               // max value, must specified if pieces is not specified.\n\n            dimension: null,\n            inRange: null,          // 'color', 'colorHue', 'colorSaturation', 'colorLightness', 'colorAlpha',\n                                    // 'symbol', 'symbolSize'\n            outOfRange: null,       // 'color', 'colorHue', 'colorSaturation',\n                                    // 'colorLightness', 'colorAlpha',\n                                    // 'symbol', 'symbolSize'\n\n            left: 0,                // 'center' ¦ 'left' ¦ 'right' ¦ {number} (px)\n            right: null,            // The same as left.\n            top: null,              // 'top' ¦ 'bottom' ¦ 'center' ¦ {number} (px)\n            bottom: 0,              // The same as top.\n\n            itemWidth: null,\n            itemHeight: null,\n            inverse: false,\n            orient: 'vertical',        // 'horizontal' ¦ 'vertical'\n\n            backgroundColor: 'rgba(0,0,0,0)',\n            borderColor: '#ccc',       // 值域边框颜色\n            contentColor: '#5793f3',\n            inactiveColor: '#aaa',\n            borderWidth: 0,            // 值域边框线宽，单位px，默认为0（无边框）\n            padding: 5,                // 值域内边距，单位px，默认各方向内边距为5，\n                                       // 接受数组分别设定上右下左边距，同css\n            textGap: 10,               //\n            precision: 0,              // 小数精度，默认为0，无小数点\n            color: null,               //颜色（deprecated，兼容ec2，顺序同pieces，不同于inRange/outOfRange）\n\n            formatter: null,\n            text: null,                // 文本，如['高', '低']，兼容ec2，text[0]对应高值，text[1]对应低值\n            textStyle: {\n                color: '#333'          // 值域文字颜色\n            }\n        },\n\n        /**\n         * @protected\n         */\n        init: function (option, parentModel, ecModel) {\n\n            /**\n             * @private\n             * @type {Array.<number>}\n             */\n            this._dataExtent;\n\n            /**\n             * @readOnly\n             */\n            this.targetVisuals = {};\n\n            /**\n             * @readOnly\n             */\n            this.controllerVisuals = {};\n\n            /**\n             * @readOnly\n             */\n            this.textStyleModel;\n\n            /**\n             * [width, height]\n             * @readOnly\n             * @type {Array.<number>}\n             */\n            this.itemSize;\n\n            this.mergeDefaultAndTheme(option, ecModel);\n        },\n\n        /**\n         * @protected\n         */\n        optionUpdated: function (newOption, isInit) {\n            var thisOption = this.option;\n\n            // FIXME\n            // necessary?\n            // Disable realtime view update if canvas is not supported.\n            if (!env.canvasSupported) {\n                thisOption.realtime = false;\n            }\n\n            !isInit && visualSolution.replaceVisualOption(\n                thisOption, newOption, this.replacableOptionKeys\n            );\n\n            this.textStyleModel = this.getModel('textStyle');\n\n            this.resetItemSize();\n\n            this.completeVisualOption();\n        },\n\n        /**\n         * @protected\n         */\n        resetVisual: function (supplementVisualOption) {\n            var stateList = this.stateList;\n            supplementVisualOption = zrUtil.bind(supplementVisualOption, this);\n\n            this.controllerVisuals = visualSolution.createVisualMappings(\n                this.option.controller, stateList, supplementVisualOption\n            );\n            this.targetVisuals = visualSolution.createVisualMappings(\n                this.option.target, stateList, supplementVisualOption\n            );\n        },\n\n\n        /**\n         * @protected\n         */\n        resetTargetSeries: function () {\n            var thisOption = this.option;\n            var allSeriesIndex = thisOption.seriesIndex == null;\n            thisOption.seriesIndex = allSeriesIndex\n                ? [] : modelUtil.normalizeToArray(thisOption.seriesIndex);\n\n            allSeriesIndex && this.ecModel.eachSeries(function (seriesModel, index) {\n                thisOption.seriesIndex.push(index);\n            });\n        },\n\n        /**\n         * @public\n         */\n        eachTargetSeries: function (callback, context) {\n            zrUtil.each(this.option.seriesIndex, function (seriesIndex) {\n                callback.call(context, this.ecModel.getSeriesByIndex(seriesIndex));\n            }, this);\n        },\n\n        /**\n         * @pubilc\n         */\n        isTargetSeries: function (seriesModel) {\n            var is = false;\n            this.eachTargetSeries(function (model) {\n                model === seriesModel && (is = true);\n            });\n            return is;\n        },\n\n        /**\n         * @example\n         * this.formatValueText(someVal); // format single numeric value to text.\n         * this.formatValueText(someVal, true); // format single category value to text.\n         * this.formatValueText([min, max]); // format numeric min-max to text.\n         * this.formatValueText([this.dataBound[0], max]); // using data lower bound.\n         * this.formatValueText([min, this.dataBound[1]]); // using data upper bound.\n         *\n         * @param {number|Array.<number>} value Real value, or this.dataBound[0 or 1].\n         * @param {boolean} [isCategory=false] Only available when value is number.\n         * @param {Array.<string>} edgeSymbols Open-close symbol when value is interval.\n         * @return {string}\n         * @protected\n         */\n        formatValueText: function(value, isCategory, edgeSymbols) {\n            var option = this.option;\n            var precision = option.precision;\n            var dataBound = this.dataBound;\n            var formatter = option.formatter;\n            var isMinMax;\n            var textValue;\n            edgeSymbols = edgeSymbols || ['<', '>'];\n\n            if (zrUtil.isArray(value)) {\n                value = value.slice();\n                isMinMax = true;\n            }\n\n            textValue = isCategory\n                ? value\n                : (isMinMax\n                    ? [toFixed(value[0]), toFixed(value[1])]\n                    : toFixed(value)\n                );\n\n            if (zrUtil.isString(formatter)) {\n                return formatter\n                    .replace('{value}', isMinMax ? textValue[0] : textValue)\n                    .replace('{value2}', isMinMax ? textValue[1] : textValue);\n            }\n            else if (zrUtil.isFunction(formatter)) {\n                return isMinMax\n                    ? formatter(value[0], value[1])\n                    : formatter(value);\n            }\n\n            if (isMinMax) {\n                if (value[0] === dataBound[0]) {\n                    return edgeSymbols[0] + ' ' + textValue[1];\n                }\n                else if (value[1] === dataBound[1]) {\n                    return edgeSymbols[1] + ' ' + textValue[0];\n                }\n                else {\n                    return textValue[0] + ' - ' + textValue[1];\n                }\n            }\n            else { // Format single value (includes category case).\n                return textValue;\n            }\n\n            function toFixed(val) {\n                return val === dataBound[0]\n                    ? 'min'\n                    : val === dataBound[1]\n                    ? 'max'\n                    : (+val).toFixed(precision);\n            }\n        },\n\n        /**\n         * @protected\n         */\n        resetExtent: function () {\n            var thisOption = this.option;\n\n            // Can not calculate data extent by data here.\n            // Because series and data may be modified in processing stage.\n            // So we do not support the feature \"auto min/max\".\n\n            var extent = asc([thisOption.min, thisOption.max]);\n\n            this._dataExtent = extent;\n        },\n\n        /**\n         * @public\n         * @param {module:echarts/data/List} list\n         * @return {string} Concrete dimention. If return null/undefined,\n         *                  no dimension used.\n         */\n        getDataDimension: function (list) {\n            var optDim = this.option.dimension;\n            return optDim != null\n                ? optDim : list.dimensions.length - 1;\n        },\n\n        /**\n         * @public\n         * @override\n         */\n        getExtent: function () {\n            return this._dataExtent.slice();\n        },\n\n        /**\n         * @protected\n         */\n        completeVisualOption: function () {\n            var thisOption = this.option;\n            var base = {inRange: thisOption.inRange, outOfRange: thisOption.outOfRange};\n\n            var target = thisOption.target || (thisOption.target = {});\n            var controller = thisOption.controller || (thisOption.controller = {});\n\n            zrUtil.merge(target, base); // Do not override\n            zrUtil.merge(controller, base); // Do not override\n\n            var isCategory = this.isCategory();\n\n            completeSingle.call(this, target);\n            completeSingle.call(this, controller);\n            completeInactive.call(this, target, 'inRange', 'outOfRange');\n            // completeInactive.call(this, target, 'outOfRange', 'inRange');\n            completeController.call(this, controller);\n\n            function completeSingle(base) {\n                // Compatible with ec2 dataRange.color.\n                // The mapping order of dataRange.color is: [high value, ..., low value]\n                // whereas inRange.color and outOfRange.color is [low value, ..., high value]\n                // Notice: ec2 has no inverse.\n                if (isArray(thisOption.color)\n                    // If there has been inRange: {symbol: ...}, adding color is a mistake.\n                    // So adding color only when no inRange defined.\n                    && !base.inRange\n                ) {\n                    base.inRange = {color: thisOption.color.slice().reverse()};\n                }\n\n                // Compatible with previous logic, always give a defautl color, otherwise\n                // simple config with no inRange and outOfRange will not work.\n                // Originally we use visualMap.color as the default color, but setOption at\n                // the second time the default color will be erased. So we change to use\n                // constant DEFAULT_COLOR.\n                // If user do not want the defualt color, set inRange: {color: null}.\n                base.inRange = base.inRange || {color: DEFAULT_COLOR};\n\n                // If using shortcut like: {inRange: 'symbol'}, complete default value.\n                each(this.stateList, function (state) {\n                    var visualType = base[state];\n\n                    if (zrUtil.isString(visualType)) {\n                        var defa = visualDefault.get(visualType, 'active', isCategory);\n                        if (defa) {\n                            base[state] = {};\n                            base[state][visualType] = defa;\n                        }\n                        else {\n                            // Mark as not specified.\n                            delete base[state];\n                        }\n                    }\n                }, this);\n            }\n\n            function completeInactive(base, stateExist, stateAbsent) {\n                var optExist = base[stateExist];\n                var optAbsent = base[stateAbsent];\n\n                if (optExist && !optAbsent) {\n                    optAbsent = base[stateAbsent] = {};\n                    each(optExist, function (visualData, visualType) {\n                        if (!VisualMapping.isValidType(visualType)) {\n                            return;\n                        }\n\n                        var defa = visualDefault.get(visualType, 'inactive', isCategory);\n\n                        if (defa != null) {\n                            optAbsent[visualType] = defa;\n\n                            // Compatibable with ec2:\n                            // Only inactive color to rgba(0,0,0,0) can not\n                            // make label transparent, so use opacity also.\n                            if (visualType === 'color'\n                                && !optAbsent.hasOwnProperty('opacity')\n                                && !optAbsent.hasOwnProperty('colorAlpha')\n                            ) {\n                                optAbsent.opacity = [0, 0];\n                            }\n                        }\n                    });\n                }\n            }\n\n            function completeController(controller) {\n                var symbolExists = (controller.inRange || {}).symbol\n                    || (controller.outOfRange || {}).symbol;\n                var symbolSizeExists = (controller.inRange || {}).symbolSize\n                    || (controller.outOfRange || {}).symbolSize;\n                var inactiveColor = this.get('inactiveColor');\n\n                each(this.stateList, function (state) {\n\n                    var itemSize = this.itemSize;\n                    var visuals = controller[state];\n\n                    // Set inactive color for controller if no other color\n                    // attr (like colorAlpha) specified.\n                    if (!visuals) {\n                        visuals = controller[state] = {\n                            color: isCategory ? inactiveColor : [inactiveColor]\n                        };\n                    }\n\n                    // Consistent symbol and symbolSize if not specified.\n                    if (visuals.symbol == null) {\n                        visuals.symbol = symbolExists\n                            && zrUtil.clone(symbolExists)\n                            || (isCategory ? 'roundRect' : ['roundRect']);\n                    }\n                    if (visuals.symbolSize == null) {\n                        visuals.symbolSize = symbolSizeExists\n                            && zrUtil.clone(symbolSizeExists)\n                            || (isCategory ? itemSize[0] : [itemSize[0], itemSize[0]]);\n                    }\n\n                    // Filter square and none.\n                    visuals.symbol = mapVisual(visuals.symbol, function (symbol) {\n                        return (symbol === 'none' || symbol === 'square') ? 'roundRect' : symbol;\n                    });\n\n                    // Normalize symbolSize\n                    var symbolSize = visuals.symbolSize;\n\n                    if (symbolSize != null) {\n                        var max = -Infinity;\n                        // symbolSize can be object when categories defined.\n                        eachVisual(symbolSize, function (value) {\n                            value > max && (max = value);\n                        });\n                        visuals.symbolSize = mapVisual(symbolSize, function (value) {\n                            return linearMap(value, [0, max], [0, itemSize[0]], true);\n                        });\n                    }\n\n                }, this);\n            }\n        },\n\n        /**\n         * @protected\n         */\n        resetItemSize: function () {\n            this.itemSize = [\n                parseFloat(this.get('itemWidth')),\n                parseFloat(this.get('itemHeight'))\n            ];\n        },\n\n        /**\n         * @public\n         */\n        isCategory: function () {\n            return !!this.option.categories;\n        },\n\n        /**\n         * @public\n         * @abstract\n         */\n        setSelected: noop,\n\n        /**\n         * @public\n         * @abstract\n         * @param {*|module:echarts/data/List} valueOrData\n         * @param {number} dataIndex\n         * @return {string} state See this.stateList\n         */\n        getValueState: noop,\n\n        /**\n         * FIXME\n         * Do not publish to thirt-part-dev temporarily\n         * util the interface is stable. (Should it return\n         * a function but not visual meta?)\n         *\n         * @pubilc\n         * @abstract\n         * @param {Function} getColorVisual\n         *        params: value, valueState\n         *        return: color\n         * @return {Object} visualMeta\n         *        should includes {stops, outerColors}\n         *        outerColor means [colorBeyondMinValue, colorBeyondMaxValue]\n         */\n        getVisualMeta: noop\n\n    });\n\n    module.exports = VisualMapModel;\n\n\n\n/***/ }),\n/* 470 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var zrUtil = __webpack_require__(315);\n    var graphic = __webpack_require__(317);\n    var formatUtil = __webpack_require__(322);\n    var layout = __webpack_require__(328);\n    var echarts = __webpack_require__(316);\n    var VisualMapping = __webpack_require__(370);\n\n    module.exports = echarts.extendComponentView({\n\n        type: 'visualMap',\n\n        /**\n         * @readOnly\n         * @type {Object}\n         */\n        autoPositionValues: {left: 1, right: 1, top: 1, bottom: 1},\n\n        init: function (ecModel, api) {\n            /**\n             * @readOnly\n             * @type {module:echarts/model/Global}\n             */\n            this.ecModel = ecModel;\n\n            /**\n             * @readOnly\n             * @type {module:echarts/ExtensionAPI}\n             */\n            this.api = api;\n\n            /**\n             * @readOnly\n             * @type {module:echarts/component/visualMap/visualMapModel}\n             */\n            this.visualMapModel;\n        },\n\n        /**\n         * @protected\n         */\n        render: function (visualMapModel, ecModel, api, payload) {\n            this.visualMapModel = visualMapModel;\n\n            if (visualMapModel.get('show') === false) {\n                this.group.removeAll();\n                return;\n            }\n\n            this.doRender.apply(this, arguments);\n        },\n\n        /**\n         * @protected\n         */\n        renderBackground: function (group) {\n            var visualMapModel = this.visualMapModel;\n            var padding = formatUtil.normalizeCssArray(visualMapModel.get('padding') || 0);\n            var rect = group.getBoundingRect();\n\n            group.add(new graphic.Rect({\n                z2: -1, // Lay background rect on the lowest layer.\n                silent: true,\n                shape: {\n                    x: rect.x - padding[3],\n                    y: rect.y - padding[0],\n                    width: rect.width + padding[3] + padding[1],\n                    height: rect.height + padding[0] + padding[2]\n                },\n                style: {\n                    fill: visualMapModel.get('backgroundColor'),\n                    stroke: visualMapModel.get('borderColor'),\n                    lineWidth: visualMapModel.get('borderWidth')\n                }\n            }));\n        },\n\n        /**\n         * @protected\n         * @param {number} targetValue can be Infinity or -Infinity\n         * @param {string=} visualCluster Only can be 'color' 'opacity' 'symbol' 'symbolSize'\n         * @param {Object} [opts]\n         * @param {string=} [opts.forceState] Specify state, instead of using getValueState method.\n         * @param {string=} [opts.convertOpacityToAlpha=false] For color gradient in controller widget.\n         * @return {*} Visual value.\n         */\n        getControllerVisual: function (targetValue, visualCluster, opts) {\n            opts = opts || {};\n\n            var forceState = opts.forceState;\n            var visualMapModel = this.visualMapModel;\n            var visualObj = {};\n\n            // Default values.\n            if (visualCluster === 'symbol') {\n                visualObj.symbol = visualMapModel.get('itemSymbol');\n            }\n            if (visualCluster === 'color') {\n                var defaultColor = visualMapModel.get('contentColor');\n                visualObj.color = defaultColor;\n            }\n\n            function getter(key) {\n                return visualObj[key];\n            }\n\n            function setter(key, value) {\n                visualObj[key] = value;\n            }\n\n            var mappings = visualMapModel.controllerVisuals[\n                forceState || visualMapModel.getValueState(targetValue)\n            ];\n            var visualTypes = VisualMapping.prepareVisualTypes(mappings);\n\n            zrUtil.each(visualTypes, function (type) {\n                var visualMapping = mappings[type];\n                if (opts.convertOpacityToAlpha && type === 'opacity') {\n                    type = 'colorAlpha';\n                    visualMapping = mappings.__alphaForOpacity;\n                }\n                if (VisualMapping.dependsOn(type, visualCluster)) {\n                    visualMapping && visualMapping.applyVisual(\n                        targetValue, getter, setter\n                    );\n                }\n            });\n\n            return visualObj[visualCluster];\n        },\n\n        /**\n         * @protected\n         */\n        positionGroup: function (group) {\n            var model = this.visualMapModel;\n            var api = this.api;\n\n            layout.positionElement(\n                group,\n                model.getBoxLayoutParams(),\n                {width: api.getWidth(), height: api.getHeight()}\n            );\n        },\n\n        /**\n         * @protected\n         * @abstract\n         */\n        doRender: zrUtil.noop\n\n    });\n\n\n\n/***/ }),\n/* 471 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var zrUtil = __webpack_require__(315);\n    var layout = __webpack_require__(328);\n\n    var helper = {\n\n        /**\n         * @param {module:echarts/component/visualMap/VisualMapModel} visualMapModel\\\n         * @param {module:echarts/ExtensionAPI} api\n         * @param {Array.<number>} itemSize always [short, long]\n         * @return {string} 'left' or 'right' or 'top' or 'bottom'\n         */\n        getItemAlign: function (visualMapModel, api, itemSize) {\n            var modelOption = visualMapModel.option;\n            var itemAlign = modelOption.align;\n\n            if (itemAlign != null && itemAlign !== 'auto') {\n                return itemAlign;\n            }\n\n            // Auto decision align.\n            var ecSize = {width: api.getWidth(), height: api.getHeight()};\n            var realIndex = modelOption.orient === 'horizontal' ? 1 : 0;\n\n            var paramsSet = [\n                ['left', 'right', 'width'],\n                ['top', 'bottom', 'height']\n            ];\n            var reals = paramsSet[realIndex];\n            var fakeValue = [0, null, 10];\n\n            var layoutInput = {};\n            for (var i = 0; i < 3; i++) {\n                layoutInput[paramsSet[1 - realIndex][i]] = fakeValue[i];\n                layoutInput[reals[i]] = i === 2 ? itemSize[0] : modelOption[reals[i]];\n            }\n\n            var rParam = [['x', 'width', 3], ['y', 'height', 0]][realIndex];\n            var rect = layout.getLayoutRect(layoutInput, ecSize, modelOption.padding);\n\n            return reals[\n                (rect.margin[rParam[2]] || 0) + rect[rParam[0]] + rect[rParam[1]] * 0.5\n                    < ecSize[rParam[1]] * 0.5 ? 0 : 1\n            ];\n        },\n\n        /**\n         * Prepare dataIndex for outside usage, where dataIndex means rawIndex, and\n         * dataIndexInside means filtered index.\n         */\n        convertDataIndex: function (batch) {\n            zrUtil.each(batch || [], function (batchItem) {\n                if (batch.dataIndex != null) {\n                    batch.dataIndexInside = batch.dataIndex;\n                    batch.dataIndex = null;\n                }\n            });\n            return batch;\n        }\n\n    };\n\n\n    module.exports = helper;\n\n\n\n/***/ }),\n/* 472 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * @file VisualMap preprocessor\n */\n\n\n    var zrUtil = __webpack_require__(315);\n    var each = zrUtil.each;\n\n    module.exports = function (option) {\n        var visualMap = option && option.visualMap;\n\n        if (!zrUtil.isArray(visualMap)) {\n            visualMap = visualMap ? [visualMap] : [];\n        }\n\n        each(visualMap, function (opt) {\n            if (!opt) {\n                return;\n            }\n\n            // rename splitList to pieces\n            if (has(opt, 'splitList') && !has(opt, 'pieces')) {\n                opt.pieces = opt.splitList;\n                delete opt.splitList;\n            }\n\n            var pieces = opt.pieces;\n            if (pieces && zrUtil.isArray(pieces)) {\n                each(pieces, function (piece) {\n                    if (zrUtil.isObject(piece)) {\n                        if (has(piece, 'start') && !has(piece, 'min')) {\n                            piece.min = piece.start;\n                        }\n                        if (has(piece, 'end') && !has(piece, 'max')) {\n                            piece.max = piece.end;\n                        }\n                    }\n                });\n            }\n        });\n    };\n\n    function has(obj, name) {\n        return obj && obj.hasOwnProperty && obj.hasOwnProperty(name);\n    }\n\n\n\n/***/ }),\n/* 473 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    __webpack_require__(327).registerSubTypeDefaulter('visualMap', function (option) {\n        // Compatible with ec2, when splitNumber === 0, continuous visualMap will be used.\n        return (\n                !option.categories\n                && (\n                    !(\n                        option.pieces\n                            ? option.pieces.length > 0\n                            : option.splitNumber > 0\n                    )\n                    || option.calculable\n                )\n            )\n            ? 'continuous' : 'piecewise';\n    });\n\n\n\n/***/ }),\n/* 474 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * @file Data range visual coding.\n */\n\n\n    var echarts = __webpack_require__(316);\n    var visualSolution = __webpack_require__(477);\n    var VisualMapping = __webpack_require__(370);\n    var zrUtil = __webpack_require__(315);\n\n    echarts.registerVisual(echarts.PRIORITY.VISUAL.COMPONENT, function (ecModel) {\n        ecModel.eachComponent('visualMap', function (visualMapModel) {\n            processSingleVisualMap(visualMapModel, ecModel);\n        });\n\n        prepareVisualMeta(ecModel);\n    });\n\n    function processSingleVisualMap(visualMapModel, ecModel) {\n        visualMapModel.eachTargetSeries(function (seriesModel) {\n            var data = seriesModel.getData();\n\n            visualSolution.applyVisual(\n                visualMapModel.stateList,\n                visualMapModel.targetVisuals,\n                data,\n                visualMapModel.getValueState,\n                visualMapModel,\n                visualMapModel.getDataDimension(data)\n            );\n        });\n    }\n\n    // Only support color.\n    function prepareVisualMeta(ecModel) {\n        ecModel.eachSeries(function (seriesModel) {\n            var data = seriesModel.getData();\n            var visualMetaList = [];\n\n            ecModel.eachComponent('visualMap', function (visualMapModel) {\n                if (visualMapModel.isTargetSeries(seriesModel)) {\n                    var visualMeta = visualMapModel.getVisualMeta(\n                        zrUtil.bind(getColorVisual, null, seriesModel, visualMapModel)\n                    ) || {stops: [], outerColors: []};\n                    visualMeta.dimension = visualMapModel.getDataDimension(data);\n                    visualMetaList.push(visualMeta);\n                }\n            });\n\n            // console.log(JSON.stringify(visualMetaList.map(a => a.stops)));\n            seriesModel.getData().setVisual('visualMeta', visualMetaList);\n        });\n    }\n\n    // FIXME\n    // performance and export for heatmap?\n    // value can be Infinity or -Infinity\n    function getColorVisual(seriesModel, visualMapModel, value, valueState) {\n        var mappings = visualMapModel.targetVisuals[valueState];\n        var visualTypes = VisualMapping.prepareVisualTypes(mappings);\n        var resultVisual = {\n            color: seriesModel.getData().getVisual('color') // default color.\n        };\n\n        for (var i = 0, len = visualTypes.length; i < len; i++) {\n            var type = visualTypes[i];\n            var mapping = mappings[\n                type === 'opacity' ? '__alphaForOpacity' : type\n            ];\n            mapping && mapping.applyVisual(value, getVisual, setVisual);\n        }\n\n        return resultVisual.color;\n\n        function getVisual(key) {\n            return resultVisual[key];\n        }\n\n        function setVisual(key, value) {\n            resultVisual[key] = value;\n        }\n    }\n\n\n\n\n/***/ }),\n/* 475 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * @file Data range action\n */\n\n\n    var echarts = __webpack_require__(316);\n\n    var actionInfo = {\n        type: 'selectDataRange',\n        event: 'dataRangeSelected',\n        // FIXME use updateView appears wrong\n        update: 'update'\n    };\n\n    echarts.registerAction(actionInfo, function (payload, ecModel) {\n\n        ecModel.eachComponent({mainType: 'visualMap', query: payload}, function (model) {\n            model.setSelected(payload.selected);\n        });\n\n    });\n\n\n\n/***/ }),\n/* 476 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * @file Visual mapping.\n */\n\n\n    var zrUtil = __webpack_require__(315);\n\n    var visualDefault = {\n\n        /**\n         * @public\n         */\n        get: function (visualType, key, isCategory) {\n            var value = zrUtil.clone(\n                (defaultOption[visualType] || {})[key]\n            );\n\n            return isCategory\n                ? (zrUtil.isArray(value) ? value[value.length - 1] : value)\n                : value;\n        }\n\n    };\n\n    var defaultOption = {\n\n        color: {\n            active: ['#006edd', '#e0ffff'],\n            inactive: ['rgba(0,0,0,0)']\n        },\n\n        colorHue: {\n            active: [0, 360],\n            inactive: [0, 0]\n        },\n\n        colorSaturation: {\n            active: [0.3, 1],\n            inactive: [0, 0]\n        },\n\n        colorLightness: {\n            active: [0.9, 0.5],\n            inactive: [0, 0]\n        },\n\n        colorAlpha: {\n            active: [0.3, 1],\n            inactive: [0, 0]\n        },\n\n        opacity: {\n            active: [0.3, 1],\n            inactive: [0, 0]\n        },\n\n        symbol: {\n            active: ['circle', 'roundRect', 'diamond'],\n            inactive: ['none']\n        },\n\n        symbolSize: {\n            active: [10, 50],\n            inactive: [0, 0]\n        }\n    };\n\n    module.exports = visualDefault;\n\n\n\n\n/***/ }),\n/* 477 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * @file Visual solution, for consistent option specification.\n */\n\n\n    var zrUtil = __webpack_require__(315);\n    var VisualMapping = __webpack_require__(370);\n    var each = zrUtil.each;\n\n    function hasKeys(obj) {\n        if (obj) {\n            for (var name in obj){\n                if (obj.hasOwnProperty(name)) {\n                    return true;\n                }\n            }\n        }\n    }\n\n    var visualSolution = {\n\n        /**\n         * @param {Object} option\n         * @param {Array.<string>} stateList\n         * @param {Function} [supplementVisualOption]\n         * @return {Object} visualMappings <state, <visualType, module:echarts/visual/VisualMapping>>\n         */\n        createVisualMappings: function (option, stateList, supplementVisualOption) {\n            var visualMappings = {};\n\n            each(stateList, function (state) {\n                var mappings = visualMappings[state] = createMappings();\n\n                each(option[state], function (visualData, visualType) {\n                    if (!VisualMapping.isValidType(visualType)) {\n                        return;\n                    }\n                    var mappingOption = {\n                        type: visualType,\n                        visual: visualData\n                    };\n                    supplementVisualOption && supplementVisualOption(mappingOption, state);\n                    mappings[visualType] = new VisualMapping(mappingOption);\n\n                    // Prepare a alpha for opacity, for some case that opacity\n                    // is not supported, such as rendering using gradient color.\n                    if (visualType === 'opacity') {\n                        mappingOption = zrUtil.clone(mappingOption);\n                        mappingOption.type = 'colorAlpha';\n                        mappings.__hidden.__alphaForOpacity = new VisualMapping(mappingOption);\n                    }\n                });\n            });\n\n            return visualMappings;\n\n            function createMappings() {\n                var Creater = function () {};\n                // Make sure hidden fields will not be visited by\n                // object iteration (with hasOwnProperty checking).\n                Creater.prototype.__hidden = Creater.prototype;\n                var obj = new Creater();\n                return obj;\n            }\n        },\n\n        /**\n         * @param {Object} thisOption\n         * @param {Object} newOption\n         * @param {Array.<string>} keys\n         */\n        replaceVisualOption: function (thisOption, newOption, keys) {\n            // Visual attributes merge is not supported, otherwise it\n            // brings overcomplicated merge logic. See #2853. So if\n            // newOption has anyone of these keys, all of these keys\n            // will be reset. Otherwise, all keys remain.\n            var has;\n            zrUtil.each(keys, function (key) {\n                if (newOption.hasOwnProperty(key) && hasKeys(newOption[key])) {\n                    has = true;\n                }\n            });\n            has && zrUtil.each(keys, function (key) {\n                if (newOption.hasOwnProperty(key) && hasKeys(newOption[key])) {\n                    thisOption[key] = zrUtil.clone(newOption[key]);\n                }\n                else {\n                    delete thisOption[key];\n                }\n            });\n        },\n\n        /**\n         * @param {Array.<string>} stateList\n         * @param {Object} visualMappings <state, Object.<visualType, module:echarts/visual/VisualMapping>>\n         * @param {module:echarts/data/List} list\n         * @param {Function} getValueState param: valueOrIndex, return: state.\n         * @param {object} [scope] Scope for getValueState\n         * @param {string} [dimension] Concrete dimension, if used.\n         */\n        applyVisual: function (stateList, visualMappings, data, getValueState, scope, dimension) {\n            var visualTypesMap = {};\n            zrUtil.each(stateList, function (state) {\n                var visualTypes = VisualMapping.prepareVisualTypes(visualMappings[state]);\n                visualTypesMap[state] = visualTypes;\n            });\n\n            var dataIndex;\n\n            function getVisual(key) {\n                return data.getItemVisual(dataIndex, key);\n            }\n\n            function setVisual(key, value) {\n                data.setItemVisual(dataIndex, key, value);\n            }\n\n            if (dimension == null) {\n                data.each(eachItem, true);\n            }\n            else {\n                data.each([dimension], eachItem, true);\n            }\n\n            function eachItem(valueOrIndex, index) {\n                dataIndex = dimension == null ? valueOrIndex : index;\n\n                var rawDataItem = data.getRawDataItem(dataIndex);\n                // Consider performance\n                if (rawDataItem && rawDataItem.visualMap === false) {\n                    return;\n                }\n\n                var valueState = getValueState.call(scope, valueOrIndex);\n                var mappings = visualMappings[valueState];\n                var visualTypes = visualTypesMap[valueState];\n\n                for (var i = 0, len = visualTypes.length; i < len; i++) {\n                    var type = visualTypes[i];\n                    mappings[type] && mappings[type].applyVisual(\n                        valueOrIndex, getVisual, setVisual\n                    );\n                }\n            }\n        }\n    };\n\n    module.exports = visualSolution;\n\n\n\n/***/ }),\n/* 478 */,\n/* 479 */,\n/* 480 */,\n/* 481 */,\n/* 482 */,\n/* 483 */,\n/* 484 */,\n/* 485 */,\n/* 486 */,\n/* 487 */,\n/* 488 */,\n/* 489 */,\n/* 490 */,\n/* 491 */,\n/* 492 */,\n/* 493 */,\n/* 494 */,\n/* 495 */,\n/* 496 */,\n/* 497 */,\n/* 498 */,\n/* 499 */,\n/* 500 */,\n/* 501 */,\n/* 502 */,\n/* 503 */,\n/* 504 */,\n/* 505 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * visualMap component entry\n */\n\n\n    __webpack_require__(510);\n    __webpack_require__(511);\n\n\n\n/***/ }),\n/* 506 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * @file Data zoom model\n */\n\n\n    var VisualMapModel = __webpack_require__(469);\n    var zrUtil = __webpack_require__(315);\n    var numberUtil = __webpack_require__(318);\n\n    // Constant\n    var DEFAULT_BAR_BOUND = [20, 140];\n\n    var ContinuousModel = VisualMapModel.extend({\n\n        type: 'visualMap.continuous',\n\n        /**\n         * @protected\n         */\n        defaultOption: {\n            align: 'auto',          // 'auto', 'left', 'right', 'top', 'bottom'\n            calculable: false,      // This prop effect default component type determine,\n                                    // See echarts/component/visualMap/typeDefaulter.\n            range: null,            // selected range. In default case `range` is [min, max]\n                                    // and can auto change along with modification of min max,\n                                    // util use specifid a range.\n            realtime: true,         // Whether realtime update.\n            itemHeight: null,       // The length of the range control edge.\n            itemWidth: null,        // The length of the other side.\n            hoverLink: true,        // Enable hover highlight.\n            hoverLinkDataSize: null,// The size of hovered data.\n            hoverLinkOnHandle: true // Whether trigger hoverLink when hover handle.\n        },\n\n        /**\n         * @override\n         */\n        optionUpdated: function (newOption, isInit) {\n            ContinuousModel.superApply(this, 'optionUpdated', arguments);\n\n            this.resetTargetSeries();\n            this.resetExtent();\n\n            this.resetVisual(function (mappingOption) {\n                mappingOption.mappingMethod = 'linear';\n                mappingOption.dataExtent = this.getExtent();\n            });\n\n            this._resetRange();\n        },\n\n        /**\n         * @protected\n         * @override\n         */\n        resetItemSize: function () {\n            ContinuousModel.superApply(this, 'resetItemSize', arguments);\n\n            var itemSize = this.itemSize;\n\n            this._orient === 'horizontal' && itemSize.reverse();\n\n            (itemSize[0] == null || isNaN(itemSize[0])) && (itemSize[0] = DEFAULT_BAR_BOUND[0]);\n            (itemSize[1] == null || isNaN(itemSize[1])) && (itemSize[1] = DEFAULT_BAR_BOUND[1]);\n        },\n\n        /**\n         * @private\n         */\n        _resetRange: function () {\n            var dataExtent = this.getExtent();\n            var range = this.option.range;\n\n            if (!range || range.auto) {\n                // `range` should always be array (so we dont use other\n                // value like 'auto') for user-friend. (consider getOption).\n                dataExtent.auto = 1;\n                this.option.range = dataExtent;\n            }\n            else if (zrUtil.isArray(range)) {\n                if (range[0] > range[1]) {\n                    range.reverse();\n                }\n                range[0] = Math.max(range[0], dataExtent[0]);\n                range[1] = Math.min(range[1], dataExtent[1]);\n            }\n        },\n\n        /**\n         * @protected\n         * @override\n         */\n        completeVisualOption: function () {\n            VisualMapModel.prototype.completeVisualOption.apply(this, arguments);\n\n            zrUtil.each(this.stateList, function (state) {\n                var symbolSize = this.option.controller[state].symbolSize;\n                if (symbolSize && symbolSize[0] !== symbolSize[1]) {\n                    symbolSize[0] = 0; // For good looking.\n                }\n            }, this);\n        },\n\n        /**\n         * @override\n         */\n        setSelected: function (selected) {\n            this.option.range = selected.slice();\n            this._resetRange();\n        },\n\n        /**\n         * @public\n         */\n        getSelected: function () {\n            var dataExtent = this.getExtent();\n\n            var dataInterval = numberUtil.asc(\n                (this.get('range') || []).slice()\n            );\n\n            // Clamp\n            dataInterval[0] > dataExtent[1] && (dataInterval[0] = dataExtent[1]);\n            dataInterval[1] > dataExtent[1] && (dataInterval[1] = dataExtent[1]);\n            dataInterval[0] < dataExtent[0] && (dataInterval[0] = dataExtent[0]);\n            dataInterval[1] < dataExtent[0] && (dataInterval[1] = dataExtent[0]);\n\n            return dataInterval;\n        },\n\n        /**\n         * @override\n         */\n        getValueState: function (value) {\n            var range = this.option.range;\n            var dataExtent = this.getExtent();\n\n            // When range[0] === dataExtent[0], any value larger than dataExtent[0] maps to 'inRange'.\n            // range[1] is processed likewise.\n            return (\n                (range[0] <= dataExtent[0] || range[0] <= value)\n                && (range[1] >= dataExtent[1] || value <= range[1])\n            ) ? 'inRange' : 'outOfRange';\n        },\n\n        /**\n         * @params {Array.<number>} range target value: range[0] <= value && value <= range[1]\n         * @return {Array.<Object>} [{seriesId, dataIndices: <Array.<number>>}, ...]\n         */\n        findTargetDataIndices: function (range) {\n            var result = [];\n\n            this.eachTargetSeries(function (seriesModel) {\n                var dataIndices = [];\n                var data = seriesModel.getData();\n\n                data.each(this.getDataDimension(data), function (value, dataIndex) {\n                    range[0] <= value && value <= range[1] && dataIndices.push(dataIndex);\n                }, true, this);\n\n                result.push({seriesId: seriesModel.id, dataIndex: dataIndices});\n            }, this);\n\n            return result;\n        },\n\n        /**\n         * @implement\n         */\n        getVisualMeta: function (getColorVisual) {\n            var oVals = getColorStopValues(this, 'outOfRange', this.getExtent());\n            var iVals = getColorStopValues(this, 'inRange', this.option.range.slice());\n            var stops = [];\n\n            function setStop(value, valueState) {\n                stops.push({\n                    value: value,\n                    color: getColorVisual(value, valueState)\n                });\n            }\n\n            // Format to: outOfRange -- inRange -- outOfRange.\n            var iIdx = 0;\n            var oIdx = 0;\n            var iLen = iVals.length;\n            var oLen = oVals.length;\n\n            for (; oIdx < oLen && (!iVals.length || oVals[oIdx] <= iVals[0]); oIdx++) {\n                // If oVal[oIdx] === iVals[iIdx], oVal[oIdx] should be ignored.\n                if (oVals[oIdx] < iVals[iIdx]) {\n                    setStop(oVals[oIdx], 'outOfRange');\n                }\n            }\n            for (var first = 1; iIdx < iLen; iIdx++, first = 0) {\n                // If range is full, value beyond min, max will be clamped.\n                // make a singularity\n                first && stops.length && setStop(iVals[iIdx], 'outOfRange');\n                setStop(iVals[iIdx], 'inRange');\n            }\n            for (var first = 1; oIdx < oLen; oIdx++) {\n                if (!iVals.length || iVals[iVals.length - 1] < oVals[oIdx]) {\n                    // make a singularity\n                    if (first) {\n                        stops.length && setStop(stops[stops.length - 1].value, 'outOfRange');\n                        first = 0;\n                    }\n                    setStop(oVals[oIdx], 'outOfRange');\n                }\n            }\n\n            var stopsLen = stops.length;\n\n            return {\n                stops: stops,\n                outerColors: [\n                    stopsLen ? stops[0].color : 'transparent',\n                    stopsLen ? stops[stopsLen - 1].color : 'transparent'\n                ]\n            };\n        }\n\n    });\n\n    function getColorStopValues(visualMapModel, valueState, dataExtent) {\n        if (dataExtent[0] === dataExtent[1]) {\n            return dataExtent.slice();\n        }\n\n        // When using colorHue mapping, it is not linear color any more.\n        // Moreover, canvas gradient seems not to be accurate linear.\n        // FIXME\n        // Should be arbitrary value 100? or based on pixel size?\n        var count = 200;\n        var step = (dataExtent[1] - dataExtent[0]) / count;\n\n        var value = dataExtent[0];\n        var stopValues = [];\n        for (var i = 0; i <= count && value < dataExtent[1]; i++) {\n            stopValues.push(value);\n            value += step;\n        }\n        stopValues.push(dataExtent[1]);\n\n        return stopValues;\n    }\n\n    module.exports = ContinuousModel;\n\n\n\n/***/ }),\n/* 507 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var VisualMapView = __webpack_require__(470);\n    var graphic = __webpack_require__(317);\n    var zrUtil = __webpack_require__(315);\n    var numberUtil = __webpack_require__(318);\n    var sliderMove = __webpack_require__(464);\n    var LinearGradient = __webpack_require__(371);\n    var helper = __webpack_require__(471);\n    var modelUtil = __webpack_require__(323);\n\n    var linearMap = numberUtil.linearMap;\n    var each = zrUtil.each;\n    var mathMin = Math.min;\n    var mathMax = Math.max;\n\n    // Arbitrary value\n    var HOVER_LINK_SIZE = 12;\n    var HOVER_LINK_OUT = 6;\n\n    // Notice:\n    // Any \"interval\" should be by the order of [low, high].\n    // \"handle0\" (handleIndex === 0) maps to\n    // low data value: this._dataInterval[0] and has low coord.\n    // \"handle1\" (handleIndex === 1) maps to\n    // high data value: this._dataInterval[1] and has high coord.\n    // The logic of transform is implemented in this._createBarGroup.\n\n    var ContinuousView = VisualMapView.extend({\n\n        type: 'visualMap.continuous',\n\n        /**\n         * @override\n         */\n        init: function () {\n\n            ContinuousView.superApply(this, 'init', arguments);\n\n            /**\n             * @private\n             */\n            this._shapes = {};\n\n            /**\n             * @private\n             */\n            this._dataInterval = [];\n\n            /**\n             * @private\n             */\n            this._handleEnds = [];\n\n            /**\n             * @private\n             */\n            this._orient;\n\n            /**\n             * @private\n             */\n            this._useHandle;\n\n            /**\n             * @private\n             */\n            this._hoverLinkDataIndices = [];\n\n            /**\n             * @private\n             */\n            this._dragging;\n\n            /**\n             * @private\n             */\n            this._hovering;\n        },\n\n        /**\n         * @protected\n         * @override\n         */\n        doRender: function (visualMapModel, ecModel, api, payload) {\n            if (!payload || payload.type !== 'selectDataRange' || payload.from !== this.uid) {\n                this._buildView();\n            }\n        },\n\n        /**\n         * @private\n         */\n        _buildView: function () {\n            this.group.removeAll();\n\n            var visualMapModel = this.visualMapModel;\n            var thisGroup = this.group;\n\n            this._orient = visualMapModel.get('orient');\n            this._useHandle = visualMapModel.get('calculable');\n\n            this._resetInterval();\n\n            this._renderBar(thisGroup);\n\n            var dataRangeText = visualMapModel.get('text');\n            this._renderEndsText(thisGroup, dataRangeText, 0);\n            this._renderEndsText(thisGroup, dataRangeText, 1);\n\n            // Do this for background size calculation.\n            this._updateView(true);\n\n            // After updating view, inner shapes is built completely,\n            // and then background can be rendered.\n            this.renderBackground(thisGroup);\n\n            // Real update view\n            this._updateView();\n\n            this._enableHoverLinkToSeries();\n            this._enableHoverLinkFromSeries();\n\n            this.positionGroup(thisGroup);\n        },\n\n        /**\n         * @private\n         */\n        _renderEndsText: function (group, dataRangeText, endsIndex) {\n            if (!dataRangeText) {\n                return;\n            }\n\n            // Compatible with ec2, text[0] map to high value, text[1] map low value.\n            var text = dataRangeText[1 - endsIndex];\n            text = text != null ? text + '' : '';\n\n            var visualMapModel = this.visualMapModel;\n            var textGap = visualMapModel.get('textGap');\n            var itemSize = visualMapModel.itemSize;\n\n            var barGroup = this._shapes.barGroup;\n            var position = this._applyTransform(\n                [\n                    itemSize[0] / 2,\n                    endsIndex === 0 ? -textGap : itemSize[1] + textGap\n                ],\n                barGroup\n            );\n            var align = this._applyTransform(\n                endsIndex === 0 ? 'bottom' : 'top',\n                barGroup\n            );\n            var orient = this._orient;\n            var textStyleModel = this.visualMapModel.textStyleModel;\n\n            this.group.add(new graphic.Text({\n                style: {\n                    x: position[0],\n                    y: position[1],\n                    textVerticalAlign: orient === 'horizontal' ? 'middle' : align,\n                    textAlign: orient === 'horizontal' ? align : 'center',\n                    text: text,\n                    textFont: textStyleModel.getFont(),\n                    fill: textStyleModel.getTextColor()\n                }\n            }));\n        },\n\n        /**\n         * @private\n         */\n        _renderBar: function (targetGroup) {\n            var visualMapModel = this.visualMapModel;\n            var shapes = this._shapes;\n            var itemSize = visualMapModel.itemSize;\n            var orient = this._orient;\n            var useHandle = this._useHandle;\n            var itemAlign = helper.getItemAlign(visualMapModel, this.api, itemSize);\n            var barGroup = shapes.barGroup = this._createBarGroup(itemAlign);\n\n            // Bar\n            barGroup.add(shapes.outOfRange = createPolygon());\n            barGroup.add(shapes.inRange = createPolygon(\n                null,\n                useHandle ? 'move' : null,\n                zrUtil.bind(this._dragHandle, this, 'all', false),\n                zrUtil.bind(this._dragHandle, this, 'all', true)\n            ));\n\n            var textRect = visualMapModel.textStyleModel.getTextRect('国');\n            var textSize = mathMax(textRect.width, textRect.height);\n\n            // Handle\n            if (useHandle) {\n                shapes.handleThumbs = [];\n                shapes.handleLabels = [];\n                shapes.handleLabelPoints = [];\n\n                this._createHandle(barGroup, 0, itemSize, textSize, orient, itemAlign);\n                this._createHandle(barGroup, 1, itemSize, textSize, orient, itemAlign);\n            }\n\n            this._createIndicator(barGroup, itemSize, textSize, orient);\n\n            targetGroup.add(barGroup);\n        },\n\n        /**\n         * @private\n         */\n        _createHandle: function (barGroup, handleIndex, itemSize, textSize, orient) {\n            var onDrift = zrUtil.bind(this._dragHandle, this, handleIndex, false);\n            var onDragEnd = zrUtil.bind(this._dragHandle, this, handleIndex, true);\n            var handleThumb = createPolygon(\n                createHandlePoints(handleIndex, textSize),\n                'move',\n                onDrift,\n                onDragEnd\n            );\n            handleThumb.position[0] = itemSize[0];\n            barGroup.add(handleThumb);\n\n            // Text is always horizontal layout but should not be effected by\n            // transform (orient/inverse). So label is built separately but not\n            // use zrender/graphic/helper/RectText, and is located based on view\n            // group (according to handleLabelPoint) but not barGroup.\n            var textStyleModel = this.visualMapModel.textStyleModel;\n            var handleLabel = new graphic.Text({\n                draggable: true,\n                drift: onDrift,\n                ondragend: onDragEnd,\n                style: {\n                    x: 0, y: 0, text: '',\n                    textFont: textStyleModel.getFont(),\n                    fill: textStyleModel.getTextColor()\n                }\n            });\n            this.group.add(handleLabel);\n\n            var handleLabelPoint = [\n                orient === 'horizontal'\n                    ? textSize / 2\n                    : textSize * 1.5,\n                orient === 'horizontal'\n                    ? (handleIndex === 0 ? -(textSize * 1.5) : (textSize * 1.5))\n                    : (handleIndex === 0 ? -textSize / 2 : textSize / 2)\n            ];\n\n            var shapes = this._shapes;\n            shapes.handleThumbs[handleIndex] = handleThumb;\n            shapes.handleLabelPoints[handleIndex] = handleLabelPoint;\n            shapes.handleLabels[handleIndex] = handleLabel;\n        },\n\n        /**\n         * @private\n         */\n        _createIndicator: function (barGroup, itemSize, textSize, orient) {\n            var indicator = createPolygon([[0, 0]], 'move');\n            indicator.position[0] = itemSize[0];\n            indicator.attr({invisible: true, silent: true});\n            barGroup.add(indicator);\n\n            var textStyleModel = this.visualMapModel.textStyleModel;\n            var indicatorLabel = new graphic.Text({\n                silent: true,\n                invisible: true,\n                style: {\n                    x: 0, y: 0, text: '',\n                    textFont: textStyleModel.getFont(),\n                    fill: textStyleModel.getTextColor()\n                }\n            });\n            this.group.add(indicatorLabel);\n\n            var indicatorLabelPoint = [\n                orient === 'horizontal' ? textSize / 2 : HOVER_LINK_OUT + 3,\n                0\n            ];\n\n            var shapes = this._shapes;\n            shapes.indicator = indicator;\n            shapes.indicatorLabel = indicatorLabel;\n            shapes.indicatorLabelPoint = indicatorLabelPoint;\n        },\n\n        /**\n         * @private\n         */\n        _dragHandle: function (handleIndex, isEnd, dx, dy) {\n            if (!this._useHandle) {\n                return;\n            }\n\n            this._dragging = !isEnd;\n\n            if (!isEnd) {\n                // Transform dx, dy to bar coordination.\n                var vertex = this._applyTransform([dx, dy], this._shapes.barGroup, true);\n                this._updateInterval(handleIndex, vertex[1]);\n\n                // Considering realtime, update view should be executed\n                // before dispatch action.\n                this._updateView();\n            }\n\n            // dragEnd do not dispatch action when realtime.\n            if (isEnd === !this.visualMapModel.get('realtime')) { // jshint ignore:line\n                this.api.dispatchAction({\n                    type: 'selectDataRange',\n                    from: this.uid,\n                    visualMapId: this.visualMapModel.id,\n                    selected: this._dataInterval.slice()\n                });\n            }\n\n            if (isEnd) {\n                !this._hovering && this._clearHoverLinkToSeries();\n            }\n            else if (useHoverLinkOnHandle(this.visualMapModel)) {\n                this._doHoverLinkToSeries(this._handleEnds[handleIndex], false);\n            }\n        },\n\n        /**\n         * @private\n         */\n        _resetInterval: function () {\n            var visualMapModel = this.visualMapModel;\n\n            var dataInterval = this._dataInterval = visualMapModel.getSelected();\n            var dataExtent = visualMapModel.getExtent();\n            var sizeExtent = [0, visualMapModel.itemSize[1]];\n\n            this._handleEnds = [\n                linearMap(dataInterval[0], dataExtent, sizeExtent, true),\n                linearMap(dataInterval[1], dataExtent, sizeExtent, true)\n            ];\n        },\n\n        /**\n         * @private\n         * @param {(number|string)} handleIndex 0 or 1 or 'all'\n         * @param {number} dx\n         * @param {number} dy\n         */\n        _updateInterval: function (handleIndex, delta) {\n            delta = delta || 0;\n            var visualMapModel = this.visualMapModel;\n            var handleEnds = this._handleEnds;\n\n            sliderMove(\n                delta,\n                handleEnds,\n                [0, visualMapModel.itemSize[1]],\n                handleIndex === 'all' ? 'rigid' : 'push',\n                handleIndex\n            );\n            var dataExtent = visualMapModel.getExtent();\n            var sizeExtent = [0, visualMapModel.itemSize[1]];\n            // Update data interval.\n            this._dataInterval = [\n                linearMap(handleEnds[0], sizeExtent, dataExtent, true),\n                linearMap(handleEnds[1], sizeExtent, dataExtent, true)\n            ];\n        },\n\n        /**\n         * @private\n         */\n        _updateView: function (forSketch) {\n            var visualMapModel = this.visualMapModel;\n            var dataExtent = visualMapModel.getExtent();\n            var shapes = this._shapes;\n\n            var outOfRangeHandleEnds = [0, visualMapModel.itemSize[1]];\n            var inRangeHandleEnds = forSketch ? outOfRangeHandleEnds : this._handleEnds;\n\n            var visualInRange = this._createBarVisual(\n                this._dataInterval, dataExtent, inRangeHandleEnds, 'inRange'\n            );\n            var visualOutOfRange = this._createBarVisual(\n                dataExtent, dataExtent, outOfRangeHandleEnds, 'outOfRange'\n            );\n\n            shapes.inRange\n                .setStyle({\n                    fill: visualInRange.barColor,\n                    opacity: visualInRange.opacity\n                })\n                .setShape('points', visualInRange.barPoints);\n            shapes.outOfRange\n                .setStyle({\n                    fill: visualOutOfRange.barColor,\n                    opacity: visualOutOfRange.opacity\n                })\n                .setShape('points', visualOutOfRange.barPoints);\n\n            this._updateHandle(inRangeHandleEnds, visualInRange);\n        },\n\n        /**\n         * @private\n         */\n        _createBarVisual: function (dataInterval, dataExtent, handleEnds, forceState) {\n            var opts = {\n                forceState: forceState,\n                convertOpacityToAlpha: true\n            };\n            var colorStops = this._makeColorGradient(dataInterval, opts);\n\n            var symbolSizes = [\n                this.getControllerVisual(dataInterval[0], 'symbolSize', opts),\n                this.getControllerVisual(dataInterval[1], 'symbolSize', opts)\n            ];\n            var barPoints = this._createBarPoints(handleEnds, symbolSizes);\n\n            return {\n                barColor: new LinearGradient(0, 0, 0, 1, colorStops),\n                barPoints: barPoints,\n                handlesColor: [\n                    colorStops[0].color,\n                    colorStops[colorStops.length - 1].color\n                ]\n            };\n        },\n\n        /**\n         * @private\n         */\n        _makeColorGradient: function (dataInterval, opts) {\n            // Considering colorHue, which is not linear, so we have to sample\n            // to calculate gradient color stops, but not only caculate head\n            // and tail.\n            var sampleNumber = 100; // Arbitrary value.\n            var colorStops = [];\n            var step = (dataInterval[1] - dataInterval[0]) / sampleNumber;\n\n            colorStops.push({\n                color: this.getControllerVisual(dataInterval[0], 'color', opts),\n                offset: 0\n            });\n\n            for (var i = 1; i < sampleNumber; i++) {\n                var currValue = dataInterval[0] + step * i;\n                if (currValue > dataInterval[1]) {\n                    break;\n                }\n                colorStops.push({\n                    color: this.getControllerVisual(currValue, 'color', opts),\n                    offset: i / sampleNumber\n                });\n            }\n\n            colorStops.push({\n                color: this.getControllerVisual(dataInterval[1], 'color', opts),\n                offset: 1\n            });\n\n            return colorStops;\n        },\n\n        /**\n         * @private\n         */\n        _createBarPoints: function (handleEnds, symbolSizes) {\n            var itemSize = this.visualMapModel.itemSize;\n\n            return [\n                [itemSize[0] - symbolSizes[0], handleEnds[0]],\n                [itemSize[0], handleEnds[0]],\n                [itemSize[0], handleEnds[1]],\n                [itemSize[0] - symbolSizes[1], handleEnds[1]]\n            ];\n        },\n\n        /**\n         * @private\n         */\n        _createBarGroup: function (itemAlign) {\n            var orient = this._orient;\n            var inverse = this.visualMapModel.get('inverse');\n\n            return new graphic.Group(\n                (orient === 'horizontal' && !inverse)\n                ? {scale: itemAlign === 'bottom' ? [1, 1] : [-1, 1], rotation: Math.PI / 2}\n                : (orient === 'horizontal' && inverse)\n                ? {scale: itemAlign === 'bottom' ? [-1, 1] : [1, 1], rotation: -Math.PI / 2}\n                : (orient === 'vertical' && !inverse)\n                ? {scale: itemAlign === 'left' ? [1, -1] : [-1, -1]}\n                : {scale: itemAlign === 'left' ? [1, 1] : [-1, 1]}\n            );\n        },\n\n        /**\n         * @private\n         */\n        _updateHandle: function (handleEnds, visualInRange) {\n            if (!this._useHandle) {\n                return;\n            }\n\n            var shapes = this._shapes;\n            var visualMapModel = this.visualMapModel;\n            var handleThumbs = shapes.handleThumbs;\n            var handleLabels = shapes.handleLabels;\n\n            each([0, 1], function (handleIndex) {\n                var handleThumb = handleThumbs[handleIndex];\n                handleThumb.setStyle('fill', visualInRange.handlesColor[handleIndex]);\n                handleThumb.position[1] = handleEnds[handleIndex];\n\n                // Update handle label position.\n                var textPoint = graphic.applyTransform(\n                    shapes.handleLabelPoints[handleIndex],\n                    graphic.getTransform(handleThumb, this.group)\n                );\n                handleLabels[handleIndex].setStyle({\n                    x: textPoint[0],\n                    y: textPoint[1],\n                    text: visualMapModel.formatValueText(this._dataInterval[handleIndex]),\n                    textVerticalAlign: 'middle',\n                    textAlign: this._applyTransform(\n                        this._orient === 'horizontal'\n                            ? (handleIndex === 0 ? 'bottom' : 'top')\n                            : 'left',\n                        shapes.barGroup\n                    )\n                });\n            }, this);\n        },\n\n        /**\n         * @private\n         * @param {number} cursorValue\n         * @param {number} textValue\n         * @param {string} [rangeSymbol]\n         * @param {number} [halfHoverLinkSize]\n         */\n        _showIndicator: function (cursorValue, textValue, rangeSymbol, halfHoverLinkSize) {\n            var visualMapModel = this.visualMapModel;\n            var dataExtent = visualMapModel.getExtent();\n            var itemSize = visualMapModel.itemSize;\n            var sizeExtent = [0, itemSize[1]];\n            var pos = linearMap(cursorValue, dataExtent, sizeExtent, true);\n\n            var shapes = this._shapes;\n            var indicator = shapes.indicator;\n            if (!indicator) {\n                return;\n            }\n\n            indicator.position[1] = pos;\n            indicator.attr('invisible', false);\n            indicator.setShape('points', createIndicatorPoints(\n                !!rangeSymbol, halfHoverLinkSize, pos, itemSize[1]\n            ));\n\n            var opts = {convertOpacityToAlpha: true};\n            var color = this.getControllerVisual(cursorValue, 'color', opts);\n            indicator.setStyle('fill', color);\n\n            // Update handle label position.\n            var textPoint = graphic.applyTransform(\n                shapes.indicatorLabelPoint,\n                graphic.getTransform(indicator, this.group)\n            );\n\n            var indicatorLabel = shapes.indicatorLabel;\n            indicatorLabel.attr('invisible', false);\n            var align = this._applyTransform('left', shapes.barGroup);\n            var orient = this._orient;\n            indicatorLabel.setStyle({\n                text: (rangeSymbol ? rangeSymbol : '') + visualMapModel.formatValueText(textValue),\n                textVerticalAlign: orient === 'horizontal' ? align : 'middle',\n                textAlign: orient === 'horizontal' ? 'center' : align,\n                x: textPoint[0],\n                y: textPoint[1]\n            });\n        },\n\n        /**\n         * @private\n         */\n        _enableHoverLinkToSeries: function () {\n            var self = this;\n            this._shapes.barGroup\n\n                .on('mousemove', function (e) {\n                    self._hovering = true;\n\n                    if (!self._dragging) {\n                        var itemSize = self.visualMapModel.itemSize;\n                        var pos = self._applyTransform(\n                            [e.offsetX, e.offsetY], self._shapes.barGroup, true, true\n                        );\n                        // For hover link show when hover handle, which might be\n                        // below or upper than sizeExtent.\n                        pos[1] = mathMin(mathMax(0, pos[1]), itemSize[1]);\n\n                        self._doHoverLinkToSeries(\n                            pos[1],\n                            0 <= pos[0] && pos[0] <= itemSize[0]\n                        );\n                    }\n                })\n\n                .on('mouseout', function () {\n                    // When mouse is out of handle, hoverLink still need\n                    // to be displayed when realtime is set as false.\n                    self._hovering = false;\n                    !self._dragging && self._clearHoverLinkToSeries();\n                });\n        },\n\n        /**\n         * @private\n         */\n        _enableHoverLinkFromSeries: function () {\n            var zr = this.api.getZr();\n\n            if (this.visualMapModel.option.hoverLink) {\n                zr.on('mouseover', this._hoverLinkFromSeriesMouseOver, this);\n                zr.on('mouseout', this._hideIndicator, this);\n            }\n            else {\n                this._clearHoverLinkFromSeries();\n            }\n        },\n\n        /**\n         * @private\n         */\n        _doHoverLinkToSeries: function (cursorPos, hoverOnBar) {\n            var visualMapModel = this.visualMapModel;\n            var itemSize = visualMapModel.itemSize;\n\n            if (!visualMapModel.option.hoverLink) {\n                return;\n            }\n\n            var sizeExtent = [0, itemSize[1]];\n            var dataExtent = visualMapModel.getExtent();\n\n            // For hover link show when hover handle, which might be below or upper than sizeExtent.\n            cursorPos = mathMin(mathMax(sizeExtent[0], cursorPos), sizeExtent[1]);\n\n            var halfHoverLinkSize = getHalfHoverLinkSize(visualMapModel, dataExtent, sizeExtent);\n            var hoverRange = [cursorPos - halfHoverLinkSize, cursorPos + halfHoverLinkSize];\n            var cursorValue = linearMap(cursorPos, sizeExtent, dataExtent, true);\n            var valueRange = [\n                linearMap(hoverRange[0], sizeExtent, dataExtent, true),\n                linearMap(hoverRange[1], sizeExtent, dataExtent, true)\n            ];\n            // Consider data range is out of visualMap range, see test/visualMap-continuous.html,\n            // where china and india has very large population.\n            hoverRange[0] < sizeExtent[0] && (valueRange[0] = -Infinity);\n            hoverRange[1] > sizeExtent[1] && (valueRange[1] = Infinity);\n\n            // Do not show indicator when mouse is over handle,\n            // otherwise labels overlap, especially when dragging.\n            if (hoverOnBar) {\n                if (valueRange[0] === -Infinity) {\n                    this._showIndicator(cursorValue, valueRange[1], '< ', halfHoverLinkSize);\n                }\n                else if (valueRange[1] === Infinity) {\n                    this._showIndicator(cursorValue, valueRange[0], '> ', halfHoverLinkSize);\n                }\n                else {\n                    this._showIndicator(cursorValue, cursorValue, '≈ ', halfHoverLinkSize);\n                }\n            }\n\n            // When realtime is set as false, handles, which are in barGroup,\n            // also trigger hoverLink, which help user to realize where they\n            // focus on when dragging. (see test/heatmap-large.html)\n            // When realtime is set as true, highlight will not show when hover\n            // handle, because the label on handle, which displays a exact value\n            // but not range, might mislead users.\n            var oldBatch = this._hoverLinkDataIndices;\n            var newBatch = [];\n            if (hoverOnBar || useHoverLinkOnHandle(visualMapModel)) {\n                newBatch = this._hoverLinkDataIndices = visualMapModel.findTargetDataIndices(valueRange);\n            }\n\n            var resultBatches = modelUtil.compressBatches(oldBatch, newBatch);\n            this._dispatchHighDown('downplay', helper.convertDataIndex(resultBatches[0]));\n            this._dispatchHighDown('highlight', helper.convertDataIndex(resultBatches[1]));\n        },\n\n        /**\n         * @private\n         */\n        _hoverLinkFromSeriesMouseOver: function (e) {\n            var el = e.target;\n\n            if (!el || el.dataIndex == null) {\n                return;\n            }\n\n            var dataModel = el.dataModel || this.ecModel.getSeriesByIndex(el.seriesIndex);\n            var data = dataModel.getData(el.dataType);\n            var dim = data.getDimension(this.visualMapModel.getDataDimension(data));\n            var value = data.get(dim, el.dataIndex, true);\n\n            if (!isNaN(value)) {\n                this._showIndicator(value, value);\n            }\n        },\n\n        /**\n         * @private\n         */\n        _hideIndicator: function () {\n            var shapes = this._shapes;\n            shapes.indicator && shapes.indicator.attr('invisible', true);\n            shapes.indicatorLabel && shapes.indicatorLabel.attr('invisible', true);\n        },\n\n        /**\n         * @private\n         */\n        _clearHoverLinkToSeries: function () {\n            this._hideIndicator();\n\n            var indices = this._hoverLinkDataIndices;\n\n            this._dispatchHighDown('downplay', helper.convertDataIndex(indices));\n\n            indices.length = 0;\n        },\n\n        /**\n         * @private\n         */\n        _clearHoverLinkFromSeries: function () {\n            this._hideIndicator();\n\n            var zr = this.api.getZr();\n            zr.off('mouseover', this._hoverLinkFromSeriesMouseOver);\n            zr.off('mouseout', this._hideIndicator);\n        },\n\n        /**\n         * @private\n         */\n        _applyTransform: function (vertex, element, inverse, global) {\n            var transform = graphic.getTransform(element, global ? null : this.group);\n\n            return graphic[\n                zrUtil.isArray(vertex) ? 'applyTransform' : 'transformDirection'\n            ](vertex, transform, inverse);\n        },\n\n        /**\n         * @private\n         */\n        _dispatchHighDown: function (type, batch) {\n            batch && batch.length && this.api.dispatchAction({\n                type: type,\n                batch: batch\n            });\n        },\n\n        /**\n         * @override\n         */\n        dispose: function () {\n            this._clearHoverLinkFromSeries();\n            this._clearHoverLinkToSeries();\n        },\n\n        /**\n         * @override\n         */\n        remove: function () {\n            this._clearHoverLinkFromSeries();\n            this._clearHoverLinkToSeries();\n        }\n\n    });\n\n    function createPolygon(points, cursor, onDrift, onDragEnd) {\n        return new graphic.Polygon({\n            shape: {points: points},\n            draggable: !!onDrift,\n            cursor: cursor,\n            drift: onDrift,\n            ondragend: onDragEnd\n        });\n    }\n\n    function createHandlePoints(handleIndex, textSize) {\n        return handleIndex === 0\n            ? [[0, 0], [textSize, 0], [textSize, -textSize]]\n            : [[0, 0], [textSize, 0], [textSize, textSize]];\n    }\n\n    function createIndicatorPoints(isRange, halfHoverLinkSize, pos, extentMax) {\n        return isRange\n            ? [ // indicate range\n                [0, -mathMin(halfHoverLinkSize, mathMax(pos, 0))],\n                [HOVER_LINK_OUT, 0],\n                [0, mathMin(halfHoverLinkSize, mathMax(extentMax - pos, 0))]\n            ]\n            : [ // indicate single value\n                [0, 0], [5, -5], [5, 5]\n            ];\n    }\n\n    function getHalfHoverLinkSize(visualMapModel, dataExtent, sizeExtent) {\n        var halfHoverLinkSize = HOVER_LINK_SIZE / 2;\n        var hoverLinkDataSize = visualMapModel.get('hoverLinkDataSize');\n        if (hoverLinkDataSize) {\n            halfHoverLinkSize = linearMap(hoverLinkDataSize, dataExtent, sizeExtent, true) / 2;\n        }\n        return halfHoverLinkSize;\n    }\n\n    function useHoverLinkOnHandle(visualMapModel) {\n        return !visualMapModel.get('realtime') && visualMapModel.get('hoverLinkOnHandle');\n    }\n\n    module.exports = ContinuousView;\n\n\n\n/***/ }),\n/* 508 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var VisualMapModel = __webpack_require__(469);\n    var zrUtil = __webpack_require__(315);\n    var VisualMapping = __webpack_require__(370);\n    var visualDefault = __webpack_require__(476);\n    var reformIntervals = __webpack_require__(318).reformIntervals;\n\n    var PiecewiseModel = VisualMapModel.extend({\n\n        type: 'visualMap.piecewise',\n\n        /**\n         * Order Rule:\n         *\n         * option.categories / option.pieces / option.text / option.selected:\n         *     If !option.inverse,\n         *     Order when vertical: ['top', ..., 'bottom'].\n         *     Order when horizontal: ['left', ..., 'right'].\n         *     If option.inverse, the meaning of\n         *     the order should be reversed.\n         *\n         * this._pieceList:\n         *     The order is always [low, ..., high].\n         *\n         * Mapping from location to low-high:\n         *     If !option.inverse\n         *     When vertical, top is high.\n         *     When horizontal, right is high.\n         *     If option.inverse, reverse.\n         */\n\n        /**\n         * @protected\n         */\n        defaultOption: {\n            selected: null,             // Object. If not specified, means selected.\n                                        // When pieces and splitNumber: {'0': true, '5': true}\n                                        // When categories: {'cate1': false, 'cate3': true}\n                                        // When selected === false, means all unselected.\n\n            minOpen: false,             // Whether include values that smaller than `min`.\n            maxOpen: false,             // Whether include values that bigger than `max`.\n\n            align: 'auto',              // 'auto', 'left', 'right'\n            itemWidth: 20,              // When put the controller vertically, it is the length of\n                                        // horizontal side of each item. Otherwise, vertical side.\n            itemHeight: 14,             // When put the controller vertically, it is the length of\n                                        // vertical side of each item. Otherwise, horizontal side.\n            itemSymbol: 'roundRect',\n            pieceList: null,            // Each item is Object, with some of those attrs:\n                                        // {min, max, lt, gt, lte, gte, value,\n                                        // color, colorSaturation, colorAlpha, opacity,\n                                        // symbol, symbolSize}, which customize the range or visual\n                                        // coding of the certain piece. Besides, see \"Order Rule\".\n            categories: null,           // category names, like: ['some1', 'some2', 'some3'].\n                                        // Attr min/max are ignored when categories set. See \"Order Rule\"\n            splitNumber: 5,             // If set to 5, auto split five pieces equally.\n                                        // If set to 0 and component type not set, component type will be\n                                        // determined as \"continuous\". (It is less reasonable but for ec2\n                                        // compatibility, see echarts/component/visualMap/typeDefaulter)\n            selectedMode: 'multiple',   // Can be 'multiple' or 'single'.\n            itemGap: 10,                // The gap between two items, in px.\n            hoverLink: true,            // Enable hover highlight.\n\n            showLabel: null             // By default, when text is used, label will hide (the logic\n                                        // is remained for compatibility reason)\n        },\n\n        /**\n         * @override\n         */\n        optionUpdated: function (newOption, isInit) {\n            PiecewiseModel.superApply(this, 'optionUpdated', arguments);\n\n            /**\n             * The order is always [low, ..., high].\n             * [{text: string, interval: Array.<number>}, ...]\n             * @private\n             * @type {Array.<Object>}\n             */\n            this._pieceList = [];\n\n            this.resetTargetSeries();\n            this.resetExtent();\n\n            /**\n             * 'pieces', 'categories', 'splitNumber'\n             * @type {string}\n             */\n            var mode = this._mode = this._determineMode();\n\n            resetMethods[this._mode].call(this);\n\n            this._resetSelected(newOption, isInit);\n\n            var categories = this.option.categories;\n\n            this.resetVisual(function (mappingOption, state) {\n                if (mode === 'categories') {\n                    mappingOption.mappingMethod = 'category';\n                    mappingOption.categories = zrUtil.clone(categories);\n                }\n                else {\n                    mappingOption.dataExtent = this.getExtent();\n                    mappingOption.mappingMethod = 'piecewise';\n                    mappingOption.pieceList = zrUtil.map(this._pieceList, function (piece) {\n                        var piece = zrUtil.clone(piece);\n                        if (state !== 'inRange') {\n                            // FIXME\n                            // outOfRange do not support special visual in pieces.\n                            piece.visual = null;\n                        }\n                        return piece;\n                    });\n                }\n            });\n        },\n\n        /**\n         * @protected\n         * @override\n         */\n        completeVisualOption: function () {\n            // Consider this case:\n            // visualMap: {\n            //      pieces: [{symbol: 'circle', lt: 0}, {symbol: 'rect', gte: 0}]\n            // }\n            // where no inRange/outOfRange set but only pieces. So we should make\n            // default inRange/outOfRange for this case, otherwise visuals that only\n            // appear in `pieces` will not be taken into account in visual encoding.\n\n            var option = this.option;\n            var visualTypesInPieces = {};\n            var visualTypes = VisualMapping.listVisualTypes();\n            var isCategory = this.isCategory();\n\n            zrUtil.each(option.pieces, function (piece) {\n                zrUtil.each(visualTypes, function (visualType) {\n                    if (piece.hasOwnProperty(visualType)) {\n                        visualTypesInPieces[visualType] = 1;\n                    }\n                });\n            });\n\n            zrUtil.each(visualTypesInPieces, function (v, visualType) {\n                var exists = 0;\n                zrUtil.each(this.stateList, function (state) {\n                    exists |= has(option, state, visualType)\n                        || has(option.target, state, visualType);\n                }, this);\n\n                !exists && zrUtil.each(this.stateList, function (state) {\n                    (option[state] || (option[state] = {}))[visualType] = visualDefault.get(\n                        visualType, state === 'inRange' ? 'active' : 'inactive', isCategory\n                    );\n                });\n            }, this);\n\n            function has(obj, state, visualType) {\n                return obj && obj[state] && (\n                    zrUtil.isObject(obj[state])\n                        ? obj[state].hasOwnProperty(visualType)\n                        : obj[state] === visualType // e.g., inRange: 'symbol'\n                );\n            }\n\n            VisualMapModel.prototype.completeVisualOption.apply(this, arguments);\n        },\n\n        _resetSelected: function (newOption, isInit) {\n            var thisOption = this.option;\n            var pieceList = this._pieceList;\n\n            // Selected do not merge but all override.\n            var selected = (isInit ? thisOption : newOption).selected || {};\n            thisOption.selected = selected;\n\n            // Consider 'not specified' means true.\n            zrUtil.each(pieceList, function (piece, index) {\n                var key = this.getSelectedMapKey(piece);\n                if (!selected.hasOwnProperty(key)) {\n                    selected[key] = true;\n                }\n            }, this);\n\n            if (thisOption.selectedMode === 'single') {\n                // Ensure there is only one selected.\n                var hasSel = false;\n\n                zrUtil.each(pieceList, function (piece, index) {\n                    var key = this.getSelectedMapKey(piece);\n                    if (selected[key]) {\n                        hasSel\n                            ? (selected[key] = false)\n                            : (hasSel = true);\n                    }\n                }, this);\n            }\n            // thisOption.selectedMode === 'multiple', default: all selected.\n        },\n\n        /**\n         * @public\n         */\n        getSelectedMapKey: function (piece) {\n            return this._mode === 'categories'\n                ? piece.value + '' : piece.index + '';\n        },\n\n        /**\n         * @public\n         */\n        getPieceList: function () {\n            return this._pieceList;\n        },\n\n        /**\n         * @private\n         * @return {string}\n         */\n        _determineMode: function () {\n            var option = this.option;\n\n            return option.pieces && option.pieces.length > 0\n                ? 'pieces'\n                : this.option.categories\n                ? 'categories'\n                : 'splitNumber';\n        },\n\n        /**\n         * @public\n         * @override\n         */\n        setSelected: function (selected) {\n            this.option.selected = zrUtil.clone(selected);\n        },\n\n        /**\n         * @public\n         * @override\n         */\n        getValueState: function (value) {\n            var index = VisualMapping.findPieceIndex(value, this._pieceList);\n\n            return index != null\n                ? (this.option.selected[this.getSelectedMapKey(this._pieceList[index])]\n                    ? 'inRange' : 'outOfRange'\n                )\n                : 'outOfRange';\n        },\n\n        /**\n         * @public\n         * @params {number} pieceIndex piece index in visualMapModel.getPieceList()\n         * @return {Array.<Object>} [{seriesId, dataIndices: <Array.<number>>}, ...]\n         */\n        findTargetDataIndices: function (pieceIndex) {\n            var result = [];\n\n            this.eachTargetSeries(function (seriesModel) {\n                var dataIndices = [];\n                var data = seriesModel.getData();\n\n                data.each(this.getDataDimension(data), function (value, dataIndex) {\n                    // Should always base on model pieceList, because it is order sensitive.\n                    var pIdx = VisualMapping.findPieceIndex(value, this._pieceList);\n                    pIdx === pieceIndex && dataIndices.push(dataIndex);\n                }, true, this);\n\n                result.push({seriesId: seriesModel.id, dataIndex: dataIndices});\n            }, this);\n\n            return result;\n        },\n\n        /**\n         * @private\n         * @param {Object} piece piece.value or piece.interval is required.\n         * @return {number} Can be Infinity or -Infinity\n         */\n        getRepresentValue: function (piece) {\n            var representValue;\n            if (this.isCategory()) {\n                representValue = piece.value;\n            }\n            else {\n                if (piece.value != null) {\n                    representValue = piece.value;\n                }\n                else {\n                    var pieceInterval = piece.interval || [];\n                    representValue = (pieceInterval[0] === -Infinity && pieceInterval[1] === Infinity)\n                        ? 0\n                        : (pieceInterval[0] + pieceInterval[1]) / 2;\n                }\n            }\n            return representValue;\n        },\n\n        getVisualMeta: function (getColorVisual) {\n            // Do not support category. (category axis is ordinal, numerical)\n            if (this.isCategory()) {\n                return;\n            }\n\n            var stops = [];\n            var outerColors = [];\n            var visualMapModel = this;\n\n            function setStop(interval, valueState) {\n                var representValue = visualMapModel.getRepresentValue({interval: interval});\n                if (!valueState) {\n                    valueState = visualMapModel.getValueState(representValue);\n                }\n                var color = getColorVisual(representValue, valueState);\n                if (interval[0] === -Infinity) {\n                    outerColors[0] = color;\n                }\n                else if (interval[1] === Infinity) {\n                    outerColors[1] = color;\n                }\n                else {\n                    stops.push(\n                        {value: interval[0], color: color},\n                        {value: interval[1], color: color}\n                    );\n                }\n            }\n\n            // Suplement\n            var pieceList = this._pieceList.slice();\n            if (!pieceList.length) {\n                pieceList.push({interval: [-Infinity, Infinity]});\n            }\n            else {\n                var edge = pieceList[0].interval[0];\n                edge !== -Infinity && pieceList.unshift({interval: [-Infinity, edge]});\n                edge = pieceList[pieceList.length - 1].interval[1];\n                edge !== Infinity && pieceList.push({interval: [edge, Infinity]});\n            }\n\n            var curr = -Infinity;\n            zrUtil.each(pieceList, function (piece) {\n                var interval = piece.interval;\n                if (interval) {\n                    // Fulfill gap.\n                    interval[0] > curr && setStop([curr, interval[0]], 'outOfRange');\n                    setStop(interval.slice());\n                    curr = interval[1];\n                }\n            }, this);\n\n            return {stops: stops, outerColors: outerColors};\n        }\n\n    });\n\n    /**\n     * Key is this._mode\n     * @type {Object}\n     * @this {module:echarts/component/viusalMap/PiecewiseMode}\n     */\n    var resetMethods = {\n\n        splitNumber: function () {\n            var thisOption = this.option;\n            var pieceList = this._pieceList;\n            var precision = thisOption.precision;\n            var dataExtent = this.getExtent();\n            var splitNumber = thisOption.splitNumber;\n            splitNumber = Math.max(parseInt(splitNumber, 10), 1);\n            thisOption.splitNumber = splitNumber;\n\n            var splitStep = (dataExtent[1] - dataExtent[0]) / splitNumber;\n            // Precision auto-adaption\n            while (+splitStep.toFixed(precision) !== splitStep && precision < 5) {\n                precision++;\n            }\n            thisOption.precision = precision;\n            splitStep = +splitStep.toFixed(precision);\n\n            var index = 0;\n\n            if (thisOption.minOpen) {\n                pieceList.push({\n                    index: index++,\n                    interval: [-Infinity, dataExtent[0]],\n                    close: [0, 0]\n                });\n            }\n\n            for (\n                var curr = dataExtent[0], len = index + splitNumber;\n                index < len;\n                curr += splitStep\n            ) {\n                var max = index === splitNumber - 1 ? dataExtent[1] : (curr + splitStep);\n\n                pieceList.push({\n                    index: index++,\n                    interval: [curr, max],\n                    close: [1, 1]\n                });\n            }\n\n            if (thisOption.maxOpen) {\n                pieceList.push({\n                    index: index++,\n                    interval: [dataExtent[1], Infinity],\n                    close: [0, 0]\n                });\n            }\n\n            reformIntervals(pieceList);\n\n            zrUtil.each(pieceList, function (piece) {\n                piece.text = this.formatValueText(piece.interval);\n            }, this);\n        },\n\n        categories: function () {\n            var thisOption = this.option;\n            zrUtil.each(thisOption.categories, function (cate) {\n                // FIXME category模式也使用pieceList，但在visualMapping中不是使用pieceList。\n                // 是否改一致。\n                this._pieceList.push({\n                    text: this.formatValueText(cate, true),\n                    value: cate\n                });\n            }, this);\n\n            // See \"Order Rule\".\n            normalizeReverse(thisOption, this._pieceList);\n        },\n\n        pieces: function () {\n            var thisOption = this.option;\n            var pieceList = this._pieceList;\n\n            zrUtil.each(thisOption.pieces, function (pieceListItem, index) {\n\n                if (!zrUtil.isObject(pieceListItem)) {\n                    pieceListItem = {value: pieceListItem};\n                }\n\n                var item = {text: '', index: index};\n\n                if (pieceListItem.label != null) {\n                    item.text = pieceListItem.label;\n                }\n\n                if (pieceListItem.hasOwnProperty('value')) {\n                    var value = item.value = pieceListItem.value;\n                    item.interval = [value, value];\n                    item.close = [1, 1];\n                }\n                else {\n                    // `min` `max` is legacy option.\n                    // `lt` `gt` `lte` `gte` is recommanded.\n                    var interval = item.interval = [];\n                    var close = item.close = [0, 0];\n\n                    var closeList = [1, 0, 1];\n                    var infinityList = [-Infinity, Infinity];\n\n                    var useMinMax = [];\n                    for (var lg = 0; lg < 2; lg++) {\n                        var names = [['gte', 'gt', 'min'], ['lte', 'lt', 'max']][lg];\n                        for (var i = 0; i < 3 && interval[lg] == null; i++) {\n                            interval[lg] = pieceListItem[names[i]];\n                            close[lg] = closeList[i];\n                            useMinMax[lg] = i === 2;\n                        }\n                        interval[lg] == null && (interval[lg] = infinityList[lg]);\n                    }\n                    useMinMax[0] && interval[1] === Infinity && (close[0] = 0);\n                    useMinMax[1] && interval[0] === -Infinity && (close[1] = 0);\n\n                    if (__DEV__) {\n                        if (interval[0] > interval[1]) {\n                            console.warn(\n                                'Piece ' + index + 'is illegal: ' + interval\n                                + ' lower bound should not greater then uppper bound.'\n                            );\n                        }\n                    }\n\n                    if (interval[0] === interval[1] && close[0] && close[1]) {\n                        // Consider: [{min: 5, max: 5, visual: {...}}, {min: 0, max: 5}],\n                        // we use value to lift the priority when min === max\n                        item.value = interval[0];\n                    }\n                }\n\n                item.visual = VisualMapping.retrieveVisuals(pieceListItem);\n\n                pieceList.push(item);\n\n            }, this);\n\n            // See \"Order Rule\".\n            normalizeReverse(thisOption, pieceList);\n            // Only pieces\n            reformIntervals(pieceList);\n\n            zrUtil.each(pieceList, function (piece) {\n                var close = piece.close;\n                var edgeSymbols = [['<', '≤'][close[1]], ['>', '≥'][close[0]]];\n                piece.text = piece.text || this.formatValueText(\n                    piece.value != null ? piece.value : piece.interval,\n                    false,\n                    edgeSymbols\n                );\n            }, this);\n        }\n    };\n\n    function normalizeReverse(thisOption, pieceList) {\n        var inverse = thisOption.inverse;\n        if (thisOption.orient === 'vertical' ? !inverse : inverse) {\n             pieceList.reverse();\n        }\n    }\n\n    module.exports = PiecewiseModel;\n\n\n/***/ }),\n/* 509 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\n\n    var VisualMapView = __webpack_require__(470);\n    var zrUtil = __webpack_require__(315);\n    var graphic = __webpack_require__(317);\n    var symbolCreators = __webpack_require__(353);\n    var layout = __webpack_require__(328);\n    var helper = __webpack_require__(471);\n\n    var PiecewiseVisualMapView = VisualMapView.extend({\n\n        type: 'visualMap.piecewise',\n\n        /**\n         * @protected\n         * @override\n         */\n        doRender: function () {\n            var thisGroup = this.group;\n\n            thisGroup.removeAll();\n\n            var visualMapModel = this.visualMapModel;\n            var textGap = visualMapModel.get('textGap');\n            var textStyleModel = visualMapModel.textStyleModel;\n            var textFont = textStyleModel.getFont();\n            var textFill = textStyleModel.getTextColor();\n            var itemAlign = this._getItemAlign();\n            var itemSize = visualMapModel.itemSize;\n            var viewData = this._getViewData();\n            var endsText = viewData.endsText;\n            var showLabel = zrUtil.retrieve(visualMapModel.get('showLabel', true), !endsText);\n\n            endsText && this._renderEndsText(\n                thisGroup, endsText[0], itemSize, showLabel, itemAlign\n            );\n\n            zrUtil.each(viewData.viewPieceList, renderItem, this);\n\n            endsText && this._renderEndsText(\n                thisGroup, endsText[1], itemSize, showLabel, itemAlign\n            );\n\n            layout.box(\n                visualMapModel.get('orient'), thisGroup, visualMapModel.get('itemGap')\n            );\n\n            this.renderBackground(thisGroup);\n\n            this.positionGroup(thisGroup);\n\n            function renderItem(item) {\n                var piece = item.piece;\n\n                var itemGroup = new graphic.Group();\n                itemGroup.onclick = zrUtil.bind(this._onItemClick, this, piece);\n\n                this._enableHoverLink(itemGroup, item.indexInModelPieceList);\n\n                var representValue = visualMapModel.getRepresentValue(piece);\n\n                this._createItemSymbol(\n                    itemGroup, representValue, [0, 0, itemSize[0], itemSize[1]]\n                );\n\n                if (showLabel) {\n                    var visualState = this.visualMapModel.getValueState(representValue);\n\n                    itemGroup.add(new graphic.Text({\n                        style: {\n                            x: itemAlign === 'right' ? -textGap : itemSize[0] + textGap,\n                            y: itemSize[1] / 2,\n                            text: piece.text,\n                            textVerticalAlign: 'middle',\n                            textAlign: itemAlign,\n                            textFont: textFont,\n                            fill: textFill,\n                            opacity: visualState === 'outOfRange' ? 0.5 : 1\n                        }\n                    }));\n                }\n\n                thisGroup.add(itemGroup);\n            }\n        },\n\n        /**\n         * @private\n         */\n        _enableHoverLink: function (itemGroup, pieceIndex) {\n            itemGroup\n                .on('mouseover', zrUtil.bind(onHoverLink, this, 'highlight'))\n                .on('mouseout', zrUtil.bind(onHoverLink, this, 'downplay'));\n\n            function onHoverLink(method) {\n                var visualMapModel = this.visualMapModel;\n\n                visualMapModel.option.hoverLink && this.api.dispatchAction({\n                    type: method,\n                    batch: helper.convertDataIndex(\n                        visualMapModel.findTargetDataIndices(pieceIndex)\n                    )\n                });\n            }\n        },\n\n        /**\n         * @private\n         */\n        _getItemAlign: function () {\n            var visualMapModel = this.visualMapModel;\n            var modelOption = visualMapModel.option;\n\n            if (modelOption.orient === 'vertical') {\n                return helper.getItemAlign(\n                    visualMapModel, this.api, visualMapModel.itemSize\n                );\n            }\n            else { // horizontal, most case left unless specifying right.\n                var align = modelOption.align;\n                if (!align || align === 'auto') {\n                    align = 'left';\n                }\n                return align;\n            }\n        },\n\n        /**\n         * @private\n         */\n        _renderEndsText: function (group, text, itemSize, showLabel, itemAlign) {\n            if (!text) {\n                return;\n            }\n\n            var itemGroup = new graphic.Group();\n            var textStyleModel = this.visualMapModel.textStyleModel;\n\n            itemGroup.add(new graphic.Text({\n                style: {\n                    x: showLabel ? (itemAlign === 'right' ? itemSize[0] : 0) : itemSize[0] / 2,\n                    y: itemSize[1] / 2,\n                    textVerticalAlign: 'middle',\n                    textAlign: showLabel ? itemAlign : 'center',\n                    text: text,\n                    textFont: textStyleModel.getFont(),\n                    fill: textStyleModel.getTextColor()\n                }\n            }));\n\n            group.add(itemGroup);\n        },\n\n        /**\n         * @private\n         * @return {Object} {peiceList, endsText} The order is the same as screen pixel order.\n         */\n        _getViewData: function () {\n            var visualMapModel = this.visualMapModel;\n\n            var viewPieceList = zrUtil.map(visualMapModel.getPieceList(), function (piece, index) {\n                return {piece: piece, indexInModelPieceList: index};\n            });\n            var endsText = visualMapModel.get('text');\n\n            // Consider orient and inverse.\n            var orient = visualMapModel.get('orient');\n            var inverse = visualMapModel.get('inverse');\n\n            // Order of model pieceList is always [low, ..., high]\n            if (orient === 'horizontal' ? inverse : !inverse) {\n                viewPieceList.reverse();\n            }\n            // Origin order of endsText is [high, low]\n            else if (endsText) {\n                endsText = endsText.slice().reverse();\n            }\n\n            return {viewPieceList: viewPieceList, endsText: endsText};\n        },\n\n        /**\n         * @private\n         */\n        _createItemSymbol: function (group, representValue, shapeParam) {\n            group.add(symbolCreators.createSymbol(\n                this.getControllerVisual(representValue, 'symbol'),\n                shapeParam[0], shapeParam[1], shapeParam[2], shapeParam[3],\n                this.getControllerVisual(representValue, 'color')\n            ));\n        },\n\n        /**\n         * @private\n         */\n        _onItemClick: function (piece) {\n            var visualMapModel = this.visualMapModel;\n            var option = visualMapModel.option;\n            var selected = zrUtil.clone(option.selected);\n            var newKey = visualMapModel.getSelectedMapKey(piece);\n\n            if (option.selectedMode === 'single') {\n                selected[newKey] = true;\n                zrUtil.each(selected, function (o, key) {\n                    selected[key] = key === newKey;\n                });\n            }\n            else {\n                selected[newKey] = !selected[newKey];\n            }\n\n            this.api.dispatchAction({\n                type: 'selectDataRange',\n                from: this.uid,\n                visualMapId: this.visualMapModel.id,\n                selected: selected\n            });\n        }\n    });\n\n    module.exports = PiecewiseVisualMapView;\n\n\n\n/***/ }),\n/* 510 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * DataZoom component entry\n */\n\n\n    __webpack_require__(316).registerPreprocessor(\n        __webpack_require__(472)\n    );\n\n    __webpack_require__(473);\n    __webpack_require__(474);\n    __webpack_require__(506);\n    __webpack_require__(507);\n    __webpack_require__(475);\n\n\n\n/***/ }),\n/* 511 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * DataZoom component entry\n */\n\n\n    __webpack_require__(316).registerPreprocessor(\n        __webpack_require__(472)\n    );\n\n    __webpack_require__(473);\n    __webpack_require__(474);\n    __webpack_require__(508);\n    __webpack_require__(509);\n    __webpack_require__(475);\n\n\n\n/***/ }),\n/* 512 */,\n/* 513 */,\n/* 514 */,\n/* 515 */,\n/* 516 */,\n/* 517 */,\n/* 518 */,\n/* 519 */,\n/* 520 */,\n/* 521 */,\n/* 522 */,\n/* 523 */,\n/* 524 */,\n/* 525 */,\n/* 526 */,\n/* 527 */,\n/* 528 */,\n/* 529 */,\n/* 530 */,\n/* 531 */,\n/* 532 */,\n/* 533 */,\n/* 534 */,\n/* 535 */,\n/* 536 */,\n/* 537 */,\n/* 538 */,\n/* 539 */,\n/* 540 */,\n/* 541 */,\n/* 542 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar echarts = __webpack_require__(316);\n\n__webpack_require__(456);\n__webpack_require__(377);\n\n__webpack_require__(374);\n__webpack_require__(462);\n\n__webpack_require__(505);\nexports.default = {\n  name: 'barPercent',\n  props: {\n    className: {\n      type: String,\n      default: 'chart'\n    },\n    id: {\n      type: String,\n      default: 'chart'\n    },\n    width: {\n      type: String,\n      default: '200px'\n    },\n    height: {\n      type: String,\n      default: '200px'\n    }\n  },\n  data: function data() {\n    return {};\n  },\n  mounted: function mounted() {\n    this.initBar();\n  },\n\n  methods: {\n    initBar: function initBar() {\n      this.chart = echarts.init(document.getElementById(this.id));\n\n      var xAxisData = [];\n      var data = [];\n      for (var i = 0; i < 30; i++) {\n        xAxisData.push(i + '号');\n        data.push(Math.round(Math.random() * 2 + 3));\n      }\n\n      this.chart.setOption({\n        backgroundColor: '#08263a',\n        tooltip: {\n          trigger: 'axis'\n        },\n        xAxis: {\n          show: false,\n          data: xAxisData\n        },\n        visualMap: {\n          show: false,\n          min: 0,\n          max: 50,\n          dimension: 0,\n          inRange: {\n            color: ['#4a657a', '#308e92', '#b1cfa5', '#f5d69f', '#f5898b', '#ef5055']\n          }\n        },\n        yAxis: {\n          axisLine: {\n            show: false\n          },\n          axisLabel: {\n            textStyle: {\n              color: '#4a657a'\n            }\n          },\n          splitLine: {\n            show: true,\n            lineStyle: {\n              color: '#08263f'\n            }\n          },\n          axisTick: {}\n        },\n        series: [{\n          type: 'bar',\n          data: data,\n          name: '撸文数',\n          itemStyle: {\n            normal: {\n              barBorderRadius: 5,\n              shadowBlur: 10,\n              shadowColor: '#111'\n            }\n          },\n          animationEasing: 'elasticOut',\n          animationEasingUpdate: 'elasticOut',\n          animationDelay: function animationDelay(idx) {\n            return idx * 20;\n          },\n          animationDelayUpdate: function animationDelayUpdate(idx) {\n            return idx * 20;\n          }\n        }]\n      });\n    }\n  }\n};\n\n/***/ }),\n/* 543 */,\n/* 544 */,\n/* 545 */,\n/* 546 */,\n/* 547 */,\n/* 548 */,\n/* 549 */,\n/* 550 */,\n/* 551 */,\n/* 552 */,\n/* 553 */,\n/* 554 */,\n/* 555 */,\n/* 556 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _keyboard = __webpack_require__(710);\n\nvar _keyboard2 = _interopRequireDefault(_keyboard);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = {\n  components: { keyboardChart: _keyboard2.default }\n};\n\n/***/ }),\n/* 557 */,\n/* 558 */,\n/* 559 */,\n/* 560 */,\n/* 561 */,\n/* 562 */,\n/* 563 */,\n/* 564 */,\n/* 565 */,\n/* 566 */,\n/* 567 */,\n/* 568 */,\n/* 569 */,\n/* 570 */,\n/* 571 */,\n/* 572 */,\n/* 573 */,\n/* 574 */,\n/* 575 */,\n/* 576 */,\n/* 577 */,\n/* 578 */,\n/* 579 */,\n/* 580 */,\n/* 581 */,\n/* 582 */,\n/* 583 */,\n/* 584 */,\n/* 585 */,\n/* 586 */,\n/* 587 */,\n/* 588 */,\n/* 589 */,\n/* 590 */,\n/* 591 */,\n/* 592 */,\n/* 593 */,\n/* 594 */,\n/* 595 */,\n/* 596 */,\n/* 597 */,\n/* 598 */,\n/* 599 */,\n/* 600 */,\n/* 601 */,\n/* 602 */,\n/* 603 */,\n/* 604 */,\n/* 605 */,\n/* 606 */,\n/* 607 */,\n/* 608 */,\n/* 609 */,\n/* 610 */,\n/* 611 */,\n/* 612 */,\n/* 613 */,\n/* 614 */,\n/* 615 */,\n/* 616 */,\n/* 617 */,\n/* 618 */,\n/* 619 */,\n/* 620 */,\n/* 621 */,\n/* 622 */,\n/* 623 */,\n/* 624 */,\n/* 625 */,\n/* 626 */,\n/* 627 */,\n/* 628 */,\n/* 629 */,\n/* 630 */,\n/* 631 */,\n/* 632 */,\n/* 633 */,\n/* 634 */\n/***/ (function(module, exports, __webpack_require__) {\n\nexports = module.exports = __webpack_require__(284)(true);\n// imports\n\n\n// module\nexports.push([module.i, \".chart-container[data-v-cc70f942]{position:relative;width:100%;height:90%}\", \"\", {\"version\":3,\"sources\":[\"/Volumes/Work/Code/vue/vue-element-admin/src/views/charts/keyboard.vue\"],\"names\":[],\"mappings\":\"AACA,kCACI,kBAAmB,AACnB,WAAY,AACZ,UAAY,CACf\",\"file\":\"keyboard.vue\",\"sourcesContent\":[\"\\n.chart-container[data-v-cc70f942]{\\n    position: relative;\\n    width: 100%;\\n    height: 90%;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n\n// exports\n\n\n/***/ }),\n/* 635 */,\n/* 636 */,\n/* 637 */,\n/* 638 */,\n/* 639 */,\n/* 640 */,\n/* 641 */,\n/* 642 */,\n/* 643 */,\n/* 644 */,\n/* 645 */,\n/* 646 */,\n/* 647 */,\n/* 648 */,\n/* 649 */,\n/* 650 */,\n/* 651 */,\n/* 652 */,\n/* 653 */,\n/* 654 */,\n/* 655 */,\n/* 656 */,\n/* 657 */,\n/* 658 */,\n/* 659 */,\n/* 660 */,\n/* 661 */,\n/* 662 */,\n/* 663 */,\n/* 664 */,\n/* 665 */,\n/* 666 */,\n/* 667 */,\n/* 668 */,\n/* 669 */,\n/* 670 */,\n/* 671 */,\n/* 672 */,\n/* 673 */,\n/* 674 */,\n/* 675 */,\n/* 676 */,\n/* 677 */,\n/* 678 */,\n/* 679 */,\n/* 680 */,\n/* 681 */,\n/* 682 */,\n/* 683 */,\n/* 684 */,\n/* 685 */,\n/* 686 */,\n/* 687 */,\n/* 688 */,\n/* 689 */,\n/* 690 */,\n/* 691 */,\n/* 692 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(634);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(285)(\"777ca470\", content, true);\n\n/***/ }),\n/* 693 */,\n/* 694 */,\n/* 695 */,\n/* 696 */,\n/* 697 */,\n/* 698 */,\n/* 699 */,\n/* 700 */,\n/* 701 */,\n/* 702 */,\n/* 703 */,\n/* 704 */,\n/* 705 */,\n/* 706 */,\n/* 707 */,\n/* 708 */,\n/* 709 */,\n/* 710 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Component = __webpack_require__(1)(\n  /* script */\n  __webpack_require__(542),\n  /* template */\n  __webpack_require__(761),\n  /* styles */\n  null,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n/***/ }),\n/* 711 */,\n/* 712 */,\n/* 713 */,\n/* 714 */,\n/* 715 */,\n/* 716 */,\n/* 717 */,\n/* 718 */,\n/* 719 */,\n/* 720 */,\n/* 721 */,\n/* 722 */,\n/* 723 */,\n/* 724 */,\n/* 725 */,\n/* 726 */,\n/* 727 */,\n/* 728 */,\n/* 729 */,\n/* 730 */,\n/* 731 */,\n/* 732 */,\n/* 733 */,\n/* 734 */,\n/* 735 */,\n/* 736 */,\n/* 737 */,\n/* 738 */,\n/* 739 */,\n/* 740 */,\n/* 741 */,\n/* 742 */,\n/* 743 */,\n/* 744 */,\n/* 745 */,\n/* 746 */,\n/* 747 */,\n/* 748 */,\n/* 749 */,\n/* 750 */,\n/* 751 */,\n/* 752 */,\n/* 753 */,\n/* 754 */,\n/* 755 */,\n/* 756 */,\n/* 757 */,\n/* 758 */,\n/* 759 */,\n/* 760 */,\n/* 761 */\n/***/ (function(module, exports) {\n\nmodule.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    class: _vm.className,\n    style: ({\n      height: _vm.height,\n      width: _vm.width\n    }),\n    attrs: {\n      \"id\": _vm.id\n    }\n  })\n},staticRenderFns: []}\n\n/***/ }),\n/* 762 */,\n/* 763 */,\n/* 764 */,\n/* 765 */,\n/* 766 */,\n/* 767 */,\n/* 768 */,\n/* 769 */,\n/* 770 */,\n/* 771 */,\n/* 772 */,\n/* 773 */,\n/* 774 */\n/***/ (function(module, exports) {\n\nmodule.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"components-container\",\n    staticStyle: {\n      \"height\": \"100vh\"\n    }\n  }, [_c('div', {\n    staticClass: \"chart-container\"\n  }, [_c('keyboardChart', {\n    attrs: {\n      \"height\": \"100%\",\n      \"width\": \"100%\"\n    }\n  })], 1)])\n},staticRenderFns: []}\n\n/***/ })\n]));\n\n\n// WEBPACK FOOTER //\n// js/3.755852ebafebd67d5aa2.js","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"minimize\\\":true,\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-cc70f942\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./keyboard.vue\")\n}\nvar Component = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")(\n  /* script */\n  require(\"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./keyboard.vue\"),\n  /* template */\n  require(\"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-cc70f942\\\"}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./keyboard.vue\"),\n  /* styles */\n  injectStyle,\n  /* scopeId */\n  \"data-v-cc70f942\",\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/charts/keyboard.vue\n// module id = 287\n// module chunks = 3","/**\n * @module zrender/core/util\n */\n\n\n    // 用于处理merge时无法遍历Date等对象的问题\n    var BUILTIN_OBJECT = {\n        '[object Function]': 1,\n        '[object RegExp]': 1,\n        '[object Date]': 1,\n        '[object Error]': 1,\n        '[object CanvasGradient]': 1,\n        '[object CanvasPattern]': 1,\n        // For node-canvas\n        '[object Image]': 1,\n        '[object Canvas]': 1\n    };\n\n    var TYPED_ARRAY = {\n        '[object Int8Array]': 1,\n        '[object Uint8Array]': 1,\n        '[object Uint8ClampedArray]': 1,\n        '[object Int16Array]': 1,\n        '[object Uint16Array]': 1,\n        '[object Int32Array]': 1,\n        '[object Uint32Array]': 1,\n        '[object Float32Array]': 1,\n        '[object Float64Array]': 1\n    };\n\n    var objToString = Object.prototype.toString;\n\n    var arrayProto = Array.prototype;\n    var nativeForEach = arrayProto.forEach;\n    var nativeFilter = arrayProto.filter;\n    var nativeSlice = arrayProto.slice;\n    var nativeMap = arrayProto.map;\n    var nativeReduce = arrayProto.reduce;\n\n    /**\n     * Those data types can be cloned:\n     *     Plain object, Array, TypedArray, number, string, null, undefined.\n     * Those data types will be assgined using the orginal data:\n     *     BUILTIN_OBJECT\n     * Instance of user defined class will be cloned to a plain object, without\n     * properties in prototype.\n     * Other data types is not supported (not sure what will happen).\n     *\n     * Caution: do not support clone Date, for performance consideration.\n     * (There might be a large number of date in `series.data`).\n     * So date should not be modified in and out of echarts.\n     *\n     * @param {*} source\n     * @return {*} new\n     */\n    function clone(source) {\n        if (source == null || typeof source != 'object') {\n            return source;\n        }\n\n        var result = source;\n        var typeStr = objToString.call(source);\n\n        if (typeStr === '[object Array]') {\n            result = [];\n            for (var i = 0, len = source.length; i < len; i++) {\n                result[i] = clone(source[i]);\n            }\n        }\n        else if (TYPED_ARRAY[typeStr]) {\n            result = source.constructor.from(source);\n        }\n        else if (!BUILTIN_OBJECT[typeStr] && !isPrimitive(source) && !isDom(source)) {\n            result = {};\n            for (var key in source) {\n                if (source.hasOwnProperty(key)) {\n                    result[key] = clone(source[key]);\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * @memberOf module:zrender/core/util\n     * @param {*} target\n     * @param {*} source\n     * @param {boolean} [overwrite=false]\n     */\n    function merge(target, source, overwrite) {\n        // We should escapse that source is string\n        // and enter for ... in ...\n        if (!isObject(source) || !isObject(target)) {\n            return overwrite ? clone(source) : target;\n        }\n\n        for (var key in source) {\n            if (source.hasOwnProperty(key)) {\n                var targetProp = target[key];\n                var sourceProp = source[key];\n\n                if (isObject(sourceProp)\n                    && isObject(targetProp)\n                    && !isArray(sourceProp)\n                    && !isArray(targetProp)\n                    && !isDom(sourceProp)\n                    && !isDom(targetProp)\n                    && !isBuiltInObject(sourceProp)\n                    && !isBuiltInObject(targetProp)\n                    && !isPrimitive(sourceProp)\n                    && !isPrimitive(targetProp)\n                ) {\n                    // 如果需要递归覆盖，就递归调用merge\n                    merge(targetProp, sourceProp, overwrite);\n                }\n                else if (overwrite || !(key in target)) {\n                    // 否则只处理overwrite为true，或者在目标对象中没有此属性的情况\n                    // NOTE，在 target[key] 不存在的时候也是直接覆盖\n                    target[key] = clone(source[key], true);\n                }\n            }\n        }\n\n        return target;\n    }\n\n    /**\n     * @param {Array} targetAndSources The first item is target, and the rests are source.\n     * @param {boolean} [overwrite=false]\n     * @return {*} target\n     */\n    function mergeAll(targetAndSources, overwrite) {\n        var result = targetAndSources[0];\n        for (var i = 1, len = targetAndSources.length; i < len; i++) {\n            result = merge(result, targetAndSources[i], overwrite);\n        }\n        return result;\n    }\n\n    /**\n     * @param {*} target\n     * @param {*} source\n     * @memberOf module:zrender/core/util\n     */\n    function extend(target, source) {\n        for (var key in source) {\n            if (source.hasOwnProperty(key)) {\n                target[key] = source[key];\n            }\n        }\n        return target;\n    }\n\n    /**\n     * @param {*} target\n     * @param {*} source\n     * @param {boolen} [overlay=false]\n     * @memberOf module:zrender/core/util\n     */\n    function defaults(target, source, overlay) {\n        for (var key in source) {\n            if (source.hasOwnProperty(key)\n                && (overlay ? source[key] != null : target[key] == null)\n            ) {\n                target[key] = source[key];\n            }\n        }\n        return target;\n    }\n\n    function createCanvas() {\n        return document.createElement('canvas');\n    }\n    // FIXME\n    var _ctx;\n    function getContext() {\n        if (!_ctx) {\n            // Use util.createCanvas instead of createCanvas\n            // because createCanvas may be overwritten in different environment\n            _ctx = util.createCanvas().getContext('2d');\n        }\n        return _ctx;\n    }\n\n    /**\n     * 查询数组中元素的index\n     * @memberOf module:zrender/core/util\n     */\n    function indexOf(array, value) {\n        if (array) {\n            if (array.indexOf) {\n                return array.indexOf(value);\n            }\n            for (var i = 0, len = array.length; i < len; i++) {\n                if (array[i] === value) {\n                    return i;\n                }\n            }\n        }\n        return -1;\n    }\n\n    /**\n     * 构造类继承关系\n     *\n     * @memberOf module:zrender/core/util\n     * @param {Function} clazz 源类\n     * @param {Function} baseClazz 基类\n     */\n    function inherits(clazz, baseClazz) {\n        var clazzPrototype = clazz.prototype;\n        function F() {}\n        F.prototype = baseClazz.prototype;\n        clazz.prototype = new F();\n\n        for (var prop in clazzPrototype) {\n            clazz.prototype[prop] = clazzPrototype[prop];\n        }\n        clazz.prototype.constructor = clazz;\n        clazz.superClass = baseClazz;\n    }\n\n    /**\n     * @memberOf module:zrender/core/util\n     * @param {Object|Function} target\n     * @param {Object|Function} sorce\n     * @param {boolean} overlay\n     */\n    function mixin(target, source, overlay) {\n        target = 'prototype' in target ? target.prototype : target;\n        source = 'prototype' in source ? source.prototype : source;\n\n        defaults(target, source, overlay);\n    }\n\n    /**\n     * Consider typed array.\n     * @param {Array|TypedArray} data\n     */\n    function isArrayLike(data) {\n        if (! data) {\n            return;\n        }\n        if (typeof data == 'string') {\n            return false;\n        }\n        return typeof data.length == 'number';\n    }\n\n    /**\n     * 数组或对象遍历\n     * @memberOf module:zrender/core/util\n     * @param {Object|Array} obj\n     * @param {Function} cb\n     * @param {*} [context]\n     */\n    function each(obj, cb, context) {\n        if (!(obj && cb)) {\n            return;\n        }\n        if (obj.forEach && obj.forEach === nativeForEach) {\n            obj.forEach(cb, context);\n        }\n        else if (obj.length === +obj.length) {\n            for (var i = 0, len = obj.length; i < len; i++) {\n                cb.call(context, obj[i], i, obj);\n            }\n        }\n        else {\n            for (var key in obj) {\n                if (obj.hasOwnProperty(key)) {\n                    cb.call(context, obj[key], key, obj);\n                }\n            }\n        }\n    }\n\n    /**\n     * 数组映射\n     * @memberOf module:zrender/core/util\n     * @param {Array} obj\n     * @param {Function} cb\n     * @param {*} [context]\n     * @return {Array}\n     */\n    function map(obj, cb, context) {\n        if (!(obj && cb)) {\n            return;\n        }\n        if (obj.map && obj.map === nativeMap) {\n            return obj.map(cb, context);\n        }\n        else {\n            var result = [];\n            for (var i = 0, len = obj.length; i < len; i++) {\n                result.push(cb.call(context, obj[i], i, obj));\n            }\n            return result;\n        }\n    }\n\n    /**\n     * @memberOf module:zrender/core/util\n     * @param {Array} obj\n     * @param {Function} cb\n     * @param {Object} [memo]\n     * @param {*} [context]\n     * @return {Array}\n     */\n    function reduce(obj, cb, memo, context) {\n        if (!(obj && cb)) {\n            return;\n        }\n        if (obj.reduce && obj.reduce === nativeReduce) {\n            return obj.reduce(cb, memo, context);\n        }\n        else {\n            for (var i = 0, len = obj.length; i < len; i++) {\n                memo = cb.call(context, memo, obj[i], i, obj);\n            }\n            return memo;\n        }\n    }\n\n    /**\n     * 数组过滤\n     * @memberOf module:zrender/core/util\n     * @param {Array} obj\n     * @param {Function} cb\n     * @param {*} [context]\n     * @return {Array}\n     */\n    function filter(obj, cb, context) {\n        if (!(obj && cb)) {\n            return;\n        }\n        if (obj.filter && obj.filter === nativeFilter) {\n            return obj.filter(cb, context);\n        }\n        else {\n            var result = [];\n            for (var i = 0, len = obj.length; i < len; i++) {\n                if (cb.call(context, obj[i], i, obj)) {\n                    result.push(obj[i]);\n                }\n            }\n            return result;\n        }\n    }\n\n    /**\n     * 数组项查找\n     * @memberOf module:zrender/core/util\n     * @param {Array} obj\n     * @param {Function} cb\n     * @param {*} [context]\n     * @return {Array}\n     */\n    function find(obj, cb, context) {\n        if (!(obj && cb)) {\n            return;\n        }\n        for (var i = 0, len = obj.length; i < len; i++) {\n            if (cb.call(context, obj[i], i, obj)) {\n                return obj[i];\n            }\n        }\n    }\n\n    /**\n     * @memberOf module:zrender/core/util\n     * @param {Function} func\n     * @param {*} context\n     * @return {Function}\n     */\n    function bind(func, context) {\n        var args = nativeSlice.call(arguments, 2);\n        return function () {\n            return func.apply(context, args.concat(nativeSlice.call(arguments)));\n        };\n    }\n\n    /**\n     * @memberOf module:zrender/core/util\n     * @param {Function} func\n     * @return {Function}\n     */\n    function curry(func) {\n        var args = nativeSlice.call(arguments, 1);\n        return function () {\n            return func.apply(this, args.concat(nativeSlice.call(arguments)));\n        };\n    }\n\n    /**\n     * @memberOf module:zrender/core/util\n     * @param {*} value\n     * @return {boolean}\n     */\n    function isArray(value) {\n        return objToString.call(value) === '[object Array]';\n    }\n\n    /**\n     * @memberOf module:zrender/core/util\n     * @param {*} value\n     * @return {boolean}\n     */\n    function isFunction(value) {\n        return typeof value === 'function';\n    }\n\n    /**\n     * @memberOf module:zrender/core/util\n     * @param {*} value\n     * @return {boolean}\n     */\n    function isString(value) {\n        return objToString.call(value) === '[object String]';\n    }\n\n    /**\n     * @memberOf module:zrender/core/util\n     * @param {*} value\n     * @return {boolean}\n     */\n    function isObject(value) {\n        // Avoid a V8 JIT bug in Chrome 19-20.\n        // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.\n        var type = typeof value;\n        return type === 'function' || (!!value && type == 'object');\n    }\n\n    /**\n     * @memberOf module:zrender/core/util\n     * @param {*} value\n     * @return {boolean}\n     */\n    function isBuiltInObject(value) {\n        return !!BUILTIN_OBJECT[objToString.call(value)];\n    }\n\n    /**\n     * @memberOf module:zrender/core/util\n     * @param {*} value\n     * @return {boolean}\n     */\n    function isDom(value) {\n        return typeof value === 'object'\n            && typeof value.nodeType === 'number'\n            && typeof value.ownerDocument === 'object';\n    }\n\n    /**\n     * Whether is exactly NaN. Notice isNaN('a') returns true.\n     * @param {*} value\n     * @return {boolean}\n     */\n    function eqNaN(value) {\n        return value !== value;\n    }\n\n    /**\n     * If value1 is not null, then return value1, otherwise judget rest of values.\n     * @memberOf module:zrender/core/util\n     * @return {*} Final value\n     */\n    function retrieve(values) {\n        for (var i = 0, len = arguments.length; i < len; i++) {\n            if (arguments[i] != null) {\n                return arguments[i];\n            }\n        }\n    }\n\n    /**\n     * @memberOf module:zrender/core/util\n     * @param {Array} arr\n     * @param {number} startIndex\n     * @param {number} endIndex\n     * @return {Array}\n     */\n    function slice() {\n        return Function.call.apply(nativeSlice, arguments);\n    }\n\n    /**\n     * @memberOf module:zrender/core/util\n     * @param {boolean} condition\n     * @param {string} message\n     */\n    function assert(condition, message) {\n        if (!condition) {\n            throw new Error(message);\n        }\n    }\n\n    var primitiveKey = '__ec_primitive__';\n    /**\n     * Set an object as primitive to be ignored traversing children in clone or merge\n     */\n    function setAsPrimitive(obj) {\n        obj[primitiveKey] = true;\n    }\n\n    function isPrimitive(obj) {\n        return obj[primitiveKey];\n    }\n\n    /**\n     * @constructor\n     */\n    function HashMap(obj) {\n        obj && extend(this, obj);\n    }\n\n    // Add prefix to avoid conflict with Object.prototype.\n    var HASH_MAP_PREFIX = '_ec_';\n    var HASH_MAP_PREFIX_LENGTH = 4;\n\n    HashMap.prototype = {\n        constructor: HashMap,\n        // Do not provide `has` method to avoid defining what is `has`.\n        // (We usually treat `null` and `undefined` as the same, different\n        // from ES6 Map).\n        get: function (key) {\n            return this[HASH_MAP_PREFIX + key];\n        },\n        set: function (key, value) {\n            this[HASH_MAP_PREFIX + key] = value;\n            // Comparing with invocation chaining, `return value` is more commonly\n            // used in this case: `var someVal = map.set('a', genVal());`\n            return value;\n        },\n        // Although util.each can be performed on this hashMap directly, user\n        // should not use the exposed keys, who are prefixed.\n        each: function (cb, context) {\n            context !== void 0 && (cb = bind(cb, context));\n            for (var prefixedKey in this) {\n                this.hasOwnProperty(prefixedKey)\n                    && cb(this[prefixedKey], prefixedKey.slice(HASH_MAP_PREFIX_LENGTH));\n            }\n        },\n        // Do not use this method if performance sensitive.\n        removeKey: function (key) {\n            delete this[key];\n        }\n    };\n\n    function createHashMap() {\n        return new HashMap();\n    }\n\n    var util = {\n        inherits: inherits,\n        mixin: mixin,\n        clone: clone,\n        merge: merge,\n        mergeAll: mergeAll,\n        extend: extend,\n        defaults: defaults,\n        getContext: getContext,\n        createCanvas: createCanvas,\n        indexOf: indexOf,\n        slice: slice,\n        find: find,\n        isArrayLike: isArrayLike,\n        each: each,\n        map: map,\n        reduce: reduce,\n        filter: filter,\n        bind: bind,\n        curry: curry,\n        isArray: isArray,\n        isString: isString,\n        isObject: isObject,\n        isFunction: isFunction,\n        isBuiltInObject: isBuiltInObject,\n        isDom: isDom,\n        eqNaN: eqNaN,\n        retrieve: retrieve,\n        assert: assert,\n        setAsPrimitive: setAsPrimitive,\n        createHashMap: createHashMap,\n        noop: function () {}\n    };\n    module.exports = util;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/zrender/lib/core/util.js\n// module id = 315\n// module chunks = 0 1 2 3 4","// Enable DEV mode when using source code without build. which has no __DEV__ variable\n// In build process 'typeof __DEV__' will be replace with 'boolean'\n// So this code will be removed or disabled anyway after built.\nif (typeof __DEV__ === 'undefined') {\n    // In browser\n    if (typeof window !== 'undefined') {\n        window.__DEV__ = true;\n    }\n    // In node\n    else if (typeof global !== 'undefined') {\n        global.__DEV__ = true;\n    }\n}\n\n/*!\n * ECharts, a javascript interactive chart library.\n *\n * Copyright (c) 2015, Baidu Inc.\n * All rights reserved.\n *\n * LICENSE\n * https://github.com/ecomfe/echarts/blob/master/LICENSE.txt\n */\n\n/**\n * @module echarts\n */\n\n\n    var env = require('zrender/lib/core/env');\n\n    var GlobalModel = require('./model/Global');\n    var ExtensionAPI = require('./ExtensionAPI');\n    var CoordinateSystemManager = require('./CoordinateSystem');\n    var OptionManager = require('./model/OptionManager');\n\n    var ComponentModel = require('./model/Component');\n    var SeriesModel = require('./model/Series');\n\n    var ComponentView = require('./view/Component');\n    var ChartView = require('./view/Chart');\n    var graphic = require('./util/graphic');\n    var modelUtil = require('./util/model');\n    var throttle = require('./util/throttle');\n\n    var zrender = require('zrender');\n    var zrUtil = require('zrender/lib/core/util');\n    var colorTool = require('zrender/lib/tool/color');\n    var Eventful = require('zrender/lib/mixin/Eventful');\n    var timsort = require('zrender/lib/core/timsort');\n\n    var each = zrUtil.each;\n    var parseClassType = ComponentModel.parseClassType;\n\n    var PRIORITY_PROCESSOR_FILTER = 1000;\n    var PRIORITY_PROCESSOR_STATISTIC = 5000;\n\n\n    var PRIORITY_VISUAL_LAYOUT = 1000;\n    var PRIORITY_VISUAL_GLOBAL = 2000;\n    var PRIORITY_VISUAL_CHART = 3000;\n    var PRIORITY_VISUAL_COMPONENT = 4000;\n    // FIXME\n    // necessary?\n    var PRIORITY_VISUAL_BRUSH = 5000;\n\n    // Main process have three entries: `setOption`, `dispatchAction` and `resize`,\n    // where they must not be invoked nestedly, except the only case: invoke\n    // dispatchAction with updateMethod \"none\" in main process.\n    // This flag is used to carry out this rule.\n    // All events will be triggered out side main process (i.e. when !this[IN_MAIN_PROCESS]).\n    var IN_MAIN_PROCESS = '__flagInMainProcess';\n    var HAS_GRADIENT_OR_PATTERN_BG = '__hasGradientOrPatternBg';\n    var OPTION_UPDATED = '__optionUpdated';\n    var ACTION_REG = /^[a-zA-Z0-9_]+$/;\n\n    function createRegisterEventWithLowercaseName(method) {\n        return function (eventName, handler, context) {\n            // Event name is all lowercase\n            eventName = eventName && eventName.toLowerCase();\n            Eventful.prototype[method].call(this, eventName, handler, context);\n        };\n    }\n\n    /**\n     * @module echarts~MessageCenter\n     */\n    function MessageCenter() {\n        Eventful.call(this);\n    }\n    MessageCenter.prototype.on = createRegisterEventWithLowercaseName('on');\n    MessageCenter.prototype.off = createRegisterEventWithLowercaseName('off');\n    MessageCenter.prototype.one = createRegisterEventWithLowercaseName('one');\n    zrUtil.mixin(MessageCenter, Eventful);\n\n    /**\n     * @module echarts~ECharts\n     */\n    function ECharts (dom, theme, opts) {\n        opts = opts || {};\n\n        // Get theme by name\n        if (typeof theme === 'string') {\n            theme = themeStorage[theme];\n        }\n\n        /**\n         * @type {string}\n         */\n        this.id;\n        /**\n         * Group id\n         * @type {string}\n         */\n        this.group;\n        /**\n         * @type {HTMLDomElement}\n         * @private\n         */\n        this._dom = dom;\n        /**\n         * @type {module:zrender/ZRender}\n         * @private\n         */\n        var zr = this._zr = zrender.init(dom, {\n            renderer: opts.renderer || 'canvas',\n            devicePixelRatio: opts.devicePixelRatio,\n            width: opts.width,\n            height: opts.height\n        });\n\n        /**\n         * Expect 60 pfs.\n         * @type {Function}\n         * @private\n         */\n        this._throttledZrFlush = throttle.throttle(zrUtil.bind(zr.flush, zr), 17);\n\n        /**\n         * @type {Object}\n         * @private\n         */\n        this._theme = zrUtil.clone(theme);\n\n        /**\n         * @type {Array.<module:echarts/view/Chart>}\n         * @private\n         */\n        this._chartsViews = [];\n\n        /**\n         * @type {Object.<string, module:echarts/view/Chart>}\n         * @private\n         */\n        this._chartsMap = {};\n\n        /**\n         * @type {Array.<module:echarts/view/Component>}\n         * @private\n         */\n        this._componentsViews = [];\n\n        /**\n         * @type {Object.<string, module:echarts/view/Component>}\n         * @private\n         */\n        this._componentsMap = {};\n\n        /**\n         * @type {module:echarts/ExtensionAPI}\n         * @private\n         */\n        this._api = new ExtensionAPI(this);\n\n        /**\n         * @type {module:echarts/CoordinateSystem}\n         * @private\n         */\n        this._coordSysMgr = new CoordinateSystemManager();\n\n        Eventful.call(this);\n\n        /**\n         * @type {module:echarts~MessageCenter}\n         * @private\n         */\n        this._messageCenter = new MessageCenter();\n\n        // Init mouse events\n        this._initEvents();\n\n        // In case some people write `window.onresize = chart.resize`\n        this.resize = zrUtil.bind(this.resize, this);\n\n        // Can't dispatch action during rendering procedure\n        this._pendingActions = [];\n        // Sort on demand\n        function prioritySortFunc(a, b) {\n            return a.prio - b.prio;\n        }\n        timsort(visualFuncs, prioritySortFunc);\n        timsort(dataProcessorFuncs, prioritySortFunc);\n\n        zr.animation.on('frame', this._onframe, this);\n    }\n\n    var echartsProto = ECharts.prototype;\n\n    echartsProto._onframe = function () {\n        // Lazy update\n        if (this[OPTION_UPDATED]) {\n            var silent = this[OPTION_UPDATED].silent;\n\n            this[IN_MAIN_PROCESS] = true;\n\n            updateMethods.prepareAndUpdate.call(this);\n\n            this[IN_MAIN_PROCESS] = false;\n\n            this[OPTION_UPDATED] = false;\n\n            flushPendingActions.call(this, silent);\n\n            triggerUpdatedEvent.call(this, silent);\n        }\n    };\n    /**\n     * @return {HTMLDomElement}\n     */\n    echartsProto.getDom = function () {\n        return this._dom;\n    };\n\n    /**\n     * @return {module:zrender~ZRender}\n     */\n    echartsProto.getZr = function () {\n        return this._zr;\n    };\n\n    /**\n     * Usage:\n     * chart.setOption(option, notMerge, lazyUpdate);\n     * chart.setOption(option, {\n     *     notMerge: ...,\n     *     lazyUpdate: ...,\n     *     silent: ...\n     * });\n     *\n     * @param {Object} option\n     * @param {Object|boolean} [opts] opts or notMerge.\n     * @param {boolean} [opts.notMerge=false]\n     * @param {boolean} [opts.lazyUpdate=false] Useful when setOption frequently.\n     */\n    echartsProto.setOption = function (option, notMerge, lazyUpdate) {\n        if (__DEV__) {\n            zrUtil.assert(!this[IN_MAIN_PROCESS], '`setOption` should not be called during main process.');\n        }\n\n        var silent;\n        if (zrUtil.isObject(notMerge)) {\n            lazyUpdate = notMerge.lazyUpdate;\n            silent = notMerge.silent;\n            notMerge = notMerge.notMerge;\n        }\n\n        this[IN_MAIN_PROCESS] = true;\n\n        if (!this._model || notMerge) {\n            var optionManager = new OptionManager(this._api);\n            var theme = this._theme;\n            var ecModel = this._model = new GlobalModel(null, null, theme, optionManager);\n            ecModel.init(null, null, theme, optionManager);\n        }\n\n        // FIXME\n        // ugly\n        this.__lastOnlyGraphic = !!(option && option.graphic);\n        zrUtil.each(option, function (o, mainType) {\n            mainType !== 'graphic' && (this.__lastOnlyGraphic = false);\n        }, this);\n\n        this._model.setOption(option, optionPreprocessorFuncs);\n\n        if (lazyUpdate) {\n            this[OPTION_UPDATED] = {silent: silent};\n            this[IN_MAIN_PROCESS] = false;\n        }\n        else {\n            updateMethods.prepareAndUpdate.call(this);\n            // Ensure zr refresh sychronously, and then pixel in canvas can be\n            // fetched after `setOption`.\n            this._zr.flush();\n\n            this[OPTION_UPDATED] = false;\n            this[IN_MAIN_PROCESS] = false;\n\n            flushPendingActions.call(this, silent);\n            triggerUpdatedEvent.call(this, silent);\n        }\n    };\n\n    /**\n     * @DEPRECATED\n     */\n    echartsProto.setTheme = function () {\n        console.log('ECharts#setTheme() is DEPRECATED in ECharts 3.0');\n    };\n\n    /**\n     * @return {module:echarts/model/Global}\n     */\n    echartsProto.getModel = function () {\n        return this._model;\n    };\n\n    /**\n     * @return {Object}\n     */\n    echartsProto.getOption = function () {\n        return this._model && this._model.getOption();\n    };\n\n    /**\n     * @return {number}\n     */\n    echartsProto.getWidth = function () {\n        return this._zr.getWidth();\n    };\n\n    /**\n     * @return {number}\n     */\n    echartsProto.getHeight = function () {\n        return this._zr.getHeight();\n    };\n\n    /**\n     * Get canvas which has all thing rendered\n     * @param {Object} opts\n     * @param {string} [opts.backgroundColor]\n     */\n    echartsProto.getRenderedCanvas = function (opts) {\n        if (!env.canvasSupported) {\n            return;\n        }\n        opts = opts || {};\n        opts.pixelRatio = opts.pixelRatio || 1;\n        opts.backgroundColor = opts.backgroundColor\n            || this._model.get('backgroundColor');\n        var zr = this._zr;\n        var list = zr.storage.getDisplayList();\n        // Stop animations\n        zrUtil.each(list, function (el) {\n            el.stopAnimation(true);\n        });\n        return zr.painter.getRenderedCanvas(opts);\n    };\n    /**\n     * @return {string}\n     * @param {Object} opts\n     * @param {string} [opts.type='png']\n     * @param {string} [opts.pixelRatio=1]\n     * @param {string} [opts.backgroundColor]\n     * @param {string} [opts.excludeComponents]\n     */\n    echartsProto.getDataURL = function (opts) {\n        opts = opts || {};\n        var excludeComponents = opts.excludeComponents;\n        var ecModel = this._model;\n        var excludesComponentViews = [];\n        var self = this;\n\n        each(excludeComponents, function (componentType) {\n            ecModel.eachComponent({\n                mainType: componentType\n            }, function (component) {\n                var view = self._componentsMap[component.__viewId];\n                if (!view.group.ignore) {\n                    excludesComponentViews.push(view);\n                    view.group.ignore = true;\n                }\n            });\n        });\n\n        var url = this.getRenderedCanvas(opts).toDataURL(\n            'image/' + (opts && opts.type || 'png')\n        );\n\n        each(excludesComponentViews, function (view) {\n            view.group.ignore = false;\n        });\n        return url;\n    };\n\n\n    /**\n     * @return {string}\n     * @param {Object} opts\n     * @param {string} [opts.type='png']\n     * @param {string} [opts.pixelRatio=1]\n     * @param {string} [opts.backgroundColor]\n     */\n    echartsProto.getConnectedDataURL = function (opts) {\n        if (!env.canvasSupported) {\n            return;\n        }\n        var groupId = this.group;\n        var mathMin = Math.min;\n        var mathMax = Math.max;\n        var MAX_NUMBER = Infinity;\n        if (connectedGroups[groupId]) {\n            var left = MAX_NUMBER;\n            var top = MAX_NUMBER;\n            var right = -MAX_NUMBER;\n            var bottom = -MAX_NUMBER;\n            var canvasList = [];\n            var dpr = (opts && opts.pixelRatio) || 1;\n\n            zrUtil.each(instances, function (chart, id) {\n                if (chart.group === groupId) {\n                    var canvas = chart.getRenderedCanvas(\n                        zrUtil.clone(opts)\n                    );\n                    var boundingRect = chart.getDom().getBoundingClientRect();\n                    left = mathMin(boundingRect.left, left);\n                    top = mathMin(boundingRect.top, top);\n                    right = mathMax(boundingRect.right, right);\n                    bottom = mathMax(boundingRect.bottom, bottom);\n                    canvasList.push({\n                        dom: canvas,\n                        left: boundingRect.left,\n                        top: boundingRect.top\n                    });\n                }\n            });\n\n            left *= dpr;\n            top *= dpr;\n            right *= dpr;\n            bottom *= dpr;\n            var width = right - left;\n            var height = bottom - top;\n            var targetCanvas = zrUtil.createCanvas();\n            targetCanvas.width = width;\n            targetCanvas.height = height;\n            var zr = zrender.init(targetCanvas);\n\n            each(canvasList, function (item) {\n                var img = new graphic.Image({\n                    style: {\n                        x: item.left * dpr - left,\n                        y: item.top * dpr - top,\n                        image: item.dom\n                    }\n                });\n                zr.add(img);\n            });\n            zr.refreshImmediately();\n\n            return targetCanvas.toDataURL('image/' + (opts && opts.type || 'png'));\n        }\n        else {\n            return this.getDataURL(opts);\n        }\n    };\n\n    /**\n     * Convert from logical coordinate system to pixel coordinate system.\n     * See CoordinateSystem#convertToPixel.\n     * @param {string|Object} finder\n     *        If string, e.g., 'geo', means {geoIndex: 0}.\n     *        If Object, could contain some of these properties below:\n     *        {\n     *            seriesIndex / seriesId / seriesName,\n     *            geoIndex / geoId, geoName,\n     *            bmapIndex / bmapId / bmapName,\n     *            xAxisIndex / xAxisId / xAxisName,\n     *            yAxisIndex / yAxisId / yAxisName,\n     *            gridIndex / gridId / gridName,\n     *            ... (can be extended)\n     *        }\n     * @param {Array|number} value\n     * @return {Array|number} result\n     */\n    echartsProto.convertToPixel = zrUtil.curry(doConvertPixel, 'convertToPixel');\n\n    /**\n     * Convert from pixel coordinate system to logical coordinate system.\n     * See CoordinateSystem#convertFromPixel.\n     * @param {string|Object} finder\n     *        If string, e.g., 'geo', means {geoIndex: 0}.\n     *        If Object, could contain some of these properties below:\n     *        {\n     *            seriesIndex / seriesId / seriesName,\n     *            geoIndex / geoId / geoName,\n     *            bmapIndex / bmapId / bmapName,\n     *            xAxisIndex / xAxisId / xAxisName,\n     *            yAxisIndex / yAxisId / yAxisName\n     *            gridIndex / gridId / gridName,\n     *            ... (can be extended)\n     *        }\n     * @param {Array|number} value\n     * @return {Array|number} result\n     */\n    echartsProto.convertFromPixel = zrUtil.curry(doConvertPixel, 'convertFromPixel');\n\n    function doConvertPixel(methodName, finder, value) {\n        var ecModel = this._model;\n        var coordSysList = this._coordSysMgr.getCoordinateSystems();\n        var result;\n\n        finder = modelUtil.parseFinder(ecModel, finder);\n\n        for (var i = 0; i < coordSysList.length; i++) {\n            var coordSys = coordSysList[i];\n            if (coordSys[methodName]\n                && (result = coordSys[methodName](ecModel, finder, value)) != null\n            ) {\n                return result;\n            }\n        }\n\n        if (__DEV__) {\n            console.warn(\n                'No coordinate system that supports ' + methodName + ' found by the given finder.'\n            );\n        }\n    }\n\n    /**\n     * Is the specified coordinate systems or components contain the given pixel point.\n     * @param {string|Object} finder\n     *        If string, e.g., 'geo', means {geoIndex: 0}.\n     *        If Object, could contain some of these properties below:\n     *        {\n     *            seriesIndex / seriesId / seriesName,\n     *            geoIndex / geoId / geoName,\n     *            bmapIndex / bmapId / bmapName,\n     *            xAxisIndex / xAxisId / xAxisName,\n     *            yAxisIndex / yAxisId / yAxisName\n     *            gridIndex / gridId / gridName,\n     *            ... (can be extended)\n     *        }\n     * @param {Array|number} value\n     * @return {boolean} result\n     */\n    echartsProto.containPixel = function (finder, value) {\n        var ecModel = this._model;\n        var result;\n\n        finder = modelUtil.parseFinder(ecModel, finder);\n\n        zrUtil.each(finder, function (models, key) {\n            key.indexOf('Models') >= 0 && zrUtil.each(models, function (model) {\n                var coordSys = model.coordinateSystem;\n                if (coordSys && coordSys.containPoint) {\n                    result |= !!coordSys.containPoint(value);\n                }\n                else if (key === 'seriesModels') {\n                    var view = this._chartsMap[model.__viewId];\n                    if (view && view.containPoint) {\n                        result |= view.containPoint(value, model);\n                    }\n                    else {\n                        if (__DEV__) {\n                            console.warn(key + ': ' + (view\n                                ? 'The found component do not support containPoint.'\n                                : 'No view mapping to the found component.'\n                            ));\n                        }\n                    }\n                }\n                else {\n                    if (__DEV__) {\n                        console.warn(key + ': containPoint is not supported');\n                    }\n                }\n            }, this);\n        }, this);\n\n        return !!result;\n    };\n\n    /**\n     * Get visual from series or data.\n     * @param {string|Object} finder\n     *        If string, e.g., 'series', means {seriesIndex: 0}.\n     *        If Object, could contain some of these properties below:\n     *        {\n     *            seriesIndex / seriesId / seriesName,\n     *            dataIndex / dataIndexInside\n     *        }\n     *        If dataIndex is not specified, series visual will be fetched,\n     *        but not data item visual.\n     *        If all of seriesIndex, seriesId, seriesName are not specified,\n     *        visual will be fetched from first series.\n     * @param {string} visualType 'color', 'symbol', 'symbolSize'\n     */\n    echartsProto.getVisual = function (finder, visualType) {\n        var ecModel = this._model;\n\n        finder = modelUtil.parseFinder(ecModel, finder, {defaultMainType: 'series'});\n\n        var seriesModel = finder.seriesModel;\n\n        if (__DEV__) {\n            if (!seriesModel) {\n                console.warn('There is no specified seires model');\n            }\n        }\n\n        var data = seriesModel.getData();\n\n        var dataIndexInside = finder.hasOwnProperty('dataIndexInside')\n            ? finder.dataIndexInside\n            : finder.hasOwnProperty('dataIndex')\n            ? data.indexOfRawIndex(finder.dataIndex)\n            : null;\n\n        return dataIndexInside != null\n            ? data.getItemVisual(dataIndexInside, visualType)\n            : data.getVisual(visualType);\n    };\n\n\n    var updateMethods = {\n\n        /**\n         * @param {Object} payload\n         * @private\n         */\n        update: function (payload) {\n            // console.time && console.time('update');\n\n            var ecModel = this._model;\n            var api = this._api;\n            var coordSysMgr = this._coordSysMgr;\n            var zr = this._zr;\n            // update before setOption\n            if (!ecModel) {\n                return;\n            }\n\n            // Fixme First time update ?\n            ecModel.restoreData();\n\n            // TODO\n            // Save total ecModel here for undo/redo (after restoring data and before processing data).\n            // Undo (restoration of total ecModel) can be carried out in 'action' or outside API call.\n\n            // Create new coordinate system each update\n            // In LineView may save the old coordinate system and use it to get the orignal point\n            coordSysMgr.create(this._model, this._api);\n\n            processData.call(this, ecModel, api);\n\n            stackSeriesData.call(this, ecModel);\n\n            coordSysMgr.update(ecModel, api);\n\n            doVisualEncoding.call(this, ecModel, payload);\n\n            doRender.call(this, ecModel, payload);\n\n            // Set background\n            var backgroundColor = ecModel.get('backgroundColor') || 'transparent';\n\n            var painter = zr.painter;\n            // TODO all use clearColor ?\n            if (painter.isSingleCanvas && painter.isSingleCanvas()) {\n                zr.configLayer(0, {\n                    clearColor: backgroundColor\n                });\n            }\n            else {\n                // In IE8\n                if (!env.canvasSupported) {\n                    var colorArr = colorTool.parse(backgroundColor);\n                    backgroundColor = colorTool.stringify(colorArr, 'rgb');\n                    if (colorArr[3] === 0) {\n                        backgroundColor = 'transparent';\n                    }\n                }\n                if (backgroundColor.colorStops || backgroundColor.image) {\n                    // Gradient background\n                    // FIXME Fixed layer？\n                    zr.configLayer(0, {\n                        clearColor: backgroundColor\n                    });\n                    this[HAS_GRADIENT_OR_PATTERN_BG] = true;\n\n                    this._dom.style.background = 'transparent';\n                }\n                else {\n                    if (this[HAS_GRADIENT_OR_PATTERN_BG]) {\n                        zr.configLayer(0, {\n                            clearColor: null\n                        });\n                    }\n                    this[HAS_GRADIENT_OR_PATTERN_BG] = false;\n\n                    this._dom.style.background = backgroundColor;\n                }\n            }\n\n            // console.time && console.timeEnd('update');\n        },\n\n        /**\n         * @param {Object} payload\n         * @private\n         */\n        updateView: function (payload) {\n            var ecModel = this._model;\n\n            // update before setOption\n            if (!ecModel) {\n                return;\n            }\n\n            ecModel.eachSeries(function (seriesModel) {\n                seriesModel.getData().clearAllVisual();\n            });\n\n            doVisualEncoding.call(this, ecModel, payload);\n\n            invokeUpdateMethod.call(this, 'updateView', ecModel, payload);\n        },\n\n        /**\n         * @param {Object} payload\n         * @private\n         */\n        updateVisual: function (payload) {\n            var ecModel = this._model;\n\n            // update before setOption\n            if (!ecModel) {\n                return;\n            }\n\n            ecModel.eachSeries(function (seriesModel) {\n                seriesModel.getData().clearAllVisual();\n            });\n\n            doVisualEncoding.call(this, ecModel, payload, true);\n\n            invokeUpdateMethod.call(this, 'updateVisual', ecModel, payload);\n        },\n\n        /**\n         * @param {Object} payload\n         * @private\n         */\n        updateLayout: function (payload) {\n            var ecModel = this._model;\n\n            // update before setOption\n            if (!ecModel) {\n                return;\n            }\n\n            doLayout.call(this, ecModel, payload);\n\n            invokeUpdateMethod.call(this, 'updateLayout', ecModel, payload);\n        },\n\n        /**\n         * @param {Object} payload\n         * @private\n         */\n        prepareAndUpdate: function (payload) {\n            var ecModel = this._model;\n\n            prepareView.call(this, 'component', ecModel);\n\n            prepareView.call(this, 'chart', ecModel);\n\n            // FIXME\n            // ugly\n            if (this.__lastOnlyGraphic) {\n                each(this._componentsViews, function (componentView) {\n                    var componentModel = componentView.__model;\n                    if (componentModel && componentModel.mainType === 'graphic') {\n                        componentView.render(componentModel, ecModel, this._api, payload);\n                        updateZ(componentModel, componentView);\n                    }\n                }, this);\n                this.__lastOnlyGraphic = false;\n            }\n            else {\n                updateMethods.update.call(this, payload);\n            }\n        }\n    };\n\n    /**\n     * @private\n     */\n    function updateDirectly(ecIns, method, payload, mainType, subType) {\n        var ecModel = ecIns._model;\n        var query = {};\n        query[mainType + 'Id'] = payload[mainType + 'Id'];\n        query[mainType + 'Index'] = payload[mainType + 'Index'];\n        query[mainType + 'Name'] = payload[mainType + 'Name'];\n\n        var condition = {mainType: mainType, query: query};\n        subType && (condition.subType = subType); // subType may be '' by parseClassType;\n\n        // If dispatchAction before setOption, do nothing.\n        ecModel && ecModel.eachComponent(condition, function (model, index) {\n            var view = ecIns[\n                mainType === 'series' ? '_chartsMap' : '_componentsMap'\n            ][model.__viewId];\n            if (view && view.__alive) {\n                view[method](model, ecModel, ecIns._api, payload);\n            }\n        }, ecIns);\n    }\n\n    /**\n     * Resize the chart\n     * @param {Object} opts\n     * @param {number} [opts.width] Can be 'auto' (the same as null/undefined)\n     * @param {number} [opts.height] Can be 'auto' (the same as null/undefined)\n     * @param {boolean} [opts.silent=false]\n     */\n    echartsProto.resize = function (opts) {\n        if (__DEV__) {\n            zrUtil.assert(!this[IN_MAIN_PROCESS], '`resize` should not be called during main process.');\n        }\n\n        this[IN_MAIN_PROCESS] = true;\n\n        this._zr.resize(opts);\n\n        var optionChanged = this._model && this._model.resetOption('media');\n        var updateMethod = optionChanged ? 'prepareAndUpdate' : 'update';\n\n        updateMethods[updateMethod].call(this);\n\n        // Resize loading effect\n        this._loadingFX && this._loadingFX.resize();\n\n        this[IN_MAIN_PROCESS] = false;\n\n        var silent = opts && opts.silent;\n\n        flushPendingActions.call(this, silent);\n\n        triggerUpdatedEvent.call(this, silent);\n    };\n\n    /**\n     * Show loading effect\n     * @param  {string} [name='default']\n     * @param  {Object} [cfg]\n     */\n    echartsProto.showLoading = function (name, cfg) {\n        if (zrUtil.isObject(name)) {\n            cfg = name;\n            name = '';\n        }\n        name = name || 'default';\n\n        this.hideLoading();\n        if (!loadingEffects[name]) {\n            if (__DEV__) {\n                console.warn('Loading effects ' + name + ' not exists.');\n            }\n            return;\n        }\n        var el = loadingEffects[name](this._api, cfg);\n        var zr = this._zr;\n        this._loadingFX = el;\n\n        zr.add(el);\n    };\n\n    /**\n     * Hide loading effect\n     */\n    echartsProto.hideLoading = function () {\n        this._loadingFX && this._zr.remove(this._loadingFX);\n        this._loadingFX = null;\n    };\n\n    /**\n     * @param {Object} eventObj\n     * @return {Object}\n     */\n    echartsProto.makeActionFromEvent = function (eventObj) {\n        var payload = zrUtil.extend({}, eventObj);\n        payload.type = eventActionMap[eventObj.type];\n        return payload;\n    };\n\n    /**\n     * @pubilc\n     * @param {Object} payload\n     * @param {string} [payload.type] Action type\n     * @param {Object|boolean} [opt] If pass boolean, means opt.silent\n     * @param {boolean} [opt.silent=false] Whether trigger events.\n     * @param {boolean} [opt.flush=undefined]\n     *                  true: Flush immediately, and then pixel in canvas can be fetched\n     *                      immediately. Caution: it might affect performance.\n     *                  false: Not not flush.\n     *                  undefined: Auto decide whether perform flush.\n     */\n    echartsProto.dispatchAction = function (payload, opt) {\n        if (!zrUtil.isObject(opt)) {\n            opt = {silent: !!opt};\n        }\n\n        if (!actions[payload.type]) {\n            return;\n        }\n\n        // if (__DEV__) {\n        //     zrUtil.assert(\n        //         !this[IN_MAIN_PROCESS],\n        //         '`dispatchAction` should not be called during main process.'\n        //         + 'unless updateMathod is \"none\".'\n        //     );\n        // }\n\n        // May dispatchAction in rendering procedure\n        if (this[IN_MAIN_PROCESS]) {\n            this._pendingActions.push(payload);\n            return;\n        }\n\n        doDispatchAction.call(this, payload, opt.silent);\n\n        if (opt.flush) {\n            this._zr.flush(true);\n        }\n        else if (opt.flush !== false && env.browser.weChat) {\n            // In WeChat embeded browser, `requestAnimationFrame` and `setInterval`\n            // hang when sliding page (on touch event), which cause that zr does not\n            // refresh util user interaction finished, which is not expected.\n            // But `dispatchAction` may be called too frequently when pan on touch\n            // screen, which impacts performance if do not throttle them.\n            this._throttledZrFlush();\n        }\n\n        flushPendingActions.call(this, opt.silent);\n\n        triggerUpdatedEvent.call(this, opt.silent);\n    };\n\n    function doDispatchAction(payload, silent) {\n        var payloadType = payload.type;\n        var actionWrap = actions[payloadType];\n        var actionInfo = actionWrap.actionInfo;\n\n        var cptType = (actionInfo.update || 'update').split(':');\n        var updateMethod = cptType.pop();\n        cptType = cptType[0] && parseClassType(cptType[0]);\n\n        this[IN_MAIN_PROCESS] = true;\n\n        var payloads = [payload];\n        var batched = false;\n        // Batch action\n        if (payload.batch) {\n            batched = true;\n            payloads = zrUtil.map(payload.batch, function (item) {\n                item = zrUtil.defaults(zrUtil.extend({}, item), payload);\n                item.batch = null;\n                return item;\n            });\n        }\n\n        var eventObjBatch = [];\n        var eventObj;\n        var isHighDown = payloadType === 'highlight' || payloadType === 'downplay';\n\n        for (var i = 0; i < payloads.length; i++) {\n            var batchItem = payloads[i];\n            // Action can specify the event by return it.\n            eventObj = actionWrap.action(batchItem, this._model);\n            // Emit event outside\n            eventObj = eventObj || zrUtil.extend({}, batchItem);\n            // Convert type to eventType\n            eventObj.type = actionInfo.event || eventObj.type;\n            eventObjBatch.push(eventObj);\n\n            // light update does not perform data process, layout and visual.\n            if (isHighDown) {\n                // method, payload, mainType, subType\n                updateDirectly(this, updateMethod, batchItem, 'series');\n            }\n            else if (cptType) {\n                updateDirectly(this, updateMethod, batchItem, cptType.main, cptType.sub);\n            }\n        }\n\n        if (updateMethod !== 'none' && !isHighDown && !cptType) {\n            // Still dirty\n            if (this[OPTION_UPDATED]) {\n                // FIXME Pass payload ?\n                updateMethods.prepareAndUpdate.call(this, payload);\n                this[OPTION_UPDATED] = false;\n            }\n            else {\n                updateMethods[updateMethod].call(this, payload);\n            }\n        }\n\n        // Follow the rule of action batch\n        if (batched) {\n            eventObj = {\n                type: actionInfo.event || payloadType,\n                batch: eventObjBatch\n            };\n        }\n        else {\n            eventObj = eventObjBatch[0];\n        }\n\n        this[IN_MAIN_PROCESS] = false;\n\n        !silent && this._messageCenter.trigger(eventObj.type, eventObj);\n    }\n\n    function flushPendingActions(silent) {\n        var pendingActions = this._pendingActions;\n        while (pendingActions.length) {\n            var payload = pendingActions.shift();\n            doDispatchAction.call(this, payload, silent);\n        }\n    }\n\n    function triggerUpdatedEvent(silent) {\n        !silent && this.trigger('updated');\n    }\n\n    /**\n     * Register event\n     * @method\n     */\n    echartsProto.on = createRegisterEventWithLowercaseName('on');\n    echartsProto.off = createRegisterEventWithLowercaseName('off');\n    echartsProto.one = createRegisterEventWithLowercaseName('one');\n\n    /**\n     * @param {string} methodName\n     * @private\n     */\n    function invokeUpdateMethod(methodName, ecModel, payload) {\n        var api = this._api;\n\n        // Update all components\n        each(this._componentsViews, function (component) {\n            var componentModel = component.__model;\n            component[methodName](componentModel, ecModel, api, payload);\n\n            updateZ(componentModel, component);\n        }, this);\n\n        // Upate all charts\n        ecModel.eachSeries(function (seriesModel, idx) {\n            var chart = this._chartsMap[seriesModel.__viewId];\n            chart[methodName](seriesModel, ecModel, api, payload);\n\n            updateZ(seriesModel, chart);\n\n            updateProgressiveAndBlend(seriesModel, chart);\n        }, this);\n\n        // If use hover layer\n        updateHoverLayerStatus(this._zr, ecModel);\n    }\n\n    /**\n     * Prepare view instances of charts and components\n     * @param  {module:echarts/model/Global} ecModel\n     * @private\n     */\n    function prepareView(type, ecModel) {\n        var isComponent = type === 'component';\n        var viewList = isComponent ? this._componentsViews : this._chartsViews;\n        var viewMap = isComponent ? this._componentsMap : this._chartsMap;\n        var zr = this._zr;\n\n        for (var i = 0; i < viewList.length; i++) {\n            viewList[i].__alive = false;\n        }\n\n        ecModel[isComponent ? 'eachComponent' : 'eachSeries'](function (componentType, model) {\n            if (isComponent) {\n                if (componentType === 'series') {\n                    return;\n                }\n            }\n            else {\n                model = componentType;\n            }\n\n            // Consider: id same and type changed.\n            var viewId = model.id + '_' + model.type;\n            var view = viewMap[viewId];\n            if (!view) {\n                var classType = parseClassType(model.type);\n                var Clazz = isComponent\n                    ? ComponentView.getClass(classType.main, classType.sub)\n                    : ChartView.getClass(classType.sub);\n                if (Clazz) {\n                    view = new Clazz();\n                    view.init(ecModel, this._api);\n                    viewMap[viewId] = view;\n                    viewList.push(view);\n                    zr.add(view.group);\n                }\n                else {\n                    // Error\n                    return;\n                }\n            }\n\n            model.__viewId = viewId;\n            view.__alive = true;\n            view.__id = viewId;\n            view.__model = model;\n        }, this);\n\n        for (var i = 0; i < viewList.length;) {\n            var view = viewList[i];\n            if (!view.__alive) {\n                zr.remove(view.group);\n                view.dispose(ecModel, this._api);\n                viewList.splice(i, 1);\n                delete viewMap[view.__id];\n            }\n            else {\n                i++;\n            }\n        }\n    }\n\n    /**\n     * Processor data in each series\n     *\n     * @param {module:echarts/model/Global} ecModel\n     * @private\n     */\n    function processData(ecModel, api) {\n        each(dataProcessorFuncs, function (process) {\n            process.func(ecModel, api);\n        });\n    }\n\n    /**\n     * @private\n     */\n    function stackSeriesData(ecModel) {\n        var stackedDataMap = {};\n        ecModel.eachSeries(function (series) {\n            var stack = series.get('stack');\n            var data = series.getData();\n            if (stack && data.type === 'list') {\n                var previousStack = stackedDataMap[stack];\n                if (previousStack) {\n                    data.stackedOn = previousStack;\n                }\n                stackedDataMap[stack] = data;\n            }\n        });\n    }\n\n    /**\n     * Layout before each chart render there series, special visual encoding stage\n     *\n     * @param {module:echarts/model/Global} ecModel\n     * @private\n     */\n    function doLayout(ecModel, payload) {\n        var api = this._api;\n        each(visualFuncs, function (visual) {\n            if (visual.isLayout) {\n                visual.func(ecModel, api, payload);\n            }\n        });\n    }\n\n    /**\n     * Encode visual infomation from data after data processing\n     *\n     * @param {module:echarts/model/Global} ecModel\n     * @param {object} layout\n     * @param {boolean} [excludesLayout]\n     * @private\n     */\n    function doVisualEncoding(ecModel, payload, excludesLayout) {\n        var api = this._api;\n        ecModel.clearColorPalette();\n        ecModel.eachSeries(function (seriesModel) {\n            seriesModel.clearColorPalette();\n        });\n        each(visualFuncs, function (visual) {\n            (!excludesLayout || !visual.isLayout)\n                && visual.func(ecModel, api, payload);\n        });\n    }\n\n    /**\n     * Render each chart and component\n     * @private\n     */\n    function doRender(ecModel, payload) {\n        var api = this._api;\n        // Render all components\n        each(this._componentsViews, function (componentView) {\n            var componentModel = componentView.__model;\n            componentView.render(componentModel, ecModel, api, payload);\n\n            updateZ(componentModel, componentView);\n        }, this);\n\n        each(this._chartsViews, function (chart) {\n            chart.__alive = false;\n        }, this);\n\n        // Render all charts\n        ecModel.eachSeries(function (seriesModel, idx) {\n            var chartView = this._chartsMap[seriesModel.__viewId];\n            chartView.__alive = true;\n            chartView.render(seriesModel, ecModel, api, payload);\n\n            chartView.group.silent = !!seriesModel.get('silent');\n\n            updateZ(seriesModel, chartView);\n\n            updateProgressiveAndBlend(seriesModel, chartView);\n\n        }, this);\n\n        // If use hover layer\n        updateHoverLayerStatus(this._zr, ecModel);\n\n        // Remove groups of unrendered charts\n        each(this._chartsViews, function (chart) {\n            if (!chart.__alive) {\n                chart.remove(ecModel, api);\n            }\n        }, this);\n    }\n\n    var MOUSE_EVENT_NAMES = [\n        'click', 'dblclick', 'mouseover', 'mouseout', 'mousemove',\n        'mousedown', 'mouseup', 'globalout', 'contextmenu'\n    ];\n    /**\n     * @private\n     */\n    echartsProto._initEvents = function () {\n        each(MOUSE_EVENT_NAMES, function (eveName) {\n            this._zr.on(eveName, function (e) {\n                var ecModel = this.getModel();\n                var el = e.target;\n                var params;\n\n                // no e.target when 'globalout'.\n                if (eveName === 'globalout') {\n                    params = {};\n                }\n                else if (el && el.dataIndex != null) {\n                    var dataModel = el.dataModel || ecModel.getSeriesByIndex(el.seriesIndex);\n                    params = dataModel && dataModel.getDataParams(el.dataIndex, el.dataType) || {};\n                }\n                // If element has custom eventData of components\n                else if (el && el.eventData) {\n                    params = zrUtil.extend({}, el.eventData);\n                }\n\n                if (params) {\n                    params.event = e;\n                    params.type = eveName;\n                    this.trigger(eveName, params);\n                }\n\n            }, this);\n        }, this);\n\n        each(eventActionMap, function (actionType, eventType) {\n            this._messageCenter.on(eventType, function (event) {\n                this.trigger(eventType, event);\n            }, this);\n        }, this);\n    };\n\n    /**\n     * @return {boolean}\n     */\n    echartsProto.isDisposed = function () {\n        return this._disposed;\n    };\n\n    /**\n     * Clear\n     */\n    echartsProto.clear = function () {\n        this.setOption({ series: [] }, true);\n    };\n    /**\n     * Dispose instance\n     */\n    echartsProto.dispose = function () {\n        if (this._disposed) {\n            if (__DEV__) {\n                console.warn('Instance ' + this.id + ' has been disposed');\n            }\n            return;\n        }\n        this._disposed = true;\n\n        var api = this._api;\n        var ecModel = this._model;\n\n        each(this._componentsViews, function (component) {\n            component.dispose(ecModel, api);\n        });\n        each(this._chartsViews, function (chart) {\n            chart.dispose(ecModel, api);\n        });\n\n        // Dispose after all views disposed\n        this._zr.dispose();\n\n        delete instances[this.id];\n    };\n\n    zrUtil.mixin(ECharts, Eventful);\n\n    function updateHoverLayerStatus(zr, ecModel) {\n        var storage = zr.storage;\n        var elCount = 0;\n        storage.traverse(function (el) {\n            if (!el.isGroup) {\n                elCount++;\n            }\n        });\n        if (elCount > ecModel.get('hoverLayerThreshold') && !env.node) {\n            storage.traverse(function (el) {\n                if (!el.isGroup) {\n                    el.useHoverLayer = true;\n                }\n            });\n        }\n    }\n    /**\n     * Update chart progressive and blend.\n     * @param {module:echarts/model/Series|module:echarts/model/Component} model\n     * @param {module:echarts/view/Component|module:echarts/view/Chart} view\n     */\n    function updateProgressiveAndBlend(seriesModel, chartView) {\n        // Progressive configuration\n        var elCount = 0;\n        chartView.group.traverse(function (el) {\n            if (el.type !== 'group' && !el.ignore) {\n                elCount++;\n            }\n        });\n        var frameDrawNum = +seriesModel.get('progressive');\n        var needProgressive = elCount > seriesModel.get('progressiveThreshold') && frameDrawNum && !env.node;\n        if (needProgressive) {\n            chartView.group.traverse(function (el) {\n                // FIXME marker and other components\n                if (!el.isGroup) {\n                    el.progressive = needProgressive ?\n                        Math.floor(elCount++ / frameDrawNum) : -1;\n                    if (needProgressive) {\n                        el.stopAnimation(true);\n                    }\n                }\n            });\n        }\n\n        // Blend configration\n        var blendMode = seriesModel.get('blendMode') || null;\n        if (__DEV__) {\n            if (!env.canvasSupported && blendMode && blendMode !== 'source-over') {\n                console.warn('Only canvas support blendMode');\n            }\n        }\n        chartView.group.traverse(function (el) {\n            // FIXME marker and other components\n            if (!el.isGroup) {\n                el.setStyle('blend', blendMode);\n            }\n        });\n    }\n    /**\n     * @param {module:echarts/model/Series|module:echarts/model/Component} model\n     * @param {module:echarts/view/Component|module:echarts/view/Chart} view\n     */\n    function updateZ(model, view) {\n        var z = model.get('z');\n        var zlevel = model.get('zlevel');\n        // Set z and zlevel\n        view.group.traverse(function (el) {\n            if (el.type !== 'group') {\n                z != null && (el.z = z);\n                zlevel != null && (el.zlevel = zlevel);\n            }\n        });\n    }\n    /**\n     * @type {Array.<Function>}\n     * @inner\n     */\n    var actions = [];\n\n    /**\n     * Map eventType to actionType\n     * @type {Object}\n     */\n    var eventActionMap = {};\n\n    /**\n     * Data processor functions of each stage\n     * @type {Array.<Object.<string, Function>>}\n     * @inner\n     */\n    var dataProcessorFuncs = [];\n\n    /**\n     * @type {Array.<Function>}\n     * @inner\n     */\n    var optionPreprocessorFuncs = [];\n\n    /**\n     * Visual encoding functions of each stage\n     * @type {Array.<Object.<string, Function>>}\n     * @inner\n     */\n    var visualFuncs = [];\n    /**\n     * Theme storage\n     * @type {Object.<key, Object>}\n     */\n    var themeStorage = {};\n    /**\n     * Loading effects\n     */\n    var loadingEffects = {};\n\n\n    var instances = {};\n    var connectedGroups = {};\n\n    var idBase = new Date() - 0;\n    var groupIdBase = new Date() - 0;\n    var DOM_ATTRIBUTE_KEY = '_echarts_instance_';\n    /**\n     * @alias module:echarts\n     */\n    var echarts = {\n        /**\n         * @type {number}\n         */\n        version: '3.4.0',\n        dependencies: {\n            zrender: '3.3.0'\n        }\n    };\n\n    function enableConnect(chart) {\n\n        var STATUS_PENDING = 0;\n        var STATUS_UPDATING = 1;\n        var STATUS_UPDATED = 2;\n        var STATUS_KEY = '__connectUpdateStatus';\n        function updateConnectedChartsStatus(charts, status) {\n            for (var i = 0; i < charts.length; i++) {\n                var otherChart = charts[i];\n                otherChart[STATUS_KEY] = status;\n            }\n        }\n        zrUtil.each(eventActionMap, function (actionType, eventType) {\n            chart._messageCenter.on(eventType, function (event) {\n                if (connectedGroups[chart.group] && chart[STATUS_KEY] !== STATUS_PENDING) {\n                    var action = chart.makeActionFromEvent(event);\n                    var otherCharts = [];\n\n                    zrUtil.each(instances, function (otherChart) {\n                        if (otherChart !== chart && otherChart.group === chart.group) {\n                            otherCharts.push(otherChart);\n                        }\n                    });\n\n                    updateConnectedChartsStatus(otherCharts, STATUS_PENDING);\n                    each(otherCharts, function (otherChart) {\n                        if (otherChart[STATUS_KEY] !== STATUS_UPDATING) {\n                            otherChart.dispatchAction(action);\n                        }\n                    });\n                    updateConnectedChartsStatus(otherCharts, STATUS_UPDATED);\n                }\n            });\n        });\n\n    }\n    /**\n     * @param {HTMLDomElement} dom\n     * @param {Object} [theme]\n     * @param {Object} opts\n     * @param {number} [opts.devicePixelRatio] Use window.devicePixelRatio by default\n     * @param {string} [opts.renderer] Currently only 'canvas' is supported.\n     * @param {number} [opts.width] Use clientWidth of the input `dom` by default.\n     *                              Can be 'auto' (the same as null/undefined)\n     * @param {number} [opts.height] Use clientHeight of the input `dom` by default.\n     *                               Can be 'auto' (the same as null/undefined)\n     */\n    echarts.init = function (dom, theme, opts) {\n        if (__DEV__) {\n            // Check version\n            if ((zrender.version.replace('.', '') - 0) < (echarts.dependencies.zrender.replace('.', '') - 0)) {\n                throw new Error(\n                    'ZRender ' + zrender.version\n                    + ' is too old for ECharts ' + echarts.version\n                    + '. Current version need ZRender '\n                    + echarts.dependencies.zrender + '+'\n                );\n            }\n            if (!dom) {\n                throw new Error('Initialize failed: invalid dom.');\n            }\n            if (zrUtil.isDom(dom) && dom.nodeName.toUpperCase() !== 'CANVAS' && (!dom.clientWidth || !dom.clientHeight)) {\n                console.warn('Can\\'t get dom width or height');\n            }\n        }\n\n        var chart = new ECharts(dom, theme, opts);\n        chart.id = 'ec_' + idBase++;\n        instances[chart.id] = chart;\n\n        dom.setAttribute &&\n            dom.setAttribute(DOM_ATTRIBUTE_KEY, chart.id);\n\n        enableConnect(chart);\n\n        return chart;\n    };\n\n    /**\n     * @return {string|Array.<module:echarts~ECharts>} groupId\n     */\n    echarts.connect = function (groupId) {\n        // Is array of charts\n        if (zrUtil.isArray(groupId)) {\n            var charts = groupId;\n            groupId = null;\n            // If any chart has group\n            zrUtil.each(charts, function (chart) {\n                if (chart.group != null) {\n                    groupId = chart.group;\n                }\n            });\n            groupId = groupId || ('g_' + groupIdBase++);\n            zrUtil.each(charts, function (chart) {\n                chart.group = groupId;\n            });\n        }\n        connectedGroups[groupId] = true;\n        return groupId;\n    };\n\n    /**\n     * @return {string} groupId\n     */\n    echarts.disConnect = function (groupId) {\n        connectedGroups[groupId] = false;\n    };\n\n    /**\n     * Dispose a chart instance\n     * @param  {module:echarts~ECharts|HTMLDomElement|string} chart\n     */\n    echarts.dispose = function (chart) {\n        if (zrUtil.isDom(chart)) {\n            chart = echarts.getInstanceByDom(chart);\n        }\n        else if (typeof chart === 'string') {\n            chart = instances[chart];\n        }\n        if ((chart instanceof ECharts) && !chart.isDisposed()) {\n            chart.dispose();\n        }\n    };\n\n    /**\n     * @param  {HTMLDomElement} dom\n     * @return {echarts~ECharts}\n     */\n    echarts.getInstanceByDom = function (dom) {\n        var key = dom.getAttribute(DOM_ATTRIBUTE_KEY);\n        return instances[key];\n    };\n    /**\n     * @param {string} key\n     * @return {echarts~ECharts}\n     */\n    echarts.getInstanceById = function (key) {\n        return instances[key];\n    };\n\n    /**\n     * Register theme\n     */\n    echarts.registerTheme = function (name, theme) {\n        themeStorage[name] = theme;\n    };\n\n    /**\n     * Register option preprocessor\n     * @param {Function} preprocessorFunc\n     */\n    echarts.registerPreprocessor = function (preprocessorFunc) {\n        optionPreprocessorFuncs.push(preprocessorFunc);\n    };\n\n    /**\n     * @param {number} [priority=1000]\n     * @param {Function} processorFunc\n     */\n    echarts.registerProcessor = function (priority, processorFunc) {\n        if (typeof priority === 'function') {\n            processorFunc = priority;\n            priority = PRIORITY_PROCESSOR_FILTER;\n        }\n        if (__DEV__) {\n            if (isNaN(priority)) {\n                throw new Error('Unkown processor priority');\n            }\n        }\n        dataProcessorFuncs.push({\n            prio: priority,\n            func: processorFunc\n        });\n    };\n\n    /**\n     * Usage:\n     * registerAction('someAction', 'someEvent', function () { ... });\n     * registerAction('someAction', function () { ... });\n     * registerAction(\n     *     {type: 'someAction', event: 'someEvent', update: 'updateView'},\n     *     function () { ... }\n     * );\n     *\n     * @param {(string|Object)} actionInfo\n     * @param {string} actionInfo.type\n     * @param {string} [actionInfo.event]\n     * @param {string} [actionInfo.update]\n     * @param {string} [eventName]\n     * @param {Function} action\n     */\n    echarts.registerAction = function (actionInfo, eventName, action) {\n        if (typeof eventName === 'function') {\n            action = eventName;\n            eventName = '';\n        }\n        var actionType = zrUtil.isObject(actionInfo)\n            ? actionInfo.type\n            : ([actionInfo, actionInfo = {\n                event: eventName\n            }][0]);\n\n        // Event name is all lowercase\n        actionInfo.event = (actionInfo.event || actionType).toLowerCase();\n        eventName = actionInfo.event;\n\n        // Validate action type and event name.\n        zrUtil.assert(ACTION_REG.test(actionType) && ACTION_REG.test(eventName));\n\n        if (!actions[actionType]) {\n            actions[actionType] = {action: action, actionInfo: actionInfo};\n        }\n        eventActionMap[eventName] = actionType;\n    };\n\n    /**\n     * @param {string} type\n     * @param {*} CoordinateSystem\n     */\n    echarts.registerCoordinateSystem = function (type, CoordinateSystem) {\n        CoordinateSystemManager.register(type, CoordinateSystem);\n    };\n\n    /**\n     * Layout is a special stage of visual encoding\n     * Most visual encoding like color are common for different chart\n     * But each chart has it's own layout algorithm\n     *\n     * @param {number} [priority=1000]\n     * @param {Function} layoutFunc\n     */\n    echarts.registerLayout = function (priority, layoutFunc) {\n        if (typeof priority === 'function') {\n            layoutFunc = priority;\n            priority = PRIORITY_VISUAL_LAYOUT;\n        }\n        if (__DEV__) {\n            if (isNaN(priority)) {\n                throw new Error('Unkown layout priority');\n            }\n        }\n        visualFuncs.push({\n            prio: priority,\n            func: layoutFunc,\n            isLayout: true\n        });\n    };\n\n    /**\n     * @param {number} [priority=3000]\n     * @param {Function} visualFunc\n     */\n    echarts.registerVisual = function (priority, visualFunc) {\n        if (typeof priority === 'function') {\n            visualFunc = priority;\n            priority = PRIORITY_VISUAL_CHART;\n        }\n        if (__DEV__) {\n            if (isNaN(priority)) {\n                throw new Error('Unkown visual priority');\n            }\n        }\n        visualFuncs.push({\n            prio: priority,\n            func: visualFunc\n        });\n    };\n\n    /**\n     * @param {string} name\n     */\n    echarts.registerLoading = function (name, loadingFx) {\n        loadingEffects[name] = loadingFx;\n    };\n\n    /**\n     * @param {Object} opts\n     * @param {string} [superClass]\n     */\n    echarts.extendComponentModel = function (opts/*, superClass*/) {\n        // var Clazz = ComponentModel;\n        // if (superClass) {\n        //     var classType = parseClassType(superClass);\n        //     Clazz = ComponentModel.getClass(classType.main, classType.sub, true);\n        // }\n        return ComponentModel.extend(opts);\n    };\n\n    /**\n     * @param {Object} opts\n     * @param {string} [superClass]\n     */\n    echarts.extendComponentView = function (opts/*, superClass*/) {\n        // var Clazz = ComponentView;\n        // if (superClass) {\n        //     var classType = parseClassType(superClass);\n        //     Clazz = ComponentView.getClass(classType.main, classType.sub, true);\n        // }\n        return ComponentView.extend(opts);\n    };\n\n    /**\n     * @param {Object} opts\n     * @param {string} [superClass]\n     */\n    echarts.extendSeriesModel = function (opts/*, superClass*/) {\n        // var Clazz = SeriesModel;\n        // if (superClass) {\n        //     superClass = 'series.' + superClass.replace('series.', '');\n        //     var classType = parseClassType(superClass);\n        //     Clazz = ComponentModel.getClass(classType.main, classType.sub, true);\n        // }\n        return SeriesModel.extend(opts);\n    };\n\n    /**\n     * @param {Object} opts\n     * @param {string} [superClass]\n     */\n    echarts.extendChartView = function (opts/*, superClass*/) {\n        // var Clazz = ChartView;\n        // if (superClass) {\n        //     superClass = superClass.replace('series.', '');\n        //     var classType = parseClassType(superClass);\n        //     Clazz = ChartView.getClass(classType.main, true);\n        // }\n        return ChartView.extend(opts);\n    };\n\n    /**\n     * ZRender need a canvas context to do measureText.\n     * But in node environment canvas may be created by node-canvas.\n     * So we need to specify how to create a canvas instead of using document.createElement('canvas')\n     *\n     * Be careful of using it in the browser.\n     *\n     * @param {Function} creator\n     * @example\n     *     var Canvas = require('canvas');\n     *     var echarts = require('echarts');\n     *     echarts.setCanvasCreator(function () {\n     *         // Small size is enough.\n     *         return new Canvas(32, 32);\n     *     });\n     */\n    echarts.setCanvasCreator = function (creator) {\n        zrUtil.createCanvas = creator;\n    };\n\n    echarts.registerVisual(PRIORITY_VISUAL_GLOBAL, require('./visual/seriesColor'));\n    echarts.registerPreprocessor(require('./preprocessor/backwardCompat'));\n    echarts.registerLoading('default', require('./loading/default'));\n\n    // Default action\n    echarts.registerAction({\n        type: 'highlight',\n        event: 'highlight',\n        update: 'highlight'\n    }, zrUtil.noop);\n    echarts.registerAction({\n        type: 'downplay',\n        event: 'downplay',\n        update: 'downplay'\n    }, zrUtil.noop);\n\n\n    // --------\n    // Exports\n    // --------\n    //\n    echarts.List = require('./data/List');\n    echarts.Model = require('./model/Model');\n\n    echarts.graphic = require('./util/graphic');\n    echarts.number = require('./util/number');\n    echarts.format = require('./util/format');\n    echarts.throttle = throttle.throttle;\n    echarts.matrix = require('zrender/lib/core/matrix');\n    echarts.vector = require('zrender/lib/core/vector');\n    echarts.color = require('zrender/lib/tool/color');\n\n    echarts.util = {};\n    each([\n            'map', 'each', 'filter', 'indexOf', 'inherits', 'reduce', 'filter',\n            'bind', 'curry', 'isArray', 'isString', 'isObject', 'isFunction',\n            'extend', 'defaults', 'clone'\n        ],\n        function (name) {\n            echarts.util[name] = zrUtil[name];\n        }\n    );\n\n    // PRIORITY\n    echarts.PRIORITY = {\n        PROCESSOR: {\n            FILTER: PRIORITY_PROCESSOR_FILTER,\n            STATISTIC: PRIORITY_PROCESSOR_STATISTIC\n        },\n        VISUAL: {\n            LAYOUT: PRIORITY_VISUAL_LAYOUT,\n            GLOBAL: PRIORITY_VISUAL_GLOBAL,\n            CHART: PRIORITY_VISUAL_CHART,\n            COMPONENT: PRIORITY_VISUAL_COMPONENT,\n            BRUSH: PRIORITY_VISUAL_BRUSH\n        }\n    };\n\n    module.exports = echarts;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/echarts.js\n// module id = 316\n// module chunks = 0 1 2 3 4","'use strict';\n\n\n    var zrUtil = require('zrender/lib/core/util');\n\n    var pathTool = require('zrender/lib/tool/path');\n    var round = Math.round;\n    var Path = require('zrender/lib/graphic/Path');\n    var colorTool = require('zrender/lib/tool/color');\n    var matrix = require('zrender/lib/core/matrix');\n    var vector = require('zrender/lib/core/vector');\n\n    var graphic = {};\n\n    graphic.Group = require('zrender/lib/container/Group');\n\n    graphic.Image = require('zrender/lib/graphic/Image');\n\n    graphic.Text = require('zrender/lib/graphic/Text');\n\n    graphic.Circle = require('zrender/lib/graphic/shape/Circle');\n\n    graphic.Sector = require('zrender/lib/graphic/shape/Sector');\n\n    graphic.Ring = require('zrender/lib/graphic/shape/Ring');\n\n    graphic.Polygon = require('zrender/lib/graphic/shape/Polygon');\n\n    graphic.Polyline = require('zrender/lib/graphic/shape/Polyline');\n\n    graphic.Rect = require('zrender/lib/graphic/shape/Rect');\n\n    graphic.Line = require('zrender/lib/graphic/shape/Line');\n\n    graphic.BezierCurve = require('zrender/lib/graphic/shape/BezierCurve');\n\n    graphic.Arc = require('zrender/lib/graphic/shape/Arc');\n\n    graphic.CompoundPath = require('zrender/lib/graphic/CompoundPath');\n\n    graphic.LinearGradient = require('zrender/lib/graphic/LinearGradient');\n\n    graphic.RadialGradient = require('zrender/lib/graphic/RadialGradient');\n\n    graphic.BoundingRect = require('zrender/lib/core/BoundingRect');\n\n    /**\n     * Extend shape with parameters\n     */\n    graphic.extendShape = function (opts) {\n        return Path.extend(opts);\n    };\n\n    /**\n     * Extend path\n     */\n    graphic.extendPath = function (pathData, opts) {\n        return pathTool.extendFromString(pathData, opts);\n    };\n\n    /**\n     * Create a path element from path data string\n     * @param {string} pathData\n     * @param {Object} opts\n     * @param {module:zrender/core/BoundingRect} rect\n     * @param {string} [layout=cover] 'center' or 'cover'\n     */\n    graphic.makePath = function (pathData, opts, rect, layout) {\n        var path = pathTool.createFromString(pathData, opts);\n        var boundingRect = path.getBoundingRect();\n        if (rect) {\n            var aspect = boundingRect.width / boundingRect.height;\n\n            if (layout === 'center') {\n                // Set rect to center, keep width / height ratio.\n                var width = rect.height * aspect;\n                var height;\n                if (width <= rect.width) {\n                    height = rect.height;\n                }\n                else {\n                    width = rect.width;\n                    height = width / aspect;\n                }\n                var cx = rect.x + rect.width / 2;\n                var cy = rect.y + rect.height / 2;\n\n                rect.x = cx - width / 2;\n                rect.y = cy - height / 2;\n                rect.width = width;\n                rect.height = height;\n            }\n\n            graphic.resizePath(path, rect);\n        }\n        return path;\n    };\n\n    graphic.mergePath = pathTool.mergePath,\n\n    /**\n     * Resize a path to fit the rect\n     * @param {module:zrender/graphic/Path} path\n     * @param {Object} rect\n     */\n    graphic.resizePath = function (path, rect) {\n        if (!path.applyTransform) {\n            return;\n        }\n\n        var pathRect = path.getBoundingRect();\n\n        var m = pathRect.calculateTransform(rect);\n\n        path.applyTransform(m);\n    };\n\n    /**\n     * Sub pixel optimize line for canvas\n     *\n     * @param {Object} param\n     * @param {Object} [param.shape]\n     * @param {number} [param.shape.x1]\n     * @param {number} [param.shape.y1]\n     * @param {number} [param.shape.x2]\n     * @param {number} [param.shape.y2]\n     * @param {Object} [param.style]\n     * @param {number} [param.style.lineWidth]\n     * @return {Object} Modified param\n     */\n    graphic.subPixelOptimizeLine = function (param) {\n        var subPixelOptimize = graphic.subPixelOptimize;\n        var shape = param.shape;\n        var lineWidth = param.style.lineWidth;\n\n        if (round(shape.x1 * 2) === round(shape.x2 * 2)) {\n            shape.x1 = shape.x2 = subPixelOptimize(shape.x1, lineWidth, true);\n        }\n        if (round(shape.y1 * 2) === round(shape.y2 * 2)) {\n            shape.y1 = shape.y2 = subPixelOptimize(shape.y1, lineWidth, true);\n        }\n        return param;\n    };\n\n    /**\n     * Sub pixel optimize rect for canvas\n     *\n     * @param {Object} param\n     * @param {Object} [param.shape]\n     * @param {number} [param.shape.x]\n     * @param {number} [param.shape.y]\n     * @param {number} [param.shape.width]\n     * @param {number} [param.shape.height]\n     * @param {Object} [param.style]\n     * @param {number} [param.style.lineWidth]\n     * @return {Object} Modified param\n     */\n    graphic.subPixelOptimizeRect = function (param) {\n        var subPixelOptimize = graphic.subPixelOptimize;\n        var shape = param.shape;\n        var lineWidth = param.style.lineWidth;\n        var originX = shape.x;\n        var originY = shape.y;\n        var originWidth = shape.width;\n        var originHeight = shape.height;\n        shape.x = subPixelOptimize(shape.x, lineWidth, true);\n        shape.y = subPixelOptimize(shape.y, lineWidth, true);\n        shape.width = Math.max(\n            subPixelOptimize(originX + originWidth, lineWidth, false) - shape.x,\n            originWidth === 0 ? 0 : 1\n        );\n        shape.height = Math.max(\n            subPixelOptimize(originY + originHeight, lineWidth, false) - shape.y,\n            originHeight === 0 ? 0 : 1\n        );\n        return param;\n    };\n\n    /**\n     * Sub pixel optimize for canvas\n     *\n     * @param {number} position Coordinate, such as x, y\n     * @param {number} lineWidth Should be nonnegative integer.\n     * @param {boolean=} positiveOrNegative Default false (negative).\n     * @return {number} Optimized position.\n     */\n    graphic.subPixelOptimize = function (position, lineWidth, positiveOrNegative) {\n        // Assure that (position + lineWidth / 2) is near integer edge,\n        // otherwise line will be fuzzy in canvas.\n        var doubledPosition = round(position * 2);\n        return (doubledPosition + round(lineWidth)) % 2 === 0\n            ? doubledPosition / 2\n            : (doubledPosition + (positiveOrNegative ? 1 : -1)) / 2;\n    };\n\n    function hasFillOrStroke(fillOrStroke) {\n        return fillOrStroke != null && fillOrStroke != 'none';\n    }\n\n    function liftColor(color) {\n        return typeof color === 'string' ? colorTool.lift(color, -0.1) : color;\n    }\n\n    /**\n     * @private\n     */\n    function cacheElementStl(el) {\n        if (el.__hoverStlDirty) {\n            var stroke = el.style.stroke;\n            var fill = el.style.fill;\n\n            // Create hoverStyle on mouseover\n            var hoverStyle = el.__hoverStl;\n            hoverStyle.fill = hoverStyle.fill\n                || (hasFillOrStroke(fill) ? liftColor(fill) : null);\n            hoverStyle.stroke = hoverStyle.stroke\n                || (hasFillOrStroke(stroke) ? liftColor(stroke) : null);\n\n            var normalStyle = {};\n            for (var name in hoverStyle) {\n                if (hoverStyle.hasOwnProperty(name)) {\n                    normalStyle[name] = el.style[name];\n                }\n            }\n\n            el.__normalStl = normalStyle;\n\n            el.__hoverStlDirty = false;\n        }\n    }\n\n    /**\n     * @private\n     */\n    function doSingleEnterHover(el) {\n        if (el.__isHover) {\n            return;\n        }\n\n        cacheElementStl(el);\n\n        if (el.useHoverLayer) {\n            el.__zr && el.__zr.addHover(el, el.__hoverStl);\n        }\n        else {\n            el.setStyle(el.__hoverStl);\n            el.z2 += 1;\n        }\n\n        el.__isHover = true;\n    }\n\n    /**\n     * @inner\n     */\n    function doSingleLeaveHover(el) {\n        if (!el.__isHover) {\n            return;\n        }\n\n        var normalStl = el.__normalStl;\n        if (el.useHoverLayer) {\n            el.__zr && el.__zr.removeHover(el);\n        }\n        else {\n            normalStl && el.setStyle(normalStl);\n            el.z2 -= 1;\n        }\n\n        el.__isHover = false;\n    }\n\n    /**\n     * @inner\n     */\n    function doEnterHover(el) {\n        el.type === 'group'\n            ? el.traverse(function (child) {\n                if (child.type !== 'group') {\n                    doSingleEnterHover(child);\n                }\n            })\n            : doSingleEnterHover(el);\n    }\n\n    function doLeaveHover(el) {\n        el.type === 'group'\n            ? el.traverse(function (child) {\n                if (child.type !== 'group') {\n                    doSingleLeaveHover(child);\n                }\n            })\n            : doSingleLeaveHover(el);\n    }\n\n    /**\n     * @inner\n     */\n    function setElementHoverStl(el, hoverStl) {\n        // If element has sepcified hoverStyle, then use it instead of given hoverStyle\n        // Often used when item group has a label element and it's hoverStyle is different\n        el.__hoverStl = el.hoverStyle || hoverStl || {};\n        el.__hoverStlDirty = true;\n\n        if (el.__isHover) {\n            cacheElementStl(el);\n        }\n    }\n\n    /**\n     * @inner\n     */\n    function onElementMouseOver(e) {\n        if (this.__hoverSilentOnTouch && e.zrByTouch) {\n            return;\n        }\n\n        // Only if element is not in emphasis status\n        !this.__isEmphasis && doEnterHover(this);\n    }\n\n    /**\n     * @inner\n     */\n    function onElementMouseOut(e) {\n        if (this.__hoverSilentOnTouch && e.zrByTouch) {\n            return;\n        }\n\n        // Only if element is not in emphasis status\n        !this.__isEmphasis && doLeaveHover(this);\n    }\n\n    /**\n     * @inner\n     */\n    function enterEmphasis() {\n        this.__isEmphasis = true;\n        doEnterHover(this);\n    }\n\n    /**\n     * @inner\n     */\n    function leaveEmphasis() {\n        this.__isEmphasis = false;\n        doLeaveHover(this);\n    }\n\n    /**\n     * Set hover style of element\n     * @param {module:zrender/Element} el\n     * @param {Object} [hoverStyle]\n     * @param {Object} [opt]\n     * @param {boolean} [opt.hoverSilentOnTouch=false]\n     *        In touch device, mouseover event will be trigger on touchstart event\n     *        (see module:zrender/dom/HandlerProxy). By this mechanism, we can\n     *        conviniently use hoverStyle when tap on touch screen without additional\n     *        code for compatibility.\n     *        But if the chart/component has select feature, which usually also use\n     *        hoverStyle, there might be conflict between 'select-highlight' and\n     *        'hover-highlight' especially when roam is enabled (see geo for example).\n     *        In this case, hoverSilentOnTouch should be used to disable hover-highlight\n     *        on touch device.\n     */\n    graphic.setHoverStyle = function (el, hoverStyle, opt) {\n        el.__hoverSilentOnTouch = opt && opt.hoverSilentOnTouch;\n\n        el.type === 'group'\n            ? el.traverse(function (child) {\n                if (child.type !== 'group') {\n                    setElementHoverStl(child, hoverStyle);\n                }\n            })\n            : setElementHoverStl(el, hoverStyle);\n\n        // Duplicated function will be auto-ignored, see Eventful.js.\n        el.on('mouseover', onElementMouseOver)\n          .on('mouseout', onElementMouseOut);\n\n        // Emphasis, normal can be triggered manually\n        el.on('emphasis', enterEmphasis)\n          .on('normal', leaveEmphasis);\n    };\n\n    /**\n     * Set text option in the style\n     * @param {Object} textStyle\n     * @param {module:echarts/model/Model} labelModel\n     * @param {string} color\n     */\n    graphic.setText = function (textStyle, labelModel, color) {\n        var labelPosition = labelModel.getShallow('position') || 'inside';\n        var labelOffset = labelModel.getShallow('offset');\n        var labelColor = labelPosition.indexOf('inside') >= 0 ? 'white' : color;\n        var textStyleModel = labelModel.getModel('textStyle');\n        zrUtil.extend(textStyle, {\n            textDistance: labelModel.getShallow('distance') || 5,\n            textFont: textStyleModel.getFont(),\n            textPosition: labelPosition,\n            textOffset: labelOffset,\n            textFill: textStyleModel.getTextColor() || labelColor\n        });\n    };\n\n    function animateOrSetProps(isUpdate, el, props, animatableModel, dataIndex, cb) {\n        if (typeof dataIndex === 'function') {\n            cb = dataIndex;\n            dataIndex = null;\n        }\n        // Do not check 'animation' property directly here. Consider this case:\n        // animation model is an `itemModel`, whose does not have `isAnimationEnabled`\n        // but its parent model (`seriesModel`) does.\n        var animationEnabled = animatableModel && animatableModel.isAnimationEnabled();\n\n        if (animationEnabled) {\n            var postfix = isUpdate ? 'Update' : '';\n            var duration = animatableModel.getShallow('animationDuration' + postfix);\n            var animationEasing = animatableModel.getShallow('animationEasing' + postfix);\n            var animationDelay = animatableModel.getShallow('animationDelay' + postfix);\n            if (typeof animationDelay === 'function') {\n                animationDelay = animationDelay(\n                    dataIndex,\n                    animatableModel.getAnimationDelayParams\n                        ? animatableModel.getAnimationDelayParams(el, dataIndex)\n                        : null\n                );\n            }\n            if (typeof duration === 'function') {\n                duration = duration(dataIndex);\n            }\n\n            duration > 0\n                ? el.animateTo(props, duration, animationDelay || 0, animationEasing, cb)\n                : (el.attr(props), cb && cb());\n        }\n        else {\n            el.attr(props);\n            cb && cb();\n        }\n    }\n\n    /**\n     * Update graphic element properties with or without animation according to the configuration in series\n     * @param {module:zrender/Element} el\n     * @param {Object} props\n     * @param {module:echarts/model/Model} [animatableModel]\n     * @param {number} [dataIndex]\n     * @param {Function} [cb]\n     * @example\n     *     graphic.updateProps(el, {\n     *         position: [100, 100]\n     *     }, seriesModel, dataIndex, function () { console.log('Animation done!'); });\n     *     // Or\n     *     graphic.updateProps(el, {\n     *         position: [100, 100]\n     *     }, seriesModel, function () { console.log('Animation done!'); });\n     */\n    graphic.updateProps = function (el, props, animatableModel, dataIndex, cb) {\n        animateOrSetProps(true, el, props, animatableModel, dataIndex, cb);\n    };\n\n    /**\n     * Init graphic element properties with or without animation according to the configuration in series\n     * @param {module:zrender/Element} el\n     * @param {Object} props\n     * @param {module:echarts/model/Model} [animatableModel]\n     * @param {number} [dataIndex]\n     * @param {Function} cb\n     */\n    graphic.initProps = function (el, props, animatableModel, dataIndex, cb) {\n        animateOrSetProps(false, el, props, animatableModel, dataIndex, cb);\n    };\n\n    /**\n     * Get transform matrix of target (param target),\n     * in coordinate of its ancestor (param ancestor)\n     *\n     * @param {module:zrender/mixin/Transformable} target\n     * @param {module:zrender/mixin/Transformable} [ancestor]\n     */\n    graphic.getTransform = function (target, ancestor) {\n        var mat = matrix.identity([]);\n\n        while (target && target !== ancestor) {\n            matrix.mul(mat, target.getLocalTransform(), mat);\n            target = target.parent;\n        }\n\n        return mat;\n    };\n\n    /**\n     * Apply transform to an vertex.\n     * @param {Array.<number>} vertex [x, y]\n     * @param {Array.<number>} transform Transform matrix: like [1, 0, 0, 1, 0, 0]\n     * @param {boolean=} invert Whether use invert matrix.\n     * @return {Array.<number>} [x, y]\n     */\n    graphic.applyTransform = function (vertex, transform, invert) {\n        if (invert) {\n            transform = matrix.invert([], transform);\n        }\n        return vector.applyTransform([], vertex, transform);\n    };\n\n    /**\n     * @param {string} direction 'left' 'right' 'top' 'bottom'\n     * @param {Array.<number>} transform Transform matrix: like [1, 0, 0, 1, 0, 0]\n     * @param {boolean=} invert Whether use invert matrix.\n     * @return {string} Transformed direction. 'left' 'right' 'top' 'bottom'\n     */\n    graphic.transformDirection = function (direction, transform, invert) {\n\n        // Pick a base, ensure that transform result will not be (0, 0).\n        var hBase = (transform[4] === 0 || transform[5] === 0 || transform[0] === 0)\n            ? 1 : Math.abs(2 * transform[4] / transform[0]);\n        var vBase = (transform[4] === 0 || transform[5] === 0 || transform[2] === 0)\n            ? 1 : Math.abs(2 * transform[4] / transform[2]);\n\n        var vertex = [\n            direction === 'left' ? -hBase : direction === 'right' ? hBase : 0,\n            direction === 'top' ? -vBase : direction === 'bottom' ? vBase : 0\n        ];\n\n        vertex = graphic.applyTransform(vertex, transform, invert);\n\n        return Math.abs(vertex[0]) > Math.abs(vertex[1])\n            ? (vertex[0] > 0 ? 'right' : 'left')\n            : (vertex[1] > 0 ? 'bottom' : 'top');\n    };\n\n    /**\n     * Apply group transition animation from g1 to g2\n     */\n    graphic.groupTransition = function (g1, g2, animatableModel, cb) {\n        if (!g1 || !g2) {\n            return;\n        }\n\n        function getElMap(g) {\n            var elMap = {};\n            g.traverse(function (el) {\n                if (!el.isGroup && el.anid) {\n                    elMap[el.anid] = el;\n                }\n            });\n            return elMap;\n        }\n        function getAnimatableProps(el) {\n            var obj = {\n                position: vector.clone(el.position),\n                rotation: el.rotation\n            };\n            if (el.shape) {\n                obj.shape = zrUtil.extend({}, el.shape);\n            }\n            return obj;\n        }\n        var elMap1 = getElMap(g1);\n\n        g2.traverse(function (el) {\n            if (!el.isGroup && el.anid) {\n                var oldEl = elMap1[el.anid];\n                if (oldEl) {\n                    var newProp = getAnimatableProps(el);\n                    el.attr(getAnimatableProps(oldEl));\n                    graphic.updateProps(el, newProp, animatableModel, el.dataIndex);\n                }\n                // else {\n                //     if (el.previousProps) {\n                //         graphic.updateProps\n                //     }\n                // }\n            }\n        });\n    };\n\n    module.exports = graphic;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/util/graphic.js\n// module id = 317\n// module chunks = 0 1 2 3 4","/**\n * 数值处理模块\n * @module echarts/util/number\n */\n\n\n\n    var number = {};\n\n    var RADIAN_EPSILON = 1e-4;\n\n    function _trim(str) {\n        return str.replace(/^\\s+/, '').replace(/\\s+$/, '');\n    }\n\n    /**\n     * Linear mapping a value from domain to range\n     * @memberOf module:echarts/util/number\n     * @param  {(number|Array.<number>)} val\n     * @param  {Array.<number>} domain Domain extent domain[0] can be bigger than domain[1]\n     * @param  {Array.<number>} range  Range extent range[0] can be bigger than range[1]\n     * @param  {boolean} clamp\n     * @return {(number|Array.<number>}\n     */\n    number.linearMap = function (val, domain, range, clamp) {\n        var subDomain = domain[1] - domain[0];\n        var subRange = range[1] - range[0];\n\n        if (subDomain === 0) {\n            return subRange === 0\n                ? range[0]\n                : (range[0] + range[1]) / 2;\n        }\n\n        // Avoid accuracy problem in edge, such as\n        // 146.39 - 62.83 === 83.55999999999999.\n        // See echarts/test/ut/spec/util/number.js#linearMap#accuracyError\n        // It is a little verbose for efficiency considering this method\n        // is a hotspot.\n        if (clamp) {\n            if (subDomain > 0) {\n                if (val <= domain[0]) {\n                    return range[0];\n                }\n                else if (val >= domain[1]) {\n                    return range[1];\n                }\n            }\n            else {\n                if (val >= domain[0]) {\n                    return range[0];\n                }\n                else if (val <= domain[1]) {\n                    return range[1];\n                }\n            }\n        }\n        else {\n            if (val === domain[0]) {\n                return range[0];\n            }\n            if (val === domain[1]) {\n                return range[1];\n            }\n        }\n\n        return (val - domain[0]) / subDomain * subRange + range[0];\n    };\n\n    /**\n     * Convert a percent string to absolute number.\n     * Returns NaN if percent is not a valid string or number\n     * @memberOf module:echarts/util/number\n     * @param {string|number} percent\n     * @param {number} all\n     * @return {number}\n     */\n    number.parsePercent = function(percent, all) {\n        switch (percent) {\n            case 'center':\n            case 'middle':\n                percent = '50%';\n                break;\n            case 'left':\n            case 'top':\n                percent = '0%';\n                break;\n            case 'right':\n            case 'bottom':\n                percent = '100%';\n                break;\n        }\n        if (typeof percent === 'string') {\n            if (_trim(percent).match(/%$/)) {\n                return parseFloat(percent) / 100 * all;\n            }\n\n            return parseFloat(percent);\n        }\n\n        return percent == null ? NaN : +percent;\n    };\n\n    /**\n     * Fix rounding error of float numbers\n     * @param {number} x\n     * @return {number}\n     */\n    number.round = function (x, precision) {\n        if (precision == null) {\n            precision = 10;\n        }\n        // Avoid range error\n        precision = Math.min(Math.max(0, precision), 20);\n        return +(+x).toFixed(precision);\n    };\n\n    number.asc = function (arr) {\n        arr.sort(function (a, b) {\n            return a - b;\n        });\n        return arr;\n    };\n\n    /**\n     * Get precision\n     * @param {number} val\n     */\n    number.getPrecision = function (val) {\n        val = +val;\n        if (isNaN(val)) {\n            return 0;\n        }\n        // It is much faster than methods converting number to string as follows\n        //      var tmp = val.toString();\n        //      return tmp.length - 1 - tmp.indexOf('.');\n        // especially when precision is low\n        var e = 1;\n        var count = 0;\n        while (Math.round(val * e) / e !== val) {\n            e *= 10;\n            count++;\n        }\n        return count;\n    };\n\n    number.getPrecisionSafe = function (val) {\n        var str = val.toString();\n        var dotIndex = str.indexOf('.');\n        if (dotIndex < 0) {\n            return 0;\n        }\n        return str.length - 1 - dotIndex;\n    };\n\n    /**\n     * Minimal dicernible data precisioin according to a single pixel.\n     * @param {Array.<number>} dataExtent\n     * @param {Array.<number>} pixelExtent\n     * @return {number} precision\n     */\n    number.getPixelPrecision = function (dataExtent, pixelExtent) {\n        var log = Math.log;\n        var LN10 = Math.LN10;\n        var dataQuantity = Math.floor(log(dataExtent[1] - dataExtent[0]) / LN10);\n        var sizeQuantity = Math.round(log(Math.abs(pixelExtent[1] - pixelExtent[0])) / LN10);\n        // toFixed() digits argument must be between 0 and 20.\n        var precision = Math.min(Math.max(-dataQuantity + sizeQuantity, 0), 20);\n        return !isFinite(precision) ? 20 : precision;\n    };\n\n    // Number.MAX_SAFE_INTEGER, ie do not support.\n    number.MAX_SAFE_INTEGER = 9007199254740991;\n\n    /**\n     * To 0 - 2 * PI, considering negative radian.\n     * @param {number} radian\n     * @return {number}\n     */\n    number.remRadian = function (radian) {\n        var pi2 = Math.PI * 2;\n        return (radian % pi2 + pi2) % pi2;\n    };\n\n    /**\n     * @param {type} radian\n     * @return {boolean}\n     */\n    number.isRadianAroundZero = function (val) {\n        return val > -RADIAN_EPSILON && val < RADIAN_EPSILON;\n    };\n\n    /**\n     * @param {string|Date|number} value\n     * @return {Date} date\n     */\n    number.parseDate = function (value) {\n        if (value instanceof Date) {\n            return value;\n        }\n        else if (typeof value === 'string') {\n            // Treat as ISO format. See issue #3623\n            var ret = new Date(value);\n            if (isNaN(+ret)) {\n                // FIXME new Date('1970-01-01') is UTC, new Date('1970/01/01') is local\n                ret = new Date(new Date(value.replace(/-/g, '/')) - new Date('1970/01/01'));\n            }\n            return ret;\n        }\n\n        return new Date(Math.round(value));\n    };\n\n    /**\n     * Quantity of a number. e.g. 0.1, 1, 10, 100\n     * @param  {number} val\n     * @return {number}\n     */\n    number.quantity = function (val) {\n        return Math.pow(10, Math.floor(Math.log(val) / Math.LN10));\n    };\n\n    // \"Nice Numbers for Graph Labels\" of Graphic Gems\n    /**\n     * find a “nice” number approximately equal to x. Round the number if round = true, take ceiling if round = false\n     * The primary observation is that the “nicest” numbers in decimal are 1, 2, and 5, and all power-of-ten multiples of these numbers.\n     * @param  {number} val\n     * @param  {boolean} round\n     * @return {number}\n     */\n    number.nice = function (val, round) {\n        var exp10 = number.quantity(val);\n        var f = val / exp10; // between 1 and 10\n        var nf;\n        if (round) {\n            if (f < 1.5) { nf = 1; }\n            else if (f < 2.5) { nf = 2; }\n            else if (f < 4) { nf = 3; }\n            else if (f < 7) { nf = 5; }\n            else { nf = 10; }\n        }\n        else {\n            if (f < 1) { nf = 1; }\n            else if (f < 2) { nf = 2; }\n            else if (f < 3) { nf = 3; }\n            else if (f < 5) { nf = 5; }\n            else { nf = 10; }\n        }\n        return nf * exp10;\n    };\n\n    /**\n     * Order intervals asc, and split them when overlap.\n     * expect(numberUtil.reformIntervals([\n     *     {interval: [18, 62], close: [1, 1]},\n     *     {interval: [-Infinity, -70], close: [0, 0]},\n     *     {interval: [-70, -26], close: [1, 1]},\n     *     {interval: [-26, 18], close: [1, 1]},\n     *     {interval: [62, 150], close: [1, 1]},\n     *     {interval: [106, 150], close: [1, 1]},\n     *     {interval: [150, Infinity], close: [0, 0]}\n     * ])).toEqual([\n     *     {interval: [-Infinity, -70], close: [0, 0]},\n     *     {interval: [-70, -26], close: [1, 1]},\n     *     {interval: [-26, 18], close: [0, 1]},\n     *     {interval: [18, 62], close: [0, 1]},\n     *     {interval: [62, 150], close: [0, 1]},\n     *     {interval: [150, Infinity], close: [0, 0]}\n     * ]);\n     * @param {Array.<Object>} list, where `close` mean open or close\n     *        of the interval, and Infinity can be used.\n     * @return {Array.<Object>} The origin list, which has been reformed.\n     */\n    number.reformIntervals = function (list) {\n        list.sort(function (a, b) {\n            return littleThan(a, b, 0) ? -1 : 1;\n        });\n\n        var curr = -Infinity;\n        var currClose = 1;\n        for (var i = 0; i < list.length;) {\n            var interval = list[i].interval;\n            var close = list[i].close;\n\n            for (var lg = 0; lg < 2; lg++) {\n                if (interval[lg] <= curr) {\n                    interval[lg] = curr;\n                    close[lg] = !lg ? 1 - currClose : 1;\n                }\n                curr = interval[lg];\n                currClose = close[lg];\n            }\n\n            if (interval[0] === interval[1] && close[0] * close[1] !== 1) {\n                list.splice(i, 1);\n            }\n            else {\n                i++;\n            }\n        }\n\n        return list;\n\n        function littleThan(a, b, lg) {\n            return a.interval[lg] < b.interval[lg]\n                || (\n                    a.interval[lg] === b.interval[lg]\n                    && (\n                        (a.close[lg] - b.close[lg] === (!lg ? 1 : -1))\n                        || (!lg && littleThan(a, b, 1))\n                    )\n                );\n        }\n    };\n\n    /**\n     * parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n     * ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n     * subtraction forces infinities to NaN\n     * @param {*} v\n     * @return {boolean}\n     */\n    number.isNumeric = function (v) {\n        return v - parseFloat(v) >= 0;\n    };\n\n    module.exports = number;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/util/number.js\n// module id = 318\n// module chunks = 0 1 2 3 4","\n    var ArrayCtor = typeof Float32Array === 'undefined'\n        ? Array\n        : Float32Array;\n\n    /**\n     * @typedef {Float32Array|Array.<number>} Vector2\n     */\n    /**\n     * 二维向量类\n     * @exports zrender/tool/vector\n     */\n    var vector = {\n        /**\n         * 创建一个向量\n         * @param {number} [x=0]\n         * @param {number} [y=0]\n         * @return {Vector2}\n         */\n        create: function (x, y) {\n            var out = new ArrayCtor(2);\n            if (x == null) {\n                x = 0;\n            }\n            if (y == null) {\n                y = 0;\n            }\n            out[0] = x;\n            out[1] = y;\n            return out;\n        },\n\n        /**\n         * 复制向量数据\n         * @param {Vector2} out\n         * @param {Vector2} v\n         * @return {Vector2}\n         */\n        copy: function (out, v) {\n            out[0] = v[0];\n            out[1] = v[1];\n            return out;\n        },\n\n        /**\n         * 克隆一个向量\n         * @param {Vector2} v\n         * @return {Vector2}\n         */\n        clone: function (v) {\n            var out = new ArrayCtor(2);\n            out[0] = v[0];\n            out[1] = v[1];\n            return out;\n        },\n\n        /**\n         * 设置向量的两个项\n         * @param {Vector2} out\n         * @param {number} a\n         * @param {number} b\n         * @return {Vector2} 结果\n         */\n        set: function (out, a, b) {\n            out[0] = a;\n            out[1] = b;\n            return out;\n        },\n\n        /**\n         * 向量相加\n         * @param {Vector2} out\n         * @param {Vector2} v1\n         * @param {Vector2} v2\n         */\n        add: function (out, v1, v2) {\n            out[0] = v1[0] + v2[0];\n            out[1] = v1[1] + v2[1];\n            return out;\n        },\n\n        /**\n         * 向量缩放后相加\n         * @param {Vector2} out\n         * @param {Vector2} v1\n         * @param {Vector2} v2\n         * @param {number} a\n         */\n        scaleAndAdd: function (out, v1, v2, a) {\n            out[0] = v1[0] + v2[0] * a;\n            out[1] = v1[1] + v2[1] * a;\n            return out;\n        },\n\n        /**\n         * 向量相减\n         * @param {Vector2} out\n         * @param {Vector2} v1\n         * @param {Vector2} v2\n         */\n        sub: function (out, v1, v2) {\n            out[0] = v1[0] - v2[0];\n            out[1] = v1[1] - v2[1];\n            return out;\n        },\n\n        /**\n         * 向量长度\n         * @param {Vector2} v\n         * @return {number}\n         */\n        len: function (v) {\n            return Math.sqrt(this.lenSquare(v));\n        },\n\n        /**\n         * 向量长度平方\n         * @param {Vector2} v\n         * @return {number}\n         */\n        lenSquare: function (v) {\n            return v[0] * v[0] + v[1] * v[1];\n        },\n\n        /**\n         * 向量乘法\n         * @param {Vector2} out\n         * @param {Vector2} v1\n         * @param {Vector2} v2\n         */\n        mul: function (out, v1, v2) {\n            out[0] = v1[0] * v2[0];\n            out[1] = v1[1] * v2[1];\n            return out;\n        },\n\n        /**\n         * 向量除法\n         * @param {Vector2} out\n         * @param {Vector2} v1\n         * @param {Vector2} v2\n         */\n        div: function (out, v1, v2) {\n            out[0] = v1[0] / v2[0];\n            out[1] = v1[1] / v2[1];\n            return out;\n        },\n\n        /**\n         * 向量点乘\n         * @param {Vector2} v1\n         * @param {Vector2} v2\n         * @return {number}\n         */\n        dot: function (v1, v2) {\n            return v1[0] * v2[0] + v1[1] * v2[1];\n        },\n\n        /**\n         * 向量缩放\n         * @param {Vector2} out\n         * @param {Vector2} v\n         * @param {number} s\n         */\n        scale: function (out, v, s) {\n            out[0] = v[0] * s;\n            out[1] = v[1] * s;\n            return out;\n        },\n\n        /**\n         * 向量归一化\n         * @param {Vector2} out\n         * @param {Vector2} v\n         */\n        normalize: function (out, v) {\n            var d = vector.len(v);\n            if (d === 0) {\n                out[0] = 0;\n                out[1] = 0;\n            }\n            else {\n                out[0] = v[0] / d;\n                out[1] = v[1] / d;\n            }\n            return out;\n        },\n\n        /**\n         * 计算向量间距离\n         * @param {Vector2} v1\n         * @param {Vector2} v2\n         * @return {number}\n         */\n        distance: function (v1, v2) {\n            return Math.sqrt(\n                (v1[0] - v2[0]) * (v1[0] - v2[0])\n                + (v1[1] - v2[1]) * (v1[1] - v2[1])\n            );\n        },\n\n        /**\n         * 向量距离平方\n         * @param {Vector2} v1\n         * @param {Vector2} v2\n         * @return {number}\n         */\n        distanceSquare: function (v1, v2) {\n            return (v1[0] - v2[0]) * (v1[0] - v2[0])\n                + (v1[1] - v2[1]) * (v1[1] - v2[1]);\n        },\n\n        /**\n         * 求负向量\n         * @param {Vector2} out\n         * @param {Vector2} v\n         */\n        negate: function (out, v) {\n            out[0] = -v[0];\n            out[1] = -v[1];\n            return out;\n        },\n\n        /**\n         * 插值两个点\n         * @param {Vector2} out\n         * @param {Vector2} v1\n         * @param {Vector2} v2\n         * @param {number} t\n         */\n        lerp: function (out, v1, v2, t) {\n            out[0] = v1[0] + t * (v2[0] - v1[0]);\n            out[1] = v1[1] + t * (v2[1] - v1[1]);\n            return out;\n        },\n\n        /**\n         * 矩阵左乘向量\n         * @param {Vector2} out\n         * @param {Vector2} v\n         * @param {Vector2} m\n         */\n        applyTransform: function (out, v, m) {\n            var x = v[0];\n            var y = v[1];\n            out[0] = m[0] * x + m[2] * y + m[4];\n            out[1] = m[1] * x + m[3] * y + m[5];\n            return out;\n        },\n        /**\n         * 求两个向量最小值\n         * @param  {Vector2} out\n         * @param  {Vector2} v1\n         * @param  {Vector2} v2\n         */\n        min: function (out, v1, v2) {\n            out[0] = Math.min(v1[0], v2[0]);\n            out[1] = Math.min(v1[1], v2[1]);\n            return out;\n        },\n        /**\n         * 求两个向量最大值\n         * @param  {Vector2} out\n         * @param  {Vector2} v1\n         * @param  {Vector2} v2\n         */\n        max: function (out, v1, v2) {\n            out[0] = Math.max(v1[0], v2[0]);\n            out[1] = Math.max(v1[1], v2[1]);\n            return out;\n        }\n    };\n\n    vector.length = vector.len;\n    vector.lengthSquare = vector.lenSquare;\n    vector.dist = vector.distance;\n    vector.distSquare = vector.distanceSquare;\n\n    module.exports = vector;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/zrender/lib/core/vector.js\n// module id = 319\n// module chunks = 0 1 2 3 4","/**\n * Path element\n * @module zrender/graphic/Path\n */\n\n\n\n    var Displayable = require('./Displayable');\n    var zrUtil = require('../core/util');\n    var PathProxy = require('../core/PathProxy');\n    var pathContain = require('../contain/path');\n\n    var Pattern = require('./Pattern');\n    var getCanvasPattern = Pattern.prototype.getCanvasPattern;\n\n    var abs = Math.abs;\n\n    var pathProxyForDraw = new PathProxy(true);\n    /**\n     * @alias module:zrender/graphic/Path\n     * @extends module:zrender/graphic/Displayable\n     * @constructor\n     * @param {Object} opts\n     */\n    function Path(opts) {\n        Displayable.call(this, opts);\n\n        /**\n         * @type {module:zrender/core/PathProxy}\n         * @readOnly\n         */\n        this.path = null;\n    }\n\n    Path.prototype = {\n\n        constructor: Path,\n\n        type: 'path',\n\n        __dirtyPath: true,\n\n        strokeContainThreshold: 5,\n\n        brush: function (ctx, prevEl) {\n            var style = this.style;\n            var path = this.path || pathProxyForDraw;\n            var hasStroke = style.hasStroke();\n            var hasFill = style.hasFill();\n            var fill = style.fill;\n            var stroke = style.stroke;\n            var hasFillGradient = hasFill && !!(fill.colorStops);\n            var hasStrokeGradient = hasStroke && !!(stroke.colorStops);\n            var hasFillPattern = hasFill && !!(fill.image);\n            var hasStrokePattern = hasStroke && !!(stroke.image);\n\n            style.bind(ctx, this, prevEl);\n            this.setTransform(ctx);\n\n            if (this.__dirty) {\n                var rect;\n                // Update gradient because bounding rect may changed\n                if (hasFillGradient) {\n                    rect = rect || this.getBoundingRect();\n                    this._fillGradient = style.getGradient(ctx, fill, rect);\n                }\n                if (hasStrokeGradient) {\n                    rect = rect || this.getBoundingRect();\n                    this._strokeGradient = style.getGradient(ctx, stroke, rect);\n                }\n            }\n            // Use the gradient or pattern\n            if (hasFillGradient) {\n                // PENDING If may have affect the state\n                ctx.fillStyle = this._fillGradient;\n            }\n            else if (hasFillPattern) {\n                ctx.fillStyle = getCanvasPattern.call(fill, ctx);\n            }\n            if (hasStrokeGradient) {\n                ctx.strokeStyle = this._strokeGradient;\n            }\n            else if (hasStrokePattern) {\n                ctx.strokeStyle = getCanvasPattern.call(stroke, ctx);\n            }\n\n            var lineDash = style.lineDash;\n            var lineDashOffset = style.lineDashOffset;\n\n            var ctxLineDash = !!ctx.setLineDash;\n\n            // Update path sx, sy\n            var scale = this.getGlobalScale();\n            path.setScale(scale[0], scale[1]);\n\n            // Proxy context\n            // Rebuild path in following 2 cases\n            // 1. Path is dirty\n            // 2. Path needs javascript implemented lineDash stroking.\n            //    In this case, lineDash information will not be saved in PathProxy\n            if (this.__dirtyPath\n                || (lineDash && !ctxLineDash && hasStroke)\n            ) {\n                path.beginPath(ctx);\n\n                // Setting line dash before build path\n                if (lineDash && !ctxLineDash) {\n                    path.setLineDash(lineDash);\n                    path.setLineDashOffset(lineDashOffset);\n                }\n\n                this.buildPath(path, this.shape, false);\n\n                // Clear path dirty flag\n                if (this.path) {\n                    this.__dirtyPath = false;\n                }\n            }\n            else {\n                // Replay path building\n                ctx.beginPath();\n                this.path.rebuildPath(ctx);\n            }\n\n            hasFill && path.fill(ctx);\n\n            if (lineDash && ctxLineDash) {\n                ctx.setLineDash(lineDash);\n                ctx.lineDashOffset = lineDashOffset;\n            }\n\n            hasStroke && path.stroke(ctx);\n\n            if (lineDash && ctxLineDash) {\n                // PENDING\n                // Remove lineDash\n                ctx.setLineDash([]);\n            }\n\n\n            this.restoreTransform(ctx);\n\n            // Draw rect text\n            if (style.text != null) {\n                // var rect = this.getBoundingRect();\n                this.drawRectText(ctx, this.getBoundingRect());\n            }\n        },\n\n        // When bundling path, some shape may decide if use moveTo to begin a new subpath or closePath\n        // Like in circle\n        buildPath: function (ctx, shapeCfg, inBundle) {},\n\n        createPathProxy: function () {\n            this.path = new PathProxy();\n        },\n\n        getBoundingRect: function () {\n            var rect = this._rect;\n            var style = this.style;\n            var needsUpdateRect = !rect;\n            if (needsUpdateRect) {\n                var path = this.path;\n                if (!path) {\n                    // Create path on demand.\n                    path = this.path = new PathProxy();\n                }\n                if (this.__dirtyPath) {\n                    path.beginPath();\n                    this.buildPath(path, this.shape, false);\n                }\n                rect = path.getBoundingRect();\n            }\n            this._rect = rect;\n\n            if (style.hasStroke()) {\n                // Needs update rect with stroke lineWidth when\n                // 1. Element changes scale or lineWidth\n                // 2. Shape is changed\n                var rectWithStroke = this._rectWithStroke || (this._rectWithStroke = rect.clone());\n                if (this.__dirty || needsUpdateRect) {\n                    rectWithStroke.copy(rect);\n                    // FIXME Must after updateTransform\n                    var w = style.lineWidth;\n                    // PENDING, Min line width is needed when line is horizontal or vertical\n                    var lineScale = style.strokeNoScale ? this.getLineScale() : 1;\n\n                    // Only add extra hover lineWidth when there are no fill\n                    if (!style.hasFill()) {\n                        w = Math.max(w, this.strokeContainThreshold || 4);\n                    }\n                    // Consider line width\n                    // Line scale can't be 0;\n                    if (lineScale > 1e-10) {\n                        rectWithStroke.width += w / lineScale;\n                        rectWithStroke.height += w / lineScale;\n                        rectWithStroke.x -= w / lineScale / 2;\n                        rectWithStroke.y -= w / lineScale / 2;\n                    }\n                }\n\n                // Return rect with stroke\n                return rectWithStroke;\n            }\n\n            return rect;\n        },\n\n        contain: function (x, y) {\n            var localPos = this.transformCoordToLocal(x, y);\n            var rect = this.getBoundingRect();\n            var style = this.style;\n            x = localPos[0];\n            y = localPos[1];\n\n            if (rect.contain(x, y)) {\n                var pathData = this.path.data;\n                if (style.hasStroke()) {\n                    var lineWidth = style.lineWidth;\n                    var lineScale = style.strokeNoScale ? this.getLineScale() : 1;\n                    // Line scale can't be 0;\n                    if (lineScale > 1e-10) {\n                        // Only add extra hover lineWidth when there are no fill\n                        if (!style.hasFill()) {\n                            lineWidth = Math.max(lineWidth, this.strokeContainThreshold);\n                        }\n                        if (pathContain.containStroke(\n                            pathData, lineWidth / lineScale, x, y\n                        )) {\n                            return true;\n                        }\n                    }\n                }\n                if (style.hasFill()) {\n                    return pathContain.contain(pathData, x, y);\n                }\n            }\n            return false;\n        },\n\n        /**\n         * @param  {boolean} dirtyPath\n         */\n        dirty: function (dirtyPath) {\n            if (dirtyPath == null) {\n                dirtyPath = true;\n            }\n            // Only mark dirty, not mark clean\n            if (dirtyPath) {\n                this.__dirtyPath = dirtyPath;\n                this._rect = null;\n            }\n\n            this.__dirty = true;\n\n            this.__zr && this.__zr.refresh();\n\n            // Used as a clipping path\n            if (this.__clipTarget) {\n                this.__clipTarget.dirty();\n            }\n        },\n\n        /**\n         * Alias for animate('shape')\n         * @param {boolean} loop\n         */\n        animateShape: function (loop) {\n            return this.animate('shape', loop);\n        },\n\n        // Overwrite attrKV\n        attrKV: function (key, value) {\n            // FIXME\n            if (key === 'shape') {\n                this.setShape(value);\n                this.__dirtyPath = true;\n                this._rect = null;\n            }\n            else {\n                Displayable.prototype.attrKV.call(this, key, value);\n            }\n        },\n\n        /**\n         * @param {Object|string} key\n         * @param {*} value\n         */\n        setShape: function (key, value) {\n            var shape = this.shape;\n            // Path from string may not have shape\n            if (shape) {\n                if (zrUtil.isObject(key)) {\n                    for (var name in key) {\n                        if (key.hasOwnProperty(name)) {\n                            shape[name] = key[name];\n                        }\n                    }\n                }\n                else {\n                    shape[key] = value;\n                }\n                this.dirty(true);\n            }\n            return this;\n        },\n\n        getLineScale: function () {\n            var m = this.transform;\n            // Get the line scale.\n            // Determinant of `m` means how much the area is enlarged by the\n            // transformation. So its square root can be used as a scale factor\n            // for width.\n            return m && abs(m[0] - 1) > 1e-10 && abs(m[3] - 1) > 1e-10\n                ? Math.sqrt(abs(m[0] * m[3] - m[2] * m[1]))\n                : 1;\n        }\n    };\n\n    /**\n     * 扩展一个 Path element, 比如星形，圆等。\n     * Extend a path element\n     * @param {Object} props\n     * @param {string} props.type Path type\n     * @param {Function} props.init Initialize\n     * @param {Function} props.buildPath Overwrite buildPath method\n     * @param {Object} [props.style] Extended default style config\n     * @param {Object} [props.shape] Extended default shape config\n     */\n    Path.extend = function (defaults) {\n        var Sub = function (opts) {\n            Path.call(this, opts);\n\n            if (defaults.style) {\n                // Extend default style\n                this.style.extendFrom(defaults.style, false);\n            }\n\n            // Extend default shape\n            var defaultShape = defaults.shape;\n            if (defaultShape) {\n                this.shape = this.shape || {};\n                var thisShape = this.shape;\n                for (var name in defaultShape) {\n                    if (\n                        ! thisShape.hasOwnProperty(name)\n                        && defaultShape.hasOwnProperty(name)\n                    ) {\n                        thisShape[name] = defaultShape[name];\n                    }\n                }\n            }\n\n            defaults.init && defaults.init.call(this, opts);\n        };\n\n        zrUtil.inherits(Sub, Path);\n\n        // FIXME 不能 extend position, rotation 等引用对象\n        for (var name in defaults) {\n            // Extending prototype values and methods\n            if (name !== 'style' && name !== 'shape') {\n                Sub.prototype[name] = defaults[name];\n            }\n        }\n\n        return Sub;\n    };\n\n    zrUtil.inherits(Path, Displayable);\n\n    module.exports = Path;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/zrender/lib/graphic/Path.js\n// module id = 320\n// module chunks = 0 1 2 3 4","/**\n * echarts设备环境识别\n *\n * @desc echarts基于Canvas，纯Javascript图表库，提供直观，生动，可交互，可个性化定制的数据统计图表。\n * @author firede[firede@firede.us]\n * @desc thanks zepto.\n */\n\n    var env = {};\n    if (typeof navigator === 'undefined') {\n        // In node\n        env = {\n            browser: {},\n            os: {},\n            node: true,\n            // Assume canvas is supported\n            canvasSupported: true\n        };\n    }\n    else {\n        env = detect(navigator.userAgent);\n    }\n\n    module.exports = env;\n\n    // Zepto.js\n    // (c) 2010-2013 Thomas Fuchs\n    // Zepto.js may be freely distributed under the MIT license.\n\n    function detect(ua) {\n        var os = {};\n        var browser = {};\n        // var webkit = ua.match(/Web[kK]it[\\/]{0,1}([\\d.]+)/);\n        // var android = ua.match(/(Android);?[\\s\\/]+([\\d.]+)?/);\n        // var ipad = ua.match(/(iPad).*OS\\s([\\d_]+)/);\n        // var ipod = ua.match(/(iPod)(.*OS\\s([\\d_]+))?/);\n        // var iphone = !ipad && ua.match(/(iPhone\\sOS)\\s([\\d_]+)/);\n        // var webos = ua.match(/(webOS|hpwOS)[\\s\\/]([\\d.]+)/);\n        // var touchpad = webos && ua.match(/TouchPad/);\n        // var kindle = ua.match(/Kindle\\/([\\d.]+)/);\n        // var silk = ua.match(/Silk\\/([\\d._]+)/);\n        // var blackberry = ua.match(/(BlackBerry).*Version\\/([\\d.]+)/);\n        // var bb10 = ua.match(/(BB10).*Version\\/([\\d.]+)/);\n        // var rimtabletos = ua.match(/(RIM\\sTablet\\sOS)\\s([\\d.]+)/);\n        // var playbook = ua.match(/PlayBook/);\n        // var chrome = ua.match(/Chrome\\/([\\d.]+)/) || ua.match(/CriOS\\/([\\d.]+)/);\n        var firefox = ua.match(/Firefox\\/([\\d.]+)/);\n        // var safari = webkit && ua.match(/Mobile\\//) && !chrome;\n        // var webview = ua.match(/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/) && !chrome;\n        var ie = ua.match(/MSIE\\s([\\d.]+)/)\n            // IE 11 Trident/7.0; rv:11.0\n            || ua.match(/Trident\\/.+?rv:(([\\d.]+))/);\n        var edge = ua.match(/Edge\\/([\\d.]+)/); // IE 12 and 12+\n\n        var weChat = (/micromessenger/i).test(ua);\n\n        // Todo: clean this up with a better OS/browser seperation:\n        // - discern (more) between multiple browsers on android\n        // - decide if kindle fire in silk mode is android or not\n        // - Firefox on Android doesn't specify the Android version\n        // - possibly devide in os, device and browser hashes\n\n        // if (browser.webkit = !!webkit) browser.version = webkit[1];\n\n        // if (android) os.android = true, os.version = android[2];\n        // if (iphone && !ipod) os.ios = os.iphone = true, os.version = iphone[2].replace(/_/g, '.');\n        // if (ipad) os.ios = os.ipad = true, os.version = ipad[2].replace(/_/g, '.');\n        // if (ipod) os.ios = os.ipod = true, os.version = ipod[3] ? ipod[3].replace(/_/g, '.') : null;\n        // if (webos) os.webos = true, os.version = webos[2];\n        // if (touchpad) os.touchpad = true;\n        // if (blackberry) os.blackberry = true, os.version = blackberry[2];\n        // if (bb10) os.bb10 = true, os.version = bb10[2];\n        // if (rimtabletos) os.rimtabletos = true, os.version = rimtabletos[2];\n        // if (playbook) browser.playbook = true;\n        // if (kindle) os.kindle = true, os.version = kindle[1];\n        // if (silk) browser.silk = true, browser.version = silk[1];\n        // if (!silk && os.android && ua.match(/Kindle Fire/)) browser.silk = true;\n        // if (chrome) browser.chrome = true, browser.version = chrome[1];\n        if (firefox) {\n            browser.firefox = true;\n            browser.version = firefox[1];\n        }\n        // if (safari && (ua.match(/Safari/) || !!os.ios)) browser.safari = true;\n        // if (webview) browser.webview = true;\n\n        if (ie) {\n            browser.ie = true;\n            browser.version = ie[1];\n        }\n\n        if (edge) {\n            browser.edge = true;\n            browser.version = edge[1];\n        }\n\n        // It is difficult to detect WeChat in Win Phone precisely, because ua can\n        // not be set on win phone. So we do not consider Win Phone.\n        if (weChat) {\n            browser.weChat = true;\n        }\n\n        // os.tablet = !!(ipad || playbook || (android && !ua.match(/Mobile/)) ||\n        //     (firefox && ua.match(/Tablet/)) || (ie && !ua.match(/Phone/) && ua.match(/Touch/)));\n        // os.phone  = !!(!os.tablet && !os.ipod && (android || iphone || webos ||\n        //     (chrome && ua.match(/Android/)) || (chrome && ua.match(/CriOS\\/([\\d.]+)/)) ||\n        //     (firefox && ua.match(/Mobile/)) || (ie && ua.match(/Touch/))));\n\n        return {\n            browser: browser,\n            os: os,\n            node: false,\n            // 原生canvas支持，改极端点了\n            // canvasSupported : !(browser.ie && parseFloat(browser.version) < 9)\n            canvasSupported : document.createElement('canvas').getContext ? true : false,\n            // @see <http://stackoverflow.com/questions/4817029/whats-the-best-way-to-detect-a-touch-screen-device-using-javascript>\n            // works on most browsers\n            // IE10/11 does not support touch event, and MS Edge supports them but not by\n            // default, so we dont check navigator.maxTouchPoints for them here.\n            touchEventsSupported: 'ontouchstart' in window && !browser.ie && !browser.edge,\n            // <http://caniuse.com/#search=pointer%20event>.\n            pointerEventsSupported: 'onpointerdown' in window\n                // Firefox supports pointer but not by default, only MS browsers are reliable on pointer\n                // events currently. So we dont use that on other browsers unless tested sufficiently.\n                // Although IE 10 supports pointer event, it use old style and is different from the\n                // standard. So we exclude that. (IE 10 is hardly used on touch device)\n                && (browser.edge || (browser.ie && browser.version >= 11))\n        };\n    }\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/zrender/lib/core/env.js\n// module id = 321\n// module chunks = 0 1 2 3 4","\n\n    var zrUtil = require('zrender/lib/core/util');\n    var numberUtil = require('./number');\n    var textContain = require('zrender/lib/contain/text');\n\n    var formatUtil = {};\n    /**\n     * 每三位默认加,格式化\n     * @type {string|number} x\n     */\n    formatUtil.addCommas = function (x) {\n        if (isNaN(x)) {\n            return '-';\n        }\n        x = (x + '').split('.');\n        return x[0].replace(/(\\d{1,3})(?=(?:\\d{3})+(?!\\d))/g,'$1,')\n               + (x.length > 1 ? ('.' + x[1]) : '');\n    };\n\n    /**\n     * @param {string} str\n     * @param {boolean} [upperCaseFirst=false]\n     * @return {string} str\n     */\n    formatUtil.toCamelCase = function (str, upperCaseFirst) {\n        str = (str || '').toLowerCase().replace(/-(.)/g, function(match, group1) {\n            return group1.toUpperCase();\n        });\n\n        if (upperCaseFirst && str) {\n            str = str.charAt(0).toUpperCase() + str.slice(1);\n        }\n\n        return str;\n    };\n\n    /**\n     * Normalize css liked array configuration\n     * e.g.\n     *  3 => [3, 3, 3, 3]\n     *  [4, 2] => [4, 2, 4, 2]\n     *  [4, 3, 2] => [4, 3, 2, 3]\n     * @param {number|Array.<number>} val\n     */\n    formatUtil.normalizeCssArray = function (val) {\n        var len = val.length;\n        if (typeof (val) === 'number') {\n            return [val, val, val, val];\n        }\n        else if (len === 2) {\n            // vertical | horizontal\n            return [val[0], val[1], val[0], val[1]];\n        }\n        else if (len === 3) {\n            // top | horizontal | bottom\n            return [val[0], val[1], val[2], val[1]];\n        }\n        return val;\n    };\n\n    var encodeHTML = formatUtil.encodeHTML = function (source) {\n        return String(source)\n            .replace(/&/g, '&amp;')\n            .replace(/</g, '&lt;')\n            .replace(/>/g, '&gt;')\n            .replace(/\"/g, '&quot;')\n            .replace(/'/g, '&#39;');\n    };\n\n    var TPL_VAR_ALIAS = ['a', 'b', 'c', 'd', 'e', 'f', 'g'];\n\n    var wrapVar = function (varName, seriesIdx) {\n        return '{' + varName + (seriesIdx == null ? '' : seriesIdx) + '}';\n    };\n\n    /**\n     * Template formatter\n     * @param {string} tpl\n     * @param {Array.<Object>|Object} paramsList\n     * @param {boolean} [encode=false]\n     * @return {string}\n     */\n    formatUtil.formatTpl = function (tpl, paramsList, encode) {\n        if (!zrUtil.isArray(paramsList)) {\n            paramsList = [paramsList];\n        }\n        var seriesLen = paramsList.length;\n        if (!seriesLen) {\n            return '';\n        }\n\n        var $vars = paramsList[0].$vars || [];\n        for (var i = 0; i < $vars.length; i++) {\n            var alias = TPL_VAR_ALIAS[i];\n            var val = wrapVar(alias, 0);\n            tpl = tpl.replace(wrapVar(alias), encode ? encodeHTML(val) : val);\n        }\n        for (var seriesIdx = 0; seriesIdx < seriesLen; seriesIdx++) {\n            for (var k = 0; k < $vars.length; k++) {\n                var val = paramsList[seriesIdx][$vars[k]];\n                tpl = tpl.replace(\n                    wrapVar(TPL_VAR_ALIAS[k], seriesIdx),\n                    encode ? encodeHTML(val) : val\n                );\n            }\n        }\n\n        return tpl;\n    };\n\n\n    /**\n     * @param {string} str\n     * @return {string}\n     * @inner\n     */\n    var s2d = function (str) {\n        return str < 10 ? ('0' + str) : str;\n    };\n\n    /**\n     * ISO Date format\n     * @param {string} tpl\n     * @param {number} value\n     * @inner\n     */\n    formatUtil.formatTime = function (tpl, value) {\n        if (tpl === 'week'\n            || tpl === 'month'\n            || tpl === 'quarter'\n            || tpl === 'half-year'\n            || tpl === 'year'\n        ) {\n            tpl = 'MM-dd\\nyyyy';\n        }\n\n        var date = numberUtil.parseDate(value);\n        var y = date.getFullYear();\n        var M = date.getMonth() + 1;\n        var d = date.getDate();\n        var h = date.getHours();\n        var m = date.getMinutes();\n        var s = date.getSeconds();\n\n        tpl = tpl.replace('MM', s2d(M))\n            .toLowerCase()\n            .replace('yyyy', y)\n            .replace('yy', y % 100)\n            .replace('dd', s2d(d))\n            .replace('d', d)\n            .replace('hh', s2d(h))\n            .replace('h', h)\n            .replace('mm', s2d(m))\n            .replace('m', m)\n            .replace('ss', s2d(s))\n            .replace('s', s);\n\n        return tpl;\n    };\n\n    /**\n     * Capital first\n     * @param {string} str\n     * @return {string}\n     */\n    formatUtil.capitalFirst = function (str) {\n        return str ? str.charAt(0).toUpperCase() + str.substr(1) : str;\n    };\n\n    formatUtil.truncateText = textContain.truncateText;\n\n    module.exports = formatUtil;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/util/format.js\n// module id = 322\n// module chunks = 0 1 2 3 4","\n\n    var formatUtil = require('./format');\n    var nubmerUtil = require('./number');\n    var Model = require('../model/Model');\n    var zrUtil = require('zrender/lib/core/util');\n    var each = zrUtil.each;\n    var isObject = zrUtil.isObject;\n\n    var modelUtil = {};\n\n    /**\n     * If value is not array, then translate it to array.\n     * @param  {*} value\n     * @return {Array} [value] or value\n     */\n    modelUtil.normalizeToArray = function (value) {\n        return value instanceof Array\n            ? value\n            : value == null\n            ? []\n            : [value];\n    };\n\n    /**\n     * Sync default option between normal and emphasis like `position` and `show`\n     * In case some one will write code like\n     *     label: {\n     *         normal: {\n     *             show: false,\n     *             position: 'outside',\n     *             textStyle: {\n     *                 fontSize: 18\n     *             }\n     *         },\n     *         emphasis: {\n     *             show: true\n     *         }\n     *     }\n     * @param {Object} opt\n     * @param {Array.<string>} subOpts\n     */\n     modelUtil.defaultEmphasis = function (opt, subOpts) {\n        if (opt) {\n            var emphasisOpt = opt.emphasis = opt.emphasis || {};\n            var normalOpt = opt.normal = opt.normal || {};\n\n            // Default emphasis option from normal\n            each(subOpts, function (subOptName) {\n                var val = zrUtil.retrieve(emphasisOpt[subOptName], normalOpt[subOptName]);\n                if (val != null) {\n                    emphasisOpt[subOptName] = val;\n                }\n            });\n        }\n    };\n\n    modelUtil.LABEL_OPTIONS = ['position', 'offset', 'show', 'textStyle', 'distance', 'formatter'];\n\n    /**\n     * data could be [12, 2323, {value: 223}, [1221, 23], {value: [2, 23]}]\n     * This helper method retieves value from data.\n     * @param {string|number|Date|Array|Object} dataItem\n     * @return {number|string|Date|Array.<number|string|Date>}\n     */\n    modelUtil.getDataItemValue = function (dataItem) {\n        // Performance sensitive.\n        return dataItem && (dataItem.value == null ? dataItem : dataItem.value);\n    };\n\n    /**\n     * data could be [12, 2323, {value: 223}, [1221, 23], {value: [2, 23]}]\n     * This helper method determine if dataItem has extra option besides value\n     * @param {string|number|Date|Array|Object} dataItem\n     */\n    modelUtil.isDataItemOption = function (dataItem) {\n        return isObject(dataItem)\n            && !(dataItem instanceof Array);\n            // // markLine data can be array\n            // && !(dataItem[0] && isObject(dataItem[0]) && !(dataItem[0] instanceof Array));\n    };\n\n    /**\n     * This helper method convert value in data.\n     * @param {string|number|Date} value\n     * @param {Object|string} [dimInfo] If string (like 'x'), dimType defaults 'number'.\n     */\n    modelUtil.converDataValue = function (value, dimInfo) {\n        // Performance sensitive.\n        var dimType = dimInfo && dimInfo.type;\n        if (dimType === 'ordinal') {\n            return value;\n        }\n\n        if (dimType === 'time' && !isFinite(value) && value != null && value !== '-') {\n            value = +nubmerUtil.parseDate(value);\n        }\n\n        // dimType defaults 'number'.\n        // If dimType is not ordinal and value is null or undefined or NaN or '-',\n        // parse to NaN.\n        return (value == null || value === '')\n            ? NaN : +value; // If string (like '-'), using '+' parse to NaN\n    };\n\n    /**\n     * Create a model proxy to be used in tooltip for edge data, markLine data, markPoint data.\n     * @param {module:echarts/data/List} data\n     * @param {Object} opt\n     * @param {string} [opt.seriesIndex]\n     * @param {Object} [opt.name]\n     * @param {Object} [opt.mainType]\n     * @param {Object} [opt.subType]\n     */\n    modelUtil.createDataFormatModel = function (data, opt) {\n        var model = new Model();\n        zrUtil.mixin(model, modelUtil.dataFormatMixin);\n        model.seriesIndex = opt.seriesIndex;\n        model.name = opt.name || '';\n        model.mainType = opt.mainType;\n        model.subType = opt.subType;\n\n        model.getData = function () {\n            return data;\n        };\n        return model;\n    };\n\n    // PENDING A little ugly\n    modelUtil.dataFormatMixin = {\n        /**\n         * Get params for formatter\n         * @param {number} dataIndex\n         * @param {string} [dataType]\n         * @return {Object}\n         */\n        getDataParams: function (dataIndex, dataType) {\n            var data = this.getData(dataType);\n\n            var seriesIndex = this.seriesIndex;\n            var seriesName = this.name;\n\n            var rawValue = this.getRawValue(dataIndex, dataType);\n            var rawDataIndex = data.getRawIndex(dataIndex);\n            var name = data.getName(dataIndex, true);\n            var itemOpt = data.getRawDataItem(dataIndex);\n\n            return {\n                componentType: this.mainType,\n                componentSubType: this.subType,\n                seriesType: this.mainType === 'series' ? this.subType : null,\n                seriesIndex: seriesIndex,\n                seriesName: seriesName,\n                name: name,\n                dataIndex: rawDataIndex,\n                data: itemOpt,\n                dataType: dataType,\n                value: rawValue,\n                color: data.getItemVisual(dataIndex, 'color'),\n\n                // Param name list for mapping `a`, `b`, `c`, `d`, `e`\n                $vars: ['seriesName', 'name', 'value']\n            };\n        },\n\n        /**\n         * Format label\n         * @param {number} dataIndex\n         * @param {string} [status='normal'] 'normal' or 'emphasis'\n         * @param {string} [dataType]\n         * @param {number} [dimIndex]\n         * @return {string}\n         */\n        getFormattedLabel: function (dataIndex, status, dataType, dimIndex) {\n            status = status || 'normal';\n            var data = this.getData(dataType);\n            var itemModel = data.getItemModel(dataIndex);\n\n            var params = this.getDataParams(dataIndex, dataType);\n            if (dimIndex != null && (params.value instanceof Array)) {\n                params.value = params.value[dimIndex];\n            }\n\n            var formatter = itemModel.get(['label', status, 'formatter']);\n\n            if (typeof formatter === 'function') {\n                params.status = status;\n                return formatter(params);\n            }\n            else if (typeof formatter === 'string') {\n                return formatUtil.formatTpl(formatter, params);\n            }\n        },\n\n        /**\n         * Get raw value in option\n         * @param {number} idx\n         * @param {string} [dataType]\n         * @return {Object}\n         */\n        getRawValue: function (idx, dataType) {\n            var data = this.getData(dataType);\n            var dataItem = data.getRawDataItem(idx);\n            if (dataItem != null) {\n                return (isObject(dataItem) && !(dataItem instanceof Array))\n                    ? dataItem.value : dataItem;\n            }\n        },\n\n        /**\n         * Should be implemented.\n         * @param {number} dataIndex\n         * @param {boolean} [multipleSeries=false]\n         * @param {number} [dataType]\n         * @return {string} tooltip string\n         */\n        formatTooltip: zrUtil.noop\n    };\n\n    /**\n     * Mapping to exists for merge.\n     *\n     * @public\n     * @param {Array.<Object>|Array.<module:echarts/model/Component>} exists\n     * @param {Object|Array.<Object>} newCptOptions\n     * @return {Array.<Object>} Result, like [{exist: ..., option: ...}, {}],\n     *                          index of which is the same as exists.\n     */\n    modelUtil.mappingToExists = function (exists, newCptOptions) {\n        // Mapping by the order by original option (but not order of\n        // new option) in merge mode. Because we should ensure\n        // some specified index (like xAxisIndex) is consistent with\n        // original option, which is easy to understand, espatially in\n        // media query. And in most case, merge option is used to\n        // update partial option but not be expected to change order.\n        newCptOptions = (newCptOptions || []).slice();\n\n        var result = zrUtil.map(exists || [], function (obj, index) {\n            return {exist: obj};\n        });\n\n        // Mapping by id or name if specified.\n        each(newCptOptions, function (cptOption, index) {\n            if (!isObject(cptOption)) {\n                return;\n            }\n\n            // id has highest priority.\n            for (var i = 0; i < result.length; i++) {\n                if (!result[i].option // Consider name: two map to one.\n                    && cptOption.id != null\n                    && result[i].exist.id === cptOption.id + ''\n                ) {\n                    result[i].option = cptOption;\n                    newCptOptions[index] = null;\n                    return;\n                }\n            }\n\n            for (var i = 0; i < result.length; i++) {\n                var exist = result[i].exist;\n                if (!result[i].option // Consider name: two map to one.\n                    // Can not match when both ids exist but different.\n                    && (exist.id == null || cptOption.id == null)\n                    && cptOption.name != null\n                    && !modelUtil.isIdInner(cptOption)\n                    && !modelUtil.isIdInner(exist)\n                    && exist.name === cptOption.name + ''\n                ) {\n                    result[i].option = cptOption;\n                    newCptOptions[index] = null;\n                    return;\n                }\n            }\n        });\n\n        // Otherwise mapping by index.\n        each(newCptOptions, function (cptOption, index) {\n            if (!isObject(cptOption)) {\n                return;\n            }\n\n            var i = 0;\n            for (; i < result.length; i++) {\n                var exist = result[i].exist;\n                if (!result[i].option\n                    // Existing model that already has id should be able to\n                    // mapped to (because after mapping performed model may\n                    // be assigned with a id, whish should not affect next\n                    // mapping), except those has inner id.\n                    && !modelUtil.isIdInner(exist)\n                    // Caution:\n                    // Do not overwrite id. But name can be overwritten,\n                    // because axis use name as 'show label text'.\n                    // 'exist' always has id and name and we dont\n                    // need to check it.\n                    && cptOption.id == null\n                ) {\n                    result[i].option = cptOption;\n                    break;\n                }\n            }\n\n            if (i >= result.length) {\n                result.push({option: cptOption});\n            }\n        });\n\n        return result;\n    };\n\n    /**\n     * Make id and name for mapping result (result of mappingToExists)\n     * into `keyInfo` field.\n     *\n     * @public\n     * @param {Array.<Object>} Result, like [{exist: ..., option: ...}, {}],\n     *                          which order is the same as exists.\n     * @return {Array.<Object>} The input.\n     */\n    modelUtil.makeIdAndName = function (mapResult) {\n        // We use this id to hash component models and view instances\n        // in echarts. id can be specified by user, or auto generated.\n\n        // The id generation rule ensures new view instance are able\n        // to mapped to old instance when setOption are called in\n        // no-merge mode. So we generate model id by name and plus\n        // type in view id.\n\n        // name can be duplicated among components, which is convenient\n        // to specify multi components (like series) by one name.\n\n        // Ensure that each id is distinct.\n        var idMap = {};\n\n        each(mapResult, function (item, index) {\n            var existCpt = item.exist;\n            existCpt && (idMap[existCpt.id] = item);\n        });\n\n        each(mapResult, function (item, index) {\n            var opt = item.option;\n\n            zrUtil.assert(\n                !opt || opt.id == null || !idMap[opt.id] || idMap[opt.id] === item,\n                'id duplicates: ' + (opt && opt.id)\n            );\n\n            opt && opt.id != null && (idMap[opt.id] = item);\n            !item.keyInfo && (item.keyInfo = {});\n        });\n\n        // Make name and id.\n        each(mapResult, function (item, index) {\n            var existCpt = item.exist;\n            var opt = item.option;\n            var keyInfo = item.keyInfo;\n\n            if (!isObject(opt)) {\n                return;\n            }\n\n            // name can be overwitten. Consider case: axis.name = '20km'.\n            // But id generated by name will not be changed, which affect\n            // only in that case: setOption with 'not merge mode' and view\n            // instance will be recreated, which can be accepted.\n            keyInfo.name = opt.name != null\n                ? opt.name + ''\n                : existCpt\n                ? existCpt.name\n                : '\\0-';\n\n            if (existCpt) {\n                keyInfo.id = existCpt.id;\n            }\n            else if (opt.id != null) {\n                keyInfo.id = opt.id + '';\n            }\n            else {\n                // Consider this situatoin:\n                //  optionA: [{name: 'a'}, {name: 'a'}, {..}]\n                //  optionB [{..}, {name: 'a'}, {name: 'a'}]\n                // Series with the same name between optionA and optionB\n                // should be mapped.\n                var idNum = 0;\n                do {\n                    keyInfo.id = '\\0' + keyInfo.name + '\\0' + idNum++;\n                }\n                while (idMap[keyInfo.id]);\n            }\n\n            idMap[keyInfo.id] = item;\n        });\n    };\n\n    /**\n     * @public\n     * @param {Object} cptOption\n     * @return {boolean}\n     */\n    modelUtil.isIdInner = function (cptOption) {\n        return isObject(cptOption)\n            && cptOption.id\n            && (cptOption.id + '').indexOf('\\0_ec_\\0') === 0;\n    };\n\n    /**\n     * A helper for removing duplicate items between batchA and batchB,\n     * and in themselves, and categorize by series.\n     *\n     * @param {Array.<Object>} batchA Like: [{seriesId: 2, dataIndex: [32, 4, 5]}, ...]\n     * @param {Array.<Object>} batchB Like: [{seriesId: 2, dataIndex: [32, 4, 5]}, ...]\n     * @return {Array.<Array.<Object>, Array.<Object>>} result: [resultBatchA, resultBatchB]\n     */\n    modelUtil.compressBatches = function (batchA, batchB) {\n        var mapA = {};\n        var mapB = {};\n\n        makeMap(batchA || [], mapA);\n        makeMap(batchB || [], mapB, mapA);\n\n        return [mapToArray(mapA), mapToArray(mapB)];\n\n        function makeMap(sourceBatch, map, otherMap) {\n            for (var i = 0, len = sourceBatch.length; i < len; i++) {\n                var seriesId = sourceBatch[i].seriesId;\n                var dataIndices = modelUtil.normalizeToArray(sourceBatch[i].dataIndex);\n                var otherDataIndices = otherMap && otherMap[seriesId];\n\n                for (var j = 0, lenj = dataIndices.length; j < lenj; j++) {\n                    var dataIndex = dataIndices[j];\n\n                    if (otherDataIndices && otherDataIndices[dataIndex]) {\n                        otherDataIndices[dataIndex] = null;\n                    }\n                    else {\n                        (map[seriesId] || (map[seriesId] = {}))[dataIndex] = 1;\n                    }\n                }\n            }\n        }\n\n        function mapToArray(map, isData) {\n            var result = [];\n            for (var i in map) {\n                if (map.hasOwnProperty(i) && map[i] != null) {\n                    if (isData) {\n                        result.push(+i);\n                    }\n                    else {\n                        var dataIndices = mapToArray(map[i], true);\n                        dataIndices.length && result.push({seriesId: i, dataIndex: dataIndices});\n                    }\n                }\n            }\n            return result;\n        }\n    };\n\n    /**\n     * @param {module:echarts/data/List} data\n     * @param {Object} payload Contains dataIndex (means rawIndex) / dataIndexInside / name\n     *                         each of which can be Array or primary type.\n     * @return {number|Array.<number>} dataIndex If not found, return undefined/null.\n     */\n    modelUtil.queryDataIndex = function (data, payload) {\n        if (payload.dataIndexInside != null) {\n            return payload.dataIndexInside;\n        }\n        else if (payload.dataIndex != null) {\n            return zrUtil.isArray(payload.dataIndex)\n                ? zrUtil.map(payload.dataIndex, function (value) {\n                    return data.indexOfRawIndex(value);\n                })\n                : data.indexOfRawIndex(payload.dataIndex);\n        }\n        else if (payload.name != null) {\n            return zrUtil.isArray(payload.name)\n                ? zrUtil.map(payload.name, function (value) {\n                    return data.indexOfName(value);\n                })\n                : data.indexOfName(payload.name);\n        }\n    };\n\n    /**\n     * @param {module:echarts/model/Global} ecModel\n     * @param {string|Object} finder\n     *        If string, e.g., 'geo', means {geoIndex: 0}.\n     *        If Object, could contain some of these properties below:\n     *        {\n     *            seriesIndex, seriesId, seriesName,\n     *            geoIndex, geoId, goeName,\n     *            bmapIndex, bmapId, bmapName,\n     *            xAxisIndex, xAxisId, xAxisName,\n     *            yAxisIndex, yAxisId, yAxisName,\n     *            gridIndex, gridId, gridName,\n     *            ... (can be extended)\n     *        }\n     *        Each properties can be number|string|Array.<number>|Array.<string>\n     *        For example, a finder could be\n     *        {\n     *            seriesIndex: 3,\n     *            geoId: ['aa', 'cc'],\n     *            gridName: ['xx', 'rr']\n     *        }\n     * @param {Object} [opt]\n     * @param {string} [opt.defaultMainType]\n     * @return {Object} result like:\n     *        {\n     *            seriesModels: [seriesModel1, seriesModel2],\n     *            seriesModel: seriesModel1, // The first model\n     *            geoModels: [geoModel1, geoModel2],\n     *            geoModel: geoModel1, // The first model\n     *            ...\n     *        }\n     */\n    modelUtil.parseFinder = function (ecModel, finder, opt) {\n        if (zrUtil.isString(finder)) {\n            var obj = {};\n            obj[finder + 'Index'] = 0;\n            finder = obj;\n        }\n\n        var defaultMainType = opt && opt.defaultMainType;\n        if (defaultMainType\n            && !has(finder, defaultMainType + 'Index')\n            && !has(finder, defaultMainType + 'Id')\n            && !has(finder, defaultMainType + 'Name')\n        ) {\n            finder[defaultMainType + 'Index'] = 0;\n        }\n\n        var result = {};\n\n        each(finder, function (value, key) {\n            var value = finder[key];\n\n            // Exclude 'dataIndex' and other illgal keys.\n            if (key === 'dataIndex' || key === 'dataIndexInside') {\n                result[key] = value;\n                return;\n            }\n\n            var parsedKey = key.match(/^(\\w+)(Index|Id|Name)$/) || [];\n            var mainType = parsedKey[1];\n            var queryType = parsedKey[2];\n\n            if (!mainType || !queryType) {\n                return;\n            }\n\n            var queryParam = {mainType: mainType};\n            queryParam[queryType.toLowerCase()] = value;\n            var models = ecModel.queryComponents(queryParam);\n            result[mainType + 'Models'] = models;\n            result[mainType + 'Model'] = models[0];\n        });\n\n        return result;\n    };\n\n    function has(obj, prop) {\n        return obj && obj.hasOwnProperty(prop);\n    }\n\n    module.exports = modelUtil;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/util/model.js\n// module id = 323\n// module chunks = 0 1 2 3 4","'use strict';\n/**\n * @module echarts/core/BoundingRect\n */\n\n\n    var vec2 = require('./vector');\n    var matrix = require('./matrix');\n\n    var v2ApplyTransform = vec2.applyTransform;\n    var mathMin = Math.min;\n    var mathMax = Math.max;\n    /**\n     * @alias module:echarts/core/BoundingRect\n     */\n    function BoundingRect(x, y, width, height) {\n\n        if (width < 0) {\n            x = x + width;\n            width = -width;\n        }\n        if (height < 0) {\n            y = y + height;\n            height = -height;\n        }\n\n        /**\n         * @type {number}\n         */\n        this.x = x;\n        /**\n         * @type {number}\n         */\n        this.y = y;\n        /**\n         * @type {number}\n         */\n        this.width = width;\n        /**\n         * @type {number}\n         */\n        this.height = height;\n    }\n\n    BoundingRect.prototype = {\n\n        constructor: BoundingRect,\n\n        /**\n         * @param {module:echarts/core/BoundingRect} other\n         */\n        union: function (other) {\n            var x = mathMin(other.x, this.x);\n            var y = mathMin(other.y, this.y);\n\n            this.width = mathMax(\n                    other.x + other.width,\n                    this.x + this.width\n                ) - x;\n            this.height = mathMax(\n                    other.y + other.height,\n                    this.y + this.height\n                ) - y;\n            this.x = x;\n            this.y = y;\n        },\n\n        /**\n         * @param {Array.<number>} m\n         * @methods\n         */\n        applyTransform: (function () {\n            var lt = [];\n            var rb = [];\n            var lb = [];\n            var rt = [];\n            return function (m) {\n                // In case usage like this\n                // el.getBoundingRect().applyTransform(el.transform)\n                // And element has no transform\n                if (!m) {\n                    return;\n                }\n                lt[0] = lb[0] = this.x;\n                lt[1] = rt[1] = this.y;\n                rb[0] = rt[0] = this.x + this.width;\n                rb[1] = lb[1] = this.y + this.height;\n\n                v2ApplyTransform(lt, lt, m);\n                v2ApplyTransform(rb, rb, m);\n                v2ApplyTransform(lb, lb, m);\n                v2ApplyTransform(rt, rt, m);\n\n                this.x = mathMin(lt[0], rb[0], lb[0], rt[0]);\n                this.y = mathMin(lt[1], rb[1], lb[1], rt[1]);\n                var maxX = mathMax(lt[0], rb[0], lb[0], rt[0]);\n                var maxY = mathMax(lt[1], rb[1], lb[1], rt[1]);\n                this.width = maxX - this.x;\n                this.height = maxY - this.y;\n            };\n        })(),\n\n        /**\n         * Calculate matrix of transforming from self to target rect\n         * @param  {module:zrender/core/BoundingRect} b\n         * @return {Array.<number>}\n         */\n        calculateTransform: function (b) {\n            var a = this;\n            var sx = b.width / a.width;\n            var sy = b.height / a.height;\n\n            var m = matrix.create();\n\n            // 矩阵右乘\n            matrix.translate(m, m, [-a.x, -a.y]);\n            matrix.scale(m, m, [sx, sy]);\n            matrix.translate(m, m, [b.x, b.y]);\n\n            return m;\n        },\n\n        /**\n         * @param {(module:echarts/core/BoundingRect|Object)} b\n         * @return {boolean}\n         */\n        intersect: function (b) {\n            if (!b) {\n                return false;\n            }\n\n            if (!(b instanceof BoundingRect)) {\n                // Normalize negative width/height.\n                b = BoundingRect.create(b);\n            }\n\n            var a = this;\n            var ax0 = a.x;\n            var ax1 = a.x + a.width;\n            var ay0 = a.y;\n            var ay1 = a.y + a.height;\n\n            var bx0 = b.x;\n            var bx1 = b.x + b.width;\n            var by0 = b.y;\n            var by1 = b.y + b.height;\n\n            return ! (ax1 < bx0 || bx1 < ax0 || ay1 < by0 || by1 < ay0);\n        },\n\n        contain: function (x, y) {\n            var rect = this;\n            return x >= rect.x\n                && x <= (rect.x + rect.width)\n                && y >= rect.y\n                && y <= (rect.y + rect.height);\n        },\n\n        /**\n         * @return {module:echarts/core/BoundingRect}\n         */\n        clone: function () {\n            return new BoundingRect(this.x, this.y, this.width, this.height);\n        },\n\n        /**\n         * Copy from another rect\n         */\n        copy: function (other) {\n            this.x = other.x;\n            this.y = other.y;\n            this.width = other.width;\n            this.height = other.height;\n        },\n\n        plain: function () {\n            return {\n                x: this.x,\n                y: this.y,\n                width: this.width,\n                height: this.height\n            };\n        }\n    };\n\n    /**\n     * @param {Object|module:zrender/core/BoundingRect} rect\n     * @param {number} rect.x\n     * @param {number} rect.y\n     * @param {number} rect.width\n     * @param {number} rect.height\n     * @return {module:zrender/core/BoundingRect}\n     */\n    BoundingRect.create = function (rect) {\n        return new BoundingRect(rect.x, rect.y, rect.width, rect.height);\n    };\n\n    module.exports = BoundingRect;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/zrender/lib/core/BoundingRect.js\n// module id = 324\n// module chunks = 0 1 2 3 4","/**\n * @module echarts/model/Model\n */\n\n\n    var zrUtil = require('zrender/lib/core/util');\n    var clazzUtil = require('../util/clazz');\n    var env = require('zrender/lib/core/env');\n\n    /**\n     * @alias module:echarts/model/Model\n     * @constructor\n     * @param {Object} option\n     * @param {module:echarts/model/Model} [parentModel]\n     * @param {module:echarts/model/Global} [ecModel]\n     */\n    function Model(option, parentModel, ecModel) {\n        /**\n         * @type {module:echarts/model/Model}\n         * @readOnly\n         */\n        this.parentModel = parentModel;\n\n        /**\n         * @type {module:echarts/model/Global}\n         * @readOnly\n         */\n        this.ecModel = ecModel;\n\n        /**\n         * @type {Object}\n         * @protected\n         */\n        this.option = option;\n\n        // Simple optimization\n        // if (this.init) {\n        //     if (arguments.length <= 4) {\n        //         this.init(option, parentModel, ecModel, extraOpt);\n        //     }\n        //     else {\n        //         this.init.apply(this, arguments);\n        //     }\n        // }\n    }\n\n    Model.prototype = {\n\n        constructor: Model,\n\n        /**\n         * Model 的初始化函数\n         * @param {Object} option\n         */\n        init: null,\n\n        /**\n         * 从新的 Option merge\n         */\n        mergeOption: function (option) {\n            zrUtil.merge(this.option, option, true);\n        },\n\n        /**\n         * @param {string|Array.<string>} path\n         * @param {boolean} [ignoreParent=false]\n         * @return {*}\n         */\n        get: function (path, ignoreParent) {\n            if (path == null) {\n                return this.option;\n            }\n\n            return doGet(\n                this.option,\n                this.parsePath(path),\n                !ignoreParent && getParent(this, path)\n            );\n        },\n\n        /**\n         * @param {string} key\n         * @param {boolean} [ignoreParent=false]\n         * @return {*}\n         */\n        getShallow: function (key, ignoreParent) {\n            var option = this.option;\n\n            var val = option == null ? option : option[key];\n            var parentModel = !ignoreParent && getParent(this, key);\n            if (val == null && parentModel) {\n                val = parentModel.getShallow(key);\n            }\n            return val;\n        },\n\n        /**\n         * @param {string|Array.<string>} path\n         * @param {module:echarts/model/Model} [parentModel]\n         * @return {module:echarts/model/Model}\n         */\n        getModel: function (path, parentModel) {\n            var obj = path == null\n                ? this.option\n                : doGet(this.option, path = this.parsePath(path));\n\n            var thisParentModel;\n            parentModel = parentModel || (\n                (thisParentModel = getParent(this, path))\n                    && thisParentModel.getModel(path)\n            );\n\n            return new Model(obj, parentModel, this.ecModel);\n        },\n\n        /**\n         * If model has option\n         */\n        isEmpty: function () {\n            return this.option == null;\n        },\n\n        restoreData: function () {},\n\n        // Pending\n        clone: function () {\n            var Ctor = this.constructor;\n            return new Ctor(zrUtil.clone(this.option));\n        },\n\n        setReadOnly: function (properties) {\n            clazzUtil.setReadOnly(this, properties);\n        },\n\n        // If path is null/undefined, return null/undefined.\n        parsePath: function(path) {\n            if (typeof path === 'string') {\n                path = path.split('.');\n            }\n            return path;\n        },\n\n        /**\n         * @param {Function} getParentMethod\n         *        param {Array.<string>|string} path\n         *        return {module:echarts/model/Model}\n         */\n        customizeGetParent: function (getParentMethod) {\n            clazzUtil.set(this, 'getParent', getParentMethod);\n        },\n\n        isAnimationEnabled: function () {\n            if (!env.node) {\n                if (this.option.animation != null) {\n                    return !!this.option.animation;\n                }\n                else if (this.parentModel) {\n                    return this.parentModel.isAnimationEnabled();\n                }\n            }\n        }\n    };\n\n    function doGet(obj, pathArr, parentModel) {\n        for (var i = 0; i < pathArr.length; i++) {\n            // Ignore empty\n            if (!pathArr[i]) {\n                continue;\n            }\n            // obj could be number/string/... (like 0)\n            obj = (obj && typeof obj === 'object') ? obj[pathArr[i]] : null;\n            if (obj == null) {\n                break;\n            }\n        }\n        if (obj == null && parentModel) {\n            obj = parentModel.get(pathArr);\n        }\n        return obj;\n    }\n\n    function getParent(model, path) {\n        var getParentMethod = clazzUtil.get(model, 'getParent');\n        return getParentMethod ? getParentMethod.call(model, path) : model.parentModel;\n    }\n\n    // Enable Model.extend.\n    clazzUtil.enableClassExtend(Model);\n\n    var mixin = zrUtil.mixin;\n    mixin(Model, require('./mixin/lineStyle'));\n    mixin(Model, require('./mixin/areaStyle'));\n    mixin(Model, require('./mixin/textStyle'));\n    mixin(Model, require('./mixin/itemStyle'));\n\n    module.exports = Model;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/model/Model.js\n// module id = 325\n// module chunks = 0 1 2 3 4","\n\n    var zrUtil = require('zrender/lib/core/util');\n\n    var clazz = {};\n\n    var TYPE_DELIMITER = '.';\n    var IS_CONTAINER = '___EC__COMPONENT__CONTAINER___';\n    var MEMBER_PRIFIX = '\\0ec_\\0';\n\n    /**\n     * Hide private class member.\n     * The same behavior as `host[name] = value;` (can be right-value)\n     * @public\n     */\n    clazz.set = function (host, name, value) {\n        return (host[MEMBER_PRIFIX + name] = value);\n    };\n\n    /**\n     * Hide private class member.\n     * The same behavior as `host[name];`\n     * @public\n     */\n    clazz.get = function (host, name) {\n        return host[MEMBER_PRIFIX + name];\n    };\n\n    /**\n     * For hidden private class member.\n     * The same behavior as `host.hasOwnProperty(name);`\n     * @public\n     */\n    clazz.hasOwn = function (host, name) {\n        return host.hasOwnProperty(MEMBER_PRIFIX + name);\n    };\n\n    /**\n     * @public\n     */\n    var parseClassType = clazz.parseClassType = function (componentType) {\n        var ret = {main: '', sub: ''};\n        if (componentType) {\n            componentType = componentType.split(TYPE_DELIMITER);\n            ret.main = componentType[0] || '';\n            ret.sub = componentType[1] || '';\n        }\n        return ret;\n    };\n\n    /**\n     * @public\n     */\n    function checkClassType(componentType) {\n        zrUtil.assert(\n            /^[a-zA-Z0-9_]+([.][a-zA-Z0-9_]+)?$/.test(componentType),\n            'componentType \"' + componentType + '\" illegal'\n        );\n    }\n\n    /**\n     * @public\n     */\n    clazz.enableClassExtend = function (RootClass, mandatoryMethods) {\n\n        RootClass.$constructor = RootClass;\n        RootClass.extend = function (proto) {\n\n            if (__DEV__) {\n                zrUtil.each(mandatoryMethods, function (method) {\n                    if (!proto[method]) {\n                        console.warn(\n                            'Method `' + method + '` should be implemented'\n                            + (proto.type ? ' in ' + proto.type : '') + '.'\n                        );\n                    }\n                });\n            }\n\n            var superClass = this;\n            var ExtendedClass = function () {\n                if (!proto.$constructor) {\n                    superClass.apply(this, arguments);\n                }\n                else {\n                    proto.$constructor.apply(this, arguments);\n                }\n            };\n\n            zrUtil.extend(ExtendedClass.prototype, proto);\n\n            ExtendedClass.extend = this.extend;\n            ExtendedClass.superCall = superCall;\n            ExtendedClass.superApply = superApply;\n            zrUtil.inherits(ExtendedClass, this);\n            ExtendedClass.superClass = superClass;\n\n            return ExtendedClass;\n        };\n    };\n\n    // superCall should have class info, which can not be fetch from 'this'.\n    // Consider this case:\n    // class A has method f,\n    // class B inherits class A, overrides method f, f call superApply('f'),\n    // class C inherits class B, do not overrides method f,\n    // then when method of class C is called, dead loop occured.\n    function superCall(context, methodName) {\n        var args = zrUtil.slice(arguments, 2);\n        return this.superClass.prototype[methodName].apply(context, args);\n    }\n\n    function superApply(context, methodName, args) {\n        return this.superClass.prototype[methodName].apply(context, args);\n    }\n\n    /**\n     * @param {Object} entity\n     * @param {Object} options\n     * @param {boolean} [options.registerWhenExtend]\n     * @public\n     */\n    clazz.enableClassManagement = function (entity, options) {\n        options = options || {};\n\n        /**\n         * Component model classes\n         * key: componentType,\n         * value:\n         *     componentClass, when componentType is 'xxx'\n         *     or Object.<subKey, componentClass>, when componentType is 'xxx.yy'\n         * @type {Object}\n         */\n        var storage = {};\n\n        entity.registerClass = function (Clazz, componentType) {\n            if (componentType) {\n                checkClassType(componentType);\n                componentType = parseClassType(componentType);\n\n                if (!componentType.sub) {\n                    if (__DEV__) {\n                        if (storage[componentType.main]) {\n                            console.warn(componentType.main + ' exists.');\n                        }\n                    }\n                    storage[componentType.main] = Clazz;\n                }\n                else if (componentType.sub !== IS_CONTAINER) {\n                    var container = makeContainer(componentType);\n                    container[componentType.sub] = Clazz;\n                }\n            }\n            return Clazz;\n        };\n\n        entity.getClass = function (componentMainType, subType, throwWhenNotFound) {\n            var Clazz = storage[componentMainType];\n\n            if (Clazz && Clazz[IS_CONTAINER]) {\n                Clazz = subType ? Clazz[subType] : null;\n            }\n\n            if (throwWhenNotFound && !Clazz) {\n                throw new Error(\n                    !subType\n                        ? componentMainType + '.' + 'type should be specified.'\n                        : 'Component ' + componentMainType + '.' + (subType || '') + ' not exists. Load it first.'\n                );\n            }\n\n            return Clazz;\n        };\n\n        entity.getClassesByMainType = function (componentType) {\n            componentType = parseClassType(componentType);\n\n            var result = [];\n            var obj = storage[componentType.main];\n\n            if (obj && obj[IS_CONTAINER]) {\n                zrUtil.each(obj, function (o, type) {\n                    type !== IS_CONTAINER && result.push(o);\n                });\n            }\n            else {\n                result.push(obj);\n            }\n\n            return result;\n        };\n\n        entity.hasClass = function (componentType) {\n            // Just consider componentType.main.\n            componentType = parseClassType(componentType);\n            return !!storage[componentType.main];\n        };\n\n        /**\n         * @return {Array.<string>} Like ['aa', 'bb'], but can not be ['aa.xx']\n         */\n        entity.getAllClassMainTypes = function () {\n            var types = [];\n            zrUtil.each(storage, function (obj, type) {\n                types.push(type);\n            });\n            return types;\n        };\n\n        /**\n         * If a main type is container and has sub types\n         * @param  {string}  mainType\n         * @return {boolean}\n         */\n        entity.hasSubTypes = function (componentType) {\n            componentType = parseClassType(componentType);\n            var obj = storage[componentType.main];\n            return obj && obj[IS_CONTAINER];\n        };\n\n        entity.parseClassType = parseClassType;\n\n        function makeContainer(componentType) {\n            var container = storage[componentType.main];\n            if (!container || !container[IS_CONTAINER]) {\n                container = storage[componentType.main] = {};\n                container[IS_CONTAINER] = true;\n            }\n            return container;\n        }\n\n        if (options.registerWhenExtend) {\n            var originalExtend = entity.extend;\n            if (originalExtend) {\n                entity.extend = function (proto) {\n                    var ExtendedClass = originalExtend.call(this, proto);\n                    return entity.registerClass(ExtendedClass, proto.type);\n                };\n            }\n        }\n\n        return entity;\n    };\n\n    /**\n     * @param {string|Array.<string>} properties\n     */\n    clazz.setReadOnly = function (obj, properties) {\n        // FIXME It seems broken in IE8 simulation of IE11\n        // if (!zrUtil.isArray(properties)) {\n        //     properties = properties != null ? [properties] : [];\n        // }\n        // zrUtil.each(properties, function (prop) {\n        //     var value = obj[prop];\n\n        //     Object.defineProperty\n        //         && Object.defineProperty(obj, prop, {\n        //             value: value, writable: false\n        //         });\n        //     zrUtil.isArray(obj[prop])\n        //         && Object.freeze\n        //         && Object.freeze(obj[prop]);\n        // });\n    };\n\n    module.exports = clazz;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/util/clazz.js\n// module id = 326\n// module chunks = 0 1 2 3 4","/**\n * Component model\n *\n * @module echarts/model/Component\n */\n\n\n    var Model = require('./Model');\n    var zrUtil = require('zrender/lib/core/util');\n    var arrayPush = Array.prototype.push;\n    var componentUtil = require('../util/component');\n    var clazzUtil = require('../util/clazz');\n    var layout = require('../util/layout');\n\n    /**\n     * @alias module:echarts/model/Component\n     * @constructor\n     * @param {Object} option\n     * @param {module:echarts/model/Model} parentModel\n     * @param {module:echarts/model/Model} ecModel\n     */\n    var ComponentModel = Model.extend({\n\n        type: 'component',\n\n        /**\n         * @readOnly\n         * @type {string}\n         */\n        id: '',\n\n        /**\n         * @readOnly\n         */\n        name: '',\n\n        /**\n         * @readOnly\n         * @type {string}\n         */\n        mainType: '',\n\n        /**\n         * @readOnly\n         * @type {string}\n         */\n        subType: '',\n\n        /**\n         * @readOnly\n         * @type {number}\n         */\n        componentIndex: 0,\n\n        /**\n         * @type {Object}\n         * @protected\n         */\n        defaultOption: null,\n\n        /**\n         * @type {module:echarts/model/Global}\n         * @readOnly\n         */\n        ecModel: null,\n\n        /**\n         * key: componentType\n         * value:  Component model list, can not be null.\n         * @type {Object.<string, Array.<module:echarts/model/Model>>}\n         * @readOnly\n         */\n        dependentModels: [],\n\n        /**\n         * @type {string}\n         * @readOnly\n         */\n        uid: null,\n\n        /**\n         * Support merge layout params.\n         * Only support 'box' now (left/right/top/bottom/width/height).\n         * @type {string|Object} Object can be {ignoreSize: true}\n         * @readOnly\n         */\n        layoutMode: null,\n\n        $constructor: function (option, parentModel, ecModel, extraOpt) {\n            Model.call(this, option, parentModel, ecModel, extraOpt);\n\n            this.uid = componentUtil.getUID('componentModel');\n        },\n\n\n        init: function (option, parentModel, ecModel, extraOpt) {\n            this.mergeDefaultAndTheme(option, ecModel);\n        },\n\n        mergeDefaultAndTheme: function (option, ecModel) {\n            var layoutMode = this.layoutMode;\n            var inputPositionParams = layoutMode\n                ? layout.getLayoutParams(option) : {};\n\n            var themeModel = ecModel.getTheme();\n            zrUtil.merge(option, themeModel.get(this.mainType));\n            zrUtil.merge(option, this.getDefaultOption());\n\n            if (layoutMode) {\n                layout.mergeLayoutParam(option, inputPositionParams, layoutMode);\n            }\n        },\n\n        mergeOption: function (option, extraOpt) {\n            zrUtil.merge(this.option, option, true);\n\n            var layoutMode = this.layoutMode;\n            if (layoutMode) {\n                layout.mergeLayoutParam(this.option, option, layoutMode);\n            }\n        },\n\n        // Hooker after init or mergeOption\n        optionUpdated: function (newCptOption, isInit) {},\n\n        getDefaultOption: function () {\n            if (!clazzUtil.hasOwn(this, '__defaultOption')) {\n                var optList = [];\n                var Class = this.constructor;\n                while (Class) {\n                    var opt = Class.prototype.defaultOption;\n                    opt && optList.push(opt);\n                    Class = Class.superClass;\n                }\n\n                var defaultOption = {};\n                for (var i = optList.length - 1; i >= 0; i--) {\n                    defaultOption = zrUtil.merge(defaultOption, optList[i], true);\n                }\n                clazzUtil.set(this, '__defaultOption', defaultOption);\n            }\n            return clazzUtil.get(this, '__defaultOption');\n        },\n\n        getReferringComponents: function (mainType) {\n            return this.ecModel.queryComponents({\n                mainType: mainType,\n                index: this.get(mainType + 'Index', true),\n                id: this.get(mainType + 'Id', true)\n            });\n        }\n\n    });\n\n    // Reset ComponentModel.extend, add preConstruct.\n    // clazzUtil.enableClassExtend(\n    //     ComponentModel,\n    //     function (option, parentModel, ecModel, extraOpt) {\n    //         // Set dependentModels, componentIndex, name, id, mainType, subType.\n    //         zrUtil.extend(this, extraOpt);\n\n    //         this.uid = componentUtil.getUID('componentModel');\n\n    //         // this.setReadOnly([\n    //         //     'type', 'id', 'uid', 'name', 'mainType', 'subType',\n    //         //     'dependentModels', 'componentIndex'\n    //         // ]);\n    //     }\n    // );\n\n    // Add capability of registerClass, getClass, hasClass, registerSubTypeDefaulter and so on.\n    clazzUtil.enableClassManagement(\n        ComponentModel, {registerWhenExtend: true}\n    );\n    componentUtil.enableSubTypeDefaulter(ComponentModel);\n\n    // Add capability of ComponentModel.topologicalTravel.\n    componentUtil.enableTopologicalTravel(ComponentModel, getDependencies);\n\n    function getDependencies(componentType) {\n        var deps = [];\n        zrUtil.each(ComponentModel.getClassesByMainType(componentType), function (Clazz) {\n            arrayPush.apply(deps, Clazz.prototype.dependencies || []);\n        });\n        // Ensure main type\n        return zrUtil.map(deps, function (type) {\n            return clazzUtil.parseClassType(type).main;\n        });\n    }\n\n    zrUtil.mixin(ComponentModel, require('./mixin/boxLayout'));\n\n    module.exports = ComponentModel;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/model/Component.js\n// module id = 327\n// module chunks = 0 1 2 3 4","'use strict';\n// Layout helpers for each component positioning\n\n\n    var zrUtil = require('zrender/lib/core/util');\n    var BoundingRect = require('zrender/lib/core/BoundingRect');\n    var numberUtil = require('./number');\n    var formatUtil = require('./format');\n    var parsePercent = numberUtil.parsePercent;\n    var each = zrUtil.each;\n\n    var layout = {};\n\n    var LOCATION_PARAMS = layout.LOCATION_PARAMS = [\n        'left', 'right', 'top', 'bottom', 'width', 'height'\n    ];\n\n    function boxLayout(orient, group, gap, maxWidth, maxHeight) {\n        var x = 0;\n        var y = 0;\n        if (maxWidth == null) {\n            maxWidth = Infinity;\n        }\n        if (maxHeight == null) {\n            maxHeight = Infinity;\n        }\n        var currentLineMaxSize = 0;\n        group.eachChild(function (child, idx) {\n            var position = child.position;\n            var rect = child.getBoundingRect();\n            var nextChild = group.childAt(idx + 1);\n            var nextChildRect = nextChild && nextChild.getBoundingRect();\n            var nextX;\n            var nextY;\n            if (orient === 'horizontal') {\n                var moveX = rect.width + (nextChildRect ? (-nextChildRect.x + rect.x) : 0);\n                nextX = x + moveX;\n                // Wrap when width exceeds maxWidth or meet a `newline` group\n                if (nextX > maxWidth || child.newline) {\n                    x = 0;\n                    nextX = moveX;\n                    y += currentLineMaxSize + gap;\n                    currentLineMaxSize = rect.height;\n                }\n                else {\n                    currentLineMaxSize = Math.max(currentLineMaxSize, rect.height);\n                }\n            }\n            else {\n                var moveY = rect.height + (nextChildRect ? (-nextChildRect.y + rect.y) : 0);\n                nextY = y + moveY;\n                // Wrap when width exceeds maxHeight or meet a `newline` group\n                if (nextY > maxHeight || child.newline) {\n                    x += currentLineMaxSize + gap;\n                    y = 0;\n                    nextY = moveY;\n                    currentLineMaxSize = rect.width;\n                }\n                else {\n                    currentLineMaxSize = Math.max(currentLineMaxSize, rect.width);\n                }\n            }\n\n            if (child.newline) {\n                return;\n            }\n\n            position[0] = x;\n            position[1] = y;\n\n            orient === 'horizontal'\n                ? (x = nextX + gap)\n                : (y = nextY + gap);\n        });\n    }\n\n    /**\n     * VBox or HBox layouting\n     * @param {string} orient\n     * @param {module:zrender/container/Group} group\n     * @param {number} gap\n     * @param {number} [width=Infinity]\n     * @param {number} [height=Infinity]\n     */\n    layout.box = boxLayout;\n\n    /**\n     * VBox layouting\n     * @param {module:zrender/container/Group} group\n     * @param {number} gap\n     * @param {number} [width=Infinity]\n     * @param {number} [height=Infinity]\n     */\n    layout.vbox = zrUtil.curry(boxLayout, 'vertical');\n\n    /**\n     * HBox layouting\n     * @param {module:zrender/container/Group} group\n     * @param {number} gap\n     * @param {number} [width=Infinity]\n     * @param {number} [height=Infinity]\n     */\n    layout.hbox = zrUtil.curry(boxLayout, 'horizontal');\n\n    /**\n     * If x or x2 is not specified or 'center' 'left' 'right',\n     * the width would be as long as possible.\n     * If y or y2 is not specified or 'middle' 'top' 'bottom',\n     * the height would be as long as possible.\n     *\n     * @param {Object} positionInfo\n     * @param {number|string} [positionInfo.x]\n     * @param {number|string} [positionInfo.y]\n     * @param {number|string} [positionInfo.x2]\n     * @param {number|string} [positionInfo.y2]\n     * @param {Object} containerRect\n     * @param {string|number} margin\n     * @return {Object} {width, height}\n     */\n    layout.getAvailableSize = function (positionInfo, containerRect, margin) {\n        var containerWidth = containerRect.width;\n        var containerHeight = containerRect.height;\n\n        var x = parsePercent(positionInfo.x, containerWidth);\n        var y = parsePercent(positionInfo.y, containerHeight);\n        var x2 = parsePercent(positionInfo.x2, containerWidth);\n        var y2 = parsePercent(positionInfo.y2, containerHeight);\n\n        (isNaN(x) || isNaN(parseFloat(positionInfo.x))) && (x = 0);\n        (isNaN(x2) || isNaN(parseFloat(positionInfo.x2))) && (x2 = containerWidth);\n        (isNaN(y) || isNaN(parseFloat(positionInfo.y))) && (y = 0);\n        (isNaN(y2) || isNaN(parseFloat(positionInfo.y2))) && (y2 = containerHeight);\n\n        margin = formatUtil.normalizeCssArray(margin || 0);\n\n        return {\n            width: Math.max(x2 - x - margin[1] - margin[3], 0),\n            height: Math.max(y2 - y - margin[0] - margin[2], 0)\n        };\n    };\n\n    /**\n     * Parse position info.\n     *\n     * @param {Object} positionInfo\n     * @param {number|string} [positionInfo.left]\n     * @param {number|string} [positionInfo.top]\n     * @param {number|string} [positionInfo.right]\n     * @param {number|string} [positionInfo.bottom]\n     * @param {number|string} [positionInfo.width]\n     * @param {number|string} [positionInfo.height]\n     * @param {number|string} [positionInfo.aspect] Aspect is width / height\n     * @param {Object} containerRect\n     * @param {string|number} [margin]\n     *\n     * @return {module:zrender/core/BoundingRect}\n     */\n    layout.getLayoutRect = function (\n        positionInfo, containerRect, margin\n    ) {\n        margin = formatUtil.normalizeCssArray(margin || 0);\n\n        var containerWidth = containerRect.width;\n        var containerHeight = containerRect.height;\n\n        var left = parsePercent(positionInfo.left, containerWidth);\n        var top = parsePercent(positionInfo.top, containerHeight);\n        var right = parsePercent(positionInfo.right, containerWidth);\n        var bottom = parsePercent(positionInfo.bottom, containerHeight);\n        var width = parsePercent(positionInfo.width, containerWidth);\n        var height = parsePercent(positionInfo.height, containerHeight);\n\n        var verticalMargin = margin[2] + margin[0];\n        var horizontalMargin = margin[1] + margin[3];\n        var aspect = positionInfo.aspect;\n\n        // If width is not specified, calculate width from left and right\n        if (isNaN(width)) {\n            width = containerWidth - right - horizontalMargin - left;\n        }\n        if (isNaN(height)) {\n            height = containerHeight - bottom - verticalMargin - top;\n        }\n\n        // If width and height are not given\n        // 1. Graph should not exceeds the container\n        // 2. Aspect must be keeped\n        // 3. Graph should take the space as more as possible\n        if (isNaN(width) && isNaN(height)) {\n            if (aspect > containerWidth / containerHeight) {\n                width = containerWidth * 0.8;\n            }\n            else {\n                height = containerHeight * 0.8;\n            }\n        }\n\n        if (aspect != null) {\n            // Calculate width or height with given aspect\n            if (isNaN(width)) {\n                width = aspect * height;\n            }\n            if (isNaN(height)) {\n                height = width / aspect;\n            }\n        }\n\n        // If left is not specified, calculate left from right and width\n        if (isNaN(left)) {\n            left = containerWidth - right - width - horizontalMargin;\n        }\n        if (isNaN(top)) {\n            top = containerHeight - bottom - height - verticalMargin;\n        }\n\n        // Align left and top\n        switch (positionInfo.left || positionInfo.right) {\n            case 'center':\n                left = containerWidth / 2 - width / 2 - margin[3];\n                break;\n            case 'right':\n                left = containerWidth - width - horizontalMargin;\n                break;\n        }\n        switch (positionInfo.top || positionInfo.bottom) {\n            case 'middle':\n            case 'center':\n                top = containerHeight / 2 - height / 2 - margin[0];\n                break;\n            case 'bottom':\n                top = containerHeight - height - verticalMargin;\n                break;\n        }\n        // If something is wrong and left, top, width, height are calculated as NaN\n        left = left || 0;\n        top = top || 0;\n        if (isNaN(width)) {\n            // Width may be NaN if only one value is given except width\n            width = containerWidth - left - (right || 0);\n        }\n        if (isNaN(height)) {\n            // Height may be NaN if only one value is given except height\n            height = containerHeight - top - (bottom || 0);\n        }\n\n        var rect = new BoundingRect(left + margin[3], top + margin[0], width, height);\n        rect.margin = margin;\n        return rect;\n    };\n\n\n    /**\n     * Position a zr element in viewport\n     *  Group position is specified by either\n     *  {left, top}, {right, bottom}\n     *  If all properties exists, right and bottom will be igonred.\n     *\n     * Logic:\n     *     1. Scale (against origin point in parent coord)\n     *     2. Rotate (against origin point in parent coord)\n     *     3. Traslate (with el.position by this method)\n     * So this method only fixes the last step 'Traslate', which does not affect\n     * scaling and rotating.\n     *\n     * If be called repeatly with the same input el, the same result will be gotten.\n     *\n     * @param {module:zrender/Element} el Should have `getBoundingRect` method.\n     * @param {Object} positionInfo\n     * @param {number|string} [positionInfo.left]\n     * @param {number|string} [positionInfo.top]\n     * @param {number|string} [positionInfo.right]\n     * @param {number|string} [positionInfo.bottom]\n     * @param {Object} containerRect\n     * @param {string|number} margin\n     * @param {Object} [opt]\n     * @param {Array.<number>} [opt.hv=[1,1]] Only horizontal or only vertical.\n     * @param {Array.<number>} [opt.boundingMode='all']\n     *        Specify how to calculate boundingRect when locating.\n     *        'all': Position the boundingRect that is transformed and uioned\n     *               both itself and its descendants.\n     *               This mode simplies confine the elements in the bounding\n     *               of their container (e.g., using 'right: 0').\n     *        'raw': Position the boundingRect that is not transformed and only itself.\n     *               This mode is useful when you want a element can overflow its\n     *               container. (Consider a rotated circle needs to be located in a corner.)\n     *               In this mode positionInfo.width/height can only be number.\n     */\n    layout.positionElement = function (el, positionInfo, containerRect, margin, opt) {\n        var h = !opt || !opt.hv || opt.hv[0];\n        var v = !opt || !opt.hv || opt.hv[1];\n        var boundingMode = opt && opt.boundingMode || 'all';\n\n        if (!h && !v) {\n            return;\n        }\n\n        var rect;\n        if (boundingMode === 'raw') {\n            rect = el.type === 'group'\n                ? new BoundingRect(0, 0, +positionInfo.width || 0, +positionInfo.height || 0)\n                : el.getBoundingRect();\n        }\n        else {\n            rect = el.getBoundingRect();\n            if (el.needLocalTransform()) {\n                var transform = el.getLocalTransform();\n                // Notice: raw rect may be inner object of el,\n                // which should not be modified.\n                rect = rect.clone();\n                rect.applyTransform(transform);\n            }\n        }\n\n        positionInfo = layout.getLayoutRect(\n            zrUtil.defaults(\n                {width: rect.width, height: rect.height},\n                positionInfo\n            ),\n            containerRect,\n            margin\n        );\n\n        // Because 'tranlate' is the last step in transform\n        // (see zrender/core/Transformable#getLocalTransfrom),\n        // we can just only modify el.position to get final result.\n        var elPos = el.position;\n        var dx = h ? positionInfo.x - rect.x : 0;\n        var dy = v ? positionInfo.y - rect.y : 0;\n\n        el.attr('position', boundingMode === 'raw' ? [dx, dy] : [elPos[0] + dx, elPos[1] + dy]);\n    };\n\n    /**\n     * Consider Case:\n     * When defulat option has {left: 0, width: 100}, and we set {right: 0}\n     * through setOption or media query, using normal zrUtil.merge will cause\n     * {right: 0} does not take effect.\n     *\n     * @example\n     * ComponentModel.extend({\n     *     init: function () {\n     *         ...\n     *         var inputPositionParams = layout.getLayoutParams(option);\n     *         this.mergeOption(inputPositionParams);\n     *     },\n     *     mergeOption: function (newOption) {\n     *         newOption && zrUtil.merge(thisOption, newOption, true);\n     *         layout.mergeLayoutParam(thisOption, newOption);\n     *     }\n     * });\n     *\n     * @param {Object} targetOption\n     * @param {Object} newOption\n     * @param {Object|string} [opt]\n     * @param {boolean} [opt.ignoreSize=false] Some component must has width and height.\n     */\n    layout.mergeLayoutParam = function (targetOption, newOption, opt) {\n        !zrUtil.isObject(opt) && (opt = {});\n        var hNames = ['width', 'left', 'right']; // Order by priority.\n        var vNames = ['height', 'top', 'bottom']; // Order by priority.\n        var hResult = merge(hNames);\n        var vResult = merge(vNames);\n\n        copy(hNames, targetOption, hResult);\n        copy(vNames, targetOption, vResult);\n\n        function merge(names) {\n            var newParams = {};\n            var newValueCount = 0;\n            var merged = {};\n            var mergedValueCount = 0;\n            var enoughParamNumber = opt.ignoreSize ? 1 : 2;\n\n            each(names, function (name) {\n                merged[name] = targetOption[name];\n            });\n            each(names, function (name) {\n                // Consider case: newOption.width is null, which is\n                // set by user for removing width setting.\n                hasProp(newOption, name) && (newParams[name] = merged[name] = newOption[name]);\n                hasValue(newParams, name) && newValueCount++;\n                hasValue(merged, name) && mergedValueCount++;\n            });\n\n            // Case: newOption: {width: ..., right: ...},\n            // or targetOption: {right: ...} and newOption: {width: ...},\n            // There is no conflict when merged only has params count\n            // little than enoughParamNumber.\n            if (mergedValueCount === enoughParamNumber || !newValueCount) {\n                return merged;\n            }\n            // Case: newOption: {width: ..., right: ...},\n            // Than we can make sure user only want those two, and ignore\n            // all origin params in targetOption.\n            else if (newValueCount >= enoughParamNumber) {\n                return newParams;\n            }\n            else {\n                // Chose another param from targetOption by priority.\n                // When 'ignoreSize', enoughParamNumber is 1 and those will not happen.\n                for (var i = 0; i < names.length; i++) {\n                    var name = names[i];\n                    if (!hasProp(newParams, name) && hasProp(targetOption, name)) {\n                        newParams[name] = targetOption[name];\n                        break;\n                    }\n                }\n                return newParams;\n            }\n        }\n\n        function hasProp(obj, name) {\n            return obj.hasOwnProperty(name);\n        }\n\n        function hasValue(obj, name) {\n            return obj[name] != null && obj[name] !== 'auto';\n        }\n\n        function copy(names, target, source) {\n            each(names, function (name) {\n                target[name] = source[name];\n            });\n        }\n    };\n\n    /**\n     * Retrieve 'left', 'right', 'top', 'bottom', 'width', 'height' from object.\n     * @param {Object} source\n     * @return {Object} Result contains those props.\n     */\n    layout.getLayoutParams = function (source) {\n        return layout.copyLayoutParams({}, source);\n    };\n\n    /**\n     * Retrieve 'left', 'right', 'top', 'bottom', 'width', 'height' from object.\n     * @param {Object} source\n     * @return {Object} Result contains those props.\n     */\n    layout.copyLayoutParams = function (target, source) {\n        source && target && each(LOCATION_PARAMS, function (name) {\n            source.hasOwnProperty(name) && (target[name] = source[name]);\n        });\n        return target;\n    };\n\n    module.exports = layout;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/util/layout.js\n// module id = 328\n// module chunks = 0 1 2 3 4","'use strict';\n/**\n * 曲线辅助模块\n * @module zrender/core/curve\n * @author pissang(https://www.github.com/pissang)\n */\n\n\n    var vec2 = require('./vector');\n    var v2Create = vec2.create;\n    var v2DistSquare = vec2.distSquare;\n    var mathPow = Math.pow;\n    var mathSqrt = Math.sqrt;\n\n    var EPSILON = 1e-8;\n    var EPSILON_NUMERIC = 1e-4;\n\n    var THREE_SQRT = mathSqrt(3);\n    var ONE_THIRD = 1 / 3;\n\n    // 临时变量\n    var _v0 = v2Create();\n    var _v1 = v2Create();\n    var _v2 = v2Create();\n    // var _v3 = vec2.create();\n\n    function isAroundZero(val) {\n        return val > -EPSILON && val < EPSILON;\n    }\n    function isNotAroundZero(val) {\n        return val > EPSILON || val < -EPSILON;\n    }\n    /**\n     * 计算三次贝塞尔值\n     * @memberOf module:zrender/core/curve\n     * @param  {number} p0\n     * @param  {number} p1\n     * @param  {number} p2\n     * @param  {number} p3\n     * @param  {number} t\n     * @return {number}\n     */\n    function cubicAt(p0, p1, p2, p3, t) {\n        var onet = 1 - t;\n        return onet * onet * (onet * p0 + 3 * t * p1)\n             + t * t * (t * p3 + 3 * onet * p2);\n    }\n\n    /**\n     * 计算三次贝塞尔导数值\n     * @memberOf module:zrender/core/curve\n     * @param  {number} p0\n     * @param  {number} p1\n     * @param  {number} p2\n     * @param  {number} p3\n     * @param  {number} t\n     * @return {number}\n     */\n    function cubicDerivativeAt(p0, p1, p2, p3, t) {\n        var onet = 1 - t;\n        return 3 * (\n            ((p1 - p0) * onet + 2 * (p2 - p1) * t) * onet\n            + (p3 - p2) * t * t\n        );\n    }\n\n    /**\n     * 计算三次贝塞尔方程根，使用盛金公式\n     * @memberOf module:zrender/core/curve\n     * @param  {number} p0\n     * @param  {number} p1\n     * @param  {number} p2\n     * @param  {number} p3\n     * @param  {number} val\n     * @param  {Array.<number>} roots\n     * @return {number} 有效根数目\n     */\n    function cubicRootAt(p0, p1, p2, p3, val, roots) {\n        // Evaluate roots of cubic functions\n        var a = p3 + 3 * (p1 - p2) - p0;\n        var b = 3 * (p2 - p1 * 2 + p0);\n        var c = 3 * (p1  - p0);\n        var d = p0 - val;\n\n        var A = b * b - 3 * a * c;\n        var B = b * c - 9 * a * d;\n        var C = c * c - 3 * b * d;\n\n        var n = 0;\n\n        if (isAroundZero(A) && isAroundZero(B)) {\n            if (isAroundZero(b)) {\n                roots[0] = 0;\n            }\n            else {\n                var t1 = -c / b;  //t1, t2, t3, b is not zero\n                if (t1 >= 0 && t1 <= 1) {\n                    roots[n++] = t1;\n                }\n            }\n        }\n        else {\n            var disc = B * B - 4 * A * C;\n\n            if (isAroundZero(disc)) {\n                var K = B / A;\n                var t1 = -b / a + K;  // t1, a is not zero\n                var t2 = -K / 2;  // t2, t3\n                if (t1 >= 0 && t1 <= 1) {\n                    roots[n++] = t1;\n                }\n                if (t2 >= 0 && t2 <= 1) {\n                    roots[n++] = t2;\n                }\n            }\n            else if (disc > 0) {\n                var discSqrt = mathSqrt(disc);\n                var Y1 = A * b + 1.5 * a * (-B + discSqrt);\n                var Y2 = A * b + 1.5 * a * (-B - discSqrt);\n                if (Y1 < 0) {\n                    Y1 = -mathPow(-Y1, ONE_THIRD);\n                }\n                else {\n                    Y1 = mathPow(Y1, ONE_THIRD);\n                }\n                if (Y2 < 0) {\n                    Y2 = -mathPow(-Y2, ONE_THIRD);\n                }\n                else {\n                    Y2 = mathPow(Y2, ONE_THIRD);\n                }\n                var t1 = (-b - (Y1 + Y2)) / (3 * a);\n                if (t1 >= 0 && t1 <= 1) {\n                    roots[n++] = t1;\n                }\n            }\n            else {\n                var T = (2 * A * b - 3 * a * B) / (2 * mathSqrt(A * A * A));\n                var theta = Math.acos(T) / 3;\n                var ASqrt = mathSqrt(A);\n                var tmp = Math.cos(theta);\n\n                var t1 = (-b - 2 * ASqrt * tmp) / (3 * a);\n                var t2 = (-b + ASqrt * (tmp + THREE_SQRT * Math.sin(theta))) / (3 * a);\n                var t3 = (-b + ASqrt * (tmp - THREE_SQRT * Math.sin(theta))) / (3 * a);\n                if (t1 >= 0 && t1 <= 1) {\n                    roots[n++] = t1;\n                }\n                if (t2 >= 0 && t2 <= 1) {\n                    roots[n++] = t2;\n                }\n                if (t3 >= 0 && t3 <= 1) {\n                    roots[n++] = t3;\n                }\n            }\n        }\n        return n;\n    }\n\n    /**\n     * 计算三次贝塞尔方程极限值的位置\n     * @memberOf module:zrender/core/curve\n     * @param  {number} p0\n     * @param  {number} p1\n     * @param  {number} p2\n     * @param  {number} p3\n     * @param  {Array.<number>} extrema\n     * @return {number} 有效数目\n     */\n    function cubicExtrema(p0, p1, p2, p3, extrema) {\n        var b = 6 * p2 - 12 * p1 + 6 * p0;\n        var a = 9 * p1 + 3 * p3 - 3 * p0 - 9 * p2;\n        var c = 3 * p1 - 3 * p0;\n\n        var n = 0;\n        if (isAroundZero(a)) {\n            if (isNotAroundZero(b)) {\n                var t1 = -c / b;\n                if (t1 >= 0 && t1 <=1) {\n                    extrema[n++] = t1;\n                }\n            }\n        }\n        else {\n            var disc = b * b - 4 * a * c;\n            if (isAroundZero(disc)) {\n                extrema[0] = -b / (2 * a);\n            }\n            else if (disc > 0) {\n                var discSqrt = mathSqrt(disc);\n                var t1 = (-b + discSqrt) / (2 * a);\n                var t2 = (-b - discSqrt) / (2 * a);\n                if (t1 >= 0 && t1 <= 1) {\n                    extrema[n++] = t1;\n                }\n                if (t2 >= 0 && t2 <= 1) {\n                    extrema[n++] = t2;\n                }\n            }\n        }\n        return n;\n    }\n\n    /**\n     * 细分三次贝塞尔曲线\n     * @memberOf module:zrender/core/curve\n     * @param  {number} p0\n     * @param  {number} p1\n     * @param  {number} p2\n     * @param  {number} p3\n     * @param  {number} t\n     * @param  {Array.<number>} out\n     */\n    function cubicSubdivide(p0, p1, p2, p3, t, out) {\n        var p01 = (p1 - p0) * t + p0;\n        var p12 = (p2 - p1) * t + p1;\n        var p23 = (p3 - p2) * t + p2;\n\n        var p012 = (p12 - p01) * t + p01;\n        var p123 = (p23 - p12) * t + p12;\n\n        var p0123 = (p123 - p012) * t + p012;\n        // Seg0\n        out[0] = p0;\n        out[1] = p01;\n        out[2] = p012;\n        out[3] = p0123;\n        // Seg1\n        out[4] = p0123;\n        out[5] = p123;\n        out[6] = p23;\n        out[7] = p3;\n    }\n\n    /**\n     * 投射点到三次贝塞尔曲线上，返回投射距离。\n     * 投射点有可能会有一个或者多个，这里只返回其中距离最短的一个。\n     * @param {number} x0\n     * @param {number} y0\n     * @param {number} x1\n     * @param {number} y1\n     * @param {number} x2\n     * @param {number} y2\n     * @param {number} x3\n     * @param {number} y3\n     * @param {number} x\n     * @param {number} y\n     * @param {Array.<number>} [out] 投射点\n     * @return {number}\n     */\n    function cubicProjectPoint(\n        x0, y0, x1, y1, x2, y2, x3, y3,\n        x, y, out\n    ) {\n        // http://pomax.github.io/bezierinfo/#projections\n        var t;\n        var interval = 0.005;\n        var d = Infinity;\n        var prev;\n        var next;\n        var d1;\n        var d2;\n\n        _v0[0] = x;\n        _v0[1] = y;\n\n        // 先粗略估计一下可能的最小距离的 t 值\n        // PENDING\n        for (var _t = 0; _t < 1; _t += 0.05) {\n            _v1[0] = cubicAt(x0, x1, x2, x3, _t);\n            _v1[1] = cubicAt(y0, y1, y2, y3, _t);\n            d1 = v2DistSquare(_v0, _v1);\n            if (d1 < d) {\n                t = _t;\n                d = d1;\n            }\n        }\n        d = Infinity;\n\n        // At most 32 iteration\n        for (var i = 0; i < 32; i++) {\n            if (interval < EPSILON_NUMERIC) {\n                break;\n            }\n            prev = t - interval;\n            next = t + interval;\n            // t - interval\n            _v1[0] = cubicAt(x0, x1, x2, x3, prev);\n            _v1[1] = cubicAt(y0, y1, y2, y3, prev);\n\n            d1 = v2DistSquare(_v1, _v0);\n\n            if (prev >= 0 && d1 < d) {\n                t = prev;\n                d = d1;\n            }\n            else {\n                // t + interval\n                _v2[0] = cubicAt(x0, x1, x2, x3, next);\n                _v2[1] = cubicAt(y0, y1, y2, y3, next);\n                d2 = v2DistSquare(_v2, _v0);\n\n                if (next <= 1 && d2 < d) {\n                    t = next;\n                    d = d2;\n                }\n                else {\n                    interval *= 0.5;\n                }\n            }\n        }\n        // t\n        if (out) {\n            out[0] = cubicAt(x0, x1, x2, x3, t);\n            out[1] = cubicAt(y0, y1, y2, y3, t);\n        }\n        // console.log(interval, i);\n        return mathSqrt(d);\n    }\n\n    /**\n     * 计算二次方贝塞尔值\n     * @param  {number} p0\n     * @param  {number} p1\n     * @param  {number} p2\n     * @param  {number} t\n     * @return {number}\n     */\n    function quadraticAt(p0, p1, p2, t) {\n        var onet = 1 - t;\n        return onet * (onet * p0 + 2 * t * p1) + t * t * p2;\n    }\n\n    /**\n     * 计算二次方贝塞尔导数值\n     * @param  {number} p0\n     * @param  {number} p1\n     * @param  {number} p2\n     * @param  {number} t\n     * @return {number}\n     */\n    function quadraticDerivativeAt(p0, p1, p2, t) {\n        return 2 * ((1 - t) * (p1 - p0) + t * (p2 - p1));\n    }\n\n    /**\n     * 计算二次方贝塞尔方程根\n     * @param  {number} p0\n     * @param  {number} p1\n     * @param  {number} p2\n     * @param  {number} t\n     * @param  {Array.<number>} roots\n     * @return {number} 有效根数目\n     */\n    function quadraticRootAt(p0, p1, p2, val, roots) {\n        var a = p0 - 2 * p1 + p2;\n        var b = 2 * (p1 - p0);\n        var c = p0 - val;\n\n        var n = 0;\n        if (isAroundZero(a)) {\n            if (isNotAroundZero(b)) {\n                var t1 = -c / b;\n                if (t1 >= 0 && t1 <= 1) {\n                    roots[n++] = t1;\n                }\n            }\n        }\n        else {\n            var disc = b * b - 4 * a * c;\n            if (isAroundZero(disc)) {\n                var t1 = -b / (2 * a);\n                if (t1 >= 0 && t1 <= 1) {\n                    roots[n++] = t1;\n                }\n            }\n            else if (disc > 0) {\n                var discSqrt = mathSqrt(disc);\n                var t1 = (-b + discSqrt) / (2 * a);\n                var t2 = (-b - discSqrt) / (2 * a);\n                if (t1 >= 0 && t1 <= 1) {\n                    roots[n++] = t1;\n                }\n                if (t2 >= 0 && t2 <= 1) {\n                    roots[n++] = t2;\n                }\n            }\n        }\n        return n;\n    }\n\n    /**\n     * 计算二次贝塞尔方程极限值\n     * @memberOf module:zrender/core/curve\n     * @param  {number} p0\n     * @param  {number} p1\n     * @param  {number} p2\n     * @return {number}\n     */\n    function quadraticExtremum(p0, p1, p2) {\n        var divider = p0 + p2 - 2 * p1;\n        if (divider === 0) {\n            // p1 is center of p0 and p2\n            return 0.5;\n        }\n        else {\n            return (p0 - p1) / divider;\n        }\n    }\n\n    /**\n     * 细分二次贝塞尔曲线\n     * @memberOf module:zrender/core/curve\n     * @param  {number} p0\n     * @param  {number} p1\n     * @param  {number} p2\n     * @param  {number} t\n     * @param  {Array.<number>} out\n     */\n    function quadraticSubdivide(p0, p1, p2, t, out) {\n        var p01 = (p1 - p0) * t + p0;\n        var p12 = (p2 - p1) * t + p1;\n        var p012 = (p12 - p01) * t + p01;\n\n        // Seg0\n        out[0] = p0;\n        out[1] = p01;\n        out[2] = p012;\n\n        // Seg1\n        out[3] = p012;\n        out[4] = p12;\n        out[5] = p2;\n    }\n\n    /**\n     * 投射点到二次贝塞尔曲线上，返回投射距离。\n     * 投射点有可能会有一个或者多个，这里只返回其中距离最短的一个。\n     * @param {number} x0\n     * @param {number} y0\n     * @param {number} x1\n     * @param {number} y1\n     * @param {number} x2\n     * @param {number} y2\n     * @param {number} x\n     * @param {number} y\n     * @param {Array.<number>} out 投射点\n     * @return {number}\n     */\n    function quadraticProjectPoint(\n        x0, y0, x1, y1, x2, y2,\n        x, y, out\n    ) {\n        // http://pomax.github.io/bezierinfo/#projections\n        var t;\n        var interval = 0.005;\n        var d = Infinity;\n\n        _v0[0] = x;\n        _v0[1] = y;\n\n        // 先粗略估计一下可能的最小距离的 t 值\n        // PENDING\n        for (var _t = 0; _t < 1; _t += 0.05) {\n            _v1[0] = quadraticAt(x0, x1, x2, _t);\n            _v1[1] = quadraticAt(y0, y1, y2, _t);\n            var d1 = v2DistSquare(_v0, _v1);\n            if (d1 < d) {\n                t = _t;\n                d = d1;\n            }\n        }\n        d = Infinity;\n\n        // At most 32 iteration\n        for (var i = 0; i < 32; i++) {\n            if (interval < EPSILON_NUMERIC) {\n                break;\n            }\n            var prev = t - interval;\n            var next = t + interval;\n            // t - interval\n            _v1[0] = quadraticAt(x0, x1, x2, prev);\n            _v1[1] = quadraticAt(y0, y1, y2, prev);\n\n            var d1 = v2DistSquare(_v1, _v0);\n\n            if (prev >= 0 && d1 < d) {\n                t = prev;\n                d = d1;\n            }\n            else {\n                // t + interval\n                _v2[0] = quadraticAt(x0, x1, x2, next);\n                _v2[1] = quadraticAt(y0, y1, y2, next);\n                var d2 = v2DistSquare(_v2, _v0);\n                if (next <= 1 && d2 < d) {\n                    t = next;\n                    d = d2;\n                }\n                else {\n                    interval *= 0.5;\n                }\n            }\n        }\n        // t\n        if (out) {\n            out[0] = quadraticAt(x0, x1, x2, t);\n            out[1] = quadraticAt(y0, y1, y2, t);\n        }\n        // console.log(interval, i);\n        return mathSqrt(d);\n    }\n\n    module.exports = {\n\n        cubicAt: cubicAt,\n\n        cubicDerivativeAt: cubicDerivativeAt,\n\n        cubicRootAt: cubicRootAt,\n\n        cubicExtrema: cubicExtrema,\n\n        cubicSubdivide: cubicSubdivide,\n\n        cubicProjectPoint: cubicProjectPoint,\n\n        quadraticAt: quadraticAt,\n\n        quadraticDerivativeAt: quadraticDerivativeAt,\n\n        quadraticRootAt: quadraticRootAt,\n\n        quadraticExtremum: quadraticExtremum,\n\n        quadraticSubdivide: quadraticSubdivide,\n\n        quadraticProjectPoint: quadraticProjectPoint\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/zrender/lib/core/curve.js\n// module id = 329\n// module chunks = 0 1 2 3 4","/**\n * @module zrender/tool/color\n */\n\n\n    var LRU = require('../core/LRU');\n\n    var kCSSColorTable = {\n        'transparent': [0,0,0,0], 'aliceblue': [240,248,255,1],\n        'antiquewhite': [250,235,215,1], 'aqua': [0,255,255,1],\n        'aquamarine': [127,255,212,1], 'azure': [240,255,255,1],\n        'beige': [245,245,220,1], 'bisque': [255,228,196,1],\n        'black': [0,0,0,1], 'blanchedalmond': [255,235,205,1],\n        'blue': [0,0,255,1], 'blueviolet': [138,43,226,1],\n        'brown': [165,42,42,1], 'burlywood': [222,184,135,1],\n        'cadetblue': [95,158,160,1], 'chartreuse': [127,255,0,1],\n        'chocolate': [210,105,30,1], 'coral': [255,127,80,1],\n        'cornflowerblue': [100,149,237,1], 'cornsilk': [255,248,220,1],\n        'crimson': [220,20,60,1], 'cyan': [0,255,255,1],\n        'darkblue': [0,0,139,1], 'darkcyan': [0,139,139,1],\n        'darkgoldenrod': [184,134,11,1], 'darkgray': [169,169,169,1],\n        'darkgreen': [0,100,0,1], 'darkgrey': [169,169,169,1],\n        'darkkhaki': [189,183,107,1], 'darkmagenta': [139,0,139,1],\n        'darkolivegreen': [85,107,47,1], 'darkorange': [255,140,0,1],\n        'darkorchid': [153,50,204,1], 'darkred': [139,0,0,1],\n        'darksalmon': [233,150,122,1], 'darkseagreen': [143,188,143,1],\n        'darkslateblue': [72,61,139,1], 'darkslategray': [47,79,79,1],\n        'darkslategrey': [47,79,79,1], 'darkturquoise': [0,206,209,1],\n        'darkviolet': [148,0,211,1], 'deeppink': [255,20,147,1],\n        'deepskyblue': [0,191,255,1], 'dimgray': [105,105,105,1],\n        'dimgrey': [105,105,105,1], 'dodgerblue': [30,144,255,1],\n        'firebrick': [178,34,34,1], 'floralwhite': [255,250,240,1],\n        'forestgreen': [34,139,34,1], 'fuchsia': [255,0,255,1],\n        'gainsboro': [220,220,220,1], 'ghostwhite': [248,248,255,1],\n        'gold': [255,215,0,1], 'goldenrod': [218,165,32,1],\n        'gray': [128,128,128,1], 'green': [0,128,0,1],\n        'greenyellow': [173,255,47,1], 'grey': [128,128,128,1],\n        'honeydew': [240,255,240,1], 'hotpink': [255,105,180,1],\n        'indianred': [205,92,92,1], 'indigo': [75,0,130,1],\n        'ivory': [255,255,240,1], 'khaki': [240,230,140,1],\n        'lavender': [230,230,250,1], 'lavenderblush': [255,240,245,1],\n        'lawngreen': [124,252,0,1], 'lemonchiffon': [255,250,205,1],\n        'lightblue': [173,216,230,1], 'lightcoral': [240,128,128,1],\n        'lightcyan': [224,255,255,1], 'lightgoldenrodyellow': [250,250,210,1],\n        'lightgray': [211,211,211,1], 'lightgreen': [144,238,144,1],\n        'lightgrey': [211,211,211,1], 'lightpink': [255,182,193,1],\n        'lightsalmon': [255,160,122,1], 'lightseagreen': [32,178,170,1],\n        'lightskyblue': [135,206,250,1], 'lightslategray': [119,136,153,1],\n        'lightslategrey': [119,136,153,1], 'lightsteelblue': [176,196,222,1],\n        'lightyellow': [255,255,224,1], 'lime': [0,255,0,1],\n        'limegreen': [50,205,50,1], 'linen': [250,240,230,1],\n        'magenta': [255,0,255,1], 'maroon': [128,0,0,1],\n        'mediumaquamarine': [102,205,170,1], 'mediumblue': [0,0,205,1],\n        'mediumorchid': [186,85,211,1], 'mediumpurple': [147,112,219,1],\n        'mediumseagreen': [60,179,113,1], 'mediumslateblue': [123,104,238,1],\n        'mediumspringgreen': [0,250,154,1], 'mediumturquoise': [72,209,204,1],\n        'mediumvioletred': [199,21,133,1], 'midnightblue': [25,25,112,1],\n        'mintcream': [245,255,250,1], 'mistyrose': [255,228,225,1],\n        'moccasin': [255,228,181,1], 'navajowhite': [255,222,173,1],\n        'navy': [0,0,128,1], 'oldlace': [253,245,230,1],\n        'olive': [128,128,0,1], 'olivedrab': [107,142,35,1],\n        'orange': [255,165,0,1], 'orangered': [255,69,0,1],\n        'orchid': [218,112,214,1], 'palegoldenrod': [238,232,170,1],\n        'palegreen': [152,251,152,1], 'paleturquoise': [175,238,238,1],\n        'palevioletred': [219,112,147,1], 'papayawhip': [255,239,213,1],\n        'peachpuff': [255,218,185,1], 'peru': [205,133,63,1],\n        'pink': [255,192,203,1], 'plum': [221,160,221,1],\n        'powderblue': [176,224,230,1], 'purple': [128,0,128,1],\n        'red': [255,0,0,1], 'rosybrown': [188,143,143,1],\n        'royalblue': [65,105,225,1], 'saddlebrown': [139,69,19,1],\n        'salmon': [250,128,114,1], 'sandybrown': [244,164,96,1],\n        'seagreen': [46,139,87,1], 'seashell': [255,245,238,1],\n        'sienna': [160,82,45,1], 'silver': [192,192,192,1],\n        'skyblue': [135,206,235,1], 'slateblue': [106,90,205,1],\n        'slategray': [112,128,144,1], 'slategrey': [112,128,144,1],\n        'snow': [255,250,250,1], 'springgreen': [0,255,127,1],\n        'steelblue': [70,130,180,1], 'tan': [210,180,140,1],\n        'teal': [0,128,128,1], 'thistle': [216,191,216,1],\n        'tomato': [255,99,71,1], 'turquoise': [64,224,208,1],\n        'violet': [238,130,238,1], 'wheat': [245,222,179,1],\n        'white': [255,255,255,1], 'whitesmoke': [245,245,245,1],\n        'yellow': [255,255,0,1], 'yellowgreen': [154,205,50,1]\n    };\n\n    function clampCssByte(i) {  // Clamp to integer 0 .. 255.\n        i = Math.round(i);  // Seems to be what Chrome does (vs truncation).\n        return i < 0 ? 0 : i > 255 ? 255 : i;\n    }\n\n    function clampCssAngle(i) {  // Clamp to integer 0 .. 360.\n        i = Math.round(i);  // Seems to be what Chrome does (vs truncation).\n        return i < 0 ? 0 : i > 360 ? 360 : i;\n    }\n\n    function clampCssFloat(f) {  // Clamp to float 0.0 .. 1.0.\n        return f < 0 ? 0 : f > 1 ? 1 : f;\n    }\n\n    function parseCssInt(str) {  // int or percentage.\n        if (str.length && str.charAt(str.length - 1) === '%') {\n            return clampCssByte(parseFloat(str) / 100 * 255);\n        }\n        return clampCssByte(parseInt(str, 10));\n    }\n\n    function parseCssFloat(str) {  // float or percentage.\n        if (str.length && str.charAt(str.length - 1) === '%') {\n            return clampCssFloat(parseFloat(str) / 100);\n        }\n        return clampCssFloat(parseFloat(str));\n    }\n\n    function cssHueToRgb(m1, m2, h) {\n        if (h < 0) {\n            h += 1;\n        }\n        else if (h > 1) {\n            h -= 1;\n        }\n\n        if (h * 6 < 1) {\n            return m1 + (m2 - m1) * h * 6;\n        }\n        if (h * 2 < 1) {\n            return m2;\n        }\n        if (h * 3 < 2) {\n            return m1 + (m2 - m1) * (2/3 - h) * 6;\n        }\n        return m1;\n    }\n\n    function lerp(a, b, p) {\n        return a + (b - a) * p;\n    }\n\n    function setRgba(out, r, g, b, a) {\n        out[0] = r; out[1] = g; out[2] = b; out[3] = a;\n        return out;\n    }\n    function copyRgba(out, a) {\n        out[0] = a[0]; out[1] = a[1]; out[2] = a[2]; out[3] = a[3];\n        return out;\n    }\n    var colorCache = new LRU(20);\n    var lastRemovedArr = null;\n    function putToCache(colorStr, rgbaArr) {\n        // Reuse removed array\n        if (lastRemovedArr) {\n            copyRgba(lastRemovedArr, rgbaArr);\n        }\n        lastRemovedArr = colorCache.put(colorStr, lastRemovedArr || (rgbaArr.slice()));\n    }\n    /**\n     * @param {string} colorStr\n     * @param {Array.<number>} out\n     * @return {Array.<number>}\n     * @memberOf module:zrender/util/color\n     */\n    function parse(colorStr, rgbaArr) {\n        if (!colorStr) {\n            return;\n        }\n        rgbaArr = rgbaArr || [];\n\n        var cached = colorCache.get(colorStr);\n        if (cached) {\n            return copyRgba(rgbaArr, cached);\n        }\n\n        // colorStr may be not string\n        colorStr = colorStr + '';\n        // Remove all whitespace, not compliant, but should just be more accepting.\n        var str = colorStr.replace(/ /g, '').toLowerCase();\n\n        // Color keywords (and transparent) lookup.\n        if (str in kCSSColorTable) {\n            copyRgba(rgbaArr, kCSSColorTable[str]);\n            putToCache(colorStr, rgbaArr);\n            return rgbaArr;\n        }\n\n        // #abc and #abc123 syntax.\n        if (str.charAt(0) === '#') {\n            if (str.length === 4) {\n                var iv = parseInt(str.substr(1), 16);  // TODO(deanm): Stricter parsing.\n                if (!(iv >= 0 && iv <= 0xfff)) {\n                    setRgba(rgbaArr, 0, 0, 0, 1);\n                    return;  // Covers NaN.\n                }\n                setRgba(rgbaArr,\n                    ((iv & 0xf00) >> 4) | ((iv & 0xf00) >> 8),\n                    (iv & 0xf0) | ((iv & 0xf0) >> 4),\n                    (iv & 0xf) | ((iv & 0xf) << 4),\n                    1\n                );\n                putToCache(colorStr, rgbaArr);\n                return rgbaArr;\n            }\n            else if (str.length === 7) {\n                var iv = parseInt(str.substr(1), 16);  // TODO(deanm): Stricter parsing.\n                if (!(iv >= 0 && iv <= 0xffffff)) {\n                    setRgba(rgbaArr, 0, 0, 0, 1);\n                    return;  // Covers NaN.\n                }\n                setRgba(rgbaArr,\n                    (iv & 0xff0000) >> 16,\n                    (iv & 0xff00) >> 8,\n                    iv & 0xff,\n                    1\n                );\n                putToCache(colorStr, rgbaArr);\n                return rgbaArr;\n            }\n\n            return;\n        }\n        var op = str.indexOf('('), ep = str.indexOf(')');\n        if (op !== -1 && ep + 1 === str.length) {\n            var fname = str.substr(0, op);\n            var params = str.substr(op + 1, ep - (op + 1)).split(',');\n            var alpha = 1;  // To allow case fallthrough.\n            switch (fname) {\n                case 'rgba':\n                    if (params.length !== 4) {\n                        setRgba(rgbaArr, 0, 0, 0, 1);\n                        return;\n                    }\n                    alpha = parseCssFloat(params.pop()); // jshint ignore:line\n                // Fall through.\n                case 'rgb':\n                    if (params.length !== 3) {\n                        setRgba(rgbaArr, 0, 0, 0, 1);\n                        return;\n                    }\n                    setRgba(rgbaArr,\n                        parseCssInt(params[0]),\n                        parseCssInt(params[1]),\n                        parseCssInt(params[2]),\n                        alpha\n                    );\n                    putToCache(colorStr, rgbaArr);\n                    return rgbaArr;\n                case 'hsla':\n                    if (params.length !== 4) {\n                        setRgba(rgbaArr, 0, 0, 0, 1);\n                        return;\n                    }\n                    params[3] = parseCssFloat(params[3]);\n                    hsla2rgba(params, rgbaArr);\n                    putToCache(colorStr, rgbaArr);\n                    return rgbaArr;\n                case 'hsl':\n                    if (params.length !== 3) {\n                        setRgba(rgbaArr, 0, 0, 0, 1);\n                        return;\n                    }\n                    hsla2rgba(params, rgbaArr);\n                    putToCache(colorStr, rgbaArr);\n                    return rgbaArr;\n                default:\n                    return;\n            }\n        }\n\n        setRgba(rgbaArr, 0, 0, 0, 1);\n        return;\n    }\n\n    /**\n     * @param {Array.<number>} hsla\n     * @param {Array.<number>} rgba\n     * @return {Array.<number>} rgba\n     */\n    function hsla2rgba(hsla, rgba) {\n        var h = (((parseFloat(hsla[0]) % 360) + 360) % 360) / 360;  // 0 .. 1\n        // NOTE(deanm): According to the CSS spec s/l should only be\n        // percentages, but we don't bother and let float or percentage.\n        var s = parseCssFloat(hsla[1]);\n        var l = parseCssFloat(hsla[2]);\n        var m2 = l <= 0.5 ? l * (s + 1) : l + s - l * s;\n        var m1 = l * 2 - m2;\n\n        rgba = rgba || [];\n        setRgba(rgba,\n            clampCssByte(cssHueToRgb(m1, m2, h + 1 / 3) * 255),\n            clampCssByte(cssHueToRgb(m1, m2, h) * 255),\n            clampCssByte(cssHueToRgb(m1, m2, h - 1 / 3) * 255),\n            1\n        );\n\n        if (hsla.length === 4) {\n            rgba[3] = hsla[3];\n        }\n\n        return rgba;\n    }\n\n    /**\n     * @param {Array.<number>} rgba\n     * @return {Array.<number>} hsla\n     */\n    function rgba2hsla(rgba) {\n        if (!rgba) {\n            return;\n        }\n\n        // RGB from 0 to 255\n        var R = rgba[0] / 255;\n        var G = rgba[1] / 255;\n        var B = rgba[2] / 255;\n\n        var vMin = Math.min(R, G, B); // Min. value of RGB\n        var vMax = Math.max(R, G, B); // Max. value of RGB\n        var delta = vMax - vMin; // Delta RGB value\n\n        var L = (vMax + vMin) / 2;\n        var H;\n        var S;\n        // HSL results from 0 to 1\n        if (delta === 0) {\n            H = 0;\n            S = 0;\n        }\n        else {\n            if (L < 0.5) {\n                S = delta / (vMax + vMin);\n            }\n            else {\n                S = delta / (2 - vMax - vMin);\n            }\n\n            var deltaR = (((vMax - R) / 6) + (delta / 2)) / delta;\n            var deltaG = (((vMax - G) / 6) + (delta / 2)) / delta;\n            var deltaB = (((vMax - B) / 6) + (delta / 2)) / delta;\n\n            if (R === vMax) {\n                H = deltaB - deltaG;\n            }\n            else if (G === vMax) {\n                H = (1 / 3) + deltaR - deltaB;\n            }\n            else if (B === vMax) {\n                H = (2 / 3) + deltaG - deltaR;\n            }\n\n            if (H < 0) {\n                H += 1;\n            }\n\n            if (H > 1) {\n                H -= 1;\n            }\n        }\n\n        var hsla = [H * 360, S, L];\n\n        if (rgba[3] != null) {\n            hsla.push(rgba[3]);\n        }\n\n        return hsla;\n    }\n\n    /**\n     * @param {string} color\n     * @param {number} level\n     * @return {string}\n     * @memberOf module:zrender/util/color\n     */\n    function lift(color, level) {\n        var colorArr = parse(color);\n        if (colorArr) {\n            for (var i = 0; i < 3; i++) {\n                if (level < 0) {\n                    colorArr[i] = colorArr[i] * (1 - level) | 0;\n                }\n                else {\n                    colorArr[i] = ((255 - colorArr[i]) * level + colorArr[i]) | 0;\n                }\n            }\n            return stringify(colorArr, colorArr.length === 4 ? 'rgba' : 'rgb');\n        }\n    }\n\n    /**\n     * @param {string} color\n     * @return {string}\n     * @memberOf module:zrender/util/color\n     */\n    function toHex(color, level) {\n        var colorArr = parse(color);\n        if (colorArr) {\n            return ((1 << 24) + (colorArr[0] << 16) + (colorArr[1] << 8) + (+colorArr[2])).toString(16).slice(1);\n        }\n    }\n\n    /**\n     * Map value to color. Faster than mapToColor methods because color is represented by rgba array.\n     * @param {number} normalizedValue A float between 0 and 1.\n     * @param {Array.<Array.<number>>} colors List of rgba color array\n     * @param {Array.<number>} [out] Mapped gba color array\n     * @return {Array.<number>} will be null/undefined if input illegal.\n     */\n    function fastMapToColor(normalizedValue, colors, out) {\n        if (!(colors && colors.length)\n            || !(normalizedValue >= 0 && normalizedValue <= 1)\n        ) {\n            return;\n        }\n\n        out = out || [];\n\n        var value = normalizedValue * (colors.length - 1);\n        var leftIndex = Math.floor(value);\n        var rightIndex = Math.ceil(value);\n        var leftColor = colors[leftIndex];\n        var rightColor = colors[rightIndex];\n        var dv = value - leftIndex;\n        out[0] = clampCssByte(lerp(leftColor[0], rightColor[0], dv));\n        out[1] = clampCssByte(lerp(leftColor[1], rightColor[1], dv));\n        out[2] = clampCssByte(lerp(leftColor[2], rightColor[2], dv));\n        out[3] = clampCssFloat(lerp(leftColor[3], rightColor[3], dv));\n\n        return out;\n    }\n    /**\n     * @param {number} normalizedValue A float between 0 and 1.\n     * @param {Array.<string>} colors Color list.\n     * @param {boolean=} fullOutput Default false.\n     * @return {(string|Object)} Result color. If fullOutput,\n     *                           return {color: ..., leftIndex: ..., rightIndex: ..., value: ...},\n     * @memberOf module:zrender/util/color\n     */\n    function mapToColor(normalizedValue, colors, fullOutput) {\n        if (!(colors && colors.length)\n            || !(normalizedValue >= 0 && normalizedValue <= 1)\n        ) {\n            return;\n        }\n\n        var value = normalizedValue * (colors.length - 1);\n        var leftIndex = Math.floor(value);\n        var rightIndex = Math.ceil(value);\n        var leftColor = parse(colors[leftIndex]);\n        var rightColor = parse(colors[rightIndex]);\n        var dv = value - leftIndex;\n\n        var color = stringify(\n            [\n                clampCssByte(lerp(leftColor[0], rightColor[0], dv)),\n                clampCssByte(lerp(leftColor[1], rightColor[1], dv)),\n                clampCssByte(lerp(leftColor[2], rightColor[2], dv)),\n                clampCssFloat(lerp(leftColor[3], rightColor[3], dv))\n            ],\n            'rgba'\n        );\n\n        return fullOutput\n            ? {\n                color: color,\n                leftIndex: leftIndex,\n                rightIndex: rightIndex,\n                value: value\n            }\n            : color;\n    }\n\n    /**\n     * @param {string} color\n     * @param {number=} h 0 ~ 360, ignore when null.\n     * @param {number=} s 0 ~ 1, ignore when null.\n     * @param {number=} l 0 ~ 1, ignore when null.\n     * @return {string} Color string in rgba format.\n     * @memberOf module:zrender/util/color\n     */\n    function modifyHSL(color, h, s, l) {\n        color = parse(color);\n\n        if (color) {\n            color = rgba2hsla(color);\n            h != null && (color[0] = clampCssAngle(h));\n            s != null && (color[1] = parseCssFloat(s));\n            l != null && (color[2] = parseCssFloat(l));\n\n            return stringify(hsla2rgba(color), 'rgba');\n        }\n    }\n\n    /**\n     * @param {string} color\n     * @param {number=} alpha 0 ~ 1\n     * @return {string} Color string in rgba format.\n     * @memberOf module:zrender/util/color\n     */\n    function modifyAlpha(color, alpha) {\n        color = parse(color);\n\n        if (color && alpha != null) {\n            color[3] = clampCssFloat(alpha);\n            return stringify(color, 'rgba');\n        }\n    }\n\n    /**\n     * @param {Array.<number>} arrColor like [12,33,44,0.4]\n     * @param {string} type 'rgba', 'hsva', ...\n     * @return {string} Result color. (If input illegal, return undefined).\n     */\n    function stringify(arrColor, type) {\n        if (!arrColor || !arrColor.length) {\n            return;\n        }\n        var colorStr = arrColor[0] + ',' + arrColor[1] + ',' + arrColor[2];\n        if (type === 'rgba' || type === 'hsva' || type === 'hsla') {\n            colorStr += ',' + arrColor[3];\n        }\n        return type + '(' + colorStr + ')';\n    }\n\n    module.exports = {\n        parse: parse,\n        lift: lift,\n        toHex: toHex,\n        fastMapToColor: fastMapToColor,\n        mapToColor: mapToColor,\n        modifyHSL: modifyHSL,\n        modifyAlpha: modifyAlpha,\n        stringify: stringify\n    };\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/zrender/lib/tool/color.js\n// module id = 330\n// module chunks = 0 1 2 3 4","/**\n * 事件扩展\n * @module zrender/mixin/Eventful\n * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)\n *         pissang (https://www.github.com/pissang)\n */\n\n\n    var arrySlice = Array.prototype.slice;\n\n    /**\n     * 事件分发器\n     * @alias module:zrender/mixin/Eventful\n     * @constructor\n     */\n    var Eventful = function () {\n        this._$handlers = {};\n    };\n\n    Eventful.prototype = {\n\n        constructor: Eventful,\n\n        /**\n         * 单次触发绑定，trigger后销毁\n         *\n         * @param {string} event 事件名\n         * @param {Function} handler 响应函数\n         * @param {Object} context\n         */\n        one: function (event, handler, context) {\n            var _h = this._$handlers;\n\n            if (!handler || !event) {\n                return this;\n            }\n\n            if (!_h[event]) {\n                _h[event] = [];\n            }\n\n            for (var i = 0; i < _h[event].length; i++) {\n                if (_h[event][i].h === handler) {\n                    return this;\n                }\n            }\n\n            _h[event].push({\n                h: handler,\n                one: true,\n                ctx: context || this\n            });\n\n            return this;\n        },\n\n        /**\n         * 绑定事件\n         * @param {string} event 事件名\n         * @param {Function} handler 事件处理函数\n         * @param {Object} [context]\n         */\n        on: function (event, handler, context) {\n            var _h = this._$handlers;\n\n            if (!handler || !event) {\n                return this;\n            }\n\n            if (!_h[event]) {\n                _h[event] = [];\n            }\n\n            for (var i = 0; i < _h[event].length; i++) {\n                if (_h[event][i].h === handler) {\n                    return this;\n                }\n            }\n\n            _h[event].push({\n                h: handler,\n                one: false,\n                ctx: context || this\n            });\n\n            return this;\n        },\n\n        /**\n         * 是否绑定了事件\n         * @param  {string}  event\n         * @return {boolean}\n         */\n        isSilent: function (event) {\n            var _h = this._$handlers;\n            return _h[event] && _h[event].length;\n        },\n\n        /**\n         * 解绑事件\n         * @param {string} event 事件名\n         * @param {Function} [handler] 事件处理函数\n         */\n        off: function (event, handler) {\n            var _h = this._$handlers;\n\n            if (!event) {\n                this._$handlers = {};\n                return this;\n            }\n\n            if (handler) {\n                if (_h[event]) {\n                    var newList = [];\n                    for (var i = 0, l = _h[event].length; i < l; i++) {\n                        if (_h[event][i]['h'] != handler) {\n                            newList.push(_h[event][i]);\n                        }\n                    }\n                    _h[event] = newList;\n                }\n\n                if (_h[event] && _h[event].length === 0) {\n                    delete _h[event];\n                }\n            }\n            else {\n                delete _h[event];\n            }\n\n            return this;\n        },\n\n        /**\n         * 事件分发\n         *\n         * @param {string} type 事件类型\n         */\n        trigger: function (type) {\n            if (this._$handlers[type]) {\n                var args = arguments;\n                var argLen = args.length;\n\n                if (argLen > 3) {\n                    args = arrySlice.call(args, 1);\n                }\n\n                var _h = this._$handlers[type];\n                var len = _h.length;\n                for (var i = 0; i < len;) {\n                    // Optimize advise from backbone\n                    switch (argLen) {\n                        case 1:\n                            _h[i]['h'].call(_h[i]['ctx']);\n                            break;\n                        case 2:\n                            _h[i]['h'].call(_h[i]['ctx'], args[1]);\n                            break;\n                        case 3:\n                            _h[i]['h'].call(_h[i]['ctx'], args[1], args[2]);\n                            break;\n                        default:\n                            // have more than 2 given arguments\n                            _h[i]['h'].apply(_h[i]['ctx'], args);\n                            break;\n                    }\n\n                    if (_h[i]['one']) {\n                        _h.splice(i, 1);\n                        len--;\n                    }\n                    else {\n                        i++;\n                    }\n                }\n            }\n\n            return this;\n        },\n\n        /**\n         * 带有context的事件分发, 最后一个参数是事件回调的context\n         * @param {string} type 事件类型\n         */\n        triggerWithContext: function (type) {\n            if (this._$handlers[type]) {\n                var args = arguments;\n                var argLen = args.length;\n\n                if (argLen > 4) {\n                    args = arrySlice.call(args, 1, args.length - 1);\n                }\n                var ctx = args[args.length - 1];\n\n                var _h = this._$handlers[type];\n                var len = _h.length;\n                for (var i = 0; i < len;) {\n                    // Optimize advise from backbone\n                    switch (argLen) {\n                        case 1:\n                            _h[i]['h'].call(ctx);\n                            break;\n                        case 2:\n                            _h[i]['h'].call(ctx, args[1]);\n                            break;\n                        case 3:\n                            _h[i]['h'].call(ctx, args[1], args[2]);\n                            break;\n                        default:\n                            // have more than 2 given arguments\n                            _h[i]['h'].apply(ctx, args);\n                            break;\n                    }\n\n                    if (_h[i]['one']) {\n                        _h.splice(i, 1);\n                        len--;\n                    }\n                    else {\n                        i++;\n                    }\n                }\n            }\n\n            return this;\n        }\n    };\n\n    // 对象可以通过 onxxxx 绑定事件\n    /**\n     * @event module:zrender/mixin/Eventful#onclick\n     * @type {Function}\n     * @default null\n     */\n    /**\n     * @event module:zrender/mixin/Eventful#onmouseover\n     * @type {Function}\n     * @default null\n     */\n    /**\n     * @event module:zrender/mixin/Eventful#onmouseout\n     * @type {Function}\n     * @default null\n     */\n    /**\n     * @event module:zrender/mixin/Eventful#onmousemove\n     * @type {Function}\n     * @default null\n     */\n    /**\n     * @event module:zrender/mixin/Eventful#onmousewheel\n     * @type {Function}\n     * @default null\n     */\n    /**\n     * @event module:zrender/mixin/Eventful#onmousedown\n     * @type {Function}\n     * @default null\n     */\n    /**\n     * @event module:zrender/mixin/Eventful#onmouseup\n     * @type {Function}\n     * @default null\n     */\n    /**\n     * @event module:zrender/mixin/Eventful#ondrag\n     * @type {Function}\n     * @default null\n     */\n    /**\n     * @event module:zrender/mixin/Eventful#ondragstart\n     * @type {Function}\n     * @default null\n     */\n    /**\n     * @event module:zrender/mixin/Eventful#ondragend\n     * @type {Function}\n     * @default null\n     */\n    /**\n     * @event module:zrender/mixin/Eventful#ondragenter\n     * @type {Function}\n     * @default null\n     */\n    /**\n     * @event module:zrender/mixin/Eventful#ondragleave\n     * @type {Function}\n     * @default null\n     */\n    /**\n     * @event module:zrender/mixin/Eventful#ondragover\n     * @type {Function}\n     * @default null\n     */\n    /**\n     * @event module:zrender/mixin/Eventful#ondrop\n     * @type {Function}\n     * @default null\n     */\n\n    module.exports = Eventful;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/zrender/lib/mixin/Eventful.js\n// module id = 331\n// module chunks = 0 1 2 3 4","\n\n    var textWidthCache = {};\n    var textWidthCacheCounter = 0;\n    var TEXT_CACHE_MAX = 5000;\n\n    var util = require('../core/util');\n    var BoundingRect = require('../core/BoundingRect');\n    var retrieve = util.retrieve;\n\n    function getTextWidth(text, textFont) {\n        var key = text + ':' + textFont;\n        if (textWidthCache[key]) {\n            return textWidthCache[key];\n        }\n\n        var textLines = (text + '').split('\\n');\n        var width = 0;\n\n        for (var i = 0, l = textLines.length; i < l; i++) {\n            // measureText 可以被覆盖以兼容不支持 Canvas 的环境\n            width = Math.max(textContain.measureText(textLines[i], textFont).width, width);\n        }\n\n        if (textWidthCacheCounter > TEXT_CACHE_MAX) {\n            textWidthCacheCounter = 0;\n            textWidthCache = {};\n        }\n        textWidthCacheCounter++;\n        textWidthCache[key] = width;\n\n        return width;\n    }\n\n    function getTextRect(text, textFont, textAlign, textBaseline) {\n        var textLineLen = ((text || '') + '').split('\\n').length;\n\n        var width = getTextWidth(text, textFont);\n        // FIXME 高度计算比较粗暴\n        var lineHeight = getTextWidth('国', textFont);\n        var height = textLineLen * lineHeight;\n\n        var rect = new BoundingRect(0, 0, width, height);\n        // Text has a special line height property\n        rect.lineHeight = lineHeight;\n\n        switch (textBaseline) {\n            case 'bottom':\n            case 'alphabetic':\n                rect.y -= lineHeight;\n                break;\n            case 'middle':\n                rect.y -= lineHeight / 2;\n                break;\n            // case 'hanging':\n            // case 'top':\n        }\n\n        // FIXME Right to left language\n        switch (textAlign) {\n            case 'end':\n            case 'right':\n                rect.x -= rect.width;\n                break;\n            case 'center':\n                rect.x -= rect.width / 2;\n                break;\n            // case 'start':\n            // case 'left':\n        }\n\n        return rect;\n    }\n\n    function adjustTextPositionOnRect(textPosition, rect, textRect, distance) {\n\n        var x = rect.x;\n        var y = rect.y;\n\n        var height = rect.height;\n        var width = rect.width;\n\n        var textHeight = textRect.height;\n\n        var lineHeight = textRect.lineHeight;\n        var halfHeight = height / 2 - textHeight / 2 + lineHeight;\n\n        var textAlign = 'left';\n\n        switch (textPosition) {\n            case 'left':\n                x -= distance;\n                y += halfHeight;\n                textAlign = 'right';\n                break;\n            case 'right':\n                x += distance + width;\n                y += halfHeight;\n                textAlign = 'left';\n                break;\n            case 'top':\n                x += width / 2;\n                y -= distance + textHeight - lineHeight;\n                textAlign = 'center';\n                break;\n            case 'bottom':\n                x += width / 2;\n                y += height + distance + lineHeight;\n                textAlign = 'center';\n                break;\n            case 'inside':\n                x += width / 2;\n                y += halfHeight;\n                textAlign = 'center';\n                break;\n            case 'insideLeft':\n                x += distance;\n                y += halfHeight;\n                textAlign = 'left';\n                break;\n            case 'insideRight':\n                x += width - distance;\n                y += halfHeight;\n                textAlign = 'right';\n                break;\n            case 'insideTop':\n                x += width / 2;\n                y += distance + lineHeight;\n                textAlign = 'center';\n                break;\n            case 'insideBottom':\n                x += width / 2;\n                y += height - textHeight - distance + lineHeight;\n                textAlign = 'center';\n                break;\n            case 'insideTopLeft':\n                x += distance;\n                y += distance + lineHeight;\n                textAlign = 'left';\n                break;\n            case 'insideTopRight':\n                x += width - distance;\n                y += distance + lineHeight;\n                textAlign = 'right';\n                break;\n            case 'insideBottomLeft':\n                x += distance;\n                y += height - textHeight - distance + lineHeight;\n                break;\n            case 'insideBottomRight':\n                x += width - distance;\n                y += height - textHeight - distance + lineHeight;\n                textAlign = 'right';\n                break;\n        }\n\n        return {\n            x: x,\n            y: y,\n            textAlign: textAlign,\n            textBaseline: 'alphabetic'\n        };\n    }\n\n    /**\n     * Show ellipsis if overflow.\n     *\n     * @param  {string} text\n     * @param  {string} containerWidth\n     * @param  {string} textFont\n     * @param  {number} [ellipsis='...']\n     * @param  {Object} [options]\n     * @param  {number} [options.maxIterations=3]\n     * @param  {number} [options.minChar=0] If truncate result are less\n     *                  then minChar, ellipsis will not show, which is\n     *                  better for user hint in some cases.\n     * @param  {number} [options.placeholder=''] When all truncated, use the placeholder.\n     * @return {string}\n     */\n    function truncateText(text, containerWidth, textFont, ellipsis, options) {\n        if (!containerWidth) {\n            return '';\n        }\n\n        options = options || {};\n\n        ellipsis = retrieve(ellipsis, '...');\n        var maxIterations = retrieve(options.maxIterations, 2);\n        var minChar = retrieve(options.minChar, 0);\n        // FIXME\n        // Other languages?\n        var cnCharWidth = getTextWidth('国', textFont);\n        // FIXME\n        // Consider proportional font?\n        var ascCharWidth = getTextWidth('a', textFont);\n        var placeholder = retrieve(options.placeholder, '');\n\n        // Example 1: minChar: 3, text: 'asdfzxcv', truncate result: 'asdf', but not: 'a...'.\n        // Example 2: minChar: 3, text: '维度', truncate result: '维', but not: '...'.\n        var contentWidth = containerWidth = Math.max(0, containerWidth - 1); // Reserve some gap.\n        for (var i = 0; i < minChar && contentWidth >= ascCharWidth; i++) {\n            contentWidth -= ascCharWidth;\n        }\n\n        var ellipsisWidth = getTextWidth(ellipsis);\n        if (ellipsisWidth > contentWidth) {\n            ellipsis = '';\n            ellipsisWidth = 0;\n        }\n\n        contentWidth = containerWidth - ellipsisWidth;\n\n        var textLines = (text + '').split('\\n');\n\n        for (var i = 0, len = textLines.length; i < len; i++) {\n            var textLine = textLines[i];\n            var lineWidth = getTextWidth(textLine, textFont);\n\n            if (lineWidth <= containerWidth) {\n                continue;\n            }\n\n            for (var j = 0;; j++) {\n                if (lineWidth <= contentWidth || j >= maxIterations) {\n                    textLine += ellipsis;\n                    break;\n                }\n\n                var subLength = j === 0\n                    ? estimateLength(textLine, contentWidth, ascCharWidth, cnCharWidth)\n                    : lineWidth > 0\n                    ? Math.floor(textLine.length * contentWidth / lineWidth)\n                    : 0;\n\n                textLine = textLine.substr(0, subLength);\n                lineWidth = getTextWidth(textLine, textFont);\n            }\n\n            if (textLine === '') {\n                textLine = placeholder;\n            }\n\n            textLines[i] = textLine;\n        }\n\n        return textLines.join('\\n');\n    }\n\n    function estimateLength(text, contentWidth, ascCharWidth, cnCharWidth) {\n        var width = 0;\n        var i = 0;\n        for (var len = text.length; i < len && width < contentWidth; i++) {\n            var charCode = text.charCodeAt(i);\n            width += (0 <= charCode && charCode <= 127) ? ascCharWidth : cnCharWidth;\n        }\n        return i;\n    }\n\n    var textContain = {\n\n        getWidth: getTextWidth,\n\n        getBoundingRect: getTextRect,\n\n        adjustTextPositionOnRect: adjustTextPositionOnRect,\n\n        truncateText: truncateText,\n\n        measureText: function (text, textFont) {\n            var ctx = util.getContext();\n            ctx.font = textFont || '12px sans-serif';\n            return ctx.measureText(text);\n        }\n    };\n\n    module.exports = textContain;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/zrender/lib/contain/text.js\n// module id = 332\n// module chunks = 0 1 2 3 4","'use strict';\n/**\n * 事件辅助类\n * @module zrender/core/event\n * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)\n */\n\n\n    var Eventful = require('../mixin/Eventful');\n    var env = require('./env');\n\n    var isDomLevel2 = (typeof window !== 'undefined') && !!window.addEventListener;\n\n    function getBoundingClientRect(el) {\n        // BlackBerry 5, iOS 3 (original iPhone) don't have getBoundingRect\n        return el.getBoundingClientRect ? el.getBoundingClientRect() : {left: 0, top: 0};\n    }\n\n    // `calculate` is optional, default false\n    function clientToLocal(el, e, out, calculate) {\n        out = out || {};\n\n        // According to the W3C Working Draft, offsetX and offsetY should be relative\n        // to the padding edge of the target element. The only browser using this convention\n        // is IE. Webkit uses the border edge, Opera uses the content edge, and FireFox does\n        // not support the properties.\n        // (see http://www.jacklmoore.com/notes/mouse-position/)\n        // In zr painter.dom, padding edge equals to border edge.\n\n        // FIXME\n        // When mousemove event triggered on ec tooltip, target is not zr painter.dom, and\n        // offsetX/Y is relative to e.target, where the calculation of zrX/Y via offsetX/Y\n        // is too complex. So css-transfrom dont support in this case temporarily.\n        if (calculate || !env.canvasSupported) {\n            defaultGetZrXY(el, e, out);\n        }\n        // Caution: In FireFox, layerX/layerY Mouse position relative to the closest positioned\n        // ancestor element, so we should make sure el is positioned (e.g., not position:static).\n        // BTW1, Webkit don't return the same results as FF in non-simple cases (like add\n        // zoom-factor, overflow / opacity layers, transforms ...)\n        // BTW2, (ev.offsetY || ev.pageY - $(ev.target).offset().top) is not correct in preserve-3d.\n        // <https://bugs.jquery.com/ticket/8523#comment:14>\n        // BTW3, In ff, offsetX/offsetY is always 0.\n        else if (env.browser.firefox && e.layerX != null && e.layerX !== e.offsetX) {\n            out.zrX = e.layerX;\n            out.zrY = e.layerY;\n        }\n        // For IE6+, chrome, safari, opera. (When will ff support offsetX?)\n        else if (e.offsetX != null) {\n            out.zrX = e.offsetX;\n            out.zrY = e.offsetY;\n        }\n        // For some other device, e.g., IOS safari.\n        else {\n            defaultGetZrXY(el, e, out);\n        }\n\n        return out;\n    }\n\n    function defaultGetZrXY(el, e, out) {\n        // This well-known method below does not support css transform.\n        var box = getBoundingClientRect(el);\n        out.zrX = e.clientX - box.left;\n        out.zrY = e.clientY - box.top;\n    }\n\n    /**\n     * 如果存在第三方嵌入的一些dom触发的事件，或touch事件，需要转换一下事件坐标.\n     * `calculate` is optional, default false.\n     */\n    function normalizeEvent(el, e, calculate) {\n\n        e = e || window.event;\n\n        if (e.zrX != null) {\n            return e;\n        }\n\n        var eventType = e.type;\n        var isTouch = eventType && eventType.indexOf('touch') >= 0;\n\n        if (!isTouch) {\n            clientToLocal(el, e, e, calculate);\n            e.zrDelta = (e.wheelDelta) ? e.wheelDelta / 120 : -(e.detail || 0) / 3;\n        }\n        else {\n            var touch = eventType != 'touchend'\n                ? e.targetTouches[0]\n                : e.changedTouches[0];\n            touch && clientToLocal(el, touch, e, calculate);\n        }\n\n        return e;\n    }\n\n    function addEventListener(el, name, handler) {\n        if (isDomLevel2) {\n            el.addEventListener(name, handler);\n        }\n        else {\n            el.attachEvent('on' + name, handler);\n        }\n    }\n\n    function removeEventListener(el, name, handler) {\n        if (isDomLevel2) {\n            el.removeEventListener(name, handler);\n        }\n        else {\n            el.detachEvent('on' + name, handler);\n        }\n    }\n\n    /**\n     * preventDefault and stopPropagation.\n     * Notice: do not do that in zrender. Upper application\n     * do that if necessary.\n     *\n     * @memberOf module:zrender/core/event\n     * @method\n     * @param {Event} e : event对象\n     */\n    var stop = isDomLevel2\n        ? function (e) {\n            e.preventDefault();\n            e.stopPropagation();\n            e.cancelBubble = true;\n        }\n        : function (e) {\n            e.returnValue = false;\n            e.cancelBubble = true;\n        };\n\n    module.exports = {\n        clientToLocal: clientToLocal,\n        normalizeEvent: normalizeEvent,\n        addEventListener: addEventListener,\n        removeEventListener: removeEventListener,\n\n        stop: stop,\n        // 做向上兼容\n        Dispatcher: Eventful\n    };\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/zrender/lib/core/event.js\n// module id = 333\n// module chunks = 0 1 2 3 4","/**\n * // Scale class management\n * @module echarts/scale/Scale\n */\n\n\n    var clazzUtil = require('../util/clazz');\n\n    function Scale() {\n        /**\n         * Extent\n         * @type {Array.<number>}\n         * @protected\n         */\n        this._extent = [Infinity, -Infinity];\n\n        /**\n         * Step is calculated in adjustExtent\n         * @type {Array.<number>}\n         * @protected\n         */\n        this._interval = 0;\n\n        this.init && this.init.apply(this, arguments);\n    }\n\n    var scaleProto = Scale.prototype;\n\n    /**\n     * Parse input val to valid inner number.\n     * @param {*} val\n     * @return {number}\n     */\n    scaleProto.parse = function (val) {\n        // Notice: This would be a trap here, If the implementation\n        // of this method depends on extent, and this method is used\n        // before extent set (like in dataZoom), it would be wrong.\n        // Nevertheless, parse does not depend on extent generally.\n        return val;\n    };\n\n    scaleProto.contain = function (val) {\n        var extent = this._extent;\n        return val >= extent[0] && val <= extent[1];\n    };\n\n    /**\n     * Normalize value to linear [0, 1], return 0.5 if extent span is 0\n     * @param {number} val\n     * @return {number}\n     */\n    scaleProto.normalize = function (val) {\n        var extent = this._extent;\n        if (extent[1] === extent[0]) {\n            return 0.5;\n        }\n        return (val - extent[0]) / (extent[1] - extent[0]);\n    };\n\n    /**\n     * Scale normalized value\n     * @param {number} val\n     * @return {number}\n     */\n    scaleProto.scale = function (val) {\n        var extent = this._extent;\n        return val * (extent[1] - extent[0]) + extent[0];\n    };\n\n    /**\n     * Set extent from data\n     * @param {Array.<number>} other\n     */\n    scaleProto.unionExtent = function (other) {\n        var extent = this._extent;\n        other[0] < extent[0] && (extent[0] = other[0]);\n        other[1] > extent[1] && (extent[1] = other[1]);\n        // not setExtent because in log axis it may transformed to power\n        // this.setExtent(extent[0], extent[1]);\n    };\n\n    /**\n     * Set extent from data\n     * @param {module:echarts/data/List} data\n     * @param {string} dim\n     */\n    scaleProto.unionExtentFromData = function (data, dim) {\n        this.unionExtent(data.getDataExtent(dim, true));\n    };\n\n    /**\n     * Get extent\n     * @return {Array.<number>}\n     */\n    scaleProto.getExtent = function () {\n        return this._extent.slice();\n    };\n\n    /**\n     * Set extent\n     * @param {number} start\n     * @param {number} end\n     */\n    scaleProto.setExtent = function (start, end) {\n        var thisExtent = this._extent;\n        if (!isNaN(start)) {\n            thisExtent[0] = start;\n        }\n        if (!isNaN(end)) {\n            thisExtent[1] = end;\n        }\n    };\n\n    /**\n     * @return {Array.<string>}\n     */\n    scaleProto.getTicksLabels = function () {\n        var labels = [];\n        var ticks = this.getTicks();\n        for (var i = 0; i < ticks.length; i++) {\n            labels.push(this.getLabel(ticks[i]));\n        }\n        return labels;\n    };\n\n    clazzUtil.enableClassExtend(Scale);\n    clazzUtil.enableClassManagement(Scale, {\n        registerWhenExtend: true\n    });\n\n    module.exports = Scale;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/scale/Scale.js\n// module id = 334\n// module chunks = 0 1 2 3 4","\n    var dpr = 1;\n    // If in browser environment\n    if (typeof window !== 'undefined') {\n        dpr = Math.max(window.devicePixelRatio || 1, 1);\n    }\n    /**\n     * config默认配置项\n     * @exports zrender/config\n     * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)\n     */\n    var config = {\n        /**\n         * debug日志选项：catchBrushException为true下有效\n         * 0 : 不生成debug数据，发布用\n         * 1 : 异常抛出，调试用\n         * 2 : 控制台输出，调试用\n         */\n        debugMode: 0,\n\n        // retina 屏幕优化\n        devicePixelRatio: dpr\n    };\n    module.exports = config;\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/zrender/lib/config.js\n// module id = 335\n// module chunks = 0 1 2 3 4","/**\n * Group是一个容器，可以插入子节点，Group的变换也会被应用到子节点上\n * @module zrender/graphic/Group\n * @example\n *     var Group = require('zrender/lib/container/Group');\n *     var Circle = require('zrender/lib/graphic/shape/Circle');\n *     var g = new Group();\n *     g.position[0] = 100;\n *     g.position[1] = 100;\n *     g.add(new Circle({\n *         style: {\n *             x: 100,\n *             y: 100,\n *             r: 20,\n *         }\n *     }));\n *     zr.add(g);\n */\n\n\n    var zrUtil = require('../core/util');\n    var Element = require('../Element');\n    var BoundingRect = require('../core/BoundingRect');\n\n    /**\n     * @alias module:zrender/graphic/Group\n     * @constructor\n     * @extends module:zrender/mixin/Transformable\n     * @extends module:zrender/mixin/Eventful\n     */\n    var Group = function (opts) {\n\n        opts = opts || {};\n\n        Element.call(this, opts);\n\n        for (var key in opts) {\n            if (opts.hasOwnProperty(key)) {\n                this[key] = opts[key];\n            }\n        }\n\n        this._children = [];\n\n        this.__storage = null;\n\n        this.__dirty = true;\n    };\n\n    Group.prototype = {\n\n        constructor: Group,\n\n        isGroup: true,\n\n        /**\n         * @type {string}\n         */\n        type: 'group',\n\n        /**\n         * 所有子孙元素是否响应鼠标事件\n         * @name module:/zrender/container/Group#silent\n         * @type {boolean}\n         * @default false\n         */\n        silent: false,\n\n        /**\n         * @return {Array.<module:zrender/Element>}\n         */\n        children: function () {\n            return this._children.slice();\n        },\n\n        /**\n         * 获取指定 index 的儿子节点\n         * @param  {number} idx\n         * @return {module:zrender/Element}\n         */\n        childAt: function (idx) {\n            return this._children[idx];\n        },\n\n        /**\n         * 获取指定名字的儿子节点\n         * @param  {string} name\n         * @return {module:zrender/Element}\n         */\n        childOfName: function (name) {\n            var children = this._children;\n            for (var i = 0; i < children.length; i++) {\n                if (children[i].name === name) {\n                    return children[i];\n                }\n             }\n        },\n\n        /**\n         * @return {number}\n         */\n        childCount: function () {\n            return this._children.length;\n        },\n\n        /**\n         * 添加子节点到最后\n         * @param {module:zrender/Element} child\n         */\n        add: function (child) {\n            if (child && child !== this && child.parent !== this) {\n\n                this._children.push(child);\n\n                this._doAdd(child);\n            }\n\n            return this;\n        },\n\n        /**\n         * 添加子节点在 nextSibling 之前\n         * @param {module:zrender/Element} child\n         * @param {module:zrender/Element} nextSibling\n         */\n        addBefore: function (child, nextSibling) {\n            if (child && child !== this && child.parent !== this\n                && nextSibling && nextSibling.parent === this) {\n\n                var children = this._children;\n                var idx = children.indexOf(nextSibling);\n\n                if (idx >= 0) {\n                    children.splice(idx, 0, child);\n                    this._doAdd(child);\n                }\n            }\n\n            return this;\n        },\n\n        _doAdd: function (child) {\n            if (child.parent) {\n                child.parent.remove(child);\n            }\n\n            child.parent = this;\n\n            var storage = this.__storage;\n            var zr = this.__zr;\n            if (storage && storage !== child.__storage) {\n\n                storage.addToStorage(child);\n\n                if (child instanceof Group) {\n                    child.addChildrenToStorage(storage);\n                }\n            }\n\n            zr && zr.refresh();\n        },\n\n        /**\n         * 移除子节点\n         * @param {module:zrender/Element} child\n         */\n        remove: function (child) {\n            var zr = this.__zr;\n            var storage = this.__storage;\n            var children = this._children;\n\n            var idx = zrUtil.indexOf(children, child);\n            if (idx < 0) {\n                return this;\n            }\n            children.splice(idx, 1);\n\n            child.parent = null;\n\n            if (storage) {\n\n                storage.delFromStorage(child);\n\n                if (child instanceof Group) {\n                    child.delChildrenFromStorage(storage);\n                }\n            }\n\n            zr && zr.refresh();\n\n            return this;\n        },\n\n        /**\n         * 移除所有子节点\n         */\n        removeAll: function () {\n            var children = this._children;\n            var storage = this.__storage;\n            var child;\n            var i;\n            for (i = 0; i < children.length; i++) {\n                child = children[i];\n                if (storage) {\n                    storage.delFromStorage(child);\n                    if (child instanceof Group) {\n                        child.delChildrenFromStorage(storage);\n                    }\n                }\n                child.parent = null;\n            }\n            children.length = 0;\n\n            return this;\n        },\n\n        /**\n         * 遍历所有子节点\n         * @param  {Function} cb\n         * @param  {}   context\n         */\n        eachChild: function (cb, context) {\n            var children = this._children;\n            for (var i = 0; i < children.length; i++) {\n                var child = children[i];\n                cb.call(context, child, i);\n            }\n            return this;\n        },\n\n        /**\n         * 深度优先遍历所有子孙节点\n         * @param  {Function} cb\n         * @param  {}   context\n         */\n        traverse: function (cb, context) {\n            for (var i = 0; i < this._children.length; i++) {\n                var child = this._children[i];\n                cb.call(context, child);\n\n                if (child.type === 'group') {\n                    child.traverse(cb, context);\n                }\n            }\n            return this;\n        },\n\n        addChildrenToStorage: function (storage) {\n            for (var i = 0; i < this._children.length; i++) {\n                var child = this._children[i];\n                storage.addToStorage(child);\n                if (child instanceof Group) {\n                    child.addChildrenToStorage(storage);\n                }\n            }\n        },\n\n        delChildrenFromStorage: function (storage) {\n            for (var i = 0; i < this._children.length; i++) {\n                var child = this._children[i];\n                storage.delFromStorage(child);\n                if (child instanceof Group) {\n                    child.delChildrenFromStorage(storage);\n                }\n            }\n        },\n\n        dirty: function () {\n            this.__dirty = true;\n            this.__zr && this.__zr.refresh();\n            return this;\n        },\n\n        /**\n         * @return {module:zrender/core/BoundingRect}\n         */\n        getBoundingRect: function (includeChildren) {\n            // TODO Caching\n            var rect = null;\n            var tmpRect = new BoundingRect(0, 0, 0, 0);\n            var children = includeChildren || this._children;\n            var tmpMat = [];\n\n            for (var i = 0; i < children.length; i++) {\n                var child = children[i];\n                if (child.ignore || child.invisible) {\n                    continue;\n                }\n\n                var childRect = child.getBoundingRect();\n                var transform = child.getLocalTransform(tmpMat);\n                // TODO\n                // The boundingRect cacluated by transforming original\n                // rect may be bigger than the actual bundingRect when rotation\n                // is used. (Consider a circle rotated aginst its center, where\n                // the actual boundingRect should be the same as that not be\n                // rotated.) But we can not find better approach to calculate\n                // actual boundingRect yet, considering performance.\n                if (transform) {\n                    tmpRect.copy(childRect);\n                    tmpRect.applyTransform(transform);\n                    rect = rect || tmpRect.clone();\n                    rect.union(tmpRect);\n                }\n                else {\n                    rect = rect || childRect.clone();\n                    rect.union(childRect);\n                }\n            }\n            return rect || tmpRect;\n        }\n    };\n\n    zrUtil.inherits(Group, Element);\n\n    module.exports = Group;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/zrender/lib/container/Group.js\n// module id = 336\n// module chunks = 0 1 2 3 4","'use strict';\n/**\n * Path 代理，可以在`buildPath`中用于替代`ctx`, 会保存每个path操作的命令到pathCommands属性中\n * 可以用于 isInsidePath 判断以及获取boundingRect\n *\n * @module zrender/core/PathProxy\n * @author Yi Shen (http://www.github.com/pissang)\n */\n\n // TODO getTotalLength, getPointAtLength\n\n\n    var curve = require('./curve');\n    var vec2 = require('./vector');\n    var bbox = require('./bbox');\n    var BoundingRect = require('./BoundingRect');\n    var dpr = require('../config').devicePixelRatio;\n\n    var CMD = {\n        M: 1,\n        L: 2,\n        C: 3,\n        Q: 4,\n        A: 5,\n        Z: 6,\n        // Rect\n        R: 7\n    };\n\n    // var CMD_MEM_SIZE = {\n    //     M: 3,\n    //     L: 3,\n    //     C: 7,\n    //     Q: 5,\n    //     A: 9,\n    //     R: 5,\n    //     Z: 1\n    // };\n\n    var min = [];\n    var max = [];\n    var min2 = [];\n    var max2 = [];\n    var mathMin = Math.min;\n    var mathMax = Math.max;\n    var mathCos = Math.cos;\n    var mathSin = Math.sin;\n    var mathSqrt = Math.sqrt;\n    var mathAbs = Math.abs;\n\n    var hasTypedArray = typeof Float32Array != 'undefined';\n\n    /**\n     * @alias module:zrender/core/PathProxy\n     * @constructor\n     */\n    var PathProxy = function (notSaveData) {\n\n        this._saveData = !(notSaveData || false);\n\n        if (this._saveData) {\n            /**\n             * Path data. Stored as flat array\n             * @type {Array.<Object>}\n             */\n            this.data = [];\n        }\n\n        this._ctx = null;\n    };\n\n    /**\n     * 快速计算Path包围盒（并不是最小包围盒）\n     * @return {Object}\n     */\n    PathProxy.prototype = {\n\n        constructor: PathProxy,\n\n        _xi: 0,\n        _yi: 0,\n\n        _x0: 0,\n        _y0: 0,\n        // Unit x, Unit y. Provide for avoiding drawing that too short line segment\n        _ux: 0,\n        _uy: 0,\n\n        _len: 0,\n\n        _lineDash: null,\n\n        _dashOffset: 0,\n\n        _dashIdx: 0,\n\n        _dashSum: 0,\n\n        /**\n         * @readOnly\n         */\n        setScale: function (sx, sy) {\n            this._ux = mathAbs(1 / dpr / sx) || 0;\n            this._uy = mathAbs(1 / dpr / sy) || 0;\n        },\n\n        getContext: function () {\n            return this._ctx;\n        },\n\n        /**\n         * @param  {CanvasRenderingContext2D} ctx\n         * @return {module:zrender/core/PathProxy}\n         */\n        beginPath: function (ctx) {\n\n            this._ctx = ctx;\n\n            ctx && ctx.beginPath();\n\n            ctx && (this.dpr = ctx.dpr);\n\n            // Reset\n            if (this._saveData) {\n                this._len = 0;\n            }\n\n            if (this._lineDash) {\n                this._lineDash = null;\n\n                this._dashOffset = 0;\n            }\n\n            return this;\n        },\n\n        /**\n         * @param  {number} x\n         * @param  {number} y\n         * @return {module:zrender/core/PathProxy}\n         */\n        moveTo: function (x, y) {\n            this.addData(CMD.M, x, y);\n            this._ctx && this._ctx.moveTo(x, y);\n\n            // x0, y0, xi, yi 是记录在 _dashedXXXXTo 方法中使用\n            // xi, yi 记录当前点, x0, y0 在 closePath 的时候回到起始点。\n            // 有可能在 beginPath 之后直接调用 lineTo，这时候 x0, y0 需要\n            // 在 lineTo 方法中记录，这里先不考虑这种情况，dashed line 也只在 IE10- 中不支持\n            this._x0 = x;\n            this._y0 = y;\n\n            this._xi = x;\n            this._yi = y;\n\n            return this;\n        },\n\n        /**\n         * @param  {number} x\n         * @param  {number} y\n         * @return {module:zrender/core/PathProxy}\n         */\n        lineTo: function (x, y) {\n            var exceedUnit = mathAbs(x - this._xi) > this._ux\n                || mathAbs(y - this._yi) > this._uy\n                // Force draw the first segment\n                || this._len < 5;\n\n            this.addData(CMD.L, x, y);\n\n            if (this._ctx && exceedUnit) {\n                this._needsDash() ? this._dashedLineTo(x, y)\n                    : this._ctx.lineTo(x, y);\n            }\n            if (exceedUnit) {\n                this._xi = x;\n                this._yi = y;\n            }\n\n            return this;\n        },\n\n        /**\n         * @param  {number} x1\n         * @param  {number} y1\n         * @param  {number} x2\n         * @param  {number} y2\n         * @param  {number} x3\n         * @param  {number} y3\n         * @return {module:zrender/core/PathProxy}\n         */\n        bezierCurveTo: function (x1, y1, x2, y2, x3, y3) {\n            this.addData(CMD.C, x1, y1, x2, y2, x3, y3);\n            if (this._ctx) {\n                this._needsDash() ? this._dashedBezierTo(x1, y1, x2, y2, x3, y3)\n                    : this._ctx.bezierCurveTo(x1, y1, x2, y2, x3, y3);\n            }\n            this._xi = x3;\n            this._yi = y3;\n            return this;\n        },\n\n        /**\n         * @param  {number} x1\n         * @param  {number} y1\n         * @param  {number} x2\n         * @param  {number} y2\n         * @return {module:zrender/core/PathProxy}\n         */\n        quadraticCurveTo: function (x1, y1, x2, y2) {\n            this.addData(CMD.Q, x1, y1, x2, y2);\n            if (this._ctx) {\n                this._needsDash() ? this._dashedQuadraticTo(x1, y1, x2, y2)\n                    : this._ctx.quadraticCurveTo(x1, y1, x2, y2);\n            }\n            this._xi = x2;\n            this._yi = y2;\n            return this;\n        },\n\n        /**\n         * @param  {number} cx\n         * @param  {number} cy\n         * @param  {number} r\n         * @param  {number} startAngle\n         * @param  {number} endAngle\n         * @param  {boolean} anticlockwise\n         * @return {module:zrender/core/PathProxy}\n         */\n        arc: function (cx, cy, r, startAngle, endAngle, anticlockwise) {\n            this.addData(\n                CMD.A, cx, cy, r, r, startAngle, endAngle - startAngle, 0, anticlockwise ? 0 : 1\n            );\n            this._ctx && this._ctx.arc(cx, cy, r, startAngle, endAngle, anticlockwise);\n\n            this._xi = mathCos(endAngle) * r + cx;\n            this._yi = mathSin(endAngle) * r + cx;\n            return this;\n        },\n\n        // TODO\n        arcTo: function (x1, y1, x2, y2, radius) {\n            if (this._ctx) {\n                this._ctx.arcTo(x1, y1, x2, y2, radius);\n            }\n            return this;\n        },\n\n        // TODO\n        rect: function (x, y, w, h) {\n            this._ctx && this._ctx.rect(x, y, w, h);\n            this.addData(CMD.R, x, y, w, h);\n            return this;\n        },\n\n        /**\n         * @return {module:zrender/core/PathProxy}\n         */\n        closePath: function () {\n            this.addData(CMD.Z);\n\n            var ctx = this._ctx;\n            var x0 = this._x0;\n            var y0 = this._y0;\n            if (ctx) {\n                this._needsDash() && this._dashedLineTo(x0, y0);\n                ctx.closePath();\n            }\n\n            this._xi = x0;\n            this._yi = y0;\n            return this;\n        },\n\n        /**\n         * Context 从外部传入，因为有可能是 rebuildPath 完之后再 fill。\n         * stroke 同样\n         * @param {CanvasRenderingContext2D} ctx\n         * @return {module:zrender/core/PathProxy}\n         */\n        fill: function (ctx) {\n            ctx && ctx.fill();\n            this.toStatic();\n        },\n\n        /**\n         * @param {CanvasRenderingContext2D} ctx\n         * @return {module:zrender/core/PathProxy}\n         */\n        stroke: function (ctx) {\n            ctx && ctx.stroke();\n            this.toStatic();\n        },\n\n        /**\n         * 必须在其它绘制命令前调用\n         * Must be invoked before all other path drawing methods\n         * @return {module:zrender/core/PathProxy}\n         */\n        setLineDash: function (lineDash) {\n            if (lineDash instanceof Array) {\n                this._lineDash = lineDash;\n\n                this._dashIdx = 0;\n\n                var lineDashSum = 0;\n                for (var i = 0; i < lineDash.length; i++) {\n                    lineDashSum += lineDash[i];\n                }\n                this._dashSum = lineDashSum;\n            }\n            return this;\n        },\n\n        /**\n         * 必须在其它绘制命令前调用\n         * Must be invoked before all other path drawing methods\n         * @return {module:zrender/core/PathProxy}\n         */\n        setLineDashOffset: function (offset) {\n            this._dashOffset = offset;\n            return this;\n        },\n\n        /**\n         *\n         * @return {boolean}\n         */\n        len: function () {\n            return this._len;\n        },\n\n        /**\n         * 直接设置 Path 数据\n         */\n        setData: function (data) {\n\n            var len = data.length;\n\n            if (! (this.data && this.data.length == len) && hasTypedArray) {\n                this.data = new Float32Array(len);\n            }\n\n            for (var i = 0; i < len; i++) {\n                this.data[i] = data[i];\n            }\n\n            this._len = len;\n        },\n\n        /**\n         * 添加子路径\n         * @param {module:zrender/core/PathProxy|Array.<module:zrender/core/PathProxy>} path\n         */\n        appendPath: function (path) {\n            if (!(path instanceof Array)) {\n                path = [path];\n            }\n            var len = path.length;\n            var appendSize = 0;\n            var offset = this._len;\n            for (var i = 0; i < len; i++) {\n                appendSize += path[i].len();\n            }\n            if (hasTypedArray && (this.data instanceof Float32Array)) {\n                this.data = new Float32Array(offset + appendSize);\n            }\n            for (var i = 0; i < len; i++) {\n                var appendPathData = path[i].data;\n                for (var k = 0; k < appendPathData.length; k++) {\n                    this.data[offset++] = appendPathData[k];\n                }\n            }\n            this._len = offset;\n        },\n\n        /**\n         * 填充 Path 数据。\n         * 尽量复用而不申明新的数组。大部分图形重绘的指令数据长度都是不变的。\n         */\n        addData: function (cmd) {\n            if (!this._saveData) {\n                return;\n            }\n\n            var data = this.data;\n            if (this._len + arguments.length > data.length) {\n                // 因为之前的数组已经转换成静态的 Float32Array\n                // 所以不够用时需要扩展一个新的动态数组\n                this._expandData();\n                data = this.data;\n            }\n            for (var i = 0; i < arguments.length; i++) {\n                data[this._len++] = arguments[i];\n            }\n\n            this._prevCmd = cmd;\n        },\n\n        _expandData: function () {\n            // Only if data is Float32Array\n            if (!(this.data instanceof Array)) {\n                var newData = [];\n                for (var i = 0; i < this._len; i++) {\n                    newData[i] = this.data[i];\n                }\n                this.data = newData;\n            }\n        },\n\n        /**\n         * If needs js implemented dashed line\n         * @return {boolean}\n         * @private\n         */\n        _needsDash: function () {\n            return this._lineDash;\n        },\n\n        _dashedLineTo: function (x1, y1) {\n            var dashSum = this._dashSum;\n            var offset = this._dashOffset;\n            var lineDash = this._lineDash;\n            var ctx = this._ctx;\n\n            var x0 = this._xi;\n            var y0 = this._yi;\n            var dx = x1 - x0;\n            var dy = y1 - y0;\n            var dist = mathSqrt(dx * dx + dy * dy);\n            var x = x0;\n            var y = y0;\n            var dash;\n            var nDash = lineDash.length;\n            var idx;\n            dx /= dist;\n            dy /= dist;\n\n            if (offset < 0) {\n                // Convert to positive offset\n                offset = dashSum + offset;\n            }\n            offset %= dashSum;\n            x -= offset * dx;\n            y -= offset * dy;\n\n            while ((dx > 0 && x <= x1) || (dx < 0 && x >= x1)\n            || (dx == 0 && ((dy > 0 && y <= y1) || (dy < 0 && y >= y1)))) {\n                idx = this._dashIdx;\n                dash = lineDash[idx];\n                x += dx * dash;\n                y += dy * dash;\n                this._dashIdx = (idx + 1) % nDash;\n                // Skip positive offset\n                if ((dx > 0 && x < x0) || (dx < 0 && x > x0) || (dy > 0 && y < y0) || (dy < 0 && y > y0)) {\n                    continue;\n                }\n                ctx[idx % 2 ? 'moveTo' : 'lineTo'](\n                    dx >= 0 ? mathMin(x, x1) : mathMax(x, x1),\n                    dy >= 0 ? mathMin(y, y1) : mathMax(y, y1)\n                );\n            }\n            // Offset for next lineTo\n            dx = x - x1;\n            dy = y - y1;\n            this._dashOffset = -mathSqrt(dx * dx + dy * dy);\n        },\n\n        // Not accurate dashed line to\n        _dashedBezierTo: function (x1, y1, x2, y2, x3, y3) {\n            var dashSum = this._dashSum;\n            var offset = this._dashOffset;\n            var lineDash = this._lineDash;\n            var ctx = this._ctx;\n\n            var x0 = this._xi;\n            var y0 = this._yi;\n            var t;\n            var dx;\n            var dy;\n            var cubicAt = curve.cubicAt;\n            var bezierLen = 0;\n            var idx = this._dashIdx;\n            var nDash = lineDash.length;\n\n            var x;\n            var y;\n\n            var tmpLen = 0;\n\n            if (offset < 0) {\n                // Convert to positive offset\n                offset = dashSum + offset;\n            }\n            offset %= dashSum;\n            // Bezier approx length\n            for (t = 0; t < 1; t += 0.1) {\n                dx = cubicAt(x0, x1, x2, x3, t + 0.1)\n                    - cubicAt(x0, x1, x2, x3, t);\n                dy = cubicAt(y0, y1, y2, y3, t + 0.1)\n                    - cubicAt(y0, y1, y2, y3, t);\n                bezierLen += mathSqrt(dx * dx + dy * dy);\n            }\n\n            // Find idx after add offset\n            for (; idx < nDash; idx++) {\n                tmpLen += lineDash[idx];\n                if (tmpLen > offset) {\n                    break;\n                }\n            }\n            t = (tmpLen - offset) / bezierLen;\n\n            while (t <= 1) {\n\n                x = cubicAt(x0, x1, x2, x3, t);\n                y = cubicAt(y0, y1, y2, y3, t);\n\n                // Use line to approximate dashed bezier\n                // Bad result if dash is long\n                idx % 2 ? ctx.moveTo(x, y)\n                    : ctx.lineTo(x, y);\n\n                t += lineDash[idx] / bezierLen;\n\n                idx = (idx + 1) % nDash;\n            }\n\n            // Finish the last segment and calculate the new offset\n            (idx % 2 !== 0) && ctx.lineTo(x3, y3);\n            dx = x3 - x;\n            dy = y3 - y;\n            this._dashOffset = -mathSqrt(dx * dx + dy * dy);\n        },\n\n        _dashedQuadraticTo: function (x1, y1, x2, y2) {\n            // Convert quadratic to cubic using degree elevation\n            var x3 = x2;\n            var y3 = y2;\n            x2 = (x2 + 2 * x1) / 3;\n            y2 = (y2 + 2 * y1) / 3;\n            x1 = (this._xi + 2 * x1) / 3;\n            y1 = (this._yi + 2 * y1) / 3;\n\n            this._dashedBezierTo(x1, y1, x2, y2, x3, y3);\n        },\n\n        /**\n         * 转成静态的 Float32Array 减少堆内存占用\n         * Convert dynamic array to static Float32Array\n         */\n        toStatic: function () {\n            var data = this.data;\n            if (data instanceof Array) {\n                data.length = this._len;\n                if (hasTypedArray) {\n                    this.data = new Float32Array(data);\n                }\n            }\n        },\n\n        /**\n         * @return {module:zrender/core/BoundingRect}\n         */\n        getBoundingRect: function () {\n            min[0] = min[1] = min2[0] = min2[1] = Number.MAX_VALUE;\n            max[0] = max[1] = max2[0] = max2[1] = -Number.MAX_VALUE;\n\n            var data = this.data;\n            var xi = 0;\n            var yi = 0;\n            var x0 = 0;\n            var y0 = 0;\n\n            for (var i = 0; i < data.length;) {\n                var cmd = data[i++];\n\n                if (i == 1) {\n                    // 如果第一个命令是 L, C, Q\n                    // 则 previous point 同绘制命令的第一个 point\n                    //\n                    // 第一个命令为 Arc 的情况下会在后面特殊处理\n                    xi = data[i];\n                    yi = data[i + 1];\n\n                    x0 = xi;\n                    y0 = yi;\n                }\n\n                switch (cmd) {\n                    case CMD.M:\n                        // moveTo 命令重新创建一个新的 subpath, 并且更新新的起点\n                        // 在 closePath 的时候使用\n                        x0 = data[i++];\n                        y0 = data[i++];\n                        xi = x0;\n                        yi = y0;\n                        min2[0] = x0;\n                        min2[1] = y0;\n                        max2[0] = x0;\n                        max2[1] = y0;\n                        break;\n                    case CMD.L:\n                        bbox.fromLine(xi, yi, data[i], data[i + 1], min2, max2);\n                        xi = data[i++];\n                        yi = data[i++];\n                        break;\n                    case CMD.C:\n                        bbox.fromCubic(\n                            xi, yi, data[i++], data[i++], data[i++], data[i++], data[i], data[i + 1],\n                            min2, max2\n                        );\n                        xi = data[i++];\n                        yi = data[i++];\n                        break;\n                    case CMD.Q:\n                        bbox.fromQuadratic(\n                            xi, yi, data[i++], data[i++], data[i], data[i + 1],\n                            min2, max2\n                        );\n                        xi = data[i++];\n                        yi = data[i++];\n                        break;\n                    case CMD.A:\n                        // TODO Arc 判断的开销比较大\n                        var cx = data[i++];\n                        var cy = data[i++];\n                        var rx = data[i++];\n                        var ry = data[i++];\n                        var startAngle = data[i++];\n                        var endAngle = data[i++] + startAngle;\n                        // TODO Arc 旋转\n                        var psi = data[i++];\n                        var anticlockwise = 1 - data[i++];\n\n                        if (i == 1) {\n                            // 直接使用 arc 命令\n                            // 第一个命令起点还未定义\n                            x0 = mathCos(startAngle) * rx + cx;\n                            y0 = mathSin(startAngle) * ry + cy;\n                        }\n\n                        bbox.fromArc(\n                            cx, cy, rx, ry, startAngle, endAngle,\n                            anticlockwise, min2, max2\n                        );\n\n                        xi = mathCos(endAngle) * rx + cx;\n                        yi = mathSin(endAngle) * ry + cy;\n                        break;\n                    case CMD.R:\n                        x0 = xi = data[i++];\n                        y0 = yi = data[i++];\n                        var width = data[i++];\n                        var height = data[i++];\n                        // Use fromLine\n                        bbox.fromLine(x0, y0, x0 + width, y0 + height, min2, max2);\n                        break;\n                    case CMD.Z:\n                        xi = x0;\n                        yi = y0;\n                        break;\n                }\n\n                // Union\n                vec2.min(min, min, min2);\n                vec2.max(max, max, max2);\n            }\n\n            // No data\n            if (i === 0) {\n                min[0] = min[1] = max[0] = max[1] = 0;\n            }\n\n            return new BoundingRect(\n                min[0], min[1], max[0] - min[0], max[1] - min[1]\n            );\n        },\n\n        /**\n         * Rebuild path from current data\n         * Rebuild path will not consider javascript implemented line dash.\n         * @param {CanvasRenderingContext} ctx\n         */\n        rebuildPath: function (ctx) {\n            var d = this.data;\n            var x0, y0;\n            var xi, yi;\n            var x, y;\n            var ux = this._ux;\n            var uy = this._uy;\n            var len = this._len;\n            for (var i = 0; i < len;) {\n                var cmd = d[i++];\n\n                if (i == 1) {\n                    // 如果第一个命令是 L, C, Q\n                    // 则 previous point 同绘制命令的第一个 point\n                    //\n                    // 第一个命令为 Arc 的情况下会在后面特殊处理\n                    xi = d[i];\n                    yi = d[i + 1];\n\n                    x0 = xi;\n                    y0 = yi;\n                }\n                switch (cmd) {\n                    case CMD.M:\n                        x0 = xi = d[i++];\n                        y0 = yi = d[i++];\n                        ctx.moveTo(xi, yi);\n                        break;\n                    case CMD.L:\n                        x = d[i++];\n                        y = d[i++];\n                        // Not draw too small seg between\n                        if (mathAbs(x - xi) > ux || mathAbs(y - yi) > uy || i === len - 1) {\n                            ctx.lineTo(x, y);\n                            xi = x;\n                            yi = y;\n                        }\n                        break;\n                    case CMD.C:\n                        ctx.bezierCurveTo(\n                            d[i++], d[i++], d[i++], d[i++], d[i++], d[i++]\n                        );\n                        xi = d[i - 2];\n                        yi = d[i - 1];\n                        break;\n                    case CMD.Q:\n                        ctx.quadraticCurveTo(d[i++], d[i++], d[i++], d[i++]);\n                        xi = d[i - 2];\n                        yi = d[i - 1];\n                        break;\n                    case CMD.A:\n                        var cx = d[i++];\n                        var cy = d[i++];\n                        var rx = d[i++];\n                        var ry = d[i++];\n                        var theta = d[i++];\n                        var dTheta = d[i++];\n                        var psi = d[i++];\n                        var fs = d[i++];\n                        var r = (rx > ry) ? rx : ry;\n                        var scaleX = (rx > ry) ? 1 : rx / ry;\n                        var scaleY = (rx > ry) ? ry / rx : 1;\n                        var isEllipse = Math.abs(rx - ry) > 1e-3;\n                        var endAngle = theta + dTheta;\n                        if (isEllipse) {\n                            ctx.translate(cx, cy);\n                            ctx.rotate(psi);\n                            ctx.scale(scaleX, scaleY);\n                            ctx.arc(0, 0, r, theta, endAngle, 1 - fs);\n                            ctx.scale(1 / scaleX, 1 / scaleY);\n                            ctx.rotate(-psi);\n                            ctx.translate(-cx, -cy);\n                        }\n                        else {\n                            ctx.arc(cx, cy, r, theta, endAngle, 1 - fs);\n                        }\n\n                        if (i == 1) {\n                            // 直接使用 arc 命令\n                            // 第一个命令起点还未定义\n                            x0 = mathCos(theta) * rx + cx;\n                            y0 = mathSin(theta) * ry + cy;\n                        }\n                        xi = mathCos(endAngle) * rx + cx;\n                        yi = mathSin(endAngle) * ry + cy;\n                        break;\n                    case CMD.R:\n                        x0 = xi = d[i];\n                        y0 = yi = d[i + 1];\n                        ctx.rect(d[i++], d[i++], d[i++], d[i++]);\n                        break;\n                    case CMD.Z:\n                        ctx.closePath();\n                        xi = x0;\n                        yi = y0;\n                }\n            }\n        }\n    };\n\n    PathProxy.CMD = CMD;\n\n    module.exports = PathProxy;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/zrender/lib/core/PathProxy.js\n// module id = 337\n// module chunks = 0 1 2 3 4","\n    var ArrayCtor = typeof Float32Array === 'undefined'\n        ? Array\n        : Float32Array;\n    /**\n     * 3x2矩阵操作类\n     * @exports zrender/tool/matrix\n     */\n    var matrix = {\n        /**\n         * 创建一个单位矩阵\n         * @return {Float32Array|Array.<number>}\n         */\n        create : function() {\n            var out = new ArrayCtor(6);\n            matrix.identity(out);\n\n            return out;\n        },\n        /**\n         * 设置矩阵为单位矩阵\n         * @param {Float32Array|Array.<number>} out\n         */\n        identity : function(out) {\n            out[0] = 1;\n            out[1] = 0;\n            out[2] = 0;\n            out[3] = 1;\n            out[4] = 0;\n            out[5] = 0;\n            return out;\n        },\n        /**\n         * 复制矩阵\n         * @param {Float32Array|Array.<number>} out\n         * @param {Float32Array|Array.<number>} m\n         */\n        copy: function(out, m) {\n            out[0] = m[0];\n            out[1] = m[1];\n            out[2] = m[2];\n            out[3] = m[3];\n            out[4] = m[4];\n            out[5] = m[5];\n            return out;\n        },\n        /**\n         * 矩阵相乘\n         * @param {Float32Array|Array.<number>} out\n         * @param {Float32Array|Array.<number>} m1\n         * @param {Float32Array|Array.<number>} m2\n         */\n        mul : function (out, m1, m2) {\n            // Consider matrix.mul(m, m2, m);\n            // where out is the same as m2.\n            // So use temp variable to escape error.\n            var out0 = m1[0] * m2[0] + m1[2] * m2[1];\n            var out1 = m1[1] * m2[0] + m1[3] * m2[1];\n            var out2 = m1[0] * m2[2] + m1[2] * m2[3];\n            var out3 = m1[1] * m2[2] + m1[3] * m2[3];\n            var out4 = m1[0] * m2[4] + m1[2] * m2[5] + m1[4];\n            var out5 = m1[1] * m2[4] + m1[3] * m2[5] + m1[5];\n            out[0] = out0;\n            out[1] = out1;\n            out[2] = out2;\n            out[3] = out3;\n            out[4] = out4;\n            out[5] = out5;\n            return out;\n        },\n        /**\n         * 平移变换\n         * @param {Float32Array|Array.<number>} out\n         * @param {Float32Array|Array.<number>} a\n         * @param {Float32Array|Array.<number>} v\n         */\n        translate : function(out, a, v) {\n            out[0] = a[0];\n            out[1] = a[1];\n            out[2] = a[2];\n            out[3] = a[3];\n            out[4] = a[4] + v[0];\n            out[5] = a[5] + v[1];\n            return out;\n        },\n        /**\n         * 旋转变换\n         * @param {Float32Array|Array.<number>} out\n         * @param {Float32Array|Array.<number>} a\n         * @param {number} rad\n         */\n        rotate : function(out, a, rad) {\n            var aa = a[0];\n            var ac = a[2];\n            var atx = a[4];\n            var ab = a[1];\n            var ad = a[3];\n            var aty = a[5];\n            var st = Math.sin(rad);\n            var ct = Math.cos(rad);\n\n            out[0] = aa * ct + ab * st;\n            out[1] = -aa * st + ab * ct;\n            out[2] = ac * ct + ad * st;\n            out[3] = -ac * st + ct * ad;\n            out[4] = ct * atx + st * aty;\n            out[5] = ct * aty - st * atx;\n            return out;\n        },\n        /**\n         * 缩放变换\n         * @param {Float32Array|Array.<number>} out\n         * @param {Float32Array|Array.<number>} a\n         * @param {Float32Array|Array.<number>} v\n         */\n        scale : function(out, a, v) {\n            var vx = v[0];\n            var vy = v[1];\n            out[0] = a[0] * vx;\n            out[1] = a[1] * vy;\n            out[2] = a[2] * vx;\n            out[3] = a[3] * vy;\n            out[4] = a[4] * vx;\n            out[5] = a[5] * vy;\n            return out;\n        },\n        /**\n         * 求逆矩阵\n         * @param {Float32Array|Array.<number>} out\n         * @param {Float32Array|Array.<number>} a\n         */\n        invert : function(out, a) {\n\n            var aa = a[0];\n            var ac = a[2];\n            var atx = a[4];\n            var ab = a[1];\n            var ad = a[3];\n            var aty = a[5];\n\n            var det = aa * ad - ab * ac;\n            if (!det) {\n                return null;\n            }\n            det = 1.0 / det;\n\n            out[0] = ad * det;\n            out[1] = -ab * det;\n            out[2] = -ac * det;\n            out[3] = aa * det;\n            out[4] = (ac * aty - ad * atx) * det;\n            out[5] = (ab * atx - aa * aty) * det;\n            return out;\n        }\n    };\n\n    module.exports = matrix;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/zrender/lib/core/matrix.js\n// module id = 338\n// module chunks = 0 1 2 3 4","// TODO Parse shadow style\n// TODO Only shallow path support\n\n    var zrUtil = require('zrender/lib/core/util');\n\n    module.exports = function (properties) {\n        // Normalize\n        for (var i = 0; i < properties.length; i++) {\n            if (!properties[i][1]) {\n               properties[i][1] = properties[i][0];\n            }\n        }\n        return function (excludes) {\n            var style = {};\n            for (var i = 0; i < properties.length; i++) {\n                var propName = properties[i][1];\n                if (excludes && zrUtil.indexOf(excludes, propName) >= 0) {\n                    continue;\n                }\n                var val = this.getShallow(propName);\n                if (val != null) {\n                    style[properties[i][0]] = val;\n                }\n            }\n            return style;\n        };\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/model/mixin/makeStyleMapper.js\n// module id = 339\n// module chunks = 0 1 2 3 4","'use strict';\n\n\n    var zrUtil = require('zrender/lib/core/util');\n\n    /**\n     * Interface of Coordinate System Class\n     *\n     * create:\n     *     @param {module:echarts/model/Global} ecModel\n     *     @param {module:echarts/ExtensionAPI} api\n     *     @return {Object} coordinate system instance\n     *\n     * update:\n     *     @param {module:echarts/model/Global} ecModel\n     *     @param {module:echarts/ExtensionAPI} api\n     *\n     * convertToPixel:\n     * convertFromPixel:\n     *     These two methods is also responsible for determine whether this\n     *     coodinate system is applicable to the given `finder`.\n     *     Each coordinate system will be tried, util one returns none\n     *     null/undefined value.\n     *     @param {module:echarts/model/Global} ecModel\n     *     @param {Object} finder\n     *     @param {Array|number} value\n     *     @return {Array|number} convert result.\n     *\n     * containPoint:\n     *     @param {Array.<number>} point In pixel coordinate system.\n     *     @return {boolean}\n     */\n\n    var coordinateSystemCreators = {};\n\n    function CoordinateSystemManager() {\n\n        this._coordinateSystems = [];\n    }\n\n    CoordinateSystemManager.prototype = {\n\n        constructor: CoordinateSystemManager,\n\n        create: function (ecModel, api) {\n            var coordinateSystems = [];\n            zrUtil.each(coordinateSystemCreators, function (creater, type) {\n                var list = creater.create(ecModel, api);\n                coordinateSystems = coordinateSystems.concat(list || []);\n            });\n\n            this._coordinateSystems = coordinateSystems;\n        },\n\n        update: function (ecModel, api) {\n            zrUtil.each(this._coordinateSystems, function (coordSys) {\n                // FIXME MUST have\n                coordSys.update && coordSys.update(ecModel, api);\n            });\n        },\n\n        getCoordinateSystems: function () {\n            return this._coordinateSystems.slice();\n        }\n    };\n\n    CoordinateSystemManager.register = function (type, coordinateSystemCreator) {\n        coordinateSystemCreators[type] = coordinateSystemCreator;\n    };\n\n    CoordinateSystemManager.get = function (type) {\n        return coordinateSystemCreators[type];\n    };\n\n    module.exports = CoordinateSystemManager;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/CoordinateSystem.js\n// module id = 340\n// module chunks = 0 1 2 3 4","\n\n    var OrdinalScale = require('../scale/Ordinal');\n    var IntervalScale = require('../scale/Interval');\n    require('../scale/Time');\n    require('../scale/Log');\n    var Scale = require('../scale/Scale');\n\n    var numberUtil = require('../util/number');\n    var zrUtil = require('zrender/lib/core/util');\n    var textContain = require('zrender/lib/contain/text');\n    var axisHelper = {};\n\n    /**\n     * Get axis scale extent before niced.\n     * Item of returned array can only be number (including Infinity and NaN).\n     */\n    axisHelper.getScaleExtent = function (axis, model) {\n        var scale = axis.scale;\n        var scaleType = scale.type;\n\n        var min = model.getMin();\n        var max = model.getMax();\n        var fixMin = min != null;\n        var fixMax = max != null;\n        var originalExtent = scale.getExtent();\n\n        var axisDataLen;\n        var boundaryGap;\n        var span;\n        if (scaleType === 'ordinal') {\n            axisDataLen = (model.get('data') || []).length;\n        }\n        else {\n            boundaryGap = model.get('boundaryGap');\n            if (!zrUtil.isArray(boundaryGap)) {\n                boundaryGap = [boundaryGap || 0, boundaryGap || 0];\n            }\n            boundaryGap[0] = numberUtil.parsePercent(boundaryGap[0], 1);\n            boundaryGap[1] = numberUtil.parsePercent(boundaryGap[1], 1);\n            span = originalExtent[1] - originalExtent[0];\n        }\n\n        if (min == null) {\n            min = scaleType === 'ordinal'\n                ? (axisDataLen ? 0 : NaN)\n                : originalExtent[0] - boundaryGap[0] * span;\n        }\n        if (max == null) {\n            max = scaleType === 'ordinal'\n                ? (axisDataLen ? axisDataLen - 1 : NaN)\n                : originalExtent[1] + boundaryGap[1] * span;\n        }\n\n        if (min === 'dataMin') {\n            min = originalExtent[0];\n        }\n        if (max === 'dataMax') {\n            max = originalExtent[1];\n        }\n\n        (min == null || !isFinite(min)) && (min = NaN);\n        (max == null || !isFinite(max)) && (max = NaN);\n\n        axis.setBlank(zrUtil.eqNaN(min) || zrUtil.eqNaN(max));\n\n        // Evaluate if axis needs cross zero\n        if (model.getNeedCrossZero()) {\n            // Axis is over zero and min is not set\n            if (min > 0 && max > 0 && !fixMin) {\n                min = 0;\n            }\n            // Axis is under zero and max is not set\n            if (min < 0 && max < 0 && !fixMax) {\n                max = 0;\n            }\n        }\n\n        return [min, max];\n    };\n\n    axisHelper.niceScaleExtent = function (axis, model) {\n        var scale = axis.scale;\n        var extent = axisHelper.getScaleExtent(axis, model);\n        var fixMin = model.getMin() != null;\n        var fixMax = model.getMax() != null;\n        var splitNumber = model.get('splitNumber');\n\n        if (scale.type === 'log') {\n            scale.base = model.get('logBase');\n        }\n\n        scale.setExtent(extent[0], extent[1]);\n        scale.niceExtent(splitNumber, fixMin, fixMax);\n\n        // Use minInterval to constraint the calculated interval.\n        // If calculated interval is less than minInterval. increase the interval quantity until\n        // it is larger than minInterval.\n        // For example:\n        //  minInterval is 1, calculated interval is 0.2, so increase it to be 1. In this way we can get\n        //  an integer axis.\n        var minInterval = model.get('minInterval');\n        if (isFinite(minInterval) && !fixMin && !fixMax && scale.type === 'interval') {\n            var interval = scale.getInterval();\n            var intervalScale = Math.max(Math.abs(interval), minInterval) / interval;\n            // while (interval < minInterval) {\n            //     var quantity = numberUtil.quantity(interval);\n            //     interval = quantity * 10;\n            //     scaleQuantity *= 10;\n            // }\n            extent = scale.getExtent();\n            var origin = (extent[1] + extent[0]) / 2;\n            scale.setExtent(\n                intervalScale * (extent[0] - origin) + origin,\n                intervalScale * (extent[1] - origin) + origin\n            );\n            scale.niceExtent(splitNumber);\n        }\n\n        // If some one specified the min, max. And the default calculated interval\n        // is not good enough. He can specify the interval. It is often appeared\n        // in angle axis with angle 0 - 360. Interval calculated in interval scale is hard\n        // to be 60.\n        // FIXME\n        var interval = model.get('interval');\n        if (interval != null) {\n            scale.setInterval && scale.setInterval(interval);\n        }\n    };\n\n    /**\n     * @param {module:echarts/model/Model} model\n     * @param {string} [axisType] Default retrieve from model.type\n     * @return {module:echarts/scale/*}\n     */\n    axisHelper.createScaleByModel = function(model, axisType) {\n        axisType = axisType || model.get('type');\n        if (axisType) {\n            switch (axisType) {\n                // Buildin scale\n                case 'category':\n                    return new OrdinalScale(\n                        model.getCategories(), [Infinity, -Infinity]\n                    );\n                case 'value':\n                    return new IntervalScale();\n                // Extended scale, like time and log\n                default:\n                    return (Scale.getClass(axisType) || IntervalScale).create(model);\n            }\n        }\n    };\n\n    /**\n     * Check if the axis corss 0\n     */\n    axisHelper.ifAxisCrossZero = function (axis) {\n        var dataExtent = axis.scale.getExtent();\n        var min = dataExtent[0];\n        var max = dataExtent[1];\n        return !((min > 0 && max > 0) || (min < 0 && max < 0));\n    };\n\n    /**\n     * @param {Array.<number>} tickCoords In axis self coordinate.\n     * @param {Array.<string>} labels\n     * @param {string} font\n     * @param {boolean} isAxisHorizontal\n     * @return {number}\n     */\n    axisHelper.getAxisLabelInterval = function (tickCoords, labels, font, isAxisHorizontal) {\n        // FIXME\n        // 不同角的axis和label，不只是horizontal和vertical.\n\n        var textSpaceTakenRect;\n        var autoLabelInterval = 0;\n        var accumulatedLabelInterval = 0;\n\n        var step = 1;\n        if (labels.length > 40) {\n            // Simple optimization for large amount of labels\n            step = Math.floor(labels.length / 40);\n        }\n\n        for (var i = 0; i < tickCoords.length; i += step) {\n            var tickCoord = tickCoords[i];\n            var rect = textContain.getBoundingRect(\n                labels[i], font, 'center', 'top'\n            );\n            rect[isAxisHorizontal ? 'x' : 'y'] += tickCoord;\n            // FIXME Magic number 1.5\n            rect[isAxisHorizontal ? 'width' : 'height'] *= 1.3;\n            if (!textSpaceTakenRect) {\n                textSpaceTakenRect = rect.clone();\n            }\n            // There is no space for current label;\n            else if (textSpaceTakenRect.intersect(rect)) {\n                accumulatedLabelInterval++;\n                autoLabelInterval = Math.max(autoLabelInterval, accumulatedLabelInterval);\n            }\n            else {\n                textSpaceTakenRect.union(rect);\n                // Reset\n                accumulatedLabelInterval = 0;\n            }\n        }\n        if (autoLabelInterval === 0 && step > 1) {\n            return step;\n        }\n        return (autoLabelInterval + 1) * step - 1;\n    };\n\n    /**\n     * @param {Object} axis\n     * @param {Function} labelFormatter\n     * @return {Array.<string>}\n     */\n    axisHelper.getFormattedLabels = function (axis, labelFormatter) {\n        var scale = axis.scale;\n        var labels = scale.getTicksLabels();\n        var ticks = scale.getTicks();\n        if (typeof labelFormatter === 'string') {\n            labelFormatter = (function (tpl) {\n                return function (val) {\n                    return tpl.replace('{value}', val != null ? val : '');\n                };\n            })(labelFormatter);\n            // Consider empty array\n            return zrUtil.map(labels, labelFormatter);\n        }\n        else if (typeof labelFormatter === 'function') {\n            return zrUtil.map(ticks, function (tick, idx) {\n                return labelFormatter(\n                    axis.type === 'category' ? scale.getLabel(tick) : tick,\n                    idx\n                );\n            }, this);\n        }\n        else {\n            return labels;\n        }\n    };\n\n    module.exports = axisHelper;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/coord/axisHelper.js\n// module id = 341\n// module chunks = 0 1 2 3 4","/**\n * Interval scale\n * @module echarts/scale/Interval\n */\n\n\n\n    var numberUtil = require('../util/number');\n    var formatUtil = require('../util/format');\n    var Scale = require('./Scale');\n\n    var mathFloor = Math.floor;\n    var mathCeil = Math.ceil;\n\n    var getPrecisionSafe = numberUtil.getPrecisionSafe;\n    var roundingErrorFix = numberUtil.round;\n    /**\n     * @alias module:echarts/coord/scale/Interval\n     * @constructor\n     */\n    var IntervalScale = Scale.extend({\n\n        type: 'interval',\n\n        _interval: 0,\n\n        setExtent: function (start, end) {\n            var thisExtent = this._extent;\n            //start,end may be a Number like '25',so...\n            if (!isNaN(start)) {\n                thisExtent[0] = parseFloat(start);\n            }\n            if (!isNaN(end)) {\n                thisExtent[1] = parseFloat(end);\n            }\n        },\n\n        unionExtent: function (other) {\n            var extent = this._extent;\n            other[0] < extent[0] && (extent[0] = other[0]);\n            other[1] > extent[1] && (extent[1] = other[1]);\n\n            // unionExtent may called by it's sub classes\n            IntervalScale.prototype.setExtent.call(this, extent[0], extent[1]);\n        },\n        /**\n         * Get interval\n         */\n        getInterval: function () {\n            if (!this._interval) {\n                this.niceTicks();\n            }\n            return this._interval;\n        },\n\n        /**\n         * Set interval\n         */\n        setInterval: function (interval) {\n            this._interval = interval;\n            // Dropped auto calculated niceExtent and use user setted extent\n            // We assume user wan't to set both interval, min, max to get a better result\n            this._niceExtent = this._extent.slice();\n        },\n\n        /**\n         * @return {Array.<number>}\n         */\n        getTicks: function () {\n            if (!this._interval) {\n                this.niceTicks();\n            }\n            var interval = this._interval;\n            var extent = this._extent;\n            var ticks = [];\n\n            // Consider this case: using dataZoom toolbox, zoom and zoom.\n            var safeLimit = 10000;\n\n            if (interval) {\n                var niceExtent = this._niceExtent;\n                var precision = getPrecisionSafe(interval) + 2;\n\n                if (extent[0] < niceExtent[0]) {\n                    ticks.push(extent[0]);\n                }\n                var tick = niceExtent[0];\n\n                while (tick <= niceExtent[1]) {\n                    ticks.push(tick);\n                    // Avoid rounding error\n                    tick = roundingErrorFix(tick + interval, precision);\n                    if (ticks.length > safeLimit) {\n                        return [];\n                    }\n                }\n                // Consider this case: the last item of ticks is smaller\n                // than niceExtent[1] and niceExtent[1] === extent[1].\n                if (extent[1] > (ticks.length ? ticks[ticks.length - 1] : niceExtent[1])) {\n                    ticks.push(extent[1]);\n                }\n            }\n\n            return ticks;\n        },\n\n        /**\n         * @return {Array.<string>}\n         */\n        getTicksLabels: function () {\n            var labels = [];\n            var ticks = this.getTicks();\n            for (var i = 0; i < ticks.length; i++) {\n                labels.push(this.getLabel(ticks[i]));\n            }\n            return labels;\n        },\n\n        /**\n         * @param {number} n\n         * @return {number}\n         */\n        getLabel: function (data) {\n            return formatUtil.addCommas(data);\n        },\n\n        /**\n         * Update interval and extent of intervals for nice ticks\n         *\n         * @param {number} [splitNumber = 5] Desired number of ticks\n         */\n        niceTicks: function (splitNumber) {\n            splitNumber = splitNumber || 5;\n            var extent = this._extent;\n            var span = extent[1] - extent[0];\n            if (!isFinite(span)) {\n                return;\n            }\n            // User may set axis min 0 and data are all negative\n            // FIXME If it needs to reverse ?\n            if (span < 0) {\n                span = -span;\n                extent.reverse();\n            }\n\n            // From \"Nice Numbers for Graph Labels\" of Graphic Gems\n            // var niceSpan = numberUtil.nice(span, false);\n            var step = roundingErrorFix(\n                numberUtil.nice(span / splitNumber, true),\n                Math.max(\n                    getPrecisionSafe(extent[0]),\n                    getPrecisionSafe(extent[1])\n                // extent may be [0, 1], and step should have 1 more digits.\n                // To make it safe we add 2 more digits\n                ) + 2\n            );\n\n            var precision = getPrecisionSafe(step) + 2;\n            // Niced extent inside original extent\n            var niceExtent = [\n                roundingErrorFix(mathCeil(extent[0] / step) * step, precision),\n                roundingErrorFix(mathFloor(extent[1] / step) * step, precision)\n            ];\n\n            this._interval = step;\n            this._niceExtent = niceExtent;\n        },\n\n        /**\n         * Nice extent.\n         * @param {number} [splitNumber = 5] Given approx tick number\n         * @param {boolean} [fixMin=false]\n         * @param {boolean} [fixMax=false]\n         */\n        niceExtent: function (splitNumber, fixMin, fixMax) {\n            var extent = this._extent;\n            // If extent start and end are same, expand them\n            if (extent[0] === extent[1]) {\n                if (extent[0] !== 0) {\n                    // Expand extent\n                    var expandSize = extent[0];\n                    // In the fowllowing case\n                    //      Axis has been fixed max 100\n                    //      Plus data are all 100 and axis extent are [100, 100].\n                    // Extend to the both side will cause expanded max is larger than fixed max.\n                    // So only expand to the smaller side.\n                    if (!fixMax) {\n                        extent[1] += expandSize / 2;\n                        extent[0] -= expandSize / 2;\n                    }\n                    else {\n                        extent[0] -= expandSize / 2;\n                    }\n                }\n                else {\n                    extent[1] = 1;\n                }\n            }\n            var span = extent[1] - extent[0];\n            // If there are no data and extent are [Infinity, -Infinity]\n            if (!isFinite(span)) {\n                extent[0] = 0;\n                extent[1] = 1;\n            }\n\n            this.niceTicks(splitNumber);\n\n            // var extent = this._extent;\n            var interval = this._interval;\n\n            if (!fixMin) {\n                extent[0] = roundingErrorFix(mathFloor(extent[0] / interval) * interval);\n            }\n            if (!fixMax) {\n                extent[1] = roundingErrorFix(mathCeil(extent[1] / interval) * interval);\n            }\n        }\n    });\n\n    /**\n     * @return {module:echarts/scale/Time}\n     */\n    IntervalScale.create = function () {\n        return new IntervalScale();\n    };\n\n    module.exports = IntervalScale;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/scale/Interval.js\n// module id = 342\n// module chunks = 0 1 2 3 4","\n\n    var zrUtil = require('zrender/lib/core/util');\n    var clazz = require('./clazz');\n\n    var parseClassType = clazz.parseClassType;\n\n    var base = 0;\n\n    var componentUtil = {};\n\n    var DELIMITER = '_';\n\n    /**\n     * @public\n     * @param {string} type\n     * @return {string}\n     */\n    componentUtil.getUID = function (type) {\n        // Considering the case of crossing js context,\n        // use Math.random to make id as unique as possible.\n        return [(type || ''), base++, Math.random()].join(DELIMITER);\n    };\n\n    /**\n     * @inner\n     */\n    componentUtil.enableSubTypeDefaulter = function (entity) {\n\n        var subTypeDefaulters = {};\n\n        entity.registerSubTypeDefaulter = function (componentType, defaulter) {\n            componentType = parseClassType(componentType);\n            subTypeDefaulters[componentType.main] = defaulter;\n        };\n\n        entity.determineSubType = function (componentType, option) {\n            var type = option.type;\n            if (!type) {\n                var componentTypeMain = parseClassType(componentType).main;\n                if (entity.hasSubTypes(componentType) && subTypeDefaulters[componentTypeMain]) {\n                    type = subTypeDefaulters[componentTypeMain](option);\n                }\n            }\n            return type;\n        };\n\n        return entity;\n    };\n\n    /**\n     * Topological travel on Activity Network (Activity On Vertices).\n     * Dependencies is defined in Model.prototype.dependencies, like ['xAxis', 'yAxis'].\n     *\n     * If 'xAxis' or 'yAxis' is absent in componentTypeList, just ignore it in topology.\n     *\n     * If there is circle dependencey, Error will be thrown.\n     *\n     */\n    componentUtil.enableTopologicalTravel = function (entity, dependencyGetter) {\n\n        /**\n         * @public\n         * @param {Array.<string>} targetNameList Target Component type list.\n         *                                           Can be ['aa', 'bb', 'aa.xx']\n         * @param {Array.<string>} fullNameList By which we can build dependency graph.\n         * @param {Function} callback Params: componentType, dependencies.\n         * @param {Object} context Scope of callback.\n         */\n        entity.topologicalTravel = function (targetNameList, fullNameList, callback, context) {\n            if (!targetNameList.length) {\n                return;\n            }\n\n            var result = makeDepndencyGraph(fullNameList);\n            var graph = result.graph;\n            var stack = result.noEntryList;\n\n            var targetNameSet = {};\n            zrUtil.each(targetNameList, function (name) {\n                targetNameSet[name] = true;\n            });\n\n            while (stack.length) {\n                var currComponentType = stack.pop();\n                var currVertex = graph[currComponentType];\n                var isInTargetNameSet = !!targetNameSet[currComponentType];\n                if (isInTargetNameSet) {\n                    callback.call(context, currComponentType, currVertex.originalDeps.slice());\n                    delete targetNameSet[currComponentType];\n                }\n                zrUtil.each(\n                    currVertex.successor,\n                    isInTargetNameSet ? removeEdgeAndAdd : removeEdge\n                );\n            }\n\n            zrUtil.each(targetNameSet, function () {\n                throw new Error('Circle dependency may exists');\n            });\n\n            function removeEdge(succComponentType) {\n                graph[succComponentType].entryCount--;\n                if (graph[succComponentType].entryCount === 0) {\n                    stack.push(succComponentType);\n                }\n            }\n\n            // Consider this case: legend depends on series, and we call\n            // chart.setOption({series: [...]}), where only series is in option.\n            // If we do not have 'removeEdgeAndAdd', legendModel.mergeOption will\n            // not be called, but only sereis.mergeOption is called. Thus legend\n            // have no chance to update its local record about series (like which\n            // name of series is available in legend).\n            function removeEdgeAndAdd(succComponentType) {\n                targetNameSet[succComponentType] = true;\n                removeEdge(succComponentType);\n            }\n        };\n\n        /**\n         * DepndencyGraph: {Object}\n         * key: conponentType,\n         * value: {\n         *     successor: [conponentTypes...],\n         *     originalDeps: [conponentTypes...],\n         *     entryCount: {number}\n         * }\n         */\n        function makeDepndencyGraph(fullNameList) {\n            var graph = {};\n            var noEntryList = [];\n\n            zrUtil.each(fullNameList, function (name) {\n\n                var thisItem = createDependencyGraphItem(graph, name);\n                var originalDeps = thisItem.originalDeps = dependencyGetter(name);\n\n                var availableDeps = getAvailableDependencies(originalDeps, fullNameList);\n                thisItem.entryCount = availableDeps.length;\n                if (thisItem.entryCount === 0) {\n                    noEntryList.push(name);\n                }\n\n                zrUtil.each(availableDeps, function (dependentName) {\n                    if (zrUtil.indexOf(thisItem.predecessor, dependentName) < 0) {\n                        thisItem.predecessor.push(dependentName);\n                    }\n                    var thatItem = createDependencyGraphItem(graph, dependentName);\n                    if (zrUtil.indexOf(thatItem.successor, dependentName) < 0) {\n                        thatItem.successor.push(name);\n                    }\n                });\n            });\n\n            return {graph: graph, noEntryList: noEntryList};\n        }\n\n        function createDependencyGraphItem(graph, name) {\n            if (!graph[name]) {\n                graph[name] = {predecessor: [], successor: []};\n            }\n            return graph[name];\n        }\n\n        function getAvailableDependencies(originalDeps, fullNameList) {\n            var availableDeps = [];\n            zrUtil.each(originalDeps, function (dep) {\n                zrUtil.indexOf(fullNameList, dep) >= 0 && availableDeps.push(dep);\n            });\n            return availableDeps;\n        }\n    };\n\n    module.exports = componentUtil;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/util/component.js\n// module id = 343\n// module chunks = 0 1 2 3 4","// https://github.com/mziccard/node-timsort\n\n    var DEFAULT_MIN_MERGE = 32;\n\n    var DEFAULT_MIN_GALLOPING = 7;\n\n    var DEFAULT_TMP_STORAGE_LENGTH = 256;\n\n    function minRunLength(n) {\n        var r = 0;\n\n        while (n >= DEFAULT_MIN_MERGE) {\n            r |= n & 1;\n            n >>= 1;\n        }\n\n        return n + r;\n    }\n\n    function makeAscendingRun(array, lo, hi, compare) {\n        var runHi = lo + 1;\n\n        if (runHi === hi) {\n            return 1;\n        }\n\n        if (compare(array[runHi++], array[lo]) < 0) {\n            while (runHi < hi && compare(array[runHi], array[runHi - 1]) < 0) {\n                runHi++;\n            }\n\n            reverseRun(array, lo, runHi);\n        }\n        else {\n            while (runHi < hi && compare(array[runHi], array[runHi - 1]) >= 0) {\n                runHi++;\n            }\n        }\n\n        return runHi - lo;\n    }\n\n    function reverseRun(array, lo, hi) {\n        hi--;\n\n        while (lo < hi) {\n            var t = array[lo];\n            array[lo++] = array[hi];\n            array[hi--] = t;\n        }\n    }\n\n    function binaryInsertionSort(array, lo, hi, start, compare) {\n        if (start === lo) {\n            start++;\n        }\n\n        for (; start < hi; start++) {\n            var pivot = array[start];\n\n            var left = lo;\n            var right = start;\n            var mid;\n\n            while (left < right) {\n                mid = left + right >>> 1;\n\n                if (compare(pivot, array[mid]) < 0) {\n                    right = mid;\n                }\n                else {\n                    left = mid + 1;\n                }\n            }\n\n            var n = start - left;\n\n            switch (n) {\n                case 3:\n                    array[left + 3] = array[left + 2];\n\n                case 2:\n                    array[left + 2] = array[left + 1];\n\n                case 1:\n                    array[left + 1] = array[left];\n                    break;\n                default:\n                    while (n > 0) {\n                        array[left + n] = array[left + n - 1];\n                        n--;\n                    }\n            }\n\n            array[left] = pivot;\n        }\n    }\n\n    function gallopLeft(value, array, start, length, hint, compare) {\n        var lastOffset = 0;\n        var maxOffset = 0;\n        var offset = 1;\n\n        if (compare(value, array[start + hint]) > 0) {\n            maxOffset = length - hint;\n\n            while (offset < maxOffset && compare(value, array[start + hint + offset]) > 0) {\n                lastOffset = offset;\n                offset = (offset << 1) + 1;\n\n                if (offset <= 0) {\n                    offset = maxOffset;\n                }\n            }\n\n            if (offset > maxOffset) {\n                offset = maxOffset;\n            }\n\n            lastOffset += hint;\n            offset += hint;\n        }\n        else {\n            maxOffset = hint + 1;\n            while (offset < maxOffset && compare(value, array[start + hint - offset]) <= 0) {\n                lastOffset = offset;\n                offset = (offset << 1) + 1;\n\n                if (offset <= 0) {\n                    offset = maxOffset;\n                }\n            }\n            if (offset > maxOffset) {\n                offset = maxOffset;\n            }\n\n            var tmp = lastOffset;\n            lastOffset = hint - offset;\n            offset = hint - tmp;\n        }\n\n        lastOffset++;\n        while (lastOffset < offset) {\n            var m = lastOffset + (offset - lastOffset >>> 1);\n\n            if (compare(value, array[start + m]) > 0) {\n                lastOffset = m + 1;\n            }\n            else {\n                offset = m;\n            }\n        }\n        return offset;\n    }\n\n    function gallopRight(value, array, start, length, hint, compare) {\n        var lastOffset = 0;\n        var maxOffset = 0;\n        var offset = 1;\n\n        if (compare(value, array[start + hint]) < 0) {\n            maxOffset = hint + 1;\n\n            while (offset < maxOffset && compare(value, array[start + hint - offset]) < 0) {\n                lastOffset = offset;\n                offset = (offset << 1) + 1;\n\n                if (offset <= 0) {\n                    offset = maxOffset;\n                }\n            }\n\n            if (offset > maxOffset) {\n                offset = maxOffset;\n            }\n\n            var tmp = lastOffset;\n            lastOffset = hint - offset;\n            offset = hint - tmp;\n        }\n        else {\n            maxOffset = length - hint;\n\n            while (offset < maxOffset && compare(value, array[start + hint + offset]) >= 0) {\n                lastOffset = offset;\n                offset = (offset << 1) + 1;\n\n                if (offset <= 0) {\n                    offset = maxOffset;\n                }\n            }\n\n            if (offset > maxOffset) {\n                offset = maxOffset;\n            }\n\n            lastOffset += hint;\n            offset += hint;\n        }\n\n        lastOffset++;\n\n        while (lastOffset < offset) {\n            var m = lastOffset + (offset - lastOffset >>> 1);\n\n            if (compare(value, array[start + m]) < 0) {\n                offset = m;\n            }\n            else {\n                lastOffset = m + 1;\n            }\n        }\n\n        return offset;\n    }\n\n    function TimSort(array, compare) {\n        var minGallop = DEFAULT_MIN_GALLOPING;\n        var length = 0;\n        var tmpStorageLength = DEFAULT_TMP_STORAGE_LENGTH;\n        var stackLength = 0;\n        var runStart;\n        var runLength;\n        var stackSize = 0;\n\n        length = array.length;\n\n        if (length < 2 * DEFAULT_TMP_STORAGE_LENGTH) {\n            tmpStorageLength = length >>> 1;\n        }\n\n        var tmp = [];\n\n        stackLength = length < 120 ? 5 : length < 1542 ? 10 : length < 119151 ? 19 : 40;\n\n        runStart = [];\n        runLength = [];\n\n        function pushRun(_runStart, _runLength) {\n            runStart[stackSize] = _runStart;\n            runLength[stackSize] = _runLength;\n            stackSize += 1;\n        }\n\n        function mergeRuns() {\n            while (stackSize > 1) {\n                var n = stackSize - 2;\n\n                if (n >= 1 && runLength[n - 1] <= runLength[n] + runLength[n + 1] || n >= 2 && runLength[n - 2] <= runLength[n] + runLength[n - 1]) {\n                    if (runLength[n - 1] < runLength[n + 1]) {\n                        n--;\n                    }\n                }\n                else if (runLength[n] > runLength[n + 1]) {\n                    break;\n                }\n                mergeAt(n);\n            }\n        }\n\n        function forceMergeRuns() {\n            while (stackSize > 1) {\n                var n = stackSize - 2;\n\n                if (n > 0 && runLength[n - 1] < runLength[n + 1]) {\n                    n--;\n                }\n\n                mergeAt(n);\n            }\n        }\n\n        function mergeAt(i) {\n            var start1 = runStart[i];\n            var length1 = runLength[i];\n            var start2 = runStart[i + 1];\n            var length2 = runLength[i + 1];\n\n            runLength[i] = length1 + length2;\n\n            if (i === stackSize - 3) {\n                runStart[i + 1] = runStart[i + 2];\n                runLength[i + 1] = runLength[i + 2];\n            }\n\n            stackSize--;\n\n            var k = gallopRight(array[start2], array, start1, length1, 0, compare);\n            start1 += k;\n            length1 -= k;\n\n            if (length1 === 0) {\n                return;\n            }\n\n            length2 = gallopLeft(array[start1 + length1 - 1], array, start2, length2, length2 - 1, compare);\n\n            if (length2 === 0) {\n                return;\n            }\n\n            if (length1 <= length2) {\n                mergeLow(start1, length1, start2, length2);\n            }\n            else {\n                mergeHigh(start1, length1, start2, length2);\n            }\n        }\n\n        function mergeLow(start1, length1, start2, length2) {\n            var i = 0;\n\n            for (i = 0; i < length1; i++) {\n                tmp[i] = array[start1 + i];\n            }\n\n            var cursor1 = 0;\n            var cursor2 = start2;\n            var dest = start1;\n\n            array[dest++] = array[cursor2++];\n\n            if (--length2 === 0) {\n                for (i = 0; i < length1; i++) {\n                    array[dest + i] = tmp[cursor1 + i];\n                }\n                return;\n            }\n\n            if (length1 === 1) {\n                for (i = 0; i < length2; i++) {\n                    array[dest + i] = array[cursor2 + i];\n                }\n                array[dest + length2] = tmp[cursor1];\n                return;\n            }\n\n            var _minGallop = minGallop;\n            var count1, count2, exit;\n\n            while (1) {\n                count1 = 0;\n                count2 = 0;\n                exit = false;\n\n                do {\n                    if (compare(array[cursor2], tmp[cursor1]) < 0) {\n                        array[dest++] = array[cursor2++];\n                        count2++;\n                        count1 = 0;\n\n                        if (--length2 === 0) {\n                            exit = true;\n                            break;\n                        }\n                    }\n                    else {\n                        array[dest++] = tmp[cursor1++];\n                        count1++;\n                        count2 = 0;\n                        if (--length1 === 1) {\n                            exit = true;\n                            break;\n                        }\n                    }\n                } while ((count1 | count2) < _minGallop);\n\n                if (exit) {\n                    break;\n                }\n\n                do {\n                    count1 = gallopRight(array[cursor2], tmp, cursor1, length1, 0, compare);\n\n                    if (count1 !== 0) {\n                        for (i = 0; i < count1; i++) {\n                            array[dest + i] = tmp[cursor1 + i];\n                        }\n\n                        dest += count1;\n                        cursor1 += count1;\n                        length1 -= count1;\n                        if (length1 <= 1) {\n                            exit = true;\n                            break;\n                        }\n                    }\n\n                    array[dest++] = array[cursor2++];\n\n                    if (--length2 === 0) {\n                        exit = true;\n                        break;\n                    }\n\n                    count2 = gallopLeft(tmp[cursor1], array, cursor2, length2, 0, compare);\n\n                    if (count2 !== 0) {\n                        for (i = 0; i < count2; i++) {\n                            array[dest + i] = array[cursor2 + i];\n                        }\n\n                        dest += count2;\n                        cursor2 += count2;\n                        length2 -= count2;\n\n                        if (length2 === 0) {\n                            exit = true;\n                            break;\n                        }\n                    }\n                    array[dest++] = tmp[cursor1++];\n\n                    if (--length1 === 1) {\n                        exit = true;\n                        break;\n                    }\n\n                    _minGallop--;\n                } while (count1 >= DEFAULT_MIN_GALLOPING || count2 >= DEFAULT_MIN_GALLOPING);\n\n                if (exit) {\n                    break;\n                }\n\n                if (_minGallop < 0) {\n                    _minGallop = 0;\n                }\n\n                _minGallop += 2;\n            }\n\n            minGallop = _minGallop;\n\n            minGallop < 1 && (minGallop = 1);\n\n            if (length1 === 1) {\n                for (i = 0; i < length2; i++) {\n                    array[dest + i] = array[cursor2 + i];\n                }\n                array[dest + length2] = tmp[cursor1];\n            }\n            else if (length1 === 0) {\n                throw new Error();\n                // throw new Error('mergeLow preconditions were not respected');\n            }\n            else {\n                for (i = 0; i < length1; i++) {\n                    array[dest + i] = tmp[cursor1 + i];\n                }\n            }\n        }\n\n        function mergeHigh (start1, length1, start2, length2) {\n            var i = 0;\n\n            for (i = 0; i < length2; i++) {\n                tmp[i] = array[start2 + i];\n            }\n\n            var cursor1 = start1 + length1 - 1;\n            var cursor2 = length2 - 1;\n            var dest = start2 + length2 - 1;\n            var customCursor = 0;\n            var customDest = 0;\n\n            array[dest--] = array[cursor1--];\n\n            if (--length1 === 0) {\n                customCursor = dest - (length2 - 1);\n\n                for (i = 0; i < length2; i++) {\n                    array[customCursor + i] = tmp[i];\n                }\n\n                return;\n            }\n\n            if (length2 === 1) {\n                dest -= length1;\n                cursor1 -= length1;\n                customDest = dest + 1;\n                customCursor = cursor1 + 1;\n\n                for (i = length1 - 1; i >= 0; i--) {\n                    array[customDest + i] = array[customCursor + i];\n                }\n\n                array[dest] = tmp[cursor2];\n                return;\n            }\n\n            var _minGallop = minGallop;\n\n            while (true) {\n                var count1 = 0;\n                var count2 = 0;\n                var exit = false;\n\n                do {\n                    if (compare(tmp[cursor2], array[cursor1]) < 0) {\n                        array[dest--] = array[cursor1--];\n                        count1++;\n                        count2 = 0;\n                        if (--length1 === 0) {\n                            exit = true;\n                            break;\n                        }\n                    }\n                    else {\n                        array[dest--] = tmp[cursor2--];\n                        count2++;\n                        count1 = 0;\n                        if (--length2 === 1) {\n                            exit = true;\n                            break;\n                        }\n                    }\n                } while ((count1 | count2) < _minGallop);\n\n                if (exit) {\n                    break;\n                }\n\n                do {\n                    count1 = length1 - gallopRight(tmp[cursor2], array, start1, length1, length1 - 1, compare);\n\n                    if (count1 !== 0) {\n                        dest -= count1;\n                        cursor1 -= count1;\n                        length1 -= count1;\n                        customDest = dest + 1;\n                        customCursor = cursor1 + 1;\n\n                        for (i = count1 - 1; i >= 0; i--) {\n                            array[customDest + i] = array[customCursor + i];\n                        }\n\n                        if (length1 === 0) {\n                            exit = true;\n                            break;\n                        }\n                    }\n\n                    array[dest--] = tmp[cursor2--];\n\n                    if (--length2 === 1) {\n                        exit = true;\n                        break;\n                    }\n\n                    count2 = length2 - gallopLeft(array[cursor1], tmp, 0, length2, length2 - 1, compare);\n\n                    if (count2 !== 0) {\n                        dest -= count2;\n                        cursor2 -= count2;\n                        length2 -= count2;\n                        customDest = dest + 1;\n                        customCursor = cursor2 + 1;\n\n                        for (i = 0; i < count2; i++) {\n                            array[customDest + i] = tmp[customCursor + i];\n                        }\n\n                        if (length2 <= 1) {\n                            exit = true;\n                            break;\n                        }\n                    }\n\n                    array[dest--] = array[cursor1--];\n\n                    if (--length1 === 0) {\n                        exit = true;\n                        break;\n                    }\n\n                    _minGallop--;\n                } while (count1 >= DEFAULT_MIN_GALLOPING || count2 >= DEFAULT_MIN_GALLOPING);\n\n                if (exit) {\n                    break;\n                }\n\n                if (_minGallop < 0) {\n                    _minGallop = 0;\n                }\n\n                _minGallop += 2;\n            }\n\n            minGallop = _minGallop;\n\n            if (minGallop < 1) {\n                minGallop = 1;\n            }\n\n            if (length2 === 1) {\n                dest -= length1;\n                cursor1 -= length1;\n                customDest = dest + 1;\n                customCursor = cursor1 + 1;\n\n                for (i = length1 - 1; i >= 0; i--) {\n                    array[customDest + i] = array[customCursor + i];\n                }\n\n                array[dest] = tmp[cursor2];\n            }\n            else if (length2 === 0) {\n                throw new Error();\n                // throw new Error('mergeHigh preconditions were not respected');\n            }\n            else {\n                customCursor = dest - (length2 - 1);\n                for (i = 0; i < length2; i++) {\n                    array[customCursor + i] = tmp[i];\n                }\n            }\n        }\n\n        this.mergeRuns = mergeRuns;\n        this.forceMergeRuns = forceMergeRuns;\n        this.pushRun = pushRun;\n    }\n\n    function sort(array, compare, lo, hi) {\n        if (!lo) {\n            lo = 0;\n        }\n        if (!hi) {\n            hi = array.length;\n        }\n\n        var remaining = hi - lo;\n\n        if (remaining < 2) {\n            return;\n        }\n\n        var runLength = 0;\n\n        if (remaining < DEFAULT_MIN_MERGE) {\n            runLength = makeAscendingRun(array, lo, hi, compare);\n            binaryInsertionSort(array, lo, hi, lo + runLength, compare);\n            return;\n        }\n\n        var ts = new TimSort(array, compare);\n\n        var minRun = minRunLength(remaining);\n\n        do {\n            runLength = makeAscendingRun(array, lo, hi, compare);\n            if (runLength < minRun) {\n                var force = remaining;\n                if (force > minRun) {\n                    force = minRun;\n                }\n\n                binaryInsertionSort(array, lo, lo + force, lo + runLength, compare);\n                runLength = force;\n            }\n\n            ts.pushRun(lo, runLength);\n            ts.mergeRuns();\n\n            remaining -= runLength;\n            lo += runLength;\n        } while (remaining !== 0);\n\n        ts.forceMergeRuns();\n    }\n\n    module.exports = sort;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/zrender/lib/core/timsort.js\n// module id = 344\n// module chunks = 0 1 2 3 4","/**\n * 可绘制的图形基类\n * Base class of all displayable graphic objects\n * @module zrender/graphic/Displayable\n */\n\n\n\n    var zrUtil = require('../core/util');\n\n    var Style = require('./Style');\n\n    var Element = require('../Element');\n    var RectText = require('./mixin/RectText');\n    // var Stateful = require('./mixin/Stateful');\n\n    /**\n     * @alias module:zrender/graphic/Displayable\n     * @extends module:zrender/Element\n     * @extends module:zrender/graphic/mixin/RectText\n     */\n    function Displayable(opts) {\n\n        opts = opts || {};\n\n        Element.call(this, opts);\n\n        // Extend properties\n        for (var name in opts) {\n            if (\n                opts.hasOwnProperty(name) &&\n                name !== 'style'\n            ) {\n                this[name] = opts[name];\n            }\n        }\n\n        /**\n         * @type {module:zrender/graphic/Style}\n         */\n        this.style = new Style(opts.style);\n\n        this._rect = null;\n        // Shapes for cascade clipping.\n        this.__clipPaths = [];\n\n        // FIXME Stateful must be mixined after style is setted\n        // Stateful.call(this, opts);\n    }\n\n    Displayable.prototype = {\n\n        constructor: Displayable,\n\n        type: 'displayable',\n\n        /**\n         * Displayable 是否为脏，Painter 中会根据该标记判断是否需要是否需要重新绘制\n         * Dirty flag. From which painter will determine if this displayable object needs brush\n         * @name module:zrender/graphic/Displayable#__dirty\n         * @type {boolean}\n         */\n        __dirty: true,\n\n        /**\n         * 图形是否可见，为true时不绘制图形，但是仍能触发鼠标事件\n         * If ignore drawing of the displayable object. Mouse event will still be triggered\n         * @name module:/zrender/graphic/Displayable#invisible\n         * @type {boolean}\n         * @default false\n         */\n        invisible: false,\n\n        /**\n         * @name module:/zrender/graphic/Displayable#z\n         * @type {number}\n         * @default 0\n         */\n        z: 0,\n\n        /**\n         * @name module:/zrender/graphic/Displayable#z\n         * @type {number}\n         * @default 0\n         */\n        z2: 0,\n\n        /**\n         * z层level，决定绘画在哪层canvas中\n         * @name module:/zrender/graphic/Displayable#zlevel\n         * @type {number}\n         * @default 0\n         */\n        zlevel: 0,\n\n        /**\n         * 是否可拖拽\n         * @name module:/zrender/graphic/Displayable#draggable\n         * @type {boolean}\n         * @default false\n         */\n        draggable: false,\n\n        /**\n         * 是否正在拖拽\n         * @name module:/zrender/graphic/Displayable#draggable\n         * @type {boolean}\n         * @default false\n         */\n        dragging: false,\n\n        /**\n         * 是否相应鼠标事件\n         * @name module:/zrender/graphic/Displayable#silent\n         * @type {boolean}\n         * @default false\n         */\n        silent: false,\n\n        /**\n         * If enable culling\n         * @type {boolean}\n         * @default false\n         */\n        culling: false,\n\n        /**\n         * Mouse cursor when hovered\n         * @name module:/zrender/graphic/Displayable#cursor\n         * @type {string}\n         */\n        cursor: 'pointer',\n\n        /**\n         * If hover area is bounding rect\n         * @name module:/zrender/graphic/Displayable#rectHover\n         * @type {string}\n         */\n        rectHover: false,\n\n        /**\n         * Render the element progressively when the value >= 0,\n         * usefull for large data.\n         * @type {number}\n         */\n        progressive: -1,\n\n        beforeBrush: function (ctx) {},\n\n        afterBrush: function (ctx) {},\n\n        /**\n         * 图形绘制方法\n         * @param {Canvas2DRenderingContext} ctx\n         */\n        // Interface\n        brush: function (ctx, prevEl) {},\n\n        /**\n         * 获取最小包围盒\n         * @return {module:zrender/core/BoundingRect}\n         */\n        // Interface\n        getBoundingRect: function () {},\n\n        /**\n         * 判断坐标 x, y 是否在图形上\n         * If displayable element contain coord x, y\n         * @param  {number} x\n         * @param  {number} y\n         * @return {boolean}\n         */\n        contain: function (x, y) {\n            return this.rectContain(x, y);\n        },\n\n        /**\n         * @param  {Function} cb\n         * @param  {}   context\n         */\n        traverse: function (cb, context) {\n            cb.call(context, this);\n        },\n\n        /**\n         * 判断坐标 x, y 是否在图形的包围盒上\n         * If bounding rect of element contain coord x, y\n         * @param  {number} x\n         * @param  {number} y\n         * @return {boolean}\n         */\n        rectContain: function (x, y) {\n            var coord = this.transformCoordToLocal(x, y);\n            var rect = this.getBoundingRect();\n            return rect.contain(coord[0], coord[1]);\n        },\n\n        /**\n         * 标记图形元素为脏，并且在下一帧重绘\n         * Mark displayable element dirty and refresh next frame\n         */\n        dirty: function () {\n            this.__dirty = true;\n\n            this._rect = null;\n\n            this.__zr && this.__zr.refresh();\n        },\n\n        /**\n         * 图形是否会触发事件\n         * If displayable object binded any event\n         * @return {boolean}\n         */\n        // TODO, 通过 bind 绑定的事件\n        // isSilent: function () {\n        //     return !(\n        //         this.hoverable || this.draggable\n        //         || this.onmousemove || this.onmouseover || this.onmouseout\n        //         || this.onmousedown || this.onmouseup || this.onclick\n        //         || this.ondragenter || this.ondragover || this.ondragleave\n        //         || this.ondrop\n        //     );\n        // },\n        /**\n         * Alias for animate('style')\n         * @param {boolean} loop\n         */\n        animateStyle: function (loop) {\n            return this.animate('style', loop);\n        },\n\n        attrKV: function (key, value) {\n            if (key !== 'style') {\n                Element.prototype.attrKV.call(this, key, value);\n            }\n            else {\n                this.style.set(value);\n            }\n        },\n\n        /**\n         * @param {Object|string} key\n         * @param {*} value\n         */\n        setStyle: function (key, value) {\n            this.style.set(key, value);\n            this.dirty(false);\n            return this;\n        },\n\n        /**\n         * Use given style object\n         * @param  {Object} obj\n         */\n        useStyle: function (obj) {\n            this.style = new Style(obj);\n            this.dirty(false);\n            return this;\n        }\n    };\n\n    zrUtil.inherits(Displayable, Element);\n\n    zrUtil.mixin(Displayable, RectText);\n    // zrUtil.mixin(Displayable, Stateful);\n\n    module.exports = Displayable;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/zrender/lib/graphic/Displayable.js\n// module id = 345\n// module chunks = 0 1 2 3 4","\n\n    /**\n     * @param {Array.<Object>} colorStops\n     */\n    var Gradient = function (colorStops) {\n\n        this.colorStops = colorStops || [];\n    };\n\n    Gradient.prototype = {\n\n        constructor: Gradient,\n\n        addColorStop: function (offset, color) {\n            this.colorStops.push({\n\n                offset: offset,\n\n                color: color\n            });\n        }\n    };\n\n    module.exports = Gradient;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/zrender/lib/graphic/Gradient.js\n// module id = 346\n// module chunks = 0 1 2 3 4","'use strict';\n\n\n    var zrUtil = require('zrender/lib/core/util');\n    var formatUtil = require('../util/format');\n    var classUtil = require('../util/clazz');\n    var modelUtil = require('../util/model');\n    var ComponentModel = require('./Component');\n    var colorPaletteMixin = require('./mixin/colorPalette');\n    var env = require('zrender/lib/core/env');\n    var layout = require('../util/layout');\n\n    var set = classUtil.set;\n    var get = classUtil.get;\n    var encodeHTML = formatUtil.encodeHTML;\n    var addCommas = formatUtil.addCommas;\n\n    var SeriesModel = ComponentModel.extend({\n\n        type: 'series.__base__',\n\n        /**\n         * @readOnly\n         */\n        seriesIndex: 0,\n\n        // coodinateSystem will be injected in the echarts/CoordinateSystem\n        coordinateSystem: null,\n\n        /**\n         * @type {Object}\n         * @protected\n         */\n        defaultOption: null,\n\n        /**\n         * Data provided for legend\n         * @type {Function}\n         */\n        // PENDING\n        legendDataProvider: null,\n\n        /**\n         * Access path of color for visual\n         */\n        visualColorAccessPath: 'itemStyle.normal.color',\n\n        /**\n         * Support merge layout params.\n         * Only support 'box' now (left/right/top/bottom/width/height).\n         * @type {string|Object} Object can be {ignoreSize: true}\n         * @readOnly\n         */\n        layoutMode: null,\n\n        init: function (option, parentModel, ecModel, extraOpt) {\n\n            /**\n             * @type {number}\n             * @readOnly\n             */\n            this.seriesIndex = this.componentIndex;\n\n            this.mergeDefaultAndTheme(option, ecModel);\n\n            /**\n             * @type {module:echarts/data/List|module:echarts/data/Tree|module:echarts/data/Graph}\n             * @private\n             */\n            set(this, 'dataBeforeProcessed', this.getInitialData(option, ecModel));\n\n            // If we reverse the order (make data firstly, and then make\n            // dataBeforeProcessed by cloneShallow), cloneShallow will\n            // cause data.graph.data !== data when using\n            // module:echarts/data/Graph or module:echarts/data/Tree.\n            // See module:echarts/data/helper/linkList\n            this.restoreData();\n        },\n\n        /**\n         * Util for merge default and theme to option\n         * @param  {Object} option\n         * @param  {module:echarts/model/Global} ecModel\n         */\n        mergeDefaultAndTheme: function (option, ecModel) {\n            var layoutMode = this.layoutMode;\n            var inputPositionParams = layoutMode\n                ? layout.getLayoutParams(option) : {};\n\n            zrUtil.merge(\n                option,\n                ecModel.getTheme().get(this.subType)\n            );\n            zrUtil.merge(option, this.getDefaultOption());\n\n            // Default label emphasis `position` and `show`\n            // FIXME Set label in mergeOption\n            modelUtil.defaultEmphasis(option.label, modelUtil.LABEL_OPTIONS);\n\n            this.fillDataTextStyle(option.data);\n\n            if (layoutMode) {\n                layout.mergeLayoutParam(option, inputPositionParams, layoutMode);\n            }\n        },\n\n        mergeOption: function (newSeriesOption, ecModel) {\n            newSeriesOption = zrUtil.merge(this.option, newSeriesOption, true);\n            this.fillDataTextStyle(newSeriesOption.data);\n\n            var layoutMode = this.layoutMode;\n            if (layoutMode) {\n                layout.mergeLayoutParam(this.option, newSeriesOption, layoutMode);\n            }\n\n            var data = this.getInitialData(newSeriesOption, ecModel);\n            // TODO Merge data?\n            if (data) {\n                set(this, 'data', data);\n                set(this, 'dataBeforeProcessed', data.cloneShallow());\n            }\n        },\n\n        fillDataTextStyle: function (data) {\n            // Default data label emphasis `position` and `show`\n            // FIXME Tree structure data ?\n            // FIXME Performance ?\n            if (data) {\n                for (var i = 0; i < data.length; i++) {\n                    if (data[i] && data[i].label) {\n                        modelUtil.defaultEmphasis(data[i].label, modelUtil.LABEL_OPTIONS);\n                    }\n                }\n            }\n        },\n\n        /**\n         * Init a data structure from data related option in series\n         * Must be overwritten\n         */\n        getInitialData: function () {},\n\n        /**\n         * @param {string} [dataType]\n         * @return {module:echarts/data/List}\n         */\n        getData: function (dataType) {\n            var data = get(this, 'data');\n            return dataType == null ? data : data.getLinkedData(dataType);\n        },\n\n        /**\n         * @param {module:echarts/data/List} data\n         */\n        setData: function (data) {\n            set(this, 'data', data);\n        },\n\n        /**\n         * Get data before processed\n         * @return {module:echarts/data/List}\n         */\n        getRawData: function () {\n            return get(this, 'dataBeforeProcessed');\n        },\n\n        /**\n         * Coord dimension to data dimension.\n         *\n         * By default the result is the same as dimensions of series data.\n         * But in some series data dimensions are different from coord dimensions (i.e.\n         * candlestick and boxplot). Override this method to handle those cases.\n         *\n         * Coord dimension to data dimension can be one-to-many\n         *\n         * @param {string} coordDim\n         * @return {Array.<string>} dimensions on the axis.\n         */\n        coordDimToDataDim: function (coordDim) {\n            return [coordDim];\n        },\n\n        /**\n         * Convert data dimension to coord dimension.\n         *\n         * @param {string|number} dataDim\n         * @return {string}\n         */\n        dataDimToCoordDim: function (dataDim) {\n            return dataDim;\n        },\n\n        /**\n         * Get base axis if has coordinate system and has axis.\n         * By default use coordSys.getBaseAxis();\n         * Can be overrided for some chart.\n         * @return {type} description\n         */\n        getBaseAxis: function () {\n            var coordSys = this.coordinateSystem;\n            return coordSys && coordSys.getBaseAxis && coordSys.getBaseAxis();\n        },\n\n        // FIXME\n        /**\n         * Default tooltip formatter\n         *\n         * @param {number} dataIndex\n         * @param {boolean} [multipleSeries=false]\n         * @param {number} [dataType]\n         */\n        formatTooltip: function (dataIndex, multipleSeries, dataType) {\n            function formatArrayValue(value) {\n                var result = [];\n\n                zrUtil.each(value, function (val, idx) {\n                    var dimInfo = data.getDimensionInfo(idx);\n                    var dimType = dimInfo && dimInfo.type;\n                    var valStr;\n\n                    if (dimType === 'ordinal') {\n                        valStr = val + '';\n                    }\n                    else if (dimType === 'time') {\n                        valStr = multipleSeries ? '' : formatUtil.formatTime('yyyy/MM/dd hh:mm:ss', val);\n                    }\n                    else {\n                        valStr = addCommas(val);\n                    }\n\n                    valStr && result.push(valStr);\n                });\n\n                return result.join(', ');\n            }\n\n            var data = get(this, 'data');\n\n            var value = this.getRawValue(dataIndex);\n            var formattedValue = encodeHTML(\n                zrUtil.isArray(value) ? formatArrayValue(value) : addCommas(value)\n            );\n            var name = data.getName(dataIndex);\n\n            var color = data.getItemVisual(dataIndex, 'color');\n            if (zrUtil.isObject(color) && color.colorStops) {\n                color = (color.colorStops[0] || {}).color;\n            }\n            color = color || 'transparent';\n\n            var colorEl = '<span style=\"display:inline-block;margin-right:5px;'\n                + 'border-radius:10px;width:9px;height:9px;background-color:' + encodeHTML(color) + '\"></span>';\n\n            var seriesName = this.name;\n            // FIXME\n            if (seriesName === '\\0-') {\n                // Not show '-'\n                seriesName = '';\n            }\n            return !multipleSeries\n                ? ((seriesName && encodeHTML(seriesName) + '<br />') + colorEl\n                    + (name\n                        ? encodeHTML(name) + ' : ' + formattedValue\n                        : formattedValue\n                    )\n                  )\n                : (colorEl + encodeHTML(this.name) + ' : ' + formattedValue);\n        },\n\n        /**\n         * @return {boolean}\n         */\n        isAnimationEnabled: function () {\n            if (env.node) {\n                return false;\n            }\n\n            var animationEnabled = this.getShallow('animation');\n            if (animationEnabled) {\n                if (this.getData().count() > this.getShallow('animationThreshold')) {\n                    animationEnabled = false;\n                }\n            }\n            return animationEnabled;\n        },\n\n        restoreData: function () {\n            set(this, 'data', get(this, 'dataBeforeProcessed').cloneShallow());\n        },\n\n        getColorFromPalette: function (name, scope) {\n            var ecModel = this.ecModel;\n            // PENDING\n            var color = colorPaletteMixin.getColorFromPalette.call(this, name, scope);\n            if (!color) {\n                color = ecModel.getColorFromPalette(name, scope);\n            }\n            return color;\n        },\n\n        /**\n         * Get data indices for show tooltip content. See tooltip.\n         * @abstract\n         * @param {Array.<string>|string} dim\n         * @param {Array.<number>} value\n         * @param {module:echarts/coord/single/SingleAxis} baseAxis\n         * @return {Array.<number>} data indices.\n         */\n        getAxisTooltipDataIndex: null,\n\n        /**\n         * See tooltip.\n         * @abstract\n         * @param {number} dataIndex\n         * @return {Array.<number>} Point of tooltip. null/undefined can be returned.\n         */\n        getTooltipPosition: null\n    });\n\n    zrUtil.mixin(SeriesModel, modelUtil.dataFormatMixin);\n    zrUtil.mixin(SeriesModel, colorPaletteMixin);\n\n    module.exports = SeriesModel;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/model/Series.js\n// module id = 347\n// module chunks = 0 1 2 3 4","/**\n * List for data storage\n * @module echarts/data/List\n */\n\n\n    var UNDEFINED = 'undefined';\n    var globalObj = typeof window === 'undefined' ? global : window;\n    var Float64Array = typeof globalObj.Float64Array === UNDEFINED\n        ? Array : globalObj.Float64Array;\n    var Int32Array = typeof globalObj.Int32Array === UNDEFINED\n        ? Array : globalObj.Int32Array;\n\n    var dataCtors = {\n        'float': Float64Array,\n        'int': Int32Array,\n        // Ordinal data type can be string or int\n        'ordinal': Array,\n        'number': Array,\n        'time': Array\n    };\n\n    var Model = require('../model/Model');\n    var DataDiffer = require('./DataDiffer');\n\n    var zrUtil = require('zrender/lib/core/util');\n    var modelUtil = require('../util/model');\n    var isObject = zrUtil.isObject;\n\n    var TRANSFERABLE_PROPERTIES = [\n        'stackedOn', 'hasItemOption', '_nameList', '_idList', '_rawData'\n    ];\n\n    var transferProperties = function (a, b) {\n        zrUtil.each(TRANSFERABLE_PROPERTIES.concat(b.__wrappedMethods || []), function (propName) {\n            if (b.hasOwnProperty(propName)) {\n                a[propName] = b[propName];\n            }\n        });\n\n        a.__wrappedMethods = b.__wrappedMethods;\n    };\n\n    /**\n     * @constructor\n     * @alias module:echarts/data/List\n     *\n     * @param {Array.<string>} dimensions\n     *        Dimensions should be concrete names like x, y, z, lng, lat, angle, radius\n     * @param {module:echarts/model/Model} hostModel\n     */\n    var List = function (dimensions, hostModel) {\n\n        dimensions = dimensions || ['x', 'y'];\n\n        var dimensionInfos = {};\n        var dimensionNames = [];\n        for (var i = 0; i < dimensions.length; i++) {\n            var dimensionName;\n            var dimensionInfo = {};\n            if (typeof dimensions[i] === 'string') {\n                dimensionName = dimensions[i];\n                dimensionInfo = {\n                    name: dimensionName,\n                    stackable: false,\n                    // Type can be 'float', 'int', 'number'\n                    // Default is number, Precision of float may not enough\n                    type: 'number'\n                };\n            }\n            else {\n                dimensionInfo = dimensions[i];\n                dimensionName = dimensionInfo.name;\n                dimensionInfo.type = dimensionInfo.type || 'number';\n            }\n            dimensionNames.push(dimensionName);\n            dimensionInfos[dimensionName] = dimensionInfo;\n        }\n        /**\n         * @readOnly\n         * @type {Array.<string>}\n         */\n        this.dimensions = dimensionNames;\n\n        /**\n         * Infomation of each data dimension, like data type.\n         * @type {Object}\n         */\n        this._dimensionInfos = dimensionInfos;\n\n        /**\n         * @type {module:echarts/model/Model}\n         */\n        this.hostModel = hostModel;\n\n        /**\n         * @type {module:echarts/model/Model}\n         */\n        this.dataType;\n\n        /**\n         * Indices stores the indices of data subset after filtered.\n         * This data subset will be used in chart.\n         * @type {Array.<number>}\n         * @readOnly\n         */\n        this.indices = [];\n\n        /**\n         * Data storage\n         * @type {Object.<key, TypedArray|Array>}\n         * @private\n         */\n        this._storage = {};\n\n        /**\n         * @type {Array.<string>}\n         */\n        this._nameList = [];\n        /**\n         * @type {Array.<string>}\n         */\n        this._idList = [];\n        /**\n         * Models of data option is stored sparse for optimizing memory cost\n         * @type {Array.<module:echarts/model/Model>}\n         * @private\n         */\n        this._optionModels = [];\n\n        /**\n         * @param {module:echarts/data/List}\n         */\n        this.stackedOn = null;\n\n        /**\n         * Global visual properties after visual coding\n         * @type {Object}\n         * @private\n         */\n        this._visual = {};\n\n        /**\n         * Globel layout properties.\n         * @type {Object}\n         * @private\n         */\n        this._layout = {};\n\n        /**\n         * Item visual properties after visual coding\n         * @type {Array.<Object>}\n         * @private\n         */\n        this._itemVisuals = [];\n\n        /**\n         * Item layout properties after layout\n         * @type {Array.<Object>}\n         * @private\n         */\n        this._itemLayouts = [];\n\n        /**\n         * Graphic elemnents\n         * @type {Array.<module:zrender/Element>}\n         * @private\n         */\n        this._graphicEls = [];\n\n        /**\n         * @type {Array.<Array|Object>}\n         * @private\n         */\n        this._rawData;\n\n        /**\n         * @type {Object}\n         * @private\n         */\n        this._extent;\n    };\n\n    var listProto = List.prototype;\n\n    listProto.type = 'list';\n    /**\n     * If each data item has it's own option\n     * @type {boolean}\n     */\n    listProto.hasItemOption = true;\n\n    /**\n     * Get dimension name\n     * @param {string|number} dim\n     *        Dimension can be concrete names like x, y, z, lng, lat, angle, radius\n     *        Or a ordinal number. For example getDimensionInfo(0) will return 'x' or 'lng' or 'radius'\n     * @return {string} Concrete dim name.\n     */\n    listProto.getDimension = function (dim) {\n        if (!isNaN(dim)) {\n            dim = this.dimensions[dim] || dim;\n        }\n        return dim;\n    };\n    /**\n     * Get type and stackable info of particular dimension\n     * @param {string|number} dim\n     *        Dimension can be concrete names like x, y, z, lng, lat, angle, radius\n     *        Or a ordinal number. For example getDimensionInfo(0) will return 'x' or 'lng' or 'radius'\n     */\n    listProto.getDimensionInfo = function (dim) {\n        return zrUtil.clone(this._dimensionInfos[this.getDimension(dim)]);\n    };\n\n    /**\n     * Initialize from data\n     * @param {Array.<Object|number|Array>} data\n     * @param {Array.<string>} [nameList]\n     * @param {Function} [dimValueGetter] (dataItem, dimName, dataIndex, dimIndex) => number\n     */\n    listProto.initData = function (data, nameList, dimValueGetter) {\n        data = data || [];\n\n        if (__DEV__) {\n            if (!zrUtil.isArray(data)) {\n                throw new Error('Invalid data.');\n            }\n        }\n\n        this._rawData = data;\n\n        // Clear\n        var storage = this._storage = {};\n        var indices = this.indices = [];\n\n        var dimensions = this.dimensions;\n        var size = data.length;\n        var dimensionInfoMap = this._dimensionInfos;\n\n        var idList = [];\n        var nameRepeatCount = {};\n\n        nameList = nameList || [];\n\n        // Init storage\n        for (var i = 0; i < dimensions.length; i++) {\n            var dimInfo = dimensionInfoMap[dimensions[i]];\n            var DataCtor = dataCtors[dimInfo.type];\n            storage[dimensions[i]] = new DataCtor(size);\n        }\n\n        var self = this;\n        if (!dimValueGetter) {\n            self.hasItemOption = false;\n        }\n        // Default dim value getter\n        dimValueGetter = dimValueGetter || function (dataItem, dimName, dataIndex, dimIndex) {\n            var value = modelUtil.getDataItemValue(dataItem);\n            // If any dataItem is like { value: 10 }\n            if (modelUtil.isDataItemOption(dataItem)) {\n                self.hasItemOption = true;\n            }\n            return modelUtil.converDataValue(\n                (value instanceof Array)\n                    ? value[dimIndex]\n                    // If value is a single number or something else not array.\n                    : value,\n                dimensionInfoMap[dimName]\n            );\n        };\n\n        for (var idx = 0; idx < data.length; idx++) {\n            var dataItem = data[idx];\n            // Each data item is value\n            // [1, 2]\n            // 2\n            // Bar chart, line chart which uses category axis\n            // only gives the 'y' value. 'x' value is the indices of cateogry\n            // Use a tempValue to normalize the value to be a (x, y) value\n\n            // Store the data by dimensions\n            for (var k = 0; k < dimensions.length; k++) {\n                var dim = dimensions[k];\n                var dimStorage = storage[dim];\n                // PENDING NULL is empty or zero\n                dimStorage[idx] = dimValueGetter(dataItem, dim, idx, k);\n            }\n\n            indices.push(idx);\n        }\n\n        // Use the name in option and create id\n        for (var i = 0; i < data.length; i++) {\n            if (!nameList[i]) {\n                if (data[i] && data[i].name != null) {\n                    nameList[i] = data[i].name;\n                }\n            }\n            var name = nameList[i] || '';\n            // Try using the id in option\n            var id = data[i] && data[i].id;\n\n            if (!id && name) {\n                // Use name as id and add counter to avoid same name\n                nameRepeatCount[name] = nameRepeatCount[name] || 0;\n                id = name;\n                if (nameRepeatCount[name] > 0) {\n                    id += '__ec__' + nameRepeatCount[name];\n                }\n                nameRepeatCount[name]++;\n            }\n            id && (idList[i] = id);\n        }\n\n        this._nameList = nameList;\n        this._idList = idList;\n    };\n\n    /**\n     * @return {number}\n     */\n    listProto.count = function () {\n        return this.indices.length;\n    };\n\n    /**\n     * Get value. Return NaN if idx is out of range.\n     * @param {string} dim Dim must be concrete name.\n     * @param {number} idx\n     * @param {boolean} stack\n     * @return {number}\n     */\n    listProto.get = function (dim, idx, stack) {\n        var storage = this._storage;\n        var dataIndex = this.indices[idx];\n\n        // If value not exists\n        if (dataIndex == null) {\n            return NaN;\n        }\n\n        var value = storage[dim] && storage[dim][dataIndex];\n        // FIXME ordinal data type is not stackable\n        if (stack) {\n            var dimensionInfo = this._dimensionInfos[dim];\n            if (dimensionInfo && dimensionInfo.stackable) {\n                var stackedOn = this.stackedOn;\n                while (stackedOn) {\n                    // Get no stacked data of stacked on\n                    var stackedValue = stackedOn.get(dim, idx);\n                    // Considering positive stack, negative stack and empty data\n                    if ((value >= 0 && stackedValue > 0)  // Positive stack\n                        || (value <= 0 && stackedValue < 0) // Negative stack\n                    ) {\n                        value += stackedValue;\n                    }\n                    stackedOn = stackedOn.stackedOn;\n                }\n            }\n        }\n        return value;\n    };\n\n    /**\n     * Get value for multi dimensions.\n     * @param {Array.<string>} [dimensions] If ignored, using all dimensions.\n     * @param {number} idx\n     * @param {boolean} stack\n     * @return {number}\n     */\n    listProto.getValues = function (dimensions, idx, stack) {\n        var values = [];\n\n        if (!zrUtil.isArray(dimensions)) {\n            stack = idx;\n            idx = dimensions;\n            dimensions = this.dimensions;\n        }\n\n        for (var i = 0, len = dimensions.length; i < len; i++) {\n            values.push(this.get(dimensions[i], idx, stack));\n        }\n\n        return values;\n    };\n\n    /**\n     * If value is NaN. Inlcuding '-'\n     * @param {string} dim\n     * @param {number} idx\n     * @return {number}\n     */\n    listProto.hasValue = function (idx) {\n        var dimensions = this.dimensions;\n        var dimensionInfos = this._dimensionInfos;\n        for (var i = 0, len = dimensions.length; i < len; i++) {\n            if (\n                // Ordinal type can be string or number\n                dimensionInfos[dimensions[i]].type !== 'ordinal'\n                && isNaN(this.get(dimensions[i], idx))\n            ) {\n                return false;\n            }\n        }\n        return true;\n    };\n\n    /**\n     * Get extent of data in one dimension\n     * @param {string} dim\n     * @param {boolean} stack\n     * @param {Function} filter\n     */\n    listProto.getDataExtent = function (dim, stack, filter) {\n        dim = this.getDimension(dim);\n        var dimData = this._storage[dim];\n        var dimInfo = this.getDimensionInfo(dim);\n        stack = (dimInfo && dimInfo.stackable) && stack;\n        var dimExtent = (this._extent || (this._extent = {}))[dim + (!!stack)];\n        var value;\n        if (dimExtent) {\n            return dimExtent;\n        }\n        // var dimInfo = this._dimensionInfos[dim];\n        if (dimData) {\n            var min = Infinity;\n            var max = -Infinity;\n            // var isOrdinal = dimInfo.type === 'ordinal';\n            for (var i = 0, len = this.count(); i < len; i++) {\n                value = this.get(dim, i, stack);\n                // FIXME\n                // if (isOrdinal && typeof value === 'string') {\n                //     value = zrUtil.indexOf(dimData, value);\n                // }\n                if (!filter || filter(value, dim, i)) {\n                    value < min && (min = value);\n                    value > max && (max = value);\n                }\n            }\n            return (this._extent[dim + !!stack] = [min, max]);\n        }\n        else {\n            return [Infinity, -Infinity];\n        }\n    };\n\n    /**\n     * Get sum of data in one dimension\n     * @param {string} dim\n     * @param {boolean} stack\n     */\n    listProto.getSum = function (dim, stack) {\n        var dimData = this._storage[dim];\n        var sum = 0;\n        if (dimData) {\n            for (var i = 0, len = this.count(); i < len; i++) {\n                var value = this.get(dim, i, stack);\n                if (!isNaN(value)) {\n                    sum += value;\n                }\n            }\n        }\n        return sum;\n    };\n\n    /**\n     * Retreive the index with given value\n     * @param {number} idx\n     * @param {number} value\n     * @return {number}\n     */\n    // FIXME Precision of float value\n    listProto.indexOf = function (dim, value) {\n        var storage = this._storage;\n        var dimData = storage[dim];\n        var indices = this.indices;\n\n        if (dimData) {\n            for (var i = 0, len = indices.length; i < len; i++) {\n                var rawIndex = indices[i];\n                if (dimData[rawIndex] === value) {\n                    return i;\n                }\n            }\n        }\n        return -1;\n    };\n\n    /**\n     * Retreive the index with given name\n     * @param {number} idx\n     * @param {number} name\n     * @return {number}\n     */\n    listProto.indexOfName = function (name) {\n        var indices = this.indices;\n        var nameList = this._nameList;\n\n        for (var i = 0, len = indices.length; i < len; i++) {\n            var rawIndex = indices[i];\n            if (nameList[rawIndex] === name) {\n                return i;\n            }\n        }\n\n        return -1;\n    };\n\n    /**\n     * Retreive the index with given raw data index\n     * @param {number} idx\n     * @param {number} name\n     * @return {number}\n     */\n    listProto.indexOfRawIndex = function (rawIndex) {\n        // Indices are ascending\n        var indices = this.indices;\n\n        // If rawIndex === dataIndex\n        var rawDataIndex = indices[rawIndex];\n        if (rawDataIndex != null && rawDataIndex === rawIndex) {\n            return rawIndex;\n        }\n\n        var left = 0;\n        var right = indices.length - 1;\n        while (left <= right) {\n            var mid = (left + right) / 2 | 0;\n            if (indices[mid] < rawIndex) {\n                left = mid + 1;\n            }\n            else if (indices[mid] > rawIndex) {\n                right = mid - 1;\n            }\n            else {\n                return mid;\n            }\n        }\n        return -1;\n    };\n\n    /**\n     * Retreive the index of nearest value\n     * @param {string} dim\n     * @param {number} value\n     * @param {boolean} stack If given value is after stacked\n     * @param {number} [maxDistance=Infinity]\n     * @return {number}\n     */\n    listProto.indexOfNearest = function (dim, value, stack, maxDistance) {\n        var storage = this._storage;\n        var dimData = storage[dim];\n\n        if (maxDistance == null) {\n            maxDistance = Infinity;\n        }\n\n        var nearestIdx = -1;\n        if (dimData) {\n            var minDist = Number.MAX_VALUE;\n            for (var i = 0, len = this.count(); i < len; i++) {\n                var diff = value - this.get(dim, i, stack);\n                var dist = Math.abs(diff);\n                if (\n                    diff <= maxDistance\n                    && (dist < minDist\n                        // For the case of two data are same on xAxis, which has sequence data.\n                        // Show the nearest index\n                        // https://github.com/ecomfe/echarts/issues/2869\n                        || (dist === minDist && diff > 0)\n                    )\n                ) {\n                    minDist = dist;\n                    nearestIdx = i;\n                }\n            }\n        }\n        return nearestIdx;\n    };\n\n    /**\n     * Get raw data index\n     * @param {number} idx\n     * @return {number}\n     */\n    listProto.getRawIndex = function (idx) {\n        var rawIdx = this.indices[idx];\n        return rawIdx == null ? -1 : rawIdx;\n    };\n\n    /**\n     * Get raw data item\n     * @param {number} idx\n     * @return {number}\n     */\n    listProto.getRawDataItem = function (idx) {\n        return this._rawData[this.getRawIndex(idx)];\n    };\n\n    /**\n     * @param {number} idx\n     * @param {boolean} [notDefaultIdx=false]\n     * @return {string}\n     */\n    listProto.getName = function (idx) {\n        return this._nameList[this.indices[idx]] || '';\n    };\n\n    /**\n     * @param {number} idx\n     * @param {boolean} [notDefaultIdx=false]\n     * @return {string}\n     */\n    listProto.getId = function (idx) {\n        return this._idList[this.indices[idx]] || (this.getRawIndex(idx) + '');\n    };\n\n\n    function normalizeDimensions(dimensions) {\n        if (!zrUtil.isArray(dimensions)) {\n            dimensions = [dimensions];\n        }\n        return dimensions;\n    }\n\n    /**\n     * Data iteration\n     * @param {string|Array.<string>}\n     * @param {Function} cb\n     * @param {boolean} [stack=false]\n     * @param {*} [context=this]\n     *\n     * @example\n     *  list.each('x', function (x, idx) {});\n     *  list.each(['x', 'y'], function (x, y, idx) {});\n     *  list.each(function (idx) {})\n     */\n    listProto.each = function (dims, cb, stack, context) {\n        if (typeof dims === 'function') {\n            context = stack;\n            stack = cb;\n            cb = dims;\n            dims = [];\n        }\n\n        dims = zrUtil.map(normalizeDimensions(dims), this.getDimension, this);\n\n        var value = [];\n        var dimSize = dims.length;\n        var indices = this.indices;\n\n        context = context || this;\n\n        for (var i = 0; i < indices.length; i++) {\n            // Simple optimization\n            switch (dimSize) {\n                case 0:\n                    cb.call(context, i);\n                    break;\n                case 1:\n                    cb.call(context, this.get(dims[0], i, stack), i);\n                    break;\n                case 2:\n                    cb.call(context, this.get(dims[0], i, stack), this.get(dims[1], i, stack), i);\n                    break;\n                default:\n                    for (var k = 0; k < dimSize; k++) {\n                        value[k] = this.get(dims[k], i, stack);\n                    }\n                    // Index\n                    value[k] = i;\n                    cb.apply(context, value);\n            }\n        }\n    };\n\n    /**\n     * Data filter\n     * @param {string|Array.<string>}\n     * @param {Function} cb\n     * @param {boolean} [stack=false]\n     * @param {*} [context=this]\n     */\n    listProto.filterSelf = function (dimensions, cb, stack, context) {\n        if (typeof dimensions === 'function') {\n            context = stack;\n            stack = cb;\n            cb = dimensions;\n            dimensions = [];\n        }\n\n        dimensions = zrUtil.map(\n            normalizeDimensions(dimensions), this.getDimension, this\n        );\n\n        var newIndices = [];\n        var value = [];\n        var dimSize = dimensions.length;\n        var indices = this.indices;\n\n        context = context || this;\n\n        for (var i = 0; i < indices.length; i++) {\n            var keep;\n            // Simple optimization\n            if (dimSize === 1) {\n                keep = cb.call(\n                    context, this.get(dimensions[0], i, stack), i\n                );\n            }\n            else {\n                for (var k = 0; k < dimSize; k++) {\n                    value[k] = this.get(dimensions[k], i, stack);\n                }\n                value[k] = i;\n                keep = cb.apply(context, value);\n            }\n            if (keep) {\n                newIndices.push(indices[i]);\n            }\n        }\n\n        this.indices = newIndices;\n\n        // Reset data extent\n        this._extent = {};\n\n        return this;\n    };\n\n    /**\n     * Data mapping to a plain array\n     * @param {string|Array.<string>} [dimensions]\n     * @param {Function} cb\n     * @param {boolean} [stack=false]\n     * @param {*} [context=this]\n     * @return {Array}\n     */\n    listProto.mapArray = function (dimensions, cb, stack, context) {\n        if (typeof dimensions === 'function') {\n            context = stack;\n            stack = cb;\n            cb = dimensions;\n            dimensions = [];\n        }\n\n        var result = [];\n        this.each(dimensions, function () {\n            result.push(cb && cb.apply(this, arguments));\n        }, stack, context);\n        return result;\n    };\n\n    function cloneListForMapAndSample(original, excludeDimensions) {\n        var allDimensions = original.dimensions;\n        var list = new List(\n            zrUtil.map(allDimensions, original.getDimensionInfo, original),\n            original.hostModel\n        );\n        // FIXME If needs stackedOn, value may already been stacked\n        transferProperties(list, original);\n\n        var storage = list._storage = {};\n        var originalStorage = original._storage;\n        // Init storage\n        for (var i = 0; i < allDimensions.length; i++) {\n            var dim = allDimensions[i];\n            var dimStore = originalStorage[dim];\n            if (zrUtil.indexOf(excludeDimensions, dim) >= 0) {\n                storage[dim] = new dimStore.constructor(\n                    originalStorage[dim].length\n                );\n            }\n            else {\n                // Direct reference for other dimensions\n                storage[dim] = originalStorage[dim];\n            }\n        }\n        return list;\n    }\n\n    /**\n     * Data mapping to a new List with given dimensions\n     * @param {string|Array.<string>} dimensions\n     * @param {Function} cb\n     * @param {boolean} [stack=false]\n     * @param {*} [context=this]\n     * @return {Array}\n     */\n    listProto.map = function (dimensions, cb, stack, context) {\n        dimensions = zrUtil.map(\n            normalizeDimensions(dimensions), this.getDimension, this\n        );\n\n        var list = cloneListForMapAndSample(this, dimensions);\n        // Following properties are all immutable.\n        // So we can reference to the same value\n        var indices = list.indices = this.indices;\n\n        var storage = list._storage;\n\n        var tmpRetValue = [];\n        this.each(dimensions, function () {\n            var idx = arguments[arguments.length - 1];\n            var retValue = cb && cb.apply(this, arguments);\n            if (retValue != null) {\n                // a number\n                if (typeof retValue === 'number') {\n                    tmpRetValue[0] = retValue;\n                    retValue = tmpRetValue;\n                }\n                for (var i = 0; i < retValue.length; i++) {\n                    var dim = dimensions[i];\n                    var dimStore = storage[dim];\n                    var rawIdx = indices[idx];\n                    if (dimStore) {\n                        dimStore[rawIdx] = retValue[i];\n                    }\n                }\n            }\n        }, stack, context);\n\n        return list;\n    };\n\n    /**\n     * Large data down sampling on given dimension\n     * @param {string} dimension\n     * @param {number} rate\n     * @param {Function} sampleValue\n     * @param {Function} sampleIndex Sample index for name and id\n     */\n    listProto.downSample = function (dimension, rate, sampleValue, sampleIndex) {\n        var list = cloneListForMapAndSample(this, [dimension]);\n        var storage = this._storage;\n        var targetStorage = list._storage;\n\n        var originalIndices = this.indices;\n        var indices = list.indices = [];\n\n        var frameValues = [];\n        var frameIndices = [];\n        var frameSize = Math.floor(1 / rate);\n\n        var dimStore = targetStorage[dimension];\n        var len = this.count();\n        // Copy data from original data\n        for (var i = 0; i < storage[dimension].length; i++) {\n            targetStorage[dimension][i] = storage[dimension][i];\n        }\n        for (var i = 0; i < len; i += frameSize) {\n            // Last frame\n            if (frameSize > len - i) {\n                frameSize = len - i;\n                frameValues.length = frameSize;\n            }\n            for (var k = 0; k < frameSize; k++) {\n                var idx = originalIndices[i + k];\n                frameValues[k] = dimStore[idx];\n                frameIndices[k] = idx;\n            }\n            var value = sampleValue(frameValues);\n            var idx = frameIndices[sampleIndex(frameValues, value) || 0];\n            // Only write value on the filtered data\n            dimStore[idx] = value;\n            indices.push(idx);\n        }\n\n        return list;\n    };\n\n    /**\n     * Get model of one data item.\n     *\n     * @param {number} idx\n     */\n    // FIXME Model proxy ?\n    listProto.getItemModel = function (idx) {\n        var hostModel = this.hostModel;\n        idx = this.indices[idx];\n        return new Model(this._rawData[idx], hostModel, hostModel && hostModel.ecModel);\n    };\n\n    /**\n     * Create a data differ\n     * @param {module:echarts/data/List} otherList\n     * @return {module:echarts/data/DataDiffer}\n     */\n    listProto.diff = function (otherList) {\n        var idList = this._idList;\n        var otherIdList = otherList && otherList._idList;\n        var val;\n        // Use prefix to avoid index to be the same as otherIdList[idx],\n        // which will cause weird udpate animation.\n        var prefix = 'e\\0\\0';\n\n        return new DataDiffer(\n            otherList ? otherList.indices : [],\n            this.indices,\n            function (idx) {\n                return (val = otherIdList[idx]) != null ? val : prefix + idx;\n            },\n            function (idx) {\n                return (val = idList[idx]) != null ? val : prefix + idx;\n            }\n        );\n    };\n    /**\n     * Get visual property.\n     * @param {string} key\n     */\n    listProto.getVisual = function (key) {\n        var visual = this._visual;\n        return visual && visual[key];\n    };\n\n    /**\n     * Set visual property\n     * @param {string|Object} key\n     * @param {*} [value]\n     *\n     * @example\n     *  setVisual('color', color);\n     *  setVisual({\n     *      'color': color\n     *  });\n     */\n    listProto.setVisual = function (key, val) {\n        if (isObject(key)) {\n            for (var name in key) {\n                if (key.hasOwnProperty(name)) {\n                    this.setVisual(name, key[name]);\n                }\n            }\n            return;\n        }\n        this._visual = this._visual || {};\n        this._visual[key] = val;\n    };\n\n    /**\n     * Set layout property.\n     * @param {string} key\n     * @param {*} [val]\n     */\n    listProto.setLayout = function (key, val) {\n        if (isObject(key)) {\n            for (var name in key) {\n                if (key.hasOwnProperty(name)) {\n                    this.setLayout(name, key[name]);\n                }\n            }\n            return;\n        }\n        this._layout[key] = val;\n    };\n\n    /**\n     * Get layout property.\n     * @param  {string} key.\n     * @return {*}\n     */\n    listProto.getLayout = function (key) {\n        return this._layout[key];\n    };\n\n    /**\n     * Get layout of single data item\n     * @param {number} idx\n     */\n    listProto.getItemLayout = function (idx) {\n        return this._itemLayouts[idx];\n    };\n\n    /**\n     * Set layout of single data item\n     * @param {number} idx\n     * @param {Object} layout\n     * @param {boolean=} [merge=false]\n     */\n    listProto.setItemLayout = function (idx, layout, merge) {\n        this._itemLayouts[idx] = merge\n            ? zrUtil.extend(this._itemLayouts[idx] || {}, layout)\n            : layout;\n    };\n\n    /**\n     * Clear all layout of single data item\n     */\n    listProto.clearItemLayouts = function () {\n        this._itemLayouts.length = 0;\n    };\n\n    /**\n     * Get visual property of single data item\n     * @param {number} idx\n     * @param {string} key\n     * @param {boolean} ignoreParent\n     */\n    listProto.getItemVisual = function (idx, key, ignoreParent) {\n        var itemVisual = this._itemVisuals[idx];\n        var val = itemVisual && itemVisual[key];\n        if (val == null && !ignoreParent) {\n            // Use global visual property\n            return this.getVisual(key);\n        }\n        return val;\n    };\n\n    /**\n     * Set visual property of single data item\n     *\n     * @param {number} idx\n     * @param {string|Object} key\n     * @param {*} [value]\n     *\n     * @example\n     *  setItemVisual(0, 'color', color);\n     *  setItemVisual(0, {\n     *      'color': color\n     *  });\n     */\n    listProto.setItemVisual = function (idx, key, value) {\n        var itemVisual = this._itemVisuals[idx] || {};\n        this._itemVisuals[idx] = itemVisual;\n\n        if (isObject(key)) {\n            for (var name in key) {\n                if (key.hasOwnProperty(name)) {\n                    itemVisual[name] = key[name];\n                }\n            }\n            return;\n        }\n        itemVisual[key] = value;\n    };\n\n    /**\n     * Clear itemVisuals and list visual.\n     */\n    listProto.clearAllVisual = function () {\n        this._visual = {};\n        this._itemVisuals = [];\n    };\n\n    var setItemDataAndSeriesIndex = function (child) {\n        child.seriesIndex = this.seriesIndex;\n        child.dataIndex = this.dataIndex;\n        child.dataType = this.dataType;\n    };\n    /**\n     * Set graphic element relative to data. It can be set as null\n     * @param {number} idx\n     * @param {module:zrender/Element} [el]\n     */\n    listProto.setItemGraphicEl = function (idx, el) {\n        var hostModel = this.hostModel;\n\n        if (el) {\n            // Add data index and series index for indexing the data by element\n            // Useful in tooltip\n            el.dataIndex = idx;\n            el.dataType = this.dataType;\n            el.seriesIndex = hostModel && hostModel.seriesIndex;\n            if (el.type === 'group') {\n                el.traverse(setItemDataAndSeriesIndex, el);\n            }\n        }\n\n        this._graphicEls[idx] = el;\n    };\n\n    /**\n     * @param {number} idx\n     * @return {module:zrender/Element}\n     */\n    listProto.getItemGraphicEl = function (idx) {\n        return this._graphicEls[idx];\n    };\n\n    /**\n     * @param {Function} cb\n     * @param {*} context\n     */\n    listProto.eachItemGraphicEl = function (cb, context) {\n        zrUtil.each(this._graphicEls, function (el, idx) {\n            if (el) {\n                cb && cb.call(context, el, idx);\n            }\n        });\n    };\n\n    /**\n     * Shallow clone a new list except visual and layout properties, and graph elements.\n     * New list only change the indices.\n     */\n    listProto.cloneShallow = function () {\n        var dimensionInfoList = zrUtil.map(this.dimensions, this.getDimensionInfo, this);\n        var list = new List(dimensionInfoList, this.hostModel);\n\n        // FIXME\n        list._storage = this._storage;\n\n        transferProperties(list, this);\n\n\n        // Clone will not change the data extent and indices\n        list.indices = this.indices.slice();\n\n        if (this._extent) {\n            list._extent = zrUtil.extend({}, this._extent);\n        }\n\n        return list;\n    };\n\n    /**\n     * Wrap some method to add more feature\n     * @param {string} methodName\n     * @param {Function} injectFunction\n     */\n    listProto.wrapMethod = function (methodName, injectFunction) {\n        var originalMethod = this[methodName];\n        if (typeof originalMethod !== 'function') {\n            return;\n        }\n        this.__wrappedMethods = this.__wrappedMethods || [];\n        this.__wrappedMethods.push(methodName);\n        this[methodName] = function () {\n            var res = originalMethod.apply(this, arguments);\n            return injectFunction.apply(this, [res].concat(zrUtil.slice(arguments)));\n        };\n    };\n\n    // Methods that create a new list based on this list should be listed here.\n    // Notice that those method should `RETURN` the new list.\n    listProto.TRANSFERABLE_METHODS = ['cloneShallow', 'downSample', 'map'];\n    // Methods that change indices of this list should be listed here.\n    listProto.CHANGABLE_METHODS = ['filterSelf'];\n\n    module.exports = List;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/data/List.js\n// module id = 349\n// module chunks = 0 1 2 3 4","/**\n * @module echarts/chart/helper/Symbol\n */\n\n\n    var zrUtil = require('zrender/lib/core/util');\n    var symbolUtil = require('../../util/symbol');\n    var graphic = require('../../util/graphic');\n    var numberUtil = require('../../util/number');\n\n    function getSymbolSize(data, idx) {\n        var symbolSize = data.getItemVisual(idx, 'symbolSize');\n        return symbolSize instanceof Array\n            ? symbolSize.slice()\n            : [+symbolSize, +symbolSize];\n    }\n\n    function getScale(symbolSize) {\n        return [symbolSize[0] / 2, symbolSize[1] / 2];\n    }\n\n    /**\n     * @constructor\n     * @alias {module:echarts/chart/helper/Symbol}\n     * @param {module:echarts/data/List} data\n     * @param {number} idx\n     * @extends {module:zrender/graphic/Group}\n     */\n    function Symbol(data, idx, seriesScope) {\n        graphic.Group.call(this);\n\n        this.updateData(data, idx, seriesScope);\n    }\n\n    var symbolProto = Symbol.prototype;\n\n    function driftSymbol(dx, dy) {\n        this.parent.drift(dx, dy);\n    }\n\n    symbolProto._createSymbol = function (symbolType, data, idx, symbolSize) {\n        // Remove paths created before\n        this.removeAll();\n\n        var seriesModel = data.hostModel;\n        var color = data.getItemVisual(idx, 'color');\n\n        // var symbolPath = symbolUtil.createSymbol(\n        //     symbolType, -0.5, -0.5, 1, 1, color\n        // );\n        // If width/height are set too small (e.g., set to 1) on ios10\n        // and macOS Sierra, a circle stroke become a rect, no matter what\n        // the scale is set. So we set width/height as 2. See #4150.\n        var symbolPath = symbolUtil.createSymbol(\n            symbolType, -1, -1, 2, 2, color\n        );\n\n        symbolPath.attr({\n            z2: 100,\n            culling: true,\n            scale: [0, 0]\n        });\n        // Rewrite drift method\n        symbolPath.drift = driftSymbol;\n\n        graphic.initProps(symbolPath, {\n            scale: getScale(symbolSize)\n        }, seriesModel, idx);\n        this._symbolType = symbolType;\n\n        this.add(symbolPath);\n    };\n\n    /**\n     * Stop animation\n     * @param {boolean} toLastFrame\n     */\n    symbolProto.stopSymbolAnimation = function (toLastFrame) {\n        this.childAt(0).stopAnimation(toLastFrame);\n    };\n\n    /**\n     * Get symbol path element\n     */\n    symbolProto.getSymbolPath = function () {\n        return this.childAt(0);\n    };\n\n    /**\n     * Get scale(aka, current symbol size).\n     * Including the change caused by animation\n     */\n    symbolProto.getScale = function () {\n        return this.childAt(0).scale;\n    };\n\n    /**\n     * Highlight symbol\n     */\n    symbolProto.highlight = function () {\n        this.childAt(0).trigger('emphasis');\n    };\n\n    /**\n     * Downplay symbol\n     */\n    symbolProto.downplay = function () {\n        this.childAt(0).trigger('normal');\n    };\n\n    /**\n     * @param {number} zlevel\n     * @param {number} z\n     */\n    symbolProto.setZ = function (zlevel, z) {\n        var symbolPath = this.childAt(0);\n        symbolPath.zlevel = zlevel;\n        symbolPath.z = z;\n    };\n\n    symbolProto.setDraggable = function (draggable) {\n        var symbolPath = this.childAt(0);\n        symbolPath.draggable = draggable;\n        symbolPath.cursor = draggable ? 'move' : 'pointer';\n    };\n\n    /**\n     * Update symbol properties\n     * @param  {module:echarts/data/List} data\n     * @param  {number} idx\n     */\n    symbolProto.updateData = function (data, idx, seriesScope) {\n        this.silent = false;\n\n        var symbolType = data.getItemVisual(idx, 'symbol') || 'circle';\n        var seriesModel = data.hostModel;\n        var symbolSize = getSymbolSize(data, idx);\n\n        if (symbolType !== this._symbolType) {\n            this._createSymbol(symbolType, data, idx, symbolSize);\n        }\n        else {\n            var symbolPath = this.childAt(0);\n            graphic.updateProps(symbolPath, {\n                scale: getScale(symbolSize)\n            }, seriesModel, idx);\n        }\n        this._updateCommon(data, idx, symbolSize, seriesScope);\n        this._seriesModel = seriesModel;\n    };\n\n    // Update common properties\n    var normalStyleAccessPath = ['itemStyle', 'normal'];\n    var emphasisStyleAccessPath = ['itemStyle', 'emphasis'];\n    var normalLabelAccessPath = ['label', 'normal'];\n    var emphasisLabelAccessPath = ['label', 'emphasis'];\n\n    symbolProto._updateCommon = function (data, idx, symbolSize, seriesScope) {\n        var symbolPath = this.childAt(0);\n        var seriesModel = data.hostModel;\n        var color = data.getItemVisual(idx, 'color');\n\n        // Reset style\n        if (symbolPath.type !== 'image') {\n            symbolPath.useStyle({\n                strokeNoScale: true\n            });\n        }\n\n        seriesScope = seriesScope || null;\n\n        var itemStyle = seriesScope && seriesScope.itemStyle;\n        var hoverItemStyle = seriesScope && seriesScope.hoverItemStyle;\n        var symbolRotate = seriesScope && seriesScope.symbolRotate;\n        var symbolOffset = seriesScope && seriesScope.symbolOffset;\n        var labelModel = seriesScope && seriesScope.labelModel;\n        var hoverLabelModel = seriesScope && seriesScope.hoverLabelModel;\n        var hoverAnimation = seriesScope && seriesScope.hoverAnimation;\n\n        if (!seriesScope || data.hasItemOption) {\n            var itemModel = data.getItemModel(idx);\n\n            // Color must be excluded.\n            // Because symbol provide setColor individually to set fill and stroke\n            itemStyle = itemModel.getModel(normalStyleAccessPath).getItemStyle(['color']);\n            hoverItemStyle = itemModel.getModel(emphasisStyleAccessPath).getItemStyle();\n\n            symbolRotate = itemModel.getShallow('symbolRotate');\n            symbolOffset = itemModel.getShallow('symbolOffset');\n\n            labelModel = itemModel.getModel(normalLabelAccessPath);\n            hoverLabelModel = itemModel.getModel(emphasisLabelAccessPath);\n            hoverAnimation = itemModel.getShallow('hoverAnimation');\n        }\n        else {\n            hoverItemStyle = zrUtil.extend({}, hoverItemStyle);\n        }\n\n        var elStyle = symbolPath.style;\n\n        symbolPath.attr('rotation', (symbolRotate || 0) * Math.PI / 180 || 0);\n\n        if (symbolOffset) {\n            symbolPath.attr('position', [\n                numberUtil.parsePercent(symbolOffset[0], symbolSize[0]),\n                numberUtil.parsePercent(symbolOffset[1], symbolSize[1])\n            ]);\n        }\n\n        // PENDING setColor before setStyle!!!\n        symbolPath.setColor(color);\n\n        symbolPath.setStyle(itemStyle);\n\n        var opacity = data.getItemVisual(idx, 'opacity');\n        if (opacity != null) {\n            elStyle.opacity = opacity;\n        }\n\n        // Get last value dim\n        var dimensions = data.dimensions.slice();\n        var valueDim;\n        var dataType;\n        while (dimensions.length && (\n            valueDim = dimensions.pop(),\n            dataType = data.getDimensionInfo(valueDim).type,\n            dataType === 'ordinal' || dataType === 'time'\n        )) {} // jshint ignore:line\n\n        if (valueDim != null && labelModel.getShallow('show')) {\n            graphic.setText(elStyle, labelModel, color);\n            elStyle.text = zrUtil.retrieve(\n                seriesModel.getFormattedLabel(idx, 'normal'),\n                data.get(valueDim, idx)\n            );\n        }\n        else {\n            elStyle.text = '';\n        }\n\n        if (valueDim != null && hoverLabelModel.getShallow('show')) {\n            graphic.setText(hoverItemStyle, hoverLabelModel, color);\n            hoverItemStyle.text = zrUtil.retrieve(\n                seriesModel.getFormattedLabel(idx, 'emphasis'),\n                data.get(valueDim, idx)\n            );\n        }\n        else {\n            hoverItemStyle.text = '';\n        }\n\n        symbolPath.off('mouseover')\n            .off('mouseout')\n            .off('emphasis')\n            .off('normal');\n\n        symbolPath.hoverStyle = hoverItemStyle;\n\n        graphic.setHoverStyle(symbolPath);\n\n        var scale = getScale(symbolSize);\n\n        if (hoverAnimation && seriesModel.isAnimationEnabled()) {\n            var onEmphasis = function() {\n                var ratio = scale[1] / scale[0];\n                this.animateTo({\n                    scale: [\n                        Math.max(scale[0] * 1.1, scale[0] + 3),\n                        Math.max(scale[1] * 1.1, scale[1] + 3 * ratio)\n                    ]\n                }, 400, 'elasticOut');\n            };\n            var onNormal = function() {\n                this.animateTo({\n                    scale: scale\n                }, 400, 'elasticOut');\n            };\n            symbolPath.on('mouseover', onEmphasis)\n                .on('mouseout', onNormal)\n                .on('emphasis', onEmphasis)\n                .on('normal', onNormal);\n        }\n    };\n\n    symbolProto.fadeOut = function (cb) {\n        var symbolPath = this.childAt(0);\n        // Avoid mistaken hover when fading out\n        this.silent = true;\n        // Not show text when animating\n        symbolPath.style.text = '';\n        graphic.updateProps(symbolPath, {\n            scale: [0, 0]\n        }, this._seriesModel, this.dataIndex, cb);\n    };\n\n    zrUtil.inherits(Symbol, graphic.Group);\n\n    module.exports = Symbol;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/chart/helper/Symbol.js\n// module id = 350\n// module chunks = 0 1 2 3 4","'use strict';\n\n\n    var ComponentModel = require('../../model/Component');\n    var zrUtil = require('zrender/lib/core/util');\n    var axisModelCreator = require('../axisModelCreator');\n\n    var AxisModel = ComponentModel.extend({\n\n        type: 'cartesian2dAxis',\n\n        /**\n         * @type {module:echarts/coord/cartesian/Axis2D}\n         */\n        axis: null,\n\n        /**\n         * @override\n         */\n        init: function () {\n            AxisModel.superApply(this, 'init', arguments);\n            this.resetRange();\n        },\n\n        /**\n         * @override\n         */\n        mergeOption: function () {\n            AxisModel.superApply(this, 'mergeOption', arguments);\n            this.resetRange();\n        },\n\n        /**\n         * @override\n         */\n        restoreData: function () {\n            AxisModel.superApply(this, 'restoreData', arguments);\n            this.resetRange();\n        },\n\n        /**\n         * @override\n         * @return {module:echarts/model/Component}\n         */\n        getCoordSysModel: function () {\n            return this.ecModel.queryComponents({\n                mainType: 'grid',\n                index: this.option.gridIndex,\n                id: this.option.gridId\n            })[0];\n        }\n\n    });\n\n    function getAxisType(axisDim, option) {\n        // Default axis with data is category axis\n        return option.type || (option.data ? 'category' : 'value');\n    }\n\n    zrUtil.merge(AxisModel.prototype, require('../axisModelCommonMixin'));\n\n    var extraOption = {\n        // gridIndex: 0,\n        // gridId: '',\n\n        // Offset is for multiple axis on the same position\n        offset: 0\n    };\n\n    axisModelCreator('x', AxisModel, getAxisType, extraOption);\n    axisModelCreator('y', AxisModel, getAxisType, extraOption);\n\n    module.exports = AxisModel;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/coord/cartesian/AxisModel.js\n// module id = 351\n// module chunks = 0 1 2 3 4","\n\n    var classUtil = require('../../util/clazz');\n    var set = classUtil.set;\n    var get = classUtil.get;\n\n    module.exports = {\n        clearColorPalette: function () {\n            set(this, 'colorIdx', 0);\n            set(this, 'colorNameMap', {});\n        },\n\n        getColorFromPalette: function (name, scope) {\n            scope = scope || this;\n            var colorIdx = get(scope, 'colorIdx') || 0;\n            var colorNameMap = get(scope, 'colorNameMap') || set(scope, 'colorNameMap', {});\n            if (colorNameMap[name]) {\n                return colorNameMap[name];\n            }\n            var colorPalette = this.get('color', true) || [];\n            if (!colorPalette.length) {\n                return;\n            }\n\n            var color = colorPalette[colorIdx];\n            if (name) {\n                colorNameMap[name] = color;\n            }\n            set(scope, 'colorIdx', (colorIdx + 1) % colorPalette.length);\n\n            return color;\n        }\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/model/mixin/colorPalette.js\n// module id = 352\n// module chunks = 0 1 2 3 4","'use strict';\n// Symbol factory\n\n\n    var graphic = require('./graphic');\n    var BoundingRect = require('zrender/lib/core/BoundingRect');\n\n    /**\n     * Triangle shape\n     * @inner\n     */\n    var Triangle = graphic.extendShape({\n        type: 'triangle',\n        shape: {\n            cx: 0,\n            cy: 0,\n            width: 0,\n            height: 0\n        },\n        buildPath: function (path, shape) {\n            var cx = shape.cx;\n            var cy = shape.cy;\n            var width = shape.width / 2;\n            var height = shape.height / 2;\n            path.moveTo(cx, cy - height);\n            path.lineTo(cx + width, cy + height);\n            path.lineTo(cx - width, cy + height);\n            path.closePath();\n        }\n    });\n    /**\n     * Diamond shape\n     * @inner\n     */\n    var Diamond = graphic.extendShape({\n        type: 'diamond',\n        shape: {\n            cx: 0,\n            cy: 0,\n            width: 0,\n            height: 0\n        },\n        buildPath: function (path, shape) {\n            var cx = shape.cx;\n            var cy = shape.cy;\n            var width = shape.width / 2;\n            var height = shape.height / 2;\n            path.moveTo(cx, cy - height);\n            path.lineTo(cx + width, cy);\n            path.lineTo(cx, cy + height);\n            path.lineTo(cx - width, cy);\n            path.closePath();\n        }\n    });\n\n    /**\n     * Pin shape\n     * @inner\n     */\n    var Pin = graphic.extendShape({\n        type: 'pin',\n        shape: {\n            // x, y on the cusp\n            x: 0,\n            y: 0,\n            width: 0,\n            height: 0\n        },\n\n        buildPath: function (path, shape) {\n            var x = shape.x;\n            var y = shape.y;\n            var w = shape.width / 5 * 3;\n            // Height must be larger than width\n            var h = Math.max(w, shape.height);\n            var r = w / 2;\n\n            // Dist on y with tangent point and circle center\n            var dy = r * r / (h - r);\n            var cy = y - h + r + dy;\n            var angle = Math.asin(dy / r);\n            // Dist on x with tangent point and circle center\n            var dx = Math.cos(angle) * r;\n\n            var tanX = Math.sin(angle);\n            var tanY = Math.cos(angle);\n\n            path.arc(\n                x, cy, r,\n                Math.PI - angle,\n                Math.PI * 2 + angle\n            );\n\n            var cpLen = r * 0.6;\n            var cpLen2 = r * 0.7;\n            path.bezierCurveTo(\n                x + dx - tanX * cpLen, cy + dy + tanY * cpLen,\n                x, y - cpLen2,\n                x, y\n            );\n            path.bezierCurveTo(\n                x, y - cpLen2,\n                x - dx + tanX * cpLen, cy + dy + tanY * cpLen,\n                x - dx, cy + dy\n            );\n            path.closePath();\n        }\n    });\n\n    /**\n     * Arrow shape\n     * @inner\n     */\n    var Arrow = graphic.extendShape({\n\n        type: 'arrow',\n\n        shape: {\n            x: 0,\n            y: 0,\n            width: 0,\n            height: 0\n        },\n\n        buildPath: function (ctx, shape) {\n            var height = shape.height;\n            var width = shape.width;\n            var x = shape.x;\n            var y = shape.y;\n            var dx = width / 3 * 2;\n            ctx.moveTo(x, y);\n            ctx.lineTo(x + dx, y + height);\n            ctx.lineTo(x, y + height / 4 * 3);\n            ctx.lineTo(x - dx, y + height);\n            ctx.lineTo(x, y);\n            ctx.closePath();\n        }\n    });\n\n    /**\n     * Map of path contructors\n     * @type {Object.<string, module:zrender/graphic/Path>}\n     */\n    var symbolCtors = {\n        line: graphic.Line,\n\n        rect: graphic.Rect,\n\n        roundRect: graphic.Rect,\n\n        square: graphic.Rect,\n\n        circle: graphic.Circle,\n\n        diamond: Diamond,\n\n        pin: Pin,\n\n        arrow: Arrow,\n\n        triangle: Triangle\n    };\n\n    var symbolShapeMakers = {\n\n        line: function (x, y, w, h, shape) {\n            // FIXME\n            shape.x1 = x;\n            shape.y1 = y + h / 2;\n            shape.x2 = x + w;\n            shape.y2 = y + h / 2;\n        },\n\n        rect: function (x, y, w, h, shape) {\n            shape.x = x;\n            shape.y = y;\n            shape.width = w;\n            shape.height = h;\n        },\n\n        roundRect: function (x, y, w, h, shape) {\n            shape.x = x;\n            shape.y = y;\n            shape.width = w;\n            shape.height = h;\n            shape.r = Math.min(w, h) / 4;\n        },\n\n        square: function (x, y, w, h, shape) {\n            var size = Math.min(w, h);\n            shape.x = x;\n            shape.y = y;\n            shape.width = size;\n            shape.height = size;\n        },\n\n        circle: function (x, y, w, h, shape) {\n            // Put circle in the center of square\n            shape.cx = x + w / 2;\n            shape.cy = y + h / 2;\n            shape.r = Math.min(w, h) / 2;\n        },\n\n        diamond: function (x, y, w, h, shape) {\n            shape.cx = x + w / 2;\n            shape.cy = y + h / 2;\n            shape.width = w;\n            shape.height = h;\n        },\n\n        pin: function (x, y, w, h, shape) {\n            shape.x = x + w / 2;\n            shape.y = y + h / 2;\n            shape.width = w;\n            shape.height = h;\n        },\n\n        arrow: function (x, y, w, h, shape) {\n            shape.x = x + w / 2;\n            shape.y = y + h / 2;\n            shape.width = w;\n            shape.height = h;\n        },\n\n        triangle: function (x, y, w, h, shape) {\n            shape.cx = x + w / 2;\n            shape.cy = y + h / 2;\n            shape.width = w;\n            shape.height = h;\n        }\n    };\n\n    var symbolBuildProxies = {};\n    for (var name in symbolCtors) {\n        if (symbolCtors.hasOwnProperty(name)) {\n            symbolBuildProxies[name] = new symbolCtors[name]();\n        }\n    }\n\n    var Symbol = graphic.extendShape({\n\n        type: 'symbol',\n\n        shape: {\n            symbolType: '',\n            x: 0,\n            y: 0,\n            width: 0,\n            height: 0\n        },\n\n        beforeBrush: function () {\n            var style = this.style;\n            var shape = this.shape;\n            // FIXME\n            if (shape.symbolType === 'pin' && style.textPosition === 'inside') {\n                style.textPosition = ['50%', '40%'];\n                style.textAlign = 'center';\n                style.textVerticalAlign = 'middle';\n            }\n        },\n\n        buildPath: function (ctx, shape, inBundle) {\n            var symbolType = shape.symbolType;\n            var proxySymbol = symbolBuildProxies[symbolType];\n            if (shape.symbolType !== 'none') {\n                if (!proxySymbol) {\n                    // Default rect\n                    symbolType = 'rect';\n                    proxySymbol = symbolBuildProxies[symbolType];\n                }\n                symbolShapeMakers[symbolType](\n                    shape.x, shape.y, shape.width, shape.height, proxySymbol.shape\n                );\n                proxySymbol.buildPath(ctx, proxySymbol.shape, inBundle);\n            }\n        }\n    });\n\n    // Provide setColor helper method to avoid determine if set the fill or stroke outside\n    var symbolPathSetColor = function (color) {\n        if (this.type !== 'image') {\n            var symbolStyle = this.style;\n            var symbolShape = this.shape;\n            if (symbolShape && symbolShape.symbolType === 'line') {\n                symbolStyle.stroke = color;\n            }\n            else if (this.__isEmptyBrush) {\n                symbolStyle.stroke = color;\n                symbolStyle.fill = '#fff';\n            }\n            else {\n                // FIXME 判断图形默认是填充还是描边，使用 onlyStroke ?\n                symbolStyle.fill && (symbolStyle.fill = color);\n                symbolStyle.stroke && (symbolStyle.stroke = color);\n            }\n            this.dirty(false);\n        }\n    };\n\n    var symbolUtil = {\n        /**\n         * Create a symbol element with given symbol configuration: shape, x, y, width, height, color\n         * @param {string} symbolType\n         * @param {number} x\n         * @param {number} y\n         * @param {number} w\n         * @param {number} h\n         * @param {string} color\n         */\n        createSymbol: function (symbolType, x, y, w, h, color) {\n            var isEmpty = symbolType.indexOf('empty') === 0;\n            if (isEmpty) {\n                symbolType = symbolType.substr(5, 1).toLowerCase() + symbolType.substr(6);\n            }\n            var symbolPath;\n\n            if (symbolType.indexOf('image://') === 0) {\n                symbolPath = new graphic.Image({\n                    style: {\n                        image: symbolType.slice(8),\n                        x: x,\n                        y: y,\n                        width: w,\n                        height: h\n                    }\n                });\n            }\n            else if (symbolType.indexOf('path://') === 0) {\n                symbolPath = graphic.makePath(symbolType.slice(7), {}, new BoundingRect(x, y, w, h));\n            }\n            else {\n                symbolPath = new Symbol({\n                    shape: {\n                        symbolType: symbolType,\n                        x: x,\n                        y: y,\n                        width: w,\n                        height: h\n                    }\n                });\n            }\n\n            symbolPath.__isEmptyBrush = isEmpty;\n\n            symbolPath.setColor = symbolPathSetColor;\n\n            symbolPath.setColor(color);\n\n            return symbolPath;\n        }\n    };\n\n    module.exports = symbolUtil;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/util/symbol.js\n// module id = 353\n// module chunks = 0 1 2 3 4","\n\n    var Group = require('zrender/lib/container/Group');\n    var componentUtil = require('../util/component');\n    var clazzUtil = require('../util/clazz');\n    var modelUtil = require('../util/model');\n    var zrUtil = require('zrender/lib/core/util');\n\n    function Chart() {\n\n        /**\n         * @type {module:zrender/container/Group}\n         * @readOnly\n         */\n        this.group = new Group();\n\n        /**\n         * @type {string}\n         * @readOnly\n         */\n        this.uid = componentUtil.getUID('viewChart');\n    }\n\n    Chart.prototype = {\n\n        type: 'chart',\n\n        /**\n         * Init the chart\n         * @param  {module:echarts/model/Global} ecModel\n         * @param  {module:echarts/ExtensionAPI} api\n         */\n        init: function (ecModel, api) {},\n\n        /**\n         * Render the chart\n         * @param  {module:echarts/model/Series} seriesModel\n         * @param  {module:echarts/model/Global} ecModel\n         * @param  {module:echarts/ExtensionAPI} api\n         * @param  {Object} payload\n         */\n        render: function (seriesModel, ecModel, api, payload) {},\n\n        /**\n         * Highlight series or specified data item\n         * @param  {module:echarts/model/Series} seriesModel\n         * @param  {module:echarts/model/Global} ecModel\n         * @param  {module:echarts/ExtensionAPI} api\n         * @param  {Object} payload\n         */\n        highlight: function (seriesModel, ecModel, api, payload) {\n            toggleHighlight(seriesModel.getData(), payload, 'emphasis');\n        },\n\n        /**\n         * Downplay series or specified data item\n         * @param  {module:echarts/model/Series} seriesModel\n         * @param  {module:echarts/model/Global} ecModel\n         * @param  {module:echarts/ExtensionAPI} api\n         * @param  {Object} payload\n         */\n        downplay: function (seriesModel, ecModel, api, payload) {\n            toggleHighlight(seriesModel.getData(), payload, 'normal');\n        },\n\n        /**\n         * Remove self\n         * @param  {module:echarts/model/Global} ecModel\n         * @param  {module:echarts/ExtensionAPI} api\n         */\n        remove: function (ecModel, api) {\n            this.group.removeAll();\n        },\n\n        /**\n         * Dispose self\n         * @param  {module:echarts/model/Global} ecModel\n         * @param  {module:echarts/ExtensionAPI} api\n         */\n        dispose: function () {}\n\n        /**\n         * The view contains the given point.\n         * @interface\n         * @param {Array.<number>} point\n         * @return {boolean}\n         */\n        // containPoint: function () {}\n\n    };\n\n    var chartProto = Chart.prototype;\n    chartProto.updateView\n        = chartProto.updateLayout\n        = chartProto.updateVisual\n        = function (seriesModel, ecModel, api, payload) {\n            this.render(seriesModel, ecModel, api, payload);\n        };\n\n    /**\n     * Set state of single element\n     * @param  {module:zrender/Element} el\n     * @param  {string} state\n     */\n    function elSetState(el, state) {\n        if (el) {\n            el.trigger(state);\n            if (el.type === 'group') {\n                for (var i = 0; i < el.childCount(); i++) {\n                    elSetState(el.childAt(i), state);\n                }\n            }\n        }\n    }\n    /**\n     * @param  {module:echarts/data/List} data\n     * @param  {Object} payload\n     * @param  {string} state 'normal'|'emphasis'\n     * @inner\n     */\n    function toggleHighlight(data, payload, state) {\n        var dataIndex = modelUtil.queryDataIndex(data, payload);\n\n        if (dataIndex != null) {\n            zrUtil.each(modelUtil.normalizeToArray(dataIndex), function (dataIdx) {\n                elSetState(data.getItemGraphicEl(dataIdx), state);\n            });\n        }\n        else {\n            data.eachItemGraphicEl(function (el) {\n                elSetState(el, state);\n            });\n        }\n    }\n\n    // Enable Chart.extend.\n    clazzUtil.enableClassExtend(Chart, ['dispose']);\n\n    // Add capability of registerClass, getClass, hasClass, registerSubTypeDefaulter and so on.\n    clazzUtil.enableClassManagement(Chart, {registerWhenExtend: true});\n\n    module.exports = Chart;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/view/Chart.js\n// module id = 354\n// module chunks = 0 1 2 3 4","'use strict';\n/**\n * @module zrender/Element\n */\n\n\n    var guid = require('./core/guid');\n    var Eventful = require('./mixin/Eventful');\n    var Transformable = require('./mixin/Transformable');\n    var Animatable = require('./mixin/Animatable');\n    var zrUtil = require('./core/util');\n\n    /**\n     * @alias module:zrender/Element\n     * @constructor\n     * @extends {module:zrender/mixin/Animatable}\n     * @extends {module:zrender/mixin/Transformable}\n     * @extends {module:zrender/mixin/Eventful}\n     */\n    var Element = function (opts) {\n\n        Transformable.call(this, opts);\n        Eventful.call(this, opts);\n        Animatable.call(this, opts);\n\n        /**\n         * 画布元素ID\n         * @type {string}\n         */\n        this.id = opts.id || guid();\n    };\n\n    Element.prototype = {\n\n        /**\n         * 元素类型\n         * Element type\n         * @type {string}\n         */\n        type: 'element',\n\n        /**\n         * 元素名字\n         * Element name\n         * @type {string}\n         */\n        name: '',\n\n        /**\n         * ZRender 实例对象，会在 element 添加到 zrender 实例中后自动赋值\n         * ZRender instance will be assigned when element is associated with zrender\n         * @name module:/zrender/Element#__zr\n         * @type {module:zrender/ZRender}\n         */\n        __zr: null,\n\n        /**\n         * 图形是否忽略，为true时忽略图形的绘制以及事件触发\n         * If ignore drawing and events of the element object\n         * @name module:/zrender/Element#ignore\n         * @type {boolean}\n         * @default false\n         */\n        ignore: false,\n\n        /**\n         * 用于裁剪的路径(shape)，所有 Group 内的路径在绘制时都会被这个路径裁剪\n         * 该路径会继承被裁减对象的变换\n         * @type {module:zrender/graphic/Path}\n         * @see http://www.w3.org/TR/2dcontext/#clipping-region\n         * @readOnly\n         */\n        clipPath: null,\n\n        /**\n         * Drift element\n         * @param  {number} dx dx on the global space\n         * @param  {number} dy dy on the global space\n         */\n        drift: function (dx, dy) {\n            switch (this.draggable) {\n                case 'horizontal':\n                    dy = 0;\n                    break;\n                case 'vertical':\n                    dx = 0;\n                    break;\n            }\n\n            var m = this.transform;\n            if (!m) {\n                m = this.transform = [1, 0, 0, 1, 0, 0];\n            }\n            m[4] += dx;\n            m[5] += dy;\n\n            this.decomposeTransform();\n            this.dirty(false);\n        },\n\n        /**\n         * Hook before update\n         */\n        beforeUpdate: function () {},\n        /**\n         * Hook after update\n         */\n        afterUpdate: function () {},\n        /**\n         * Update each frame\n         */\n        update: function () {\n            this.updateTransform();\n        },\n\n        /**\n         * @param  {Function} cb\n         * @param  {}   context\n         */\n        traverse: function (cb, context) {},\n\n        /**\n         * @protected\n         */\n        attrKV: function (key, value) {\n            if (key === 'position' || key === 'scale' || key === 'origin') {\n                // Copy the array\n                if (value) {\n                    var target = this[key];\n                    if (!target) {\n                        target = this[key] = [];\n                    }\n                    target[0] = value[0];\n                    target[1] = value[1];\n                }\n            }\n            else {\n                this[key] = value;\n            }\n        },\n\n        /**\n         * Hide the element\n         */\n        hide: function () {\n            this.ignore = true;\n            this.__zr && this.__zr.refresh();\n        },\n\n        /**\n         * Show the element\n         */\n        show: function () {\n            this.ignore = false;\n            this.__zr && this.__zr.refresh();\n        },\n\n        /**\n         * @param {string|Object} key\n         * @param {*} value\n         */\n        attr: function (key, value) {\n            if (typeof key === 'string') {\n                this.attrKV(key, value);\n            }\n            else if (zrUtil.isObject(key)) {\n                for (var name in key) {\n                    if (key.hasOwnProperty(name)) {\n                        this.attrKV(name, key[name]);\n                    }\n                }\n            }\n\n            this.dirty(false);\n\n            return this;\n        },\n\n        /**\n         * @param {module:zrender/graphic/Path} clipPath\n         */\n        setClipPath: function (clipPath) {\n            var zr = this.__zr;\n            if (zr) {\n                clipPath.addSelfToZr(zr);\n            }\n\n            // Remove previous clip path\n            if (this.clipPath && this.clipPath !== clipPath) {\n                this.removeClipPath();\n            }\n\n            this.clipPath = clipPath;\n            clipPath.__zr = zr;\n            clipPath.__clipTarget = this;\n\n            this.dirty(false);\n        },\n\n        /**\n         */\n        removeClipPath: function () {\n            var clipPath = this.clipPath;\n            if (clipPath) {\n                if (clipPath.__zr) {\n                    clipPath.removeSelfFromZr(clipPath.__zr);\n                }\n\n                clipPath.__zr = null;\n                clipPath.__clipTarget = null;\n                this.clipPath = null;\n\n                this.dirty(false);\n            }\n        },\n\n        /**\n         * Add self from zrender instance.\n         * Not recursively because it will be invoked when element added to storage.\n         * @param {module:zrender/ZRender} zr\n         */\n        addSelfToZr: function (zr) {\n            this.__zr = zr;\n            // 添加动画\n            var animators = this.animators;\n            if (animators) {\n                for (var i = 0; i < animators.length; i++) {\n                    zr.animation.addAnimator(animators[i]);\n                }\n            }\n\n            if (this.clipPath) {\n                this.clipPath.addSelfToZr(zr);\n            }\n        },\n\n        /**\n         * Remove self from zrender instance.\n         * Not recursively because it will be invoked when element added to storage.\n         * @param {module:zrender/ZRender} zr\n         */\n        removeSelfFromZr: function (zr) {\n            this.__zr = null;\n            // 移除动画\n            var animators = this.animators;\n            if (animators) {\n                for (var i = 0; i < animators.length; i++) {\n                    zr.animation.removeAnimator(animators[i]);\n                }\n            }\n\n            if (this.clipPath) {\n                this.clipPath.removeSelfFromZr(zr);\n            }\n        }\n    };\n\n    zrUtil.mixin(Element, Animatable);\n    zrUtil.mixin(Element, Transformable);\n    zrUtil.mixin(Element, Eventful);\n\n    module.exports = Element;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/zrender/lib/Element.js\n// module id = 355\n// module chunks = 0 1 2 3 4","/**\n * @module echarts/animation/Animator\n */\n\n\n    var Clip = require('./Clip');\n    var color = require('../tool/color');\n    var util = require('../core/util');\n    var isArrayLike = util.isArrayLike;\n\n    var arraySlice = Array.prototype.slice;\n\n    function defaultGetter(target, key) {\n        return target[key];\n    }\n\n    function defaultSetter(target, key, value) {\n        target[key] = value;\n    }\n\n    /**\n     * @param  {number} p0\n     * @param  {number} p1\n     * @param  {number} percent\n     * @return {number}\n     */\n    function interpolateNumber(p0, p1, percent) {\n        return (p1 - p0) * percent + p0;\n    }\n\n    /**\n     * @param  {string} p0\n     * @param  {string} p1\n     * @param  {number} percent\n     * @return {string}\n     */\n    function interpolateString(p0, p1, percent) {\n        return percent > 0.5 ? p1 : p0;\n    }\n\n    /**\n     * @param  {Array} p0\n     * @param  {Array} p1\n     * @param  {number} percent\n     * @param  {Array} out\n     * @param  {number} arrDim\n     */\n    function interpolateArray(p0, p1, percent, out, arrDim) {\n        var len = p0.length;\n        if (arrDim == 1) {\n            for (var i = 0; i < len; i++) {\n                out[i] = interpolateNumber(p0[i], p1[i], percent);\n            }\n        }\n        else {\n            var len2 = p0[0].length;\n            for (var i = 0; i < len; i++) {\n                for (var j = 0; j < len2; j++) {\n                    out[i][j] = interpolateNumber(\n                        p0[i][j], p1[i][j], percent\n                    );\n                }\n            }\n        }\n    }\n\n    // arr0 is source array, arr1 is target array.\n    // Do some preprocess to avoid error happened when interpolating from arr0 to arr1\n    function fillArr(arr0, arr1, arrDim) {\n        var arr0Len = arr0.length;\n        var arr1Len = arr1.length;\n        if (arr0Len !== arr1Len) {\n            // FIXME Not work for TypedArray\n            var isPreviousLarger = arr0Len > arr1Len;\n            if (isPreviousLarger) {\n                // Cut the previous\n                arr0.length = arr1Len;\n            }\n            else {\n                // Fill the previous\n                for (var i = arr0Len; i < arr1Len; i++) {\n                    arr0.push(\n                        arrDim === 1 ? arr1[i] : arraySlice.call(arr1[i])\n                    );\n                }\n            }\n        }\n        // Handling NaN value\n        var len2 = arr0[0] && arr0[0].length;\n        for (var i = 0; i < arr0.length; i++) {\n            if (arrDim === 1) {\n                if (isNaN(arr0[i])) {\n                    arr0[i] = arr1[i];\n                }\n            }\n            else {\n                for (var j = 0; j < len2; j++) {\n                    if (isNaN(arr0[i][j])) {\n                        arr0[i][j] = arr1[i][j];\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * @param  {Array} arr0\n     * @param  {Array} arr1\n     * @param  {number} arrDim\n     * @return {boolean}\n     */\n    function isArraySame(arr0, arr1, arrDim) {\n        if (arr0 === arr1) {\n            return true;\n        }\n        var len = arr0.length;\n        if (len !== arr1.length) {\n            return false;\n        }\n        if (arrDim === 1) {\n            for (var i = 0; i < len; i++) {\n                if (arr0[i] !== arr1[i]) {\n                    return false;\n                }\n            }\n        }\n        else {\n            var len2 = arr0[0].length;\n            for (var i = 0; i < len; i++) {\n                for (var j = 0; j < len2; j++) {\n                    if (arr0[i][j] !== arr1[i][j]) {\n                        return false;\n                    }\n                }\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Catmull Rom interpolate array\n     * @param  {Array} p0\n     * @param  {Array} p1\n     * @param  {Array} p2\n     * @param  {Array} p3\n     * @param  {number} t\n     * @param  {number} t2\n     * @param  {number} t3\n     * @param  {Array} out\n     * @param  {number} arrDim\n     */\n    function catmullRomInterpolateArray(\n        p0, p1, p2, p3, t, t2, t3, out, arrDim\n    ) {\n        var len = p0.length;\n        if (arrDim == 1) {\n            for (var i = 0; i < len; i++) {\n                out[i] = catmullRomInterpolate(\n                    p0[i], p1[i], p2[i], p3[i], t, t2, t3\n                );\n            }\n        }\n        else {\n            var len2 = p0[0].length;\n            for (var i = 0; i < len; i++) {\n                for (var j = 0; j < len2; j++) {\n                    out[i][j] = catmullRomInterpolate(\n                        p0[i][j], p1[i][j], p2[i][j], p3[i][j],\n                        t, t2, t3\n                    );\n                }\n            }\n        }\n    }\n\n    /**\n     * Catmull Rom interpolate number\n     * @param  {number} p0\n     * @param  {number} p1\n     * @param  {number} p2\n     * @param  {number} p3\n     * @param  {number} t\n     * @param  {number} t2\n     * @param  {number} t3\n     * @return {number}\n     */\n    function catmullRomInterpolate(p0, p1, p2, p3, t, t2, t3) {\n        var v0 = (p2 - p0) * 0.5;\n        var v1 = (p3 - p1) * 0.5;\n        return (2 * (p1 - p2) + v0 + v1) * t3\n                + (-3 * (p1 - p2) - 2 * v0 - v1) * t2\n                + v0 * t + p1;\n    }\n\n    function cloneValue(value) {\n        if (isArrayLike(value)) {\n            var len = value.length;\n            if (isArrayLike(value[0])) {\n                var ret = [];\n                for (var i = 0; i < len; i++) {\n                    ret.push(arraySlice.call(value[i]));\n                }\n                return ret;\n            }\n\n            return arraySlice.call(value);\n        }\n\n        return value;\n    }\n\n    function rgba2String(rgba) {\n        rgba[0] = Math.floor(rgba[0]);\n        rgba[1] = Math.floor(rgba[1]);\n        rgba[2] = Math.floor(rgba[2]);\n\n        return 'rgba(' + rgba.join(',') + ')';\n    }\n\n    function createTrackClip (animator, easing, oneTrackDone, keyframes, propName) {\n        var getter = animator._getter;\n        var setter = animator._setter;\n        var useSpline = easing === 'spline';\n\n        var trackLen = keyframes.length;\n        if (!trackLen) {\n            return;\n        }\n        // Guess data type\n        var firstVal = keyframes[0].value;\n        var isValueArray = isArrayLike(firstVal);\n        var isValueColor = false;\n        var isValueString = false;\n\n        // For vertices morphing\n        var arrDim = (\n                isValueArray\n                && isArrayLike(firstVal[0])\n            )\n            ? 2 : 1;\n        var trackMaxTime;\n        // Sort keyframe as ascending\n        keyframes.sort(function(a, b) {\n            return a.time - b.time;\n        });\n\n        trackMaxTime = keyframes[trackLen - 1].time;\n        // Percents of each keyframe\n        var kfPercents = [];\n        // Value of each keyframe\n        var kfValues = [];\n        var prevValue = keyframes[0].value;\n        var isAllValueEqual = true;\n        for (var i = 0; i < trackLen; i++) {\n            kfPercents.push(keyframes[i].time / trackMaxTime);\n            // Assume value is a color when it is a string\n            var value = keyframes[i].value;\n\n            // Check if value is equal, deep check if value is array\n            if (!((isValueArray && isArraySame(value, prevValue, arrDim))\n                || (!isValueArray && value === prevValue))) {\n                isAllValueEqual = false;\n            }\n            prevValue = value;\n\n            // Try converting a string to a color array\n            if (typeof value == 'string') {\n                var colorArray = color.parse(value);\n                if (colorArray) {\n                    value = colorArray;\n                    isValueColor = true;\n                }\n                else {\n                    isValueString = true;\n                }\n            }\n            kfValues.push(value);\n        }\n        if (isAllValueEqual) {\n            return;\n        }\n\n        var lastValue = kfValues[trackLen - 1];\n        // Polyfill array and NaN value\n        for (var i = 0; i < trackLen - 1; i++) {\n            if (isValueArray) {\n                fillArr(kfValues[i], lastValue, arrDim);\n            }\n            else {\n                if (isNaN(kfValues[i]) && !isNaN(lastValue) && !isValueString && !isValueColor) {\n                    kfValues[i] = lastValue;\n                }\n            }\n        }\n        isValueArray && fillArr(getter(animator._target, propName), lastValue, arrDim);\n\n        // Cache the key of last frame to speed up when\n        // animation playback is sequency\n        var lastFrame = 0;\n        var lastFramePercent = 0;\n        var start;\n        var w;\n        var p0;\n        var p1;\n        var p2;\n        var p3;\n\n        if (isValueColor) {\n            var rgba = [0, 0, 0, 0];\n        }\n\n        var onframe = function (target, percent) {\n            // Find the range keyframes\n            // kf1-----kf2---------current--------kf3\n            // find kf2 and kf3 and do interpolation\n            var frame;\n            // In the easing function like elasticOut, percent may less than 0\n            if (percent < 0) {\n                frame = 0;\n            }\n            else if (percent < lastFramePercent) {\n                // Start from next key\n                // PENDING start from lastFrame ?\n                start = Math.min(lastFrame + 1, trackLen - 1);\n                for (frame = start; frame >= 0; frame--) {\n                    if (kfPercents[frame] <= percent) {\n                        break;\n                    }\n                }\n                // PENDING really need to do this ?\n                frame = Math.min(frame, trackLen - 2);\n            }\n            else {\n                for (frame = lastFrame; frame < trackLen; frame++) {\n                    if (kfPercents[frame] > percent) {\n                        break;\n                    }\n                }\n                frame = Math.min(frame - 1, trackLen - 2);\n            }\n            lastFrame = frame;\n            lastFramePercent = percent;\n\n            var range = (kfPercents[frame + 1] - kfPercents[frame]);\n            if (range === 0) {\n                return;\n            }\n            else {\n                w = (percent - kfPercents[frame]) / range;\n            }\n            if (useSpline) {\n                p1 = kfValues[frame];\n                p0 = kfValues[frame === 0 ? frame : frame - 1];\n                p2 = kfValues[frame > trackLen - 2 ? trackLen - 1 : frame + 1];\n                p3 = kfValues[frame > trackLen - 3 ? trackLen - 1 : frame + 2];\n                if (isValueArray) {\n                    catmullRomInterpolateArray(\n                        p0, p1, p2, p3, w, w * w, w * w * w,\n                        getter(target, propName),\n                        arrDim\n                    );\n                }\n                else {\n                    var value;\n                    if (isValueColor) {\n                        value = catmullRomInterpolateArray(\n                            p0, p1, p2, p3, w, w * w, w * w * w,\n                            rgba, 1\n                        );\n                        value = rgba2String(rgba);\n                    }\n                    else if (isValueString) {\n                        // String is step(0.5)\n                        return interpolateString(p1, p2, w);\n                    }\n                    else {\n                        value = catmullRomInterpolate(\n                            p0, p1, p2, p3, w, w * w, w * w * w\n                        );\n                    }\n                    setter(\n                        target,\n                        propName,\n                        value\n                    );\n                }\n            }\n            else {\n                if (isValueArray) {\n                    interpolateArray(\n                        kfValues[frame], kfValues[frame + 1], w,\n                        getter(target, propName),\n                        arrDim\n                    );\n                }\n                else {\n                    var value;\n                    if (isValueColor) {\n                        interpolateArray(\n                            kfValues[frame], kfValues[frame + 1], w,\n                            rgba, 1\n                        );\n                        value = rgba2String(rgba);\n                    }\n                    else if (isValueString) {\n                        // String is step(0.5)\n                        return interpolateString(kfValues[frame], kfValues[frame + 1], w);\n                    }\n                    else {\n                        value = interpolateNumber(kfValues[frame], kfValues[frame + 1], w);\n                    }\n                    setter(\n                        target,\n                        propName,\n                        value\n                    );\n                }\n            }\n        };\n\n        var clip = new Clip({\n            target: animator._target,\n            life: trackMaxTime,\n            loop: animator._loop,\n            delay: animator._delay,\n            onframe: onframe,\n            ondestroy: oneTrackDone\n        });\n\n        if (easing && easing !== 'spline') {\n            clip.easing = easing;\n        }\n\n        return clip;\n    }\n\n    /**\n     * @alias module:zrender/animation/Animator\n     * @constructor\n     * @param {Object} target\n     * @param {boolean} loop\n     * @param {Function} getter\n     * @param {Function} setter\n     */\n    var Animator = function(target, loop, getter, setter) {\n        this._tracks = {};\n        this._target = target;\n\n        this._loop = loop || false;\n\n        this._getter = getter || defaultGetter;\n        this._setter = setter || defaultSetter;\n\n        this._clipCount = 0;\n\n        this._delay = 0;\n\n        this._doneList = [];\n\n        this._onframeList = [];\n\n        this._clipList = [];\n    };\n\n    Animator.prototype = {\n        /**\n         * 设置动画关键帧\n         * @param  {number} time 关键帧时间，单位是ms\n         * @param  {Object} props 关键帧的属性值，key-value表示\n         * @return {module:zrender/animation/Animator}\n         */\n        when: function(time /* ms */, props) {\n            var tracks = this._tracks;\n            for (var propName in props) {\n                if (!props.hasOwnProperty(propName)) {\n                    continue;\n                }\n\n                if (!tracks[propName]) {\n                    tracks[propName] = [];\n                    // Invalid value\n                    var value = this._getter(this._target, propName);\n                    if (value == null) {\n                        // zrLog('Invalid property ' + propName);\n                        continue;\n                    }\n                    // If time is 0\n                    //  Then props is given initialize value\n                    // Else\n                    //  Initialize value from current prop value\n                    if (time !== 0) {\n                        tracks[propName].push({\n                            time: 0,\n                            value: cloneValue(value)\n                        });\n                    }\n                }\n                tracks[propName].push({\n                    time: time,\n                    value: props[propName]\n                });\n            }\n            return this;\n        },\n        /**\n         * 添加动画每一帧的回调函数\n         * @param  {Function} callback\n         * @return {module:zrender/animation/Animator}\n         */\n        during: function (callback) {\n            this._onframeList.push(callback);\n            return this;\n        },\n\n        pause: function () {\n            for (var i = 0; i < this._clipList.length; i++) {\n                this._clipList[i].pause();\n            }\n            this._paused = true;\n        },\n\n        resume: function () {\n            for (var i = 0; i < this._clipList.length; i++) {\n                this._clipList[i].resume();\n            }\n            this._paused = false;\n        },\n\n        isPaused: function () {\n            return !!this._paused;\n        },\n\n        _doneCallback: function () {\n            // Clear all tracks\n            this._tracks = {};\n            // Clear all clips\n            this._clipList.length = 0;\n\n            var doneList = this._doneList;\n            var len = doneList.length;\n            for (var i = 0; i < len; i++) {\n                doneList[i].call(this);\n            }\n        },\n        /**\n         * 开始执行动画\n         * @param  {string|Function} easing\n         *         动画缓动函数，详见{@link module:zrender/animation/easing}\n         * @return {module:zrender/animation/Animator}\n         */\n        start: function (easing) {\n\n            var self = this;\n            var clipCount = 0;\n\n            var oneTrackDone = function() {\n                clipCount--;\n                if (!clipCount) {\n                    self._doneCallback();\n                }\n            };\n\n            var lastClip;\n            for (var propName in this._tracks) {\n                if (!this._tracks.hasOwnProperty(propName)) {\n                    continue;\n                }\n                var clip = createTrackClip(\n                    this, easing, oneTrackDone,\n                    this._tracks[propName], propName\n                );\n                if (clip) {\n                    this._clipList.push(clip);\n                    clipCount++;\n\n                    // If start after added to animation\n                    if (this.animation) {\n                        this.animation.addClip(clip);\n                    }\n\n                    lastClip = clip;\n                }\n            }\n\n            // Add during callback on the last clip\n            if (lastClip) {\n                var oldOnFrame = lastClip.onframe;\n                lastClip.onframe = function (target, percent) {\n                    oldOnFrame(target, percent);\n\n                    for (var i = 0; i < self._onframeList.length; i++) {\n                        self._onframeList[i](target, percent);\n                    }\n                };\n            }\n\n            if (!clipCount) {\n                this._doneCallback();\n            }\n            return this;\n        },\n        /**\n         * 停止动画\n         * @param {boolean} forwardToLast If move to last frame before stop\n         */\n        stop: function (forwardToLast) {\n            var clipList = this._clipList;\n            var animation = this.animation;\n            for (var i = 0; i < clipList.length; i++) {\n                var clip = clipList[i];\n                if (forwardToLast) {\n                    // Move to last frame before stop\n                    clip.onframe(this._target, 1);\n                }\n                animation && animation.removeClip(clip);\n            }\n            clipList.length = 0;\n        },\n        /**\n         * 设置动画延迟开始的时间\n         * @param  {number} time 单位ms\n         * @return {module:zrender/animation/Animator}\n         */\n        delay: function (time) {\n            this._delay = time;\n            return this;\n        },\n        /**\n         * 添加动画结束的回调\n         * @param  {Function} cb\n         * @return {module:zrender/animation/Animator}\n         */\n        done: function(cb) {\n            if (cb) {\n                this._doneList.push(cb);\n            }\n            return this;\n        },\n\n        /**\n         * @return {Array.<module:zrender/animation/Clip>}\n         */\n        getClips: function () {\n            return this._clipList;\n        }\n    };\n\n    module.exports = Animator;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/zrender/lib/animation/Animator.js\n// module id = 356\n// module chunks = 0 1 2 3 4","\n\n    module.exports = (typeof window !== 'undefined' &&\n                                    (window.requestAnimationFrame\n                                    || window.msRequestAnimationFrame\n                                    || window.mozRequestAnimationFrame\n                                    || window.webkitRequestAnimationFrame))\n                                || function (func) {\n                                    setTimeout(func, 16);\n                                };\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/zrender/lib/animation/requestAnimationFrame.js\n// module id = 357\n// module chunks = 0 1 2 3 4","\n\n    var PI2 = Math.PI * 2;\n    module.exports = {\n        normalizeRadian: function(angle) {\n            angle %= PI2;\n            if (angle < 0) {\n                angle += PI2;\n            }\n            return angle;\n        }\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/zrender/lib/contain/util.js\n// module id = 358\n// module chunks = 0 1 2 3 4","// Simple LRU cache use doubly linked list\n// @module zrender/core/LRU\n\n\n    /**\n     * Simple double linked list. Compared with array, it has O(1) remove operation.\n     * @constructor\n     */\n    var LinkedList = function () {\n\n        /**\n         * @type {module:zrender/core/LRU~Entry}\n         */\n        this.head = null;\n\n        /**\n         * @type {module:zrender/core/LRU~Entry}\n         */\n        this.tail = null;\n\n        this._len = 0;\n    };\n\n    var linkedListProto = LinkedList.prototype;\n    /**\n     * Insert a new value at the tail\n     * @param  {} val\n     * @return {module:zrender/core/LRU~Entry}\n     */\n    linkedListProto.insert = function (val) {\n        var entry = new Entry(val);\n        this.insertEntry(entry);\n        return entry;\n    };\n\n    /**\n     * Insert an entry at the tail\n     * @param  {module:zrender/core/LRU~Entry} entry\n     */\n    linkedListProto.insertEntry = function (entry) {\n        if (!this.head) {\n            this.head = this.tail = entry;\n        }\n        else {\n            this.tail.next = entry;\n            entry.prev = this.tail;\n            entry.next = null;\n            this.tail = entry;\n        }\n        this._len++;\n    };\n\n    /**\n     * Remove entry.\n     * @param  {module:zrender/core/LRU~Entry} entry\n     */\n    linkedListProto.remove = function (entry) {\n        var prev = entry.prev;\n        var next = entry.next;\n        if (prev) {\n            prev.next = next;\n        }\n        else {\n            // Is head\n            this.head = next;\n        }\n        if (next) {\n            next.prev = prev;\n        }\n        else {\n            // Is tail\n            this.tail = prev;\n        }\n        entry.next = entry.prev = null;\n        this._len--;\n    };\n\n    /**\n     * @return {number}\n     */\n    linkedListProto.len = function () {\n        return this._len;\n    };\n\n    /**\n     * Clear list\n     */\n    linkedListProto.clear = function () {\n        this.head = this.tail = null;\n        this._len = 0;\n    };\n\n    /**\n     * @constructor\n     * @param {} val\n     */\n    var Entry = function (val) {\n        /**\n         * @type {}\n         */\n        this.value = val;\n\n        /**\n         * @type {module:zrender/core/LRU~Entry}\n         */\n        this.next;\n\n        /**\n         * @type {module:zrender/core/LRU~Entry}\n         */\n        this.prev;\n    };\n\n    /**\n     * LRU Cache\n     * @constructor\n     * @alias module:zrender/core/LRU\n     */\n    var LRU = function (maxSize) {\n\n        this._list = new LinkedList();\n\n        this._map = {};\n\n        this._maxSize = maxSize || 10;\n\n        this._lastRemovedEntry = null;\n    };\n\n    var LRUProto = LRU.prototype;\n\n    /**\n     * @param  {string} key\n     * @param  {} value\n     * @return {} Removed value\n     */\n    LRUProto.put = function (key, value) {\n        var list = this._list;\n        var map = this._map;\n        var removed = null;\n        if (map[key] == null) {\n            var len = list.len();\n            // Reuse last removed entry\n            var entry = this._lastRemovedEntry;\n\n            if (len >= this._maxSize && len > 0) {\n                // Remove the least recently used\n                var leastUsedEntry = list.head;\n                list.remove(leastUsedEntry);\n                delete map[leastUsedEntry.key];\n\n                removed = leastUsedEntry.value;\n                this._lastRemovedEntry = leastUsedEntry;\n            }\n\n            if (entry) {\n                entry.value = value;\n            }\n            else {\n                entry = new Entry(value);\n            }\n            entry.key = key;\n            list.insertEntry(entry);\n            map[key] = entry;\n        }\n\n        return removed;\n    };\n\n    /**\n     * @param  {string} key\n     * @return {}\n     */\n    LRUProto.get = function (key) {\n        var entry = this._map[key];\n        var list = this._list;\n        if (entry != null) {\n            // Put the latest used entry in the tail\n            if (entry !== list.tail) {\n                list.remove(entry);\n                list.insertEntry(entry);\n            }\n\n            return entry.value;\n        }\n    };\n\n    /**\n     * Clear the cache\n     */\n    LRUProto.clear = function () {\n        this._list.clear();\n        this._map = {};\n    };\n\n    module.exports = LRU;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/zrender/lib/core/LRU.js\n// module id = 359\n// module chunks = 0 1 2 3 4","/**\n * zrender: 生成唯一id\n *\n * @author errorrik (errorrik@gmail.com)\n */\n\n\n    var idStart = 0x0907;\n\n    module.exports = function () {\n        return idStart++;\n    };\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/zrender/lib/core/guid.js\n// module id = 360\n// module chunks = 0 1 2 3 4","\n        var config = require('../config');\n\n        /**\n         * @exports zrender/tool/log\n         * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)\n         */\n        module.exports = function() {\n            if (config.debugMode === 0) {\n                return;\n            }\n            else if (config.debugMode == 1) {\n                for (var k in arguments) {\n                    throw new Error(arguments[k]);\n                }\n            }\n            else if (config.debugMode > 1) {\n                for (var k in arguments) {\n                    console.log(arguments[k]);\n                }\n            }\n        };\n\n        /* for debug\n        return function(mes) {\n            document.getElementById('wrong-message').innerHTML =\n                mes + ' ' + (new Date() - 0)\n                + '<br/>'\n                + document.getElementById('wrong-message').innerHTML;\n        };\n        */\n    \n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/zrender/lib/core/log.js\n// module id = 361\n// module chunks = 0 1 2 3 4","/**\n * Image element\n * @module zrender/graphic/Image\n */\n\n\n\n    var Displayable = require('./Displayable');\n    var BoundingRect = require('../core/BoundingRect');\n    var zrUtil = require('../core/util');\n\n    var LRU = require('../core/LRU');\n    var globalImageCache = new LRU(50);\n    /**\n     * @alias zrender/graphic/Image\n     * @extends module:zrender/graphic/Displayable\n     * @constructor\n     * @param {Object} opts\n     */\n    function ZImage(opts) {\n        Displayable.call(this, opts);\n    }\n\n    ZImage.prototype = {\n\n        constructor: ZImage,\n\n        type: 'image',\n\n        brush: function (ctx, prevEl) {\n            var style = this.style;\n            var src = style.image;\n            var image;\n\n            // Must bind each time\n            style.bind(ctx, this, prevEl);\n            // style.image is a url string\n            if (typeof src === 'string') {\n                image = this._image;\n            }\n            // style.image is an HTMLImageElement or HTMLCanvasElement or Canvas\n            else {\n                image = src;\n            }\n            // FIXME Case create many images with src\n            if (!image && src) {\n                // Try get from global image cache\n                var cachedImgObj = globalImageCache.get(src);\n                if (!cachedImgObj) {\n                    // Create a new image\n                    image = new Image();\n                    image.onload = function () {\n                        image.onload = null;\n                        for (var i = 0; i < cachedImgObj.pending.length; i++) {\n                            cachedImgObj.pending[i].dirty();\n                        }\n                    };\n                    cachedImgObj = {\n                        image: image,\n                        pending: [this]\n                    };\n                    image.src = src;\n                    globalImageCache.put(src, cachedImgObj);\n                    this._image = image;\n                    return;\n                }\n                else {\n                    image = cachedImgObj.image;\n                    this._image = image;\n                    // Image is not complete finish, add to pending list\n                    if (!image.width || !image.height) {\n                        cachedImgObj.pending.push(this);\n                        return;\n                    }\n                }\n            }\n\n            if (image) {\n                // 图片已经加载完成\n                // if (image.nodeName.toUpperCase() == 'IMG') {\n                //     if (!image.complete) {\n                //         return;\n                //     }\n                // }\n                // Else is canvas\n\n                var x = style.x || 0;\n                var y = style.y || 0;\n                // 图片加载失败\n                if (!image.width || !image.height) {\n                    return;\n                }\n                var width = style.width;\n                var height = style.height;\n                var aspect = image.width / image.height;\n                if (width == null && height != null) {\n                    // Keep image/height ratio\n                    width = height * aspect;\n                }\n                else if (height == null && width != null) {\n                    height = width / aspect;\n                }\n                else if (width == null && height == null) {\n                    width = image.width;\n                    height = image.height;\n                }\n\n                // 设置transform\n                this.setTransform(ctx);\n\n                if (style.sWidth && style.sHeight) {\n                    var sx = style.sx || 0;\n                    var sy = style.sy || 0;\n                    ctx.drawImage(\n                        image,\n                        sx, sy, style.sWidth, style.sHeight,\n                        x, y, width, height\n                    );\n                }\n                else if (style.sx && style.sy) {\n                    var sx = style.sx;\n                    var sy = style.sy;\n                    var sWidth = width - sx;\n                    var sHeight = height - sy;\n                    ctx.drawImage(\n                        image,\n                        sx, sy, sWidth, sHeight,\n                        x, y, width, height\n                    );\n                }\n                else {\n                    ctx.drawImage(image, x, y, width, height);\n                }\n\n                this.restoreTransform(ctx);\n\n                // Draw rect text\n                if (style.text != null) {\n                    this.drawRectText(ctx, this.getBoundingRect());\n                }\n\n            }\n        },\n\n        getBoundingRect: function () {\n            var style = this.style;\n            if (! this._rect) {\n                this._rect = new BoundingRect(\n                    style.x || 0, style.y || 0, style.width || 0, style.height || 0\n                );\n            }\n            return this._rect;\n        }\n    };\n\n    zrUtil.inherits(ZImage, Displayable);\n\n    module.exports = ZImage;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/zrender/lib/graphic/Image.js\n// module id = 362\n// module chunks = 0 1 2 3 4","\n\n    var Pattern = function (image, repeat) {\n        // Should do nothing more in this constructor. Because gradient can be\n        // declard by `color: {image: ...}`, where this constructor will not be called.\n\n        this.image = image;\n        this.repeat = repeat;\n\n        // Can be cloned\n        this.type = 'pattern';\n    };\n\n    Pattern.prototype.getCanvasPattern = function (ctx) {\n        return ctx.createPattern(this.image, this.repeat || 'repeat');\n    };\n\n    module.exports = Pattern;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/zrender/lib/graphic/Pattern.js\n// module id = 363\n// module chunks = 0 1 2 3 4","/**\n * @module zrender/graphic/Style\n */\n\n\n    var STYLE_COMMON_PROPS = [\n        ['shadowBlur', 0], ['shadowOffsetX', 0], ['shadowOffsetY', 0], ['shadowColor', '#000'],\n        ['lineCap', 'butt'], ['lineJoin', 'miter'], ['miterLimit', 10]\n    ];\n\n    // var SHADOW_PROPS = STYLE_COMMON_PROPS.slice(0, 4);\n    // var LINE_PROPS = STYLE_COMMON_PROPS.slice(4);\n\n    var Style = function (opts) {\n        this.extendFrom(opts);\n    };\n\n    function createLinearGradient(ctx, obj, rect) {\n        var x = obj.x == null ? 0 : obj.x;\n        var x2 = obj.x2 == null ? 1 : obj.x2;\n        var y = obj.y == null ? 0 : obj.y;\n        var y2 = obj.y2 == null ? 0 : obj.y2;\n\n        if (!obj.global) {\n            x = x * rect.width + rect.x;\n            x2 = x2 * rect.width + rect.x;\n            y = y * rect.height + rect.y;\n            y2 = y2 * rect.height + rect.y;\n        }\n\n        var canvasGradient = ctx.createLinearGradient(x, y, x2, y2);\n\n        return canvasGradient;\n    }\n\n    function createRadialGradient(ctx, obj, rect) {\n        var width = rect.width;\n        var height = rect.height;\n        var min = Math.min(width, height);\n\n        var x = obj.x == null ? 0.5 : obj.x;\n        var y = obj.y == null ? 0.5 : obj.y;\n        var r = obj.r == null ? 0.5 : obj.r;\n        if (!obj.global) {\n            x = x * width + rect.x;\n            y = y * height + rect.y;\n            r = r * min;\n        }\n\n        var canvasGradient = ctx.createRadialGradient(x, y, 0, x, y, r);\n\n        return canvasGradient;\n    }\n\n\n    Style.prototype = {\n\n        constructor: Style,\n\n        /**\n         * @type {string}\n         */\n        fill: '#000000',\n\n        /**\n         * @type {string}\n         */\n        stroke: null,\n\n        /**\n         * @type {number}\n         */\n        opacity: 1,\n\n        /**\n         * @type {Array.<number>}\n         */\n        lineDash: null,\n\n        /**\n         * @type {number}\n         */\n        lineDashOffset: 0,\n\n        /**\n         * @type {number}\n         */\n        shadowBlur: 0,\n\n        /**\n         * @type {number}\n         */\n        shadowOffsetX: 0,\n\n        /**\n         * @type {number}\n         */\n        shadowOffsetY: 0,\n\n        /**\n         * @type {number}\n         */\n        lineWidth: 1,\n\n        /**\n         * If stroke ignore scale\n         * @type {Boolean}\n         */\n        strokeNoScale: false,\n\n        // Bounding rect text configuration\n        // Not affected by element transform\n        /**\n         * @type {string}\n         */\n        text: null,\n\n        /**\n         * @type {string}\n         */\n        textFill: '#000',\n\n        /**\n         * @type {string}\n         */\n        textStroke: null,\n\n        /**\n         * 'inside', 'left', 'right', 'top', 'bottom'\n         * [x, y]\n         * @type {string|Array.<number>}\n         * @default 'inside'\n         */\n        textPosition: 'inside',\n\n        /**\n         * [x, y]\n         * @type {Array.<number>}\n         */\n        textOffset: null,\n\n        /**\n         * @type {string}\n         */\n        textBaseline: null,\n\n        /**\n         * @type {string}\n         */\n        textAlign: null,\n\n        /**\n         * @type {string}\n         */\n        textVerticalAlign: null,\n\n        /**\n         * Only useful in Path and Image element\n         * @type {number}\n         */\n        textDistance: 5,\n\n        /**\n         * Only useful in Path and Image element\n         * @type {number}\n         */\n        textShadowBlur: 0,\n\n        /**\n         * Only useful in Path and Image element\n         * @type {number}\n         */\n        textShadowOffsetX: 0,\n\n        /**\n         * Only useful in Path and Image element\n         * @type {number}\n         */\n        textShadowOffsetY: 0,\n\n        /**\n         * If transform text\n         * Only useful in Path and Image element\n         * @type {boolean}\n         */\n        textTransform: false,\n\n        /**\n         * Text rotate around position of Path or Image\n         * Only useful in Path and Image element and textTransform is false.\n         */\n        textRotation: 0,\n\n        /**\n         * @type {string}\n         * https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation\n         */\n        blend: null,\n\n        /**\n         * @param {CanvasRenderingContext2D} ctx\n         */\n        bind: function (ctx, el, prevEl) {\n            var style = this;\n            var prevStyle = prevEl && prevEl.style;\n            var firstDraw = !prevStyle;\n\n            for (var i = 0; i < STYLE_COMMON_PROPS.length; i++) {\n                var prop = STYLE_COMMON_PROPS[i];\n                var styleName = prop[0];\n\n                if (firstDraw || style[styleName] !== prevStyle[styleName]) {\n                    // FIXME Invalid property value will cause style leak from previous element.\n                    ctx[styleName] = style[styleName] || prop[1];\n                }\n            }\n\n            if ((firstDraw || style.fill !== prevStyle.fill)) {\n                ctx.fillStyle = style.fill;\n            }\n            if ((firstDraw || style.stroke !== prevStyle.stroke)) {\n                ctx.strokeStyle = style.stroke;\n            }\n            if ((firstDraw || style.opacity !== prevStyle.opacity)) {\n                ctx.globalAlpha = style.opacity == null ? 1 : style.opacity;\n            }\n\n            if ((firstDraw || style.blend !== prevStyle.blend)) {\n                ctx.globalCompositeOperation = style.blend || 'source-over';\n            }\n            if (this.hasStroke()) {\n                var lineWidth = style.lineWidth;\n                ctx.lineWidth = lineWidth / (\n                    (this.strokeNoScale && el && el.getLineScale) ? el.getLineScale() : 1\n                );\n            }\n        },\n\n        hasFill: function () {\n            var fill = this.fill;\n            return fill != null && fill !== 'none';\n        },\n\n        hasStroke: function () {\n            var stroke = this.stroke;\n            return stroke != null && stroke !== 'none' && this.lineWidth > 0;\n        },\n\n        /**\n         * Extend from other style\n         * @param {zrender/graphic/Style} otherStyle\n         * @param {boolean} overwrite\n         */\n        extendFrom: function (otherStyle, overwrite) {\n            if (otherStyle) {\n                var target = this;\n                for (var name in otherStyle) {\n                    if (otherStyle.hasOwnProperty(name)\n                        && (overwrite || ! target.hasOwnProperty(name))\n                    ) {\n                        target[name] = otherStyle[name];\n                    }\n                }\n            }\n        },\n\n        /**\n         * Batch setting style with a given object\n         * @param {Object|string} obj\n         * @param {*} [obj]\n         */\n        set: function (obj, value) {\n            if (typeof obj === 'string') {\n                this[obj] = value;\n            }\n            else {\n                this.extendFrom(obj, true);\n            }\n        },\n\n        /**\n         * Clone\n         * @return {zrender/graphic/Style} [description]\n         */\n        clone: function () {\n            var newStyle = new this.constructor();\n            newStyle.extendFrom(this, true);\n            return newStyle;\n        },\n\n        getGradient: function (ctx, obj, rect) {\n            var method = obj.type === 'radial' ? createRadialGradient : createLinearGradient;\n            var canvasGradient = method(ctx, obj, rect);\n            var colorStops = obj.colorStops;\n            for (var i = 0; i < colorStops.length; i++) {\n                canvasGradient.addColorStop(\n                    colorStops[i].offset, colorStops[i].color\n                );\n            }\n            return canvasGradient;\n        }\n    };\n\n    var styleProto = Style.prototype;\n    for (var i = 0; i < STYLE_COMMON_PROPS.length; i++) {\n        var prop = STYLE_COMMON_PROPS[i];\n        if (!(prop[0] in styleProto)) {\n            styleProto[prop[0]] = prop[1];\n        }\n    }\n\n    // Provide for others\n    Style.getGradient = styleProto.getGradient;\n\n    module.exports = Style;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/zrender/lib/graphic/Style.js\n// module id = 364\n// module chunks = 0 1 2 3 4","\n\n    var smoothSpline = require('./smoothSpline');\n    var smoothBezier = require('./smoothBezier');\n\n    module.exports = {\n        buildPath: function (ctx, shape, closePath) {\n            var points = shape.points;\n            var smooth = shape.smooth;\n            if (points && points.length >= 2) {\n                if (smooth && smooth !== 'spline') {\n                    var controlPoints = smoothBezier(\n                        points, smooth, closePath, shape.smoothConstraint\n                    );\n\n                    ctx.moveTo(points[0][0], points[0][1]);\n                    var len = points.length;\n                    for (var i = 0; i < (closePath ? len : len - 1); i++) {\n                        var cp1 = controlPoints[i * 2];\n                        var cp2 = controlPoints[i * 2 + 1];\n                        var p = points[(i + 1) % len];\n                        ctx.bezierCurveTo(\n                            cp1[0], cp1[1], cp2[0], cp2[1], p[0], p[1]\n                        );\n                    }\n                }\n                else {\n                    if (smooth === 'spline') {\n                        points = smoothSpline(points, closePath);\n                    }\n\n                    ctx.moveTo(points[0][0], points[0][1]);\n                    for (var i = 1, l = points.length; i < l; i++) {\n                        ctx.lineTo(points[i][0], points[i][1]);\n                    }\n                }\n\n                closePath && ctx.closePath();\n            }\n        }\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/zrender/lib/graphic/helper/poly.js\n// module id = 365\n// module chunks = 0 1 2 3 4","'use strict';\n\n\n    var List = require('../../data/List');\n    var completeDimensions = require('../../data/helper/completeDimensions');\n    var zrUtil = require('zrender/lib/core/util');\n    var modelUtil = require('../../util/model');\n    var CoordinateSystem = require('../../CoordinateSystem');\n    var getDataItemValue = modelUtil.getDataItemValue;\n    var converDataValue = modelUtil.converDataValue;\n\n    function firstDataNotNull(data) {\n        var i = 0;\n        while (i < data.length && data[i] == null) {\n            i++;\n        }\n        return data[i];\n    }\n    function ifNeedCompleteOrdinalData(data) {\n        var sampleItem = firstDataNotNull(data);\n        return sampleItem != null\n            && !zrUtil.isArray(getDataItemValue(sampleItem));\n    }\n\n    /**\n     * Helper function to create a list from option data\n     */\n    function createListFromArray(data, seriesModel, ecModel) {\n        // If data is undefined\n        data = data || [];\n\n        if (__DEV__) {\n            if (!zrUtil.isArray(data)) {\n                throw new Error('Invalid data.');\n            }\n        }\n\n        var coordSysName = seriesModel.get('coordinateSystem');\n        var creator = creators[coordSysName];\n        var registeredCoordSys = CoordinateSystem.get(coordSysName);\n        // FIXME\n        var axesInfo = creator && creator(data, seriesModel, ecModel);\n        var dimensions = axesInfo && axesInfo.dimensions;\n        if (!dimensions) {\n            // Get dimensions from registered coordinate system\n            dimensions = (registeredCoordSys && registeredCoordSys.dimensions) || ['x', 'y'];\n            dimensions = completeDimensions(dimensions, data, dimensions.concat(['value']));\n        }\n        var categoryIndex = axesInfo ? axesInfo.categoryIndex : -1;\n\n        var list = new List(dimensions, seriesModel);\n\n        var nameList = createNameList(axesInfo, data);\n\n        var categories = {};\n        var dimValueGetter = (categoryIndex >= 0 && ifNeedCompleteOrdinalData(data))\n            ? function (itemOpt, dimName, dataIndex, dimIndex) {\n                // If any dataItem is like { value: 10 }\n                if (modelUtil.isDataItemOption(itemOpt)) {\n                    list.hasItemOption = true;\n                }\n\n                // Use dataIndex as ordinal value in categoryAxis\n                return dimIndex === categoryIndex\n                    ? dataIndex\n                    : converDataValue(getDataItemValue(itemOpt), dimensions[dimIndex]);\n            }\n            : function (itemOpt, dimName, dataIndex, dimIndex) {\n                var value = getDataItemValue(itemOpt);\n                var val = converDataValue(value && value[dimIndex], dimensions[dimIndex]);\n                // If any dataItem is like { value: 10 }\n                if (modelUtil.isDataItemOption(itemOpt)) {\n                    list.hasItemOption = true;\n                }\n\n                var categoryAxesModels = axesInfo && axesInfo.categoryAxesModels;\n                if (categoryAxesModels && categoryAxesModels[dimName]) {\n                    // If given value is a category string\n                    if (typeof val === 'string') {\n                        // Lazy get categories\n                        categories[dimName] = categories[dimName]\n                            || categoryAxesModels[dimName].getCategories();\n                        val = zrUtil.indexOf(categories[dimName], val);\n                        if (val < 0 && !isNaN(val)) {\n                            // In case some one write '1', '2' istead of 1, 2\n                            val = +val;\n                        }\n                    }\n                }\n                return val;\n            };\n\n        list.hasItemOption = false;\n        list.initData(data, nameList, dimValueGetter);\n\n        return list;\n    }\n\n    function isStackable(axisType) {\n        return axisType !== 'category' && axisType !== 'time';\n    }\n\n    function getDimTypeByAxis(axisType) {\n        return axisType === 'category'\n            ? 'ordinal'\n            : axisType === 'time'\n            ? 'time'\n            : 'float';\n    }\n\n    /**\n     * Creaters for each coord system.\n     */\n    var creators = {\n\n        cartesian2d: function (data, seriesModel, ecModel) {\n\n            var axesModels = zrUtil.map(['xAxis', 'yAxis'], function (name) {\n                return ecModel.queryComponents({\n                    mainType: name,\n                    index: seriesModel.get(name + 'Index'),\n                    id: seriesModel.get(name + 'Id')\n                })[0];\n            });\n            var xAxisModel = axesModels[0];\n            var yAxisModel = axesModels[1];\n\n            if (__DEV__) {\n                if (!xAxisModel) {\n                    throw new Error('xAxis \"' + zrUtil.retrieve(\n                        seriesModel.get('xAxisIndex'),\n                        seriesModel.get('xAxisId'),\n                        0\n                    ) + '\" not found');\n                }\n                if (!yAxisModel) {\n                    throw new Error('yAxis \"' + zrUtil.retrieve(\n                        seriesModel.get('xAxisIndex'),\n                        seriesModel.get('yAxisId'),\n                        0\n                    ) + '\" not found');\n                }\n            }\n\n            var xAxisType = xAxisModel.get('type');\n            var yAxisType = yAxisModel.get('type');\n\n            var dimensions = [\n                {\n                    name: 'x',\n                    type: getDimTypeByAxis(xAxisType),\n                    stackable: isStackable(xAxisType)\n                },\n                {\n                    name: 'y',\n                    // If two category axes\n                    type: getDimTypeByAxis(yAxisType),\n                    stackable: isStackable(yAxisType)\n                }\n            ];\n\n            var isXAxisCateogry = xAxisType === 'category';\n            var isYAxisCategory = yAxisType === 'category';\n\n            completeDimensions(dimensions, data, ['x', 'y', 'z']);\n\n            var categoryAxesModels = {};\n            if (isXAxisCateogry) {\n                categoryAxesModels.x = xAxisModel;\n            }\n            if (isYAxisCategory) {\n                categoryAxesModels.y = yAxisModel;\n            }\n            return {\n                dimensions: dimensions,\n                categoryIndex: isXAxisCateogry ? 0 : (isYAxisCategory ? 1 : -1),\n                categoryAxesModels: categoryAxesModels\n            };\n        },\n\n        singleAxis: function (data, seriesModel, ecModel) {\n\n            var singleAxisModel = ecModel.queryComponents({\n                mainType: 'singleAxis',\n                index: seriesModel.get('singleAxisIndex'),\n                id: seriesModel.get('singleAxisId')\n            })[0];\n\n            if (__DEV__) {\n                if (!singleAxisModel) {\n                    throw new Error('singleAxis should be specified.');\n                }\n            }\n\n            var singleAxisType = singleAxisModel.get('type');\n            var isCategory = singleAxisType === 'category';\n\n            var dimensions = [{\n                name: 'single',\n                type: getDimTypeByAxis(singleAxisType),\n                stackable: isStackable(singleAxisType)\n            }];\n\n            completeDimensions(dimensions, data);\n\n            var categoryAxesModels = {};\n            if (isCategory) {\n                categoryAxesModels.single = singleAxisModel;\n            }\n\n            return {\n                dimensions: dimensions,\n                categoryIndex: isCategory ? 0 : -1,\n                categoryAxesModels: categoryAxesModels\n            };\n        },\n\n        polar: function (data, seriesModel, ecModel) {\n            var polarModel = ecModel.queryComponents({\n                mainType: 'polar',\n                index: seriesModel.get('polarIndex'),\n                id: seriesModel.get('polarId')\n            })[0];\n\n            var angleAxisModel = polarModel.findAxisModel('angleAxis');\n            var radiusAxisModel = polarModel.findAxisModel('radiusAxis');\n\n            if (__DEV__) {\n                if (!angleAxisModel) {\n                    throw new Error('angleAxis option not found');\n                }\n                if (!radiusAxisModel) {\n                    throw new Error('radiusAxis option not found');\n                }\n            }\n\n            var radiusAxisType = radiusAxisModel.get('type');\n            var angleAxisType = angleAxisModel.get('type');\n\n            var dimensions = [\n                {\n                    name: 'radius',\n                    type: getDimTypeByAxis(radiusAxisType),\n                    stackable: isStackable(radiusAxisType)\n                },\n                {\n                    name: 'angle',\n                    type: getDimTypeByAxis(angleAxisType),\n                    stackable: isStackable(angleAxisType)\n                }\n            ];\n            var isAngleAxisCateogry = angleAxisType === 'category';\n            var isRadiusAxisCateogry = radiusAxisType === 'category';\n\n            completeDimensions(dimensions, data, ['radius', 'angle', 'value']);\n\n            var categoryAxesModels = {};\n            if (isRadiusAxisCateogry) {\n                categoryAxesModels.radius = radiusAxisModel;\n            }\n            if (isAngleAxisCateogry) {\n                categoryAxesModels.angle = angleAxisModel;\n            }\n            return {\n                dimensions: dimensions,\n                categoryIndex: isAngleAxisCateogry ? 1 : (isRadiusAxisCateogry ? 0 : -1),\n                categoryAxesModels: categoryAxesModels\n            };\n        },\n\n        geo: function (data, seriesModel, ecModel) {\n            // TODO Region\n            // 多个散点图系列在同一个地区的时候\n            return {\n                dimensions: completeDimensions([\n                    {name: 'lng'},\n                    {name: 'lat'}\n                ], data, ['lng', 'lat', 'value'])\n            };\n        }\n    };\n\n    function createNameList(result, data) {\n        var nameList = [];\n\n        var categoryDim = result && result.dimensions[result.categoryIndex];\n        var categoryAxisModel;\n        if (categoryDim) {\n            categoryAxisModel = result.categoryAxesModels[categoryDim.name];\n        }\n\n        if (categoryAxisModel) {\n            // FIXME Two category axis\n            var categories = categoryAxisModel.getCategories();\n            if (categories) {\n                var dataLen = data.length;\n                // Ordered data is given explicitly like\n                // [[3, 0.2], [1, 0.3], [2, 0.15]]\n                // or given scatter data,\n                // pick the category\n                if (zrUtil.isArray(data[0]) && data[0].length > 1) {\n                    nameList = [];\n                    for (var i = 0; i < dataLen; i++) {\n                        nameList[i] = categories[data[i][result.categoryIndex || 0]];\n                    }\n                }\n                else {\n                    nameList = categories.slice(0);\n                }\n            }\n        }\n\n        return nameList;\n    }\n\n    module.exports = createListFromArray;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/chart/helper/createListFromArray.js\n// module id = 366\n// module chunks = 0 1 2 3 4","'use strict';\n\n\n    var graphic = require('../util/graphic');\n    var zrUtil = require('zrender/lib/core/util');\n    var echarts = require('../echarts');\n\n    require('../coord/cartesian/Grid');\n\n    require('./axis');\n\n    // Grid view\n    echarts.extendComponentView({\n\n        type: 'grid',\n\n        render: function (gridModel, ecModel) {\n            this.group.removeAll();\n            if (gridModel.get('show')) {\n                this.group.add(new graphic.Rect({\n                    shape: gridModel.coordinateSystem.getRect(),\n                    style: zrUtil.defaults({\n                        fill: gridModel.get('backgroundColor')\n                    }, gridModel.getItemStyle()),\n                    silent: true,\n                    z2: -1\n                }));\n            }\n        }\n\n    });\n\n    echarts.registerPreprocessor(function (option) {\n        // Only create grid when need\n        if (option.xAxis && option.yAxis && !option.grid) {\n            option.grid = {};\n        }\n    });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/component/grid.js\n// module id = 367\n// module chunks = 0 1 2 3 4","/**\n * Grid is a region which contains at most 4 cartesian systems\n *\n * TODO Default cartesian\n */\nvar factory = exports;\n\n    var layout = require('../../util/layout');\n    var axisHelper = require('../../coord/axisHelper');\n\n    var zrUtil = require('zrender/lib/core/util');\n    var Cartesian2D = require('./Cartesian2D');\n    var Axis2D = require('./Axis2D');\n\n    var each = zrUtil.each;\n\n    var ifAxisCrossZero = axisHelper.ifAxisCrossZero;\n    var niceScaleExtent = axisHelper.niceScaleExtent;\n\n    // 依赖 GridModel, AxisModel 做预处理\n    require('./GridModel');\n\n    /**\n     * Check if the axis is used in the specified grid\n     * @inner\n     */\n    function isAxisUsedInTheGrid(axisModel, gridModel, ecModel) {\n        return axisModel.getCoordSysModel() === gridModel;\n    }\n\n    function getLabelUnionRect(axis) {\n        var axisModel = axis.model;\n        var labels = axisModel.getFormattedLabels();\n        var textStyleModel = axisModel.getModel('axisLabel.textStyle');\n        var rect;\n        var step = 1;\n        var labelCount = labels.length;\n        if (labelCount > 40) {\n            // Simple optimization for large amount of labels\n            step = Math.ceil(labelCount / 40);\n        }\n        for (var i = 0; i < labelCount; i += step) {\n            if (!axis.isLabelIgnored(i)) {\n                var singleRect = textStyleModel.getTextRect(labels[i]);\n                // FIXME consider label rotate\n                rect ? rect.union(singleRect) : (rect = singleRect);\n            }\n        }\n        return rect;\n    }\n\n    function Grid(gridModel, ecModel, api) {\n        /**\n         * @type {Object.<string, module:echarts/coord/cartesian/Cartesian2D>}\n         * @private\n         */\n        this._coordsMap = {};\n\n        /**\n         * @type {Array.<module:echarts/coord/cartesian/Cartesian>}\n         * @private\n         */\n        this._coordsList = [];\n\n        /**\n         * @type {Object.<string, module:echarts/coord/cartesian/Axis2D>}\n         * @private\n         */\n        this._axesMap = {};\n\n        /**\n         * @type {Array.<module:echarts/coord/cartesian/Axis2D>}\n         * @private\n         */\n        this._axesList = [];\n\n        this._initCartesian(gridModel, ecModel, api);\n\n        this._model = gridModel;\n    }\n\n    var gridProto = Grid.prototype;\n\n    gridProto.type = 'grid';\n\n    gridProto.getRect = function () {\n        return this._rect;\n    };\n\n    gridProto.update = function (ecModel, api) {\n\n        var axesMap = this._axesMap;\n\n        this._updateScale(ecModel, this._model);\n\n        function ifAxisCanNotOnZero(otherAxisDim) {\n            var axes = axesMap[otherAxisDim];\n            for (var idx in axes) {\n                if (axes.hasOwnProperty(idx)) {\n                    var axis = axes[idx];\n                    if (axis && (axis.type === 'category' || !ifAxisCrossZero(axis))) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        }\n\n        each(axesMap.x, function (xAxis) {\n            niceScaleExtent(xAxis, xAxis.model);\n        });\n        each(axesMap.y, function (yAxis) {\n            niceScaleExtent(yAxis, yAxis.model);\n        });\n        // Fix configuration\n        each(axesMap.x, function (xAxis) {\n            // onZero can not be enabled in these two situations\n            // 1. When any other axis is a category axis\n            // 2. When any other axis not across 0 point\n            if (ifAxisCanNotOnZero('y')) {\n                xAxis.onZero = false;\n            }\n        });\n        each(axesMap.y, function (yAxis) {\n            if (ifAxisCanNotOnZero('x')) {\n                yAxis.onZero = false;\n            }\n        });\n\n        // Resize again if containLabel is enabled\n        // FIXME It may cause getting wrong grid size in data processing stage\n        this.resize(this._model, api);\n    };\n\n    /**\n     * Resize the grid\n     * @param {module:echarts/coord/cartesian/GridModel} gridModel\n     * @param {module:echarts/ExtensionAPI} api\n     */\n    gridProto.resize = function (gridModel, api) {\n\n        var gridRect = layout.getLayoutRect(\n            gridModel.getBoxLayoutParams(), {\n                width: api.getWidth(),\n                height: api.getHeight()\n            });\n\n        this._rect = gridRect;\n\n        var axesList = this._axesList;\n\n        adjustAxes();\n\n        // Minus label size\n        if (gridModel.get('containLabel')) {\n            each(axesList, function (axis) {\n                if (!axis.model.get('axisLabel.inside')) {\n                    var labelUnionRect = getLabelUnionRect(axis);\n                    if (labelUnionRect) {\n                        var dim = axis.isHorizontal() ? 'height' : 'width';\n                        var margin = axis.model.get('axisLabel.margin');\n                        gridRect[dim] -= labelUnionRect[dim] + margin;\n                        if (axis.position === 'top') {\n                            gridRect.y += labelUnionRect.height + margin;\n                        }\n                        else if (axis.position === 'left')  {\n                            gridRect.x += labelUnionRect.width + margin;\n                        }\n                    }\n                }\n            });\n\n            adjustAxes();\n        }\n\n        function adjustAxes() {\n            each(axesList, function (axis) {\n                var isHorizontal = axis.isHorizontal();\n                var extent = isHorizontal ? [0, gridRect.width] : [0, gridRect.height];\n                var idx = axis.inverse ? 1 : 0;\n                axis.setExtent(extent[idx], extent[1 - idx]);\n                updateAxisTransfrom(axis, isHorizontal ? gridRect.x : gridRect.y);\n            });\n        }\n    };\n\n    /**\n     * @param {string} axisType\n     * @param {ndumber} [axisIndex]\n     */\n    gridProto.getAxis = function (axisType, axisIndex) {\n        var axesMapOnDim = this._axesMap[axisType];\n        if (axesMapOnDim != null) {\n            if (axisIndex == null) {\n                // Find first axis\n                for (var name in axesMapOnDim) {\n                    if (axesMapOnDim.hasOwnProperty(name)) {\n                        return axesMapOnDim[name];\n                    }\n                }\n            }\n            return axesMapOnDim[axisIndex];\n        }\n    };\n\n    gridProto.getCartesian = function (xAxisIndex, yAxisIndex) {\n        if (xAxisIndex != null && yAxisIndex != null) {\n            var key = 'x' + xAxisIndex + 'y' + yAxisIndex;\n            return this._coordsMap[key];\n        }\n        else {\n            // When only xAxisIndex or yAxisIndex given, find its first cartesian.\n            for (var i = 0, coordList = this._coordsList; i < coordList.length; i++) {\n                if (coordList[i].getAxis('x').index === xAxisIndex\n                    || coordList[i].getAxis('y').index === yAxisIndex\n                ) {\n                    return coordList[i];\n                }\n            }\n        }\n    };\n\n    /**\n     * @implements\n     * see {module:echarts/CoodinateSystem}\n     */\n    gridProto.convertToPixel = function (ecModel, finder, value) {\n        var target = this._findConvertTarget(ecModel, finder);\n\n        return target.cartesian\n            ? target.cartesian.dataToPoint(value)\n            : target.axis\n            ? target.axis.toGlobalCoord(target.axis.dataToCoord(value))\n            : null;\n    };\n\n    /**\n     * @implements\n     * see {module:echarts/CoodinateSystem}\n     */\n    gridProto.convertFromPixel = function (ecModel, finder, value) {\n        var target = this._findConvertTarget(ecModel, finder);\n\n        return target.cartesian\n            ? target.cartesian.pointToData(value)\n            : target.axis\n            ? target.axis.coordToData(target.axis.toLocalCoord(value))\n            : null;\n    };\n\n    /**\n     * @inner\n     */\n    gridProto._findConvertTarget = function (ecModel, finder) {\n        var seriesModel = finder.seriesModel;\n        var xAxisModel = finder.xAxisModel\n            || (seriesModel && seriesModel.getReferringComponents('xAxis')[0]);\n        var yAxisModel = finder.yAxisModel\n            || (seriesModel && seriesModel.getReferringComponents('yAxis')[0]);\n        var gridModel = finder.gridModel;\n        var coordsList = this._coordsList;\n        var cartesian;\n        var axis;\n\n        if (seriesModel) {\n            cartesian = seriesModel.coordinateSystem;\n            zrUtil.indexOf(coordsList, cartesian) < 0 && (cartesian = null);\n        }\n        else if (xAxisModel && yAxisModel) {\n            cartesian = this.getCartesian(xAxisModel.componentIndex, yAxisModel.componentIndex);\n        }\n        else if (xAxisModel) {\n            axis = this.getAxis('x', xAxisModel.componentIndex);\n        }\n        else if (yAxisModel) {\n            axis = this.getAxis('y', yAxisModel.componentIndex);\n        }\n        // Lowest priority.\n        else if (gridModel) {\n            var grid = gridModel.coordinateSystem;\n            if (grid === this) {\n                cartesian = this._coordsList[0];\n            }\n        }\n\n        return {cartesian: cartesian, axis: axis};\n    };\n\n    /**\n     * @implements\n     * see {module:echarts/CoodinateSystem}\n     */\n    gridProto.containPoint = function (point) {\n        var coord = this._coordsList[0];\n        if (coord) {\n            return coord.containPoint(point);\n        }\n    };\n\n    /**\n     * Initialize cartesian coordinate systems\n     * @private\n     */\n    gridProto._initCartesian = function (gridModel, ecModel, api) {\n        var axisPositionUsed = {\n            left: false,\n            right: false,\n            top: false,\n            bottom: false\n        };\n\n        var axesMap = {\n            x: {},\n            y: {}\n        };\n        var axesCount = {\n            x: 0,\n            y: 0\n        };\n\n        /// Create axis\n        ecModel.eachComponent('xAxis', createAxisCreator('x'), this);\n        ecModel.eachComponent('yAxis', createAxisCreator('y'), this);\n\n        if (!axesCount.x || !axesCount.y) {\n            // Roll back when there no either x or y axis\n            this._axesMap = {};\n            this._axesList = [];\n            return;\n        }\n\n        this._axesMap = axesMap;\n\n        /// Create cartesian2d\n        each(axesMap.x, function (xAxis, xAxisIndex) {\n            each(axesMap.y, function (yAxis, yAxisIndex) {\n                var key = 'x' + xAxisIndex + 'y' + yAxisIndex;\n                var cartesian = new Cartesian2D(key);\n\n                cartesian.grid = this;\n\n                this._coordsMap[key] = cartesian;\n                this._coordsList.push(cartesian);\n\n                cartesian.addAxis(xAxis);\n                cartesian.addAxis(yAxis);\n            }, this);\n        }, this);\n\n        function createAxisCreator(axisType) {\n            return function (axisModel, idx) {\n                if (!isAxisUsedInTheGrid(axisModel, gridModel, ecModel)) {\n                    return;\n                }\n\n                var axisPosition = axisModel.get('position');\n                if (axisType === 'x') {\n                    // Fix position\n                    if (axisPosition !== 'top' && axisPosition !== 'bottom') {\n                        // Default bottom of X\n                        axisPosition = 'bottom';\n                        if (axisPositionUsed[axisPosition]) {\n                            axisPosition = axisPosition === 'top' ? 'bottom' : 'top';\n                        }\n                    }\n                }\n                else {\n                    // Fix position\n                    if (axisPosition !== 'left' && axisPosition !== 'right') {\n                        // Default left of Y\n                        axisPosition = 'left';\n                        if (axisPositionUsed[axisPosition]) {\n                            axisPosition = axisPosition === 'left' ? 'right' : 'left';\n                        }\n                    }\n                }\n                axisPositionUsed[axisPosition] = true;\n\n                var axis = new Axis2D(\n                    axisType, axisHelper.createScaleByModel(axisModel),\n                    [0, 0],\n                    axisModel.get('type'),\n                    axisPosition\n                );\n\n                var isCategory = axis.type === 'category';\n                axis.onBand = isCategory && axisModel.get('boundaryGap');\n                axis.inverse = axisModel.get('inverse');\n\n                axis.onZero = axisModel.get('axisLine.onZero');\n\n                // Inject axis into axisModel\n                axisModel.axis = axis;\n\n                // Inject axisModel into axis\n                axis.model = axisModel;\n\n                // Inject grid info axis\n                axis.grid = this;\n\n                // Index of axis, can be used as key\n                axis.index = idx;\n\n                this._axesList.push(axis);\n\n                axesMap[axisType][idx] = axis;\n                axesCount[axisType]++;\n            };\n        }\n    };\n\n    /**\n     * Update cartesian properties from series\n     * @param  {module:echarts/model/Option} option\n     * @private\n     */\n    gridProto._updateScale = function (ecModel, gridModel) {\n        // Reset scale\n        zrUtil.each(this._axesList, function (axis) {\n            axis.scale.setExtent(Infinity, -Infinity);\n        });\n        ecModel.eachSeries(function (seriesModel) {\n            if (isCartesian2D(seriesModel)) {\n                var axesModels = findAxesModels(seriesModel, ecModel);\n                var xAxisModel = axesModels[0];\n                var yAxisModel = axesModels[1];\n\n                if (!isAxisUsedInTheGrid(xAxisModel, gridModel, ecModel)\n                    || !isAxisUsedInTheGrid(yAxisModel, gridModel, ecModel)\n                 ) {\n                    return;\n                }\n\n                var cartesian = this.getCartesian(\n                    xAxisModel.componentIndex, yAxisModel.componentIndex\n                );\n                var data = seriesModel.getData();\n                var xAxis = cartesian.getAxis('x');\n                var yAxis = cartesian.getAxis('y');\n\n                if (data.type === 'list') {\n                    unionExtent(data, xAxis, seriesModel);\n                    unionExtent(data, yAxis, seriesModel);\n                }\n            }\n        }, this);\n\n        function unionExtent(data, axis, seriesModel) {\n            each(seriesModel.coordDimToDataDim(axis.dim), function (dim) {\n                axis.scale.unionExtentFromData(data, dim);\n            });\n        }\n    };\n\n    /**\n     * @inner\n     */\n    function updateAxisTransfrom(axis, coordBase) {\n        var axisExtent = axis.getExtent();\n        var axisExtentSum = axisExtent[0] + axisExtent[1];\n\n        // Fast transform\n        axis.toGlobalCoord = axis.dim === 'x'\n            ? function (coord) {\n                return coord + coordBase;\n            }\n            : function (coord) {\n                return axisExtentSum - coord + coordBase;\n            };\n        axis.toLocalCoord = axis.dim === 'x'\n            ? function (coord) {\n                return coord - coordBase;\n            }\n            : function (coord) {\n                return axisExtentSum - coord + coordBase;\n            };\n    }\n\n    var axesTypes = ['xAxis', 'yAxis'];\n    /**\n     * @inner\n     */\n    function findAxesModels(seriesModel, ecModel) {\n        return zrUtil.map(axesTypes, function (axisType) {\n            var axisModel = seriesModel.getReferringComponents(axisType)[0];\n\n            if (__DEV__) {\n                if (!axisModel) {\n                    throw new Error(axisType + ' \"' + zrUtil.retrieve(\n                        seriesModel.get(axisType + 'Index'),\n                        seriesModel.get(axisType + 'Id'),\n                        0\n                    ) + '\" not found');\n                }\n            }\n            return axisModel;\n        });\n    }\n\n    /**\n     * @inner\n     */\n    function isCartesian2D(seriesModel) {\n        return seriesModel.get('coordinateSystem') === 'cartesian2d';\n    }\n\n    Grid.create = function (ecModel, api) {\n        var grids = [];\n        ecModel.eachComponent('grid', function (gridModel, idx) {\n            var grid = new Grid(gridModel, ecModel, api);\n            grid.name = 'grid_' + idx;\n            grid.resize(gridModel, api);\n\n            gridModel.coordinateSystem = grid;\n\n            grids.push(grid);\n        });\n\n        // Inject the coordinateSystems into seriesModel\n        ecModel.eachSeries(function (seriesModel) {\n            if (!isCartesian2D(seriesModel)) {\n                return;\n            }\n\n            var axesModels = findAxesModels(seriesModel, ecModel);\n            var xAxisModel = axesModels[0];\n            var yAxisModel = axesModels[1];\n\n            var gridModel = xAxisModel.getCoordSysModel();\n\n            if (__DEV__) {\n                if (!gridModel) {\n                    throw new Error(\n                        'Grid \"' + zrUtil.retrieve(\n                            xAxisModel.get('gridIndex'),\n                            xAxisModel.get('gridId'),\n                            0\n                        ) + '\" not found'\n                    );\n                }\n                if (xAxisModel.getCoordSysModel() !== yAxisModel.getCoordSysModel()) {\n                    throw new Error('xAxis and yAxis must use the same grid');\n                }\n            }\n\n            var grid = gridModel.coordinateSystem;\n\n            seriesModel.coordinateSystem = grid.getCartesian(\n                xAxisModel.componentIndex, yAxisModel.componentIndex\n            );\n        });\n\n        return grids;\n    };\n\n    // For deciding which dimensions to use when creating list data\n    Grid.dimensions = Cartesian2D.prototype.dimensions;\n\n    require('../../CoordinateSystem').register('cartesian2d', Grid);\n\n    module.exports = Grid;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/coord/cartesian/Grid.js\n// module id = 368\n// module chunks = 0 1 2 3 4","\n\n    var lib = {};\n\n    var ORIGIN_METHOD = '\\0__throttleOriginMethod';\n    var RATE = '\\0__throttleRate';\n    var THROTTLE_TYPE = '\\0__throttleType';\n\n    /**\n     * @public\n     * @param {(Function)} fn\n     * @param {number} [delay=0] Unit: ms.\n     * @param {boolean} [debounce=false]\n     *        true: If call interval less than `delay`, only the last call works.\n     *        false: If call interval less than `delay, call works on fixed rate.\n     * @return {(Function)} throttled fn.\n     */\n    lib.throttle = function (fn, delay, debounce) {\n\n        var currCall;\n        var lastCall = 0;\n        var lastExec = 0;\n        var timer = null;\n        var diff;\n        var scope;\n        var args;\n\n        delay = delay || 0;\n\n        function exec() {\n            lastExec = (new Date()).getTime();\n            timer = null;\n            fn.apply(scope, args || []);\n        }\n\n        var cb = function () {\n            currCall = (new Date()).getTime();\n            scope = this;\n            args = arguments;\n            diff = currCall - (debounce ? lastCall : lastExec) - delay;\n\n            clearTimeout(timer);\n\n            if (debounce) {\n                timer = setTimeout(exec, delay);\n            }\n            else {\n                if (diff >= 0) {\n                    exec();\n                }\n                else {\n                    timer = setTimeout(exec, -diff);\n                }\n            }\n\n            lastCall = currCall;\n        };\n\n        /**\n         * Clear throttle.\n         * @public\n         */\n        cb.clear = function () {\n            if (timer) {\n                clearTimeout(timer);\n                timer = null;\n            }\n        };\n\n        return cb;\n    };\n\n    /**\n     * Create throttle method or update throttle rate.\n     *\n     * @example\n     * ComponentView.prototype.render = function () {\n     *     ...\n     *     throttle.createOrUpdate(\n     *         this,\n     *         '_dispatchAction',\n     *         this.model.get('throttle'),\n     *         'fixRate'\n     *     );\n     * };\n     * ComponentView.prototype.remove = function () {\n     *     throttle.clear(this, '_dispatchAction');\n     * };\n     * ComponentView.prototype.dispose = function () {\n     *     throttle.clear(this, '_dispatchAction');\n     * };\n     *\n     * @public\n     * @param {Object} obj\n     * @param {string} fnAttr\n     * @param {number} [rate]\n     * @param {string} [throttleType='fixRate'] 'fixRate' or 'debounce'\n     * @return {Function} throttled function.\n     */\n    lib.createOrUpdate = function (obj, fnAttr, rate, throttleType) {\n        var fn = obj[fnAttr];\n\n        if (!fn) {\n            return;\n        }\n\n        var originFn = fn[ORIGIN_METHOD] || fn;\n        var lastThrottleType = fn[THROTTLE_TYPE];\n        var lastRate = fn[RATE];\n\n        if (lastRate !== rate || lastThrottleType !== throttleType) {\n            if (rate == null || !throttleType) {\n                return (obj[fnAttr] = originFn);\n            }\n\n            fn = obj[fnAttr] = lib.throttle(\n                originFn, rate, throttleType === 'debounce'\n            );\n            fn[ORIGIN_METHOD] = originFn;\n            fn[THROTTLE_TYPE] = throttleType;\n            fn[RATE] = rate;\n        }\n\n        return fn;\n    };\n\n    /**\n     * Clear throttle. Example see throttle.createOrUpdate.\n     *\n     * @public\n     * @param {Object} obj\n     * @param {string} fnAttr\n     */\n    lib.clear = function (obj, fnAttr) {\n        var fn = obj[fnAttr];\n        if (fn && fn[ORIGIN_METHOD]) {\n            obj[fnAttr] = fn[ORIGIN_METHOD];\n        }\n    };\n\n    module.exports = lib;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/util/throttle.js\n// module id = 369\n// module chunks = 0 1 2 3 4","/**\n * @file Visual mapping.\n */\n\n\n    var zrUtil = require('zrender/lib/core/util');\n    var zrColor = require('zrender/lib/tool/color');\n    var linearMap = require('../util/number').linearMap;\n    var each = zrUtil.each;\n    var isObject = zrUtil.isObject;\n\n    var CATEGORY_DEFAULT_VISUAL_INDEX = -1;\n\n    /**\n     * @param {Object} option\n     * @param {string} [option.type] See visualHandlers.\n     * @param {string} [option.mappingMethod] 'linear' or 'piecewise' or 'category' or 'fixed'\n     * @param {Array.<number>=} [option.dataExtent] [minExtent, maxExtent],\n     *                                              required when mappingMethod is 'linear'\n     * @param {Array.<Object>=} [option.pieceList] [\n     *                                             {value: someValue},\n     *                                             {interval: [min1, max1], visual: {...}},\n     *                                             {interval: [min2, max2]}\n     *                                             ],\n     *                                            required when mappingMethod is 'piecewise'.\n     *                                            Visual for only each piece can be specified.\n     * @param {Array.<string|Object>=} [option.categories] ['cate1', 'cate2']\n     *                                            required when mappingMethod is 'category'.\n     *                                            If no option.categories, categories is set\n     *                                            as [0, 1, 2, ...].\n     * @param {boolean} [option.loop=false] Whether loop mapping when mappingMethod is 'category'.\n     * @param {(Array|Object|*)} [option.visual]  Visual data.\n     *                                            when mappingMethod is 'category',\n     *                                            visual data can be array or object\n     *                                            (like: {cate1: '#222', none: '#fff'})\n     *                                            or primary types (which represents\n     *                                            defualt category visual), otherwise visual\n     *                                            can be array or primary (which will be\n     *                                            normalized to array).\n     *\n     */\n    var VisualMapping = function (option) {\n        var mappingMethod = option.mappingMethod;\n        var visualType = option.type;\n\n        /**\n         * @readOnly\n         * @type {Object}\n         */\n        var thisOption = this.option = zrUtil.clone(option);\n\n        /**\n         * @readOnly\n         * @type {string}\n         */\n        this.type = visualType;\n\n        /**\n         * @readOnly\n         * @type {string}\n         */\n        this.mappingMethod = mappingMethod;\n\n        /**\n         * @private\n         * @type {Function}\n         */\n        this._normalizeData = normalizers[mappingMethod];\n\n        var visualHandler = visualHandlers[visualType];\n\n        /**\n         * @public\n         * @type {Function}\n         */\n        this.applyVisual = visualHandler.applyVisual;\n\n        /**\n         * @public\n         * @type {Function}\n         */\n        this.getColorMapper = visualHandler.getColorMapper;\n\n        /**\n         * @private\n         * @type {Function}\n         */\n        this._doMap = visualHandler._doMap[mappingMethod];\n\n        if (mappingMethod === 'piecewise') {\n            normalizeVisualRange(thisOption);\n            preprocessForPiecewise(thisOption);\n        }\n        else if (mappingMethod === 'category') {\n            thisOption.categories\n                ? preprocessForSpecifiedCategory(thisOption)\n                // categories is ordinal when thisOption.categories not specified,\n                // which need no more preprocess except normalize visual.\n                : normalizeVisualRange(thisOption, true);\n        }\n        else { // mappingMethod === 'linear' or 'fixed'\n            zrUtil.assert(mappingMethod !== 'linear' || thisOption.dataExtent);\n            normalizeVisualRange(thisOption);\n        }\n    };\n\n    VisualMapping.prototype = {\n\n        constructor: VisualMapping,\n\n        mapValueToVisual: function (value) {\n            var normalized = this._normalizeData(value);\n            return this._doMap(normalized, value);\n        },\n\n        getNormalizer: function () {\n            return zrUtil.bind(this._normalizeData, this);\n        }\n    };\n\n    var visualHandlers = VisualMapping.visualHandlers = {\n\n        color: {\n\n            applyVisual: makeApplyVisual('color'),\n\n            /**\n             * Create a mapper function\n             * @return {Function}\n             */\n            getColorMapper: function () {\n                var thisOption = this.option;\n                var parsedVisual = zrUtil.map(thisOption.visual, zrColor.parse);\n\n                return zrUtil.bind(\n                    thisOption.mappingMethod === 'category'\n                        ? function (value, isNormalized) {\n                            !isNormalized && (value = this._normalizeData(value));\n                            return doMapCategory.call(this, value);\n                        }\n                        : function (value, isNormalized, out) {\n                            // If output rgb array\n                            // which will be much faster and useful in pixel manipulation\n                            var returnRGBArray = !!out;\n                            !isNormalized && (value = this._normalizeData(value));\n                            out = zrColor.fastMapToColor(value, parsedVisual, out);\n                            return returnRGBArray ? out : zrUtil.stringify(out, 'rgba');\n                        },\n                    this\n                );\n            },\n\n            _doMap: {\n                linear: function (normalized) {\n                    return zrColor.mapToColor(normalized, this.option.visual);\n                },\n                category: doMapCategory,\n                piecewise: function (normalized, value) {\n                    var result = getSpecifiedVisual.call(this, value);\n                    if (result == null) {\n                        result = zrColor.mapToColor(normalized, this.option.visual);\n                    }\n                    return result;\n                },\n                fixed: doMapFixed\n            }\n        },\n\n        colorHue: makePartialColorVisualHandler(function (color, value) {\n            return zrColor.modifyHSL(color, value);\n        }),\n\n        colorSaturation: makePartialColorVisualHandler(function (color, value) {\n            return zrColor.modifyHSL(color, null, value);\n        }),\n\n        colorLightness: makePartialColorVisualHandler(function (color, value) {\n            return zrColor.modifyHSL(color, null, null, value);\n        }),\n\n        colorAlpha: makePartialColorVisualHandler(function (color, value) {\n            return zrColor.modifyAlpha(color, value);\n        }),\n\n        opacity: {\n            applyVisual: makeApplyVisual('opacity'),\n            _doMap: makeDoMap([0, 1])\n        },\n\n        symbol: {\n            applyVisual: function (value, getter, setter) {\n                var symbolCfg = this.mapValueToVisual(value);\n                if (zrUtil.isString(symbolCfg)) {\n                    setter('symbol', symbolCfg);\n                }\n                else if (isObject(symbolCfg)) {\n                    for (var name in symbolCfg) {\n                        if (symbolCfg.hasOwnProperty(name)) {\n                            setter(name, symbolCfg[name]);\n                        }\n                    }\n                }\n            },\n            _doMap: {\n                linear: doMapToArray,\n                category: doMapCategory,\n                piecewise: function (normalized, value) {\n                    var result = getSpecifiedVisual.call(this, value);\n                    if (result == null) {\n                        result = doMapToArray.call(this, normalized);\n                    }\n                    return result;\n                },\n                fixed: doMapFixed\n            }\n        },\n\n        symbolSize: {\n            applyVisual: makeApplyVisual('symbolSize'),\n            _doMap: makeDoMap([0, 1])\n        }\n    };\n\n\n    function preprocessForPiecewise(thisOption) {\n        var pieceList = thisOption.pieceList;\n        thisOption.hasSpecialVisual = false;\n\n        zrUtil.each(pieceList, function (piece, index) {\n            piece.originIndex = index;\n            // piece.visual is \"result visual value\" but not\n            // a visual range, so it does not need to be normalized.\n            if (piece.visual != null) {\n                thisOption.hasSpecialVisual = true;\n            }\n        });\n    }\n\n    function preprocessForSpecifiedCategory(thisOption) {\n        // Hash categories.\n        var categories = thisOption.categories;\n        var visual = thisOption.visual;\n\n        var categoryMap = thisOption.categoryMap = {};\n        each(categories, function (cate, index) {\n            categoryMap[cate] = index;\n        });\n\n        // Process visual map input.\n        if (!zrUtil.isArray(visual)) {\n            var visualArr = [];\n\n            if (zrUtil.isObject(visual)) {\n                each(visual, function (v, cate) {\n                    var index = categoryMap[cate];\n                    visualArr[index != null ? index : CATEGORY_DEFAULT_VISUAL_INDEX] = v;\n                });\n            }\n            else { // Is primary type, represents default visual.\n                visualArr[CATEGORY_DEFAULT_VISUAL_INDEX] = visual;\n            }\n\n            visual = thisOption.visual = visualArr;\n        }\n\n        // Remove categories that has no visual,\n        // then we can mapping them to CATEGORY_DEFAULT_VISUAL_INDEX.\n        for (var i = categories.length - 1; i >= 0; i--) {\n            if (visual[i] == null) {\n                delete categoryMap[categories[i]];\n                categories.pop();\n            }\n        }\n    }\n\n    function normalizeVisualRange(thisOption, isCategory) {\n        var visual = thisOption.visual;\n        var visualArr = [];\n\n        if (zrUtil.isObject(visual)) {\n            each(visual, function (v) {\n                visualArr.push(v);\n            });\n        }\n        else if (visual != null) {\n            visualArr.push(visual);\n        }\n\n        var doNotNeedPair = {color: 1, symbol: 1};\n\n        if (!isCategory\n            && visualArr.length === 1\n            && !doNotNeedPair.hasOwnProperty(thisOption.type)\n        ) {\n            // Do not care visualArr.length === 0, which is illegal.\n            visualArr[1] = visualArr[0];\n        }\n\n        thisOption.visual = visualArr;\n    }\n\n    function makePartialColorVisualHandler(applyValue) {\n        return {\n            applyVisual: function (value, getter, setter) {\n                value = this.mapValueToVisual(value);\n                // Must not be array value\n                setter('color', applyValue(getter('color'), value));\n            },\n            _doMap: makeDoMap([0, 1])\n        };\n    }\n\n    function doMapToArray(normalized) {\n        var visual = this.option.visual;\n        return visual[\n            Math.round(linearMap(normalized, [0, 1], [0, visual.length - 1], true))\n        ] || {};\n    }\n\n    function makeApplyVisual(visualType) {\n        return function (value, getter, setter) {\n            setter(visualType, this.mapValueToVisual(value));\n        };\n    }\n\n    function doMapCategory(normalized) {\n        var visual = this.option.visual;\n        return visual[\n            (this.option.loop && normalized !== CATEGORY_DEFAULT_VISUAL_INDEX)\n                ? normalized % visual.length\n                : normalized\n        ];\n    }\n\n    function doMapFixed() {\n        return this.option.visual[0];\n    }\n\n    function makeDoMap(sourceExtent) {\n        return {\n            linear: function (normalized) {\n                return linearMap(normalized, sourceExtent, this.option.visual, true);\n            },\n            category: doMapCategory,\n            piecewise: function (normalized, value) {\n                var result = getSpecifiedVisual.call(this, value);\n                if (result == null) {\n                    result = linearMap(normalized, sourceExtent, this.option.visual, true);\n                }\n                return result;\n            },\n            fixed: doMapFixed\n        };\n    }\n\n    function getSpecifiedVisual(value) {\n        var thisOption = this.option;\n        var pieceList = thisOption.pieceList;\n        if (thisOption.hasSpecialVisual) {\n            var pieceIndex = VisualMapping.findPieceIndex(value, pieceList);\n            var piece = pieceList[pieceIndex];\n            if (piece && piece.visual) {\n                return piece.visual[this.type];\n            }\n        }\n    }\n\n\n    /**\n     * Normalizers by mapping methods.\n     */\n    var normalizers = {\n\n        linear: function (value) {\n            return linearMap(value, this.option.dataExtent, [0, 1], true);\n        },\n\n        piecewise: function (value) {\n            var pieceList = this.option.pieceList;\n            var pieceIndex = VisualMapping.findPieceIndex(value, pieceList, true);\n            if (pieceIndex != null) {\n                return linearMap(pieceIndex, [0, pieceList.length - 1], [0, 1], true);\n            }\n        },\n\n        category: function (value) {\n            var index = this.option.categories\n                ? this.option.categoryMap[value]\n                : value; // ordinal\n            return index == null ? CATEGORY_DEFAULT_VISUAL_INDEX : index;\n        },\n\n        fixed: zrUtil.noop\n    };\n\n\n\n    /**\n     * List available visual types.\n     *\n     * @public\n     * @return {Array.<string>}\n     */\n    VisualMapping.listVisualTypes = function () {\n        var visualTypes = [];\n        zrUtil.each(visualHandlers, function (handler, key) {\n            visualTypes.push(key);\n        });\n        return visualTypes;\n    };\n\n    /**\n     * @public\n     */\n    VisualMapping.addVisualHandler = function (name, handler) {\n        visualHandlers[name] = handler;\n    };\n\n    /**\n     * @public\n     */\n    VisualMapping.isValidType = function (visualType) {\n        return visualHandlers.hasOwnProperty(visualType);\n    };\n\n    /**\n     * Convinent method.\n     * Visual can be Object or Array or primary type.\n     *\n     * @public\n     */\n    VisualMapping.eachVisual = function (visual, callback, context) {\n        if (zrUtil.isObject(visual)) {\n            zrUtil.each(visual, callback, context);\n        }\n        else {\n            callback.call(context, visual);\n        }\n    };\n\n    VisualMapping.mapVisual = function (visual, callback, context) {\n        var isPrimary;\n        var newVisual = zrUtil.isArray(visual)\n            ? []\n            : zrUtil.isObject(visual)\n            ? {}\n            : (isPrimary = true, null);\n\n        VisualMapping.eachVisual(visual, function (v, key) {\n            var newVal = callback.call(context, v, key);\n            isPrimary ? (newVisual = newVal) : (newVisual[key] = newVal);\n        });\n        return newVisual;\n    };\n\n    /**\n     * @public\n     * @param {Object} obj\n     * @return {Oject} new object containers visual values.\n     *                 If no visuals, return null.\n     */\n    VisualMapping.retrieveVisuals = function (obj) {\n        var ret = {};\n        var hasVisual;\n\n        obj && each(visualHandlers, function (h, visualType) {\n            if (obj.hasOwnProperty(visualType)) {\n                ret[visualType] = obj[visualType];\n                hasVisual = true;\n            }\n        });\n\n        return hasVisual ? ret : null;\n    };\n\n    /**\n     * Give order to visual types, considering colorSaturation, colorAlpha depends on color.\n     *\n     * @public\n     * @param {(Object|Array)} visualTypes If Object, like: {color: ..., colorSaturation: ...}\n     *                                     IF Array, like: ['color', 'symbol', 'colorSaturation']\n     * @return {Array.<string>} Sorted visual types.\n     */\n    VisualMapping.prepareVisualTypes = function (visualTypes) {\n        if (isObject(visualTypes)) {\n            var types = [];\n            each(visualTypes, function (item, type) {\n                types.push(type);\n            });\n            visualTypes = types;\n        }\n        else if (zrUtil.isArray(visualTypes)) {\n            visualTypes = visualTypes.slice();\n        }\n        else {\n            return [];\n        }\n\n        visualTypes.sort(function (type1, type2) {\n            // color should be front of colorSaturation, colorAlpha, ...\n            // symbol and symbolSize do not matter.\n            return (type2 === 'color' && type1 !== 'color' && type1.indexOf('color') === 0)\n                ? 1 : -1;\n        });\n\n        return visualTypes;\n    };\n\n    /**\n     * 'color', 'colorSaturation', 'colorAlpha', ... are depends on 'color'.\n     * Other visuals are only depends on themself.\n     *\n     * @public\n     * @param {string} visualType1\n     * @param {string} visualType2\n     * @return {boolean}\n     */\n    VisualMapping.dependsOn = function (visualType1, visualType2) {\n        return visualType2 === 'color'\n            ? !!(visualType1 && visualType1.indexOf(visualType2) === 0)\n            : visualType1 === visualType2;\n    };\n\n    /**\n     * @param {number} value\n     * @param {Array.<Object>} pieceList [{value: ..., interval: [min, max]}, ...]\n     *                         Always from small to big.\n     * @param {boolean} [findClosestWhenOutside=false]\n     * @return {number} index\n     */\n    VisualMapping.findPieceIndex = function (value, pieceList, findClosestWhenOutside) {\n        var possibleI;\n        var abs = Infinity;\n\n        // value has the higher priority.\n        for (var i = 0, len = pieceList.length; i < len; i++) {\n            var pieceValue = pieceList[i].value;\n            if (pieceValue != null) {\n                if (pieceValue === value) {\n                    return i;\n                }\n                findClosestWhenOutside && updatePossible(pieceValue, i);\n            }\n        }\n\n        for (var i = 0, len = pieceList.length; i < len; i++) {\n            var piece = pieceList[i];\n            var interval = piece.interval;\n            var close = piece.close;\n\n            if (interval) {\n                if (interval[0] === -Infinity) {\n                    if (littleThan(close[1], value, interval[1])) {\n                        return i;\n                    }\n                }\n                else if (interval[1] === Infinity) {\n                    if (littleThan(close[0], interval[0], value)) {\n                        return i;\n                    }\n                }\n                else if (\n                    littleThan(close[0], interval[0], value)\n                    && littleThan(close[1], value, interval[1])\n                ) {\n                    return i;\n                }\n                findClosestWhenOutside && updatePossible(interval[0], i);\n                findClosestWhenOutside && updatePossible(interval[1], i);\n            }\n        }\n\n        if (findClosestWhenOutside) {\n            return value === Infinity\n                ? pieceList.length - 1\n                : value === -Infinity\n                ? 0\n                : possibleI;\n        }\n\n        function updatePossible(val, index) {\n            var newAbs = Math.abs(val - value);\n            if (newAbs < abs) {\n                abs = newAbs;\n                possibleI = index;\n            }\n        }\n\n    };\n\n    function littleThan(close, a, b) {\n        return close ? a <= b : a < b;\n    }\n\n    module.exports = VisualMapping;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/visual/VisualMapping.js\n// module id = 370\n// module chunks = 2 3","'use strict';\n\n\n    var zrUtil = require('../core/util');\n\n    var Gradient = require('./Gradient');\n\n    /**\n     * x, y, x2, y2 are all percent from 0 to 1\n     * @param {number} [x=0]\n     * @param {number} [y=0]\n     * @param {number} [x2=1]\n     * @param {number} [y2=0]\n     * @param {Array.<Object>} colorStops\n     * @param {boolean} [globalCoord=false]\n     */\n    var LinearGradient = function (x, y, x2, y2, colorStops, globalCoord) {\n        // Should do nothing more in this constructor. Because gradient can be\n        // declard by `color: {type: 'linear', colorStops: ...}`, where\n        // this constructor will not be called.\n\n        this.x = x == null ? 0 : x;\n\n        this.y = y == null ? 0 : y;\n\n        this.x2 = x2 == null ? 1 : x2;\n\n        this.y2 = y2 == null ? 0 : y2;\n\n        // Can be cloned\n        this.type = 'linear';\n\n        // If use global coord\n        this.global = globalCoord || false;\n\n        Gradient.call(this, colorStops);\n    };\n\n    LinearGradient.prototype = {\n\n        constructor: LinearGradient\n    };\n\n    zrUtil.inherits(LinearGradient, Gradient);\n\n    module.exports = LinearGradient;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/zrender/lib/graphic/LinearGradient.js\n// module id = 371\n// module chunks = 0 1 2 3 4","/**\n * @module echarts/chart/helper/SymbolDraw\n */\n\n\n    var graphic = require('../../util/graphic');\n    var Symbol = require('./Symbol');\n\n    /**\n     * @constructor\n     * @alias module:echarts/chart/helper/SymbolDraw\n     * @param {module:zrender/graphic/Group} [symbolCtor]\n     */\n    function SymbolDraw(symbolCtor) {\n        this.group = new graphic.Group();\n\n        this._symbolCtor = symbolCtor || Symbol;\n    }\n\n    var symbolDrawProto = SymbolDraw.prototype;\n\n    function symbolNeedsDraw(data, idx, isIgnore) {\n        var point = data.getItemLayout(idx);\n        // Is an object\n        // if (point && point.hasOwnProperty('point')) {\n        //     point = point.point;\n        // }\n        return point && !isNaN(point[0]) && !isNaN(point[1]) && !(isIgnore && isIgnore(idx))\n                    && data.getItemVisual(idx, 'symbol') !== 'none';\n    }\n    /**\n     * Update symbols draw by new data\n     * @param {module:echarts/data/List} data\n     * @param {Array.<boolean>} [isIgnore]\n     */\n    symbolDrawProto.updateData = function (data, isIgnore) {\n        var group = this.group;\n        var seriesModel = data.hostModel;\n        var oldData = this._data;\n\n        var SymbolCtor = this._symbolCtor;\n\n        var seriesScope = {\n            itemStyle: seriesModel.getModel('itemStyle.normal').getItemStyle(['color']),\n            hoverItemStyle: seriesModel.getModel('itemStyle.emphasis').getItemStyle(),\n            symbolRotate: seriesModel.get('symbolRotate'),\n            symbolOffset: seriesModel.get('symbolOffset'),\n            hoverAnimation: seriesModel.get('hoverAnimation'),\n\n            labelModel: seriesModel.getModel('label.normal'),\n            hoverLabelModel: seriesModel.getModel('label.emphasis')\n        };\n\n        data.diff(oldData)\n            .add(function (newIdx) {\n                var point = data.getItemLayout(newIdx);\n                if (symbolNeedsDraw(data, newIdx, isIgnore)) {\n                    var symbolEl = new SymbolCtor(data, newIdx, seriesScope);\n                    symbolEl.attr('position', point);\n                    data.setItemGraphicEl(newIdx, symbolEl);\n                    group.add(symbolEl);\n                }\n            })\n            .update(function (newIdx, oldIdx) {\n                var symbolEl = oldData.getItemGraphicEl(oldIdx);\n                var point = data.getItemLayout(newIdx);\n                if (!symbolNeedsDraw(data, newIdx, isIgnore)) {\n                    group.remove(symbolEl);\n                    return;\n                }\n                if (!symbolEl) {\n                    symbolEl = new SymbolCtor(data, newIdx);\n                    symbolEl.attr('position', point);\n                }\n                else {\n                    symbolEl.updateData(data, newIdx, seriesScope);\n                    graphic.updateProps(symbolEl, {\n                        position: point\n                    }, seriesModel);\n                }\n\n                // Add back\n                group.add(symbolEl);\n\n                data.setItemGraphicEl(newIdx, symbolEl);\n            })\n            .remove(function (oldIdx) {\n                var el = oldData.getItemGraphicEl(oldIdx);\n                el && el.fadeOut(function () {\n                    group.remove(el);\n                });\n            })\n            .execute();\n\n        this._data = data;\n    };\n\n    symbolDrawProto.updateLayout = function () {\n        var data = this._data;\n        if (data) {\n            // Not use animation\n            data.eachItemGraphicEl(function (el, idx) {\n                var point = data.getItemLayout(idx);\n                el.attr('position', point);\n            });\n        }\n    };\n\n    symbolDrawProto.remove = function (enableAnimation) {\n        var group = this.group;\n        var data = this._data;\n        if (data) {\n            if (enableAnimation) {\n                data.eachItemGraphicEl(function (el) {\n                    el.fadeOut(function () {\n                        group.remove(el);\n                    });\n                });\n            }\n            else {\n                group.removeAll();\n            }\n        }\n    };\n\n    module.exports = SymbolDraw;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/chart/helper/SymbolDraw.js\n// module id = 373\n// module chunks = 0 1 2 3 4","// FIXME Better way to pack data in graphic element\n\n\n    require('./tooltip/TooltipModel');\n\n    require('./tooltip/TooltipView');\n\n    // Show tip action\n    /**\n     * @action\n     * @property {string} type\n     * @property {number} seriesIndex\n     * @property {number} dataIndex\n     * @property {number} [x]\n     * @property {number} [y]\n     */\n    require('../echarts').registerAction(\n        {\n            type: 'showTip',\n            event: 'showTip',\n            update: 'tooltip:manuallyShowTip'\n        },\n        // noop\n        function () {}\n    );\n    // Hide tip action\n    require('../echarts').registerAction(\n        {\n            type: 'hideTip',\n            event: 'hideTip',\n            update: 'tooltip:manuallyHideTip'\n        },\n        // noop\n        function () {}\n    );\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/component/tooltip.js\n// module id = 374\n// module chunks = 0 1 2 3 4","\n\n    var Group = require('zrender/lib/container/Group');\n    var componentUtil = require('../util/component');\n    var clazzUtil = require('../util/clazz');\n\n    var Component = function () {\n        /**\n         * @type {module:zrender/container/Group}\n         * @readOnly\n         */\n        this.group = new Group();\n\n        /**\n         * @type {string}\n         * @readOnly\n         */\n        this.uid = componentUtil.getUID('viewComponent');\n    };\n\n    Component.prototype = {\n\n        constructor: Component,\n\n        init: function (ecModel, api) {},\n\n        render: function (componentModel, ecModel, api, payload) {},\n\n        dispose: function () {}\n\n    };\n\n    var componentProto = Component.prototype;\n    componentProto.updateView\n        = componentProto.updateLayout\n        = componentProto.updateVisual\n        = function (seriesModel, ecModel, api, payload) {\n            // Do nothing;\n        };\n    // Enable Component.extend.\n    clazzUtil.enableClassExtend(Component);\n\n    // Enable capability of registerClass, getClass, hasClass, registerSubTypeDefaulter and so on.\n    clazzUtil.enableClassManagement(Component, {registerWhenExtend: true});\n\n    module.exports = Component;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/view/Component.js\n// module id = 375\n// module chunks = 0 1 2 3 4","'use strict';\n\n\n    var zrUtil = require('zrender/lib/core/util');\n\n    var echartsAPIList = [\n        'getDom', 'getZr', 'getWidth', 'getHeight', 'dispatchAction', 'isDisposed',\n        'on', 'off', 'getDataURL', 'getConnectedDataURL', 'getModel', 'getOption'\n    ];\n\n    function ExtensionAPI(chartInstance) {\n        zrUtil.each(echartsAPIList, function (name) {\n            this[name] = zrUtil.bind(chartInstance[name], chartInstance);\n        }, this);\n    }\n\n    module.exports = ExtensionAPI;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/ExtensionAPI.js\n// module id = 376\n// module chunks = 0 1 2 3 4","\n\n    var zrUtil = require('zrender/lib/core/util');\n    var echarts = require('../echarts');\n    var PRIORITY = echarts.PRIORITY;\n\n    require('./line/LineSeries');\n    require('./line/LineView');\n\n    echarts.registerVisual(zrUtil.curry(\n        require('../visual/symbol'), 'line', 'circle', 'line'\n    ));\n    echarts.registerLayout(zrUtil.curry(\n        require('../layout/points'), 'line'\n    ));\n\n    // Down sample after filter\n    echarts.registerProcessor(PRIORITY.PROCESSOR.STATISTIC, zrUtil.curry(\n        require('../processor/dataSample'), 'line'\n    ));\n\n    // In case developer forget to include grid component\n    require('../component/grid');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/chart/line.js\n// module id = 377\n// module chunks = 0 1 2 3 4","'use strict';\n\n\n    var createListFromArray = require('../helper/createListFromArray');\n    var SeriesModel = require('../../model/Series');\n\n    module.exports = SeriesModel.extend({\n\n        type: 'series.line',\n\n        dependencies: ['grid', 'polar'],\n\n        getInitialData: function (option, ecModel) {\n            if (__DEV__) {\n                var coordSys = option.coordinateSystem;\n                if (coordSys !== 'polar' && coordSys !== 'cartesian2d') {\n                    throw new Error('Line not support coordinateSystem besides cartesian and polar');\n                }\n            }\n            return createListFromArray(option.data, this, ecModel);\n        },\n\n        defaultOption: {\n            zlevel: 0,                  // 一级层叠\n            z: 2,                       // 二级层叠\n            coordinateSystem: 'cartesian2d',\n            legendHoverLink: true,\n\n            hoverAnimation: true,\n            // stack: null\n            // xAxisIndex: 0,\n            // yAxisIndex: 0,\n\n            // polarIndex: 0,\n\n            // If clip the overflow value\n            clipOverflow: true,\n\n            label: {\n                normal: {\n                    position: 'top'\n                }\n            },\n            // itemStyle: {\n            //     normal: {},\n            //     emphasis: {}\n            // },\n            lineStyle: {\n                normal: {\n                    width: 2,\n                    type: 'solid'\n                }\n            },\n            // areaStyle: {},\n            // false, 'start', 'end', 'middle'\n            step: false,\n\n            // Disabled if step is true\n            smooth: false,\n            smoothMonotone: null,\n            // 拐点图形类型\n            symbol: 'emptyCircle',\n            // 拐点图形大小\n            symbolSize: 4,\n            // 拐点图形旋转控制\n            symbolRotate: null,\n\n            // 是否显示 symbol, 只有在 tooltip hover 的时候显示\n            showSymbol: true,\n            // 标志图形默认只有主轴显示（随主轴标签间隔隐藏策略）\n            showAllSymbol: false,\n\n            // 是否连接断点\n            connectNulls: false,\n\n            // 数据过滤，'average', 'max', 'min', 'sum'\n            sampling: 'none',\n\n            animationEasing: 'linear',\n\n            // Disable progressive\n            progressive: 0,\n            hoverLayerThreshold: Infinity\n        }\n    });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/chart/line/LineSeries.js\n// module id = 378\n// module chunks = 0 1 2 3 4","'use strict';\n// FIXME step not support polar\n\n\n    var zrUtil = require('zrender/lib/core/util');\n    var SymbolDraw = require('../helper/SymbolDraw');\n    var Symbol = require('../helper/Symbol');\n    var lineAnimationDiff = require('./lineAnimationDiff');\n    var graphic = require('../../util/graphic');\n    var modelUtil = require('../../util/model');\n    var polyHelper = require('./poly');\n    var ChartView = require('../../view/Chart');\n\n    function isPointsSame(points1, points2) {\n        if (points1.length !== points2.length) {\n            return;\n        }\n        for (var i = 0; i < points1.length; i++) {\n            var p1 = points1[i];\n            var p2 = points2[i];\n            if (p1[0] !== p2[0] || p1[1] !== p2[1]) {\n                return;\n            }\n        }\n        return true;\n    }\n\n    function getSmooth(smooth) {\n        return typeof (smooth) === 'number' ? smooth : (smooth ? 0.3 : 0);\n    }\n\n    function getAxisExtentWithGap(axis) {\n        var extent = axis.getGlobalExtent();\n        if (axis.onBand) {\n            // Remove extra 1px to avoid line miter in clipped edge\n            var halfBandWidth = axis.getBandWidth() / 2 - 1;\n            var dir = extent[1] > extent[0] ? 1 : -1;\n            extent[0] += dir * halfBandWidth;\n            extent[1] -= dir * halfBandWidth;\n        }\n        return extent;\n    }\n\n    function sign(val) {\n        return val >= 0 ? 1 : -1;\n    }\n    /**\n     * @param {module:echarts/coord/cartesian/Cartesian2D|module:echarts/coord/polar/Polar} coordSys\n     * @param {module:echarts/data/List} data\n     * @param {Array.<Array.<number>>} points\n     * @private\n     */\n    function getStackedOnPoints(coordSys, data) {\n        var baseAxis = coordSys.getBaseAxis();\n        var valueAxis = coordSys.getOtherAxis(baseAxis);\n        var valueStart = baseAxis.onZero\n            ? 0 : valueAxis.scale.getExtent()[0];\n\n        var valueDim = valueAxis.dim;\n\n        var baseDataOffset = valueDim === 'x' || valueDim === 'radius' ? 1 : 0;\n\n        return data.mapArray([valueDim], function (val, idx) {\n            var stackedOnSameSign;\n            var stackedOn = data.stackedOn;\n            // Find first stacked value with same sign\n            while (stackedOn &&\n                sign(stackedOn.get(valueDim, idx)) === sign(val)\n            ) {\n                stackedOnSameSign = stackedOn;\n                break;\n            }\n            var stackedData = [];\n            stackedData[baseDataOffset] = data.get(baseAxis.dim, idx);\n            stackedData[1 - baseDataOffset] = stackedOnSameSign\n                ? stackedOnSameSign.get(valueDim, idx, true) : valueStart;\n\n            return coordSys.dataToPoint(stackedData);\n        }, true);\n    }\n\n    function createGridClipShape(cartesian, hasAnimation, seriesModel) {\n        var xExtent = getAxisExtentWithGap(cartesian.getAxis('x'));\n        var yExtent = getAxisExtentWithGap(cartesian.getAxis('y'));\n        var isHorizontal = cartesian.getBaseAxis().isHorizontal();\n\n        var x = Math.min(xExtent[0], xExtent[1]);\n        var y = Math.min(yExtent[0], yExtent[1]);\n        var width = Math.max(xExtent[0], xExtent[1]) - x;\n        var height = Math.max(yExtent[0], yExtent[1]) - y;\n        var lineWidth = seriesModel.get('lineStyle.normal.width') || 2;\n        // Expand clip shape to avoid clipping when line value exceeds axis\n        var expandSize = seriesModel.get('clipOverflow') ? lineWidth / 2 : Math.max(width, height);\n        if (isHorizontal) {\n            y -= expandSize;\n            height += expandSize * 2;\n        }\n        else {\n            x -= expandSize;\n            width += expandSize * 2;\n        }\n\n        var clipPath = new graphic.Rect({\n            shape: {\n                x: x,\n                y: y,\n                width: width,\n                height: height\n            }\n        });\n\n        if (hasAnimation) {\n            clipPath.shape[isHorizontal ? 'width' : 'height'] = 0;\n            graphic.initProps(clipPath, {\n                shape: {\n                    width: width,\n                    height: height\n                }\n            }, seriesModel);\n        }\n\n        return clipPath;\n    }\n\n    function createPolarClipShape(polar, hasAnimation, seriesModel) {\n        var angleAxis = polar.getAngleAxis();\n        var radiusAxis = polar.getRadiusAxis();\n\n        var radiusExtent = radiusAxis.getExtent();\n        var angleExtent = angleAxis.getExtent();\n\n        var RADIAN = Math.PI / 180;\n\n        var clipPath = new graphic.Sector({\n            shape: {\n                cx: polar.cx,\n                cy: polar.cy,\n                r0: radiusExtent[0],\n                r: radiusExtent[1],\n                startAngle: -angleExtent[0] * RADIAN,\n                endAngle: -angleExtent[1] * RADIAN,\n                clockwise: angleAxis.inverse\n            }\n        });\n\n        if (hasAnimation) {\n            clipPath.shape.endAngle = -angleExtent[0] * RADIAN;\n            graphic.initProps(clipPath, {\n                shape: {\n                    endAngle: -angleExtent[1] * RADIAN\n                }\n            }, seriesModel);\n        }\n\n        return clipPath;\n    }\n\n    function createClipShape(coordSys, hasAnimation, seriesModel) {\n        return coordSys.type === 'polar'\n            ? createPolarClipShape(coordSys, hasAnimation, seriesModel)\n            : createGridClipShape(coordSys, hasAnimation, seriesModel);\n    }\n\n    function turnPointsIntoStep(points, coordSys, stepTurnAt) {\n        var baseAxis = coordSys.getBaseAxis();\n        var baseIndex = baseAxis.dim === 'x' || baseAxis.dim === 'radius' ? 0 : 1;\n\n        var stepPoints = [];\n        for (var i = 0; i < points.length - 1; i++) {\n            var nextPt = points[i + 1];\n            var pt = points[i];\n            stepPoints.push(pt);\n\n            var stepPt = [];\n            switch (stepTurnAt) {\n                case 'end':\n                    stepPt[baseIndex] = nextPt[baseIndex];\n                    stepPt[1 - baseIndex] = pt[1 - baseIndex];\n                    // default is start\n                    stepPoints.push(stepPt);\n                    break;\n                case 'middle':\n                    // default is start\n                    var middle = (pt[baseIndex] + nextPt[baseIndex]) / 2;\n                    var stepPt2 = [];\n                    stepPt[baseIndex] = stepPt2[baseIndex] = middle;\n                    stepPt[1 - baseIndex] = pt[1 - baseIndex];\n                    stepPt2[1 - baseIndex] = nextPt[1 - baseIndex];\n                    stepPoints.push(stepPt);\n                    stepPoints.push(stepPt2);\n                    break;\n                default:\n                    stepPt[baseIndex] = pt[baseIndex];\n                    stepPt[1 - baseIndex] = nextPt[1 - baseIndex];\n                    // default is start\n                    stepPoints.push(stepPt);\n            }\n        }\n        // Last points\n        points[i] && stepPoints.push(points[i]);\n        return stepPoints;\n    }\n\n    function getVisualGradient(data, coordSys) {\n        var visualMetaList = data.getVisual('visualMeta');\n        if (!visualMetaList || !visualMetaList.length || !data.count()) {\n            // When data.count() is 0, gradient range can not be calculated.\n            return;\n        }\n\n        var visualMeta;\n        for (var i = visualMetaList.length - 1; i >= 0; i--) {\n            // Can only be x or y\n            if (visualMetaList[i].dimension < 2) {\n                visualMeta = visualMetaList[i];\n                break;\n            }\n        }\n        if (!visualMeta || coordSys.type !== 'cartesian2d') {\n            if (__DEV__) {\n                console.warn('Visual map on line style only support x or y dimension.');\n            }\n            return;\n        }\n\n        // If the area to be rendered is bigger than area defined by LinearGradient,\n        // the canvas spec prescribes that the color of the first stop and the last\n        // stop should be used. But if two stops are added at offset 0, in effect\n        // browsers use the color of the second stop to render area outside\n        // LinearGradient. So we can only infinitesimally extend area defined in\n        // LinearGradient to render `outerColors`.\n\n        var dimension = visualMeta.dimension;\n        var dimName = data.dimensions[dimension];\n        var axis = coordSys.getAxis(dimName);\n\n        // dataToCoor mapping may not be linear, but must be monotonic.\n        var colorStops = zrUtil.map(visualMeta.stops, function (stop) {\n            return {\n                coord: axis.toGlobalCoord(axis.dataToCoord(stop.value)),\n                color: stop.color\n            };\n        });\n        var stopLen = colorStops.length;\n        var outerColors = visualMeta.outerColors.slice();\n\n        if (stopLen && colorStops[0].coord > colorStops[stopLen - 1].coord) {\n            colorStops.reverse();\n            outerColors.reverse();\n        }\n\n        var tinyExtent = 10; // Arbitrary value: 10px\n        var minCoord = colorStops[0].coord - tinyExtent;\n        var maxCoord = colorStops[stopLen - 1].coord + tinyExtent;\n        var coordSpan = maxCoord - minCoord;\n\n        if (coordSpan < 1e-3) {\n            return 'transparent';\n        }\n\n        zrUtil.each(colorStops, function (stop) {\n            stop.offset = (stop.coord - minCoord) / coordSpan;\n        });\n        colorStops.push({\n            offset: stopLen ? colorStops[stopLen - 1].offset : 0.5,\n            color: outerColors[1] || 'transparent'\n        });\n        colorStops.unshift({ // notice colorStops.length have been changed.\n            offset: stopLen ? colorStops[0].offset : 0.5,\n            color: outerColors[0] || 'transparent'\n        });\n\n        // zrUtil.each(colorStops, function (colorStop) {\n        //     // Make sure each offset has rounded px to avoid not sharp edge\n        //     colorStop.offset = (Math.round(colorStop.offset * (end - start) + start) - start) / (end - start);\n        // });\n\n        var gradient = new graphic.LinearGradient(0, 0, 0, 0, colorStops, true);\n        gradient[dimName] = minCoord;\n        gradient[dimName + '2'] = maxCoord;\n\n        return gradient;\n    }\n\n    module.exports = ChartView.extend({\n\n        type: 'line',\n\n        init: function () {\n            var lineGroup = new graphic.Group();\n\n            var symbolDraw = new SymbolDraw();\n            this.group.add(symbolDraw.group);\n\n            this._symbolDraw = symbolDraw;\n            this._lineGroup = lineGroup;\n        },\n\n        render: function (seriesModel, ecModel, api) {\n            var coordSys = seriesModel.coordinateSystem;\n            var group = this.group;\n            var data = seriesModel.getData();\n            var lineStyleModel = seriesModel.getModel('lineStyle.normal');\n            var areaStyleModel = seriesModel.getModel('areaStyle.normal');\n\n            var points = data.mapArray(data.getItemLayout, true);\n\n            var isCoordSysPolar = coordSys.type === 'polar';\n            var prevCoordSys = this._coordSys;\n\n            var symbolDraw = this._symbolDraw;\n            var polyline = this._polyline;\n            var polygon = this._polygon;\n\n            var lineGroup = this._lineGroup;\n\n            var hasAnimation = seriesModel.get('animation');\n\n            var isAreaChart = !areaStyleModel.isEmpty();\n            var stackedOnPoints = getStackedOnPoints(coordSys, data);\n\n            var showSymbol = seriesModel.get('showSymbol');\n\n            var isSymbolIgnore = showSymbol && !isCoordSysPolar && !seriesModel.get('showAllSymbol')\n                && this._getSymbolIgnoreFunc(data, coordSys);\n\n            // Remove temporary symbols\n            var oldData = this._data;\n            oldData && oldData.eachItemGraphicEl(function (el, idx) {\n                if (el.__temp) {\n                    group.remove(el);\n                    oldData.setItemGraphicEl(idx, null);\n                }\n            });\n\n            // Remove previous created symbols if showSymbol changed to false\n            if (!showSymbol) {\n                symbolDraw.remove();\n            }\n\n            group.add(lineGroup);\n\n            // FIXME step not support polar\n            var step = !isCoordSysPolar && seriesModel.get('step');\n            // Initialization animation or coordinate system changed\n            if (\n                !(polyline && prevCoordSys.type === coordSys.type && step === this._step)\n            ) {\n                showSymbol && symbolDraw.updateData(data, isSymbolIgnore);\n\n                if (step) {\n                    // TODO If stacked series is not step\n                    points = turnPointsIntoStep(points, coordSys, step);\n                    stackedOnPoints = turnPointsIntoStep(stackedOnPoints, coordSys, step);\n                }\n\n                polyline = this._newPolyline(points, coordSys, hasAnimation);\n                if (isAreaChart) {\n                    polygon = this._newPolygon(\n                        points, stackedOnPoints,\n                        coordSys, hasAnimation\n                    );\n                }\n                lineGroup.setClipPath(createClipShape(coordSys, true, seriesModel));\n            }\n            else {\n                if (isAreaChart && !polygon) {\n                    // If areaStyle is added\n                    polygon = this._newPolygon(\n                        points, stackedOnPoints,\n                        coordSys, hasAnimation\n                    );\n                }\n                else if (polygon && !isAreaChart) {\n                    // If areaStyle is removed\n                    lineGroup.remove(polygon);\n                    polygon = this._polygon = null;\n                }\n\n                // Update clipPath\n                lineGroup.setClipPath(createClipShape(coordSys, false, seriesModel));\n\n                // Always update, or it is wrong in the case turning on legend\n                // because points are not changed\n                showSymbol && symbolDraw.updateData(data, isSymbolIgnore);\n\n                // Stop symbol animation and sync with line points\n                // FIXME performance?\n                data.eachItemGraphicEl(function (el) {\n                    el.stopAnimation(true);\n                });\n\n                // In the case data zoom triggerred refreshing frequently\n                // Data may not change if line has a category axis. So it should animate nothing\n                if (!isPointsSame(this._stackedOnPoints, stackedOnPoints)\n                    || !isPointsSame(this._points, points)\n                ) {\n                    if (hasAnimation) {\n                        this._updateAnimation(\n                            data, stackedOnPoints, coordSys, api, step\n                        );\n                    }\n                    else {\n                        // Not do it in update with animation\n                        if (step) {\n                            // TODO If stacked series is not step\n                            points = turnPointsIntoStep(points, coordSys, step);\n                            stackedOnPoints = turnPointsIntoStep(stackedOnPoints, coordSys, step);\n                        }\n\n                        polyline.setShape({\n                            points: points\n                        });\n                        polygon && polygon.setShape({\n                            points: points,\n                            stackedOnPoints: stackedOnPoints\n                        });\n                    }\n                }\n            }\n\n            var visualColor = getVisualGradient(data, coordSys) || data.getVisual('color');\n\n            polyline.useStyle(zrUtil.defaults(\n                // Use color in lineStyle first\n                lineStyleModel.getLineStyle(),\n                {\n                    fill: 'none',\n                    stroke: visualColor,\n                    lineJoin: 'bevel'\n                }\n            ));\n\n            var smooth = seriesModel.get('smooth');\n            smooth = getSmooth(seriesModel.get('smooth'));\n            polyline.setShape({\n                smooth: smooth,\n                smoothMonotone: seriesModel.get('smoothMonotone'),\n                connectNulls: seriesModel.get('connectNulls')\n            });\n\n            if (polygon) {\n                var stackedOn = data.stackedOn;\n                var stackedOnSmooth = 0;\n\n                polygon.useStyle(zrUtil.defaults(\n                    areaStyleModel.getAreaStyle(),\n                    {\n                        fill: visualColor,\n                        opacity: 0.7,\n                        lineJoin: 'bevel'\n                    }\n                ));\n\n                if (stackedOn) {\n                    var stackedOnSeries = stackedOn.hostModel;\n                    stackedOnSmooth = getSmooth(stackedOnSeries.get('smooth'));\n                }\n\n                polygon.setShape({\n                    smooth: smooth,\n                    stackedOnSmooth: stackedOnSmooth,\n                    smoothMonotone: seriesModel.get('smoothMonotone'),\n                    connectNulls: seriesModel.get('connectNulls')\n                });\n            }\n\n            this._data = data;\n            // Save the coordinate system for transition animation when data changed\n            this._coordSys = coordSys;\n            this._stackedOnPoints = stackedOnPoints;\n            this._points = points;\n            this._step = step;\n        },\n\n        dispose: function () {},\n\n        highlight: function (seriesModel, ecModel, api, payload) {\n            var data = seriesModel.getData();\n            var dataIndex = modelUtil.queryDataIndex(data, payload);\n\n            if (!(dataIndex instanceof Array) && dataIndex != null && dataIndex >= 0) {\n                var symbol = data.getItemGraphicEl(dataIndex);\n                if (!symbol) {\n                    // Create a temporary symbol if it is not exists\n                    var pt = data.getItemLayout(dataIndex);\n                    if (!pt) {\n                        // Null data\n                        return;\n                    }\n                    symbol = new Symbol(data, dataIndex);\n                    symbol.position = pt;\n                    symbol.setZ(\n                        seriesModel.get('zlevel'),\n                        seriesModel.get('z')\n                    );\n                    symbol.ignore = isNaN(pt[0]) || isNaN(pt[1]);\n                    symbol.__temp = true;\n                    data.setItemGraphicEl(dataIndex, symbol);\n\n                    // Stop scale animation\n                    symbol.stopSymbolAnimation(true);\n\n                    this.group.add(symbol);\n                }\n                symbol.highlight();\n            }\n            else {\n                // Highlight whole series\n                ChartView.prototype.highlight.call(\n                    this, seriesModel, ecModel, api, payload\n                );\n            }\n        },\n\n        downplay: function (seriesModel, ecModel, api, payload) {\n            var data = seriesModel.getData();\n            var dataIndex = modelUtil.queryDataIndex(data, payload);\n            if (dataIndex != null && dataIndex >= 0) {\n                var symbol = data.getItemGraphicEl(dataIndex);\n                if (symbol) {\n                    if (symbol.__temp) {\n                        data.setItemGraphicEl(dataIndex, null);\n                        this.group.remove(symbol);\n                    }\n                    else {\n                        symbol.downplay();\n                    }\n                }\n            }\n            else {\n                // Downplay whole series\n                ChartView.prototype.downplay.call(\n                    this, seriesModel, ecModel, api, payload\n                );\n            }\n        },\n\n        /**\n         * @param {module:zrender/container/Group} group\n         * @param {Array.<Array.<number>>} points\n         * @private\n         */\n        _newPolyline: function (points) {\n            var polyline = this._polyline;\n            // Remove previous created polyline\n            if (polyline) {\n                this._lineGroup.remove(polyline);\n            }\n\n            polyline = new polyHelper.Polyline({\n                shape: {\n                    points: points\n                },\n                silent: true,\n                z2: 10\n            });\n\n            this._lineGroup.add(polyline);\n\n            this._polyline = polyline;\n\n            return polyline;\n        },\n\n        /**\n         * @param {module:zrender/container/Group} group\n         * @param {Array.<Array.<number>>} stackedOnPoints\n         * @param {Array.<Array.<number>>} points\n         * @private\n         */\n        _newPolygon: function (points, stackedOnPoints) {\n            var polygon = this._polygon;\n            // Remove previous created polygon\n            if (polygon) {\n                this._lineGroup.remove(polygon);\n            }\n\n            polygon = new polyHelper.Polygon({\n                shape: {\n                    points: points,\n                    stackedOnPoints: stackedOnPoints\n                },\n                silent: true\n            });\n\n            this._lineGroup.add(polygon);\n\n            this._polygon = polygon;\n            return polygon;\n        },\n        /**\n         * @private\n         */\n        _getSymbolIgnoreFunc: function (data, coordSys) {\n            var categoryAxis = coordSys.getAxesByScale('ordinal')[0];\n            // `getLabelInterval` is provided by echarts/component/axis\n            if (categoryAxis && categoryAxis.isLabelIgnored) {\n                return zrUtil.bind(categoryAxis.isLabelIgnored, categoryAxis);\n            }\n        },\n\n        /**\n         * @private\n         */\n        // FIXME Two value axis\n        _updateAnimation: function (data, stackedOnPoints, coordSys, api, step) {\n            var polyline = this._polyline;\n            var polygon = this._polygon;\n            var seriesModel = data.hostModel;\n\n            var diff = lineAnimationDiff(\n                this._data, data,\n                this._stackedOnPoints, stackedOnPoints,\n                this._coordSys, coordSys\n            );\n\n            var current = diff.current;\n            var stackedOnCurrent = diff.stackedOnCurrent;\n            var next = diff.next;\n            var stackedOnNext = diff.stackedOnNext;\n            if (step) {\n                // TODO If stacked series is not step\n                current = turnPointsIntoStep(diff.current, coordSys, step);\n                stackedOnCurrent = turnPointsIntoStep(diff.stackedOnCurrent, coordSys, step);\n                next = turnPointsIntoStep(diff.next, coordSys, step);\n                stackedOnNext = turnPointsIntoStep(diff.stackedOnNext, coordSys, step);\n            }\n            // `diff.current` is subset of `current` (which should be ensured by\n            // turnPointsIntoStep), so points in `__points` can be updated when\n            // points in `current` are update during animation.\n            polyline.shape.__points = diff.current;\n            polyline.shape.points = current;\n\n            graphic.updateProps(polyline, {\n                shape: {\n                    points: next\n                }\n            }, seriesModel);\n\n            if (polygon) {\n                polygon.setShape({\n                    points: current,\n                    stackedOnPoints: stackedOnCurrent\n                });\n                graphic.updateProps(polygon, {\n                    shape: {\n                        points: next,\n                        stackedOnPoints: stackedOnNext\n                    }\n                }, seriesModel);\n            }\n\n            var updatedDataInfo = [];\n            var diffStatus = diff.status;\n\n            for (var i = 0; i < diffStatus.length; i++) {\n                var cmd = diffStatus[i].cmd;\n                if (cmd === '=') {\n                    var el = data.getItemGraphicEl(diffStatus[i].idx1);\n                    if (el) {\n                        updatedDataInfo.push({\n                            el: el,\n                            ptIdx: i    // Index of points\n                        });\n                    }\n                }\n            }\n\n            if (polyline.animators && polyline.animators.length) {\n                polyline.animators[0].during(function () {\n                    for (var i = 0; i < updatedDataInfo.length; i++) {\n                        var el = updatedDataInfo[i].el;\n                        el.attr('position', polyline.shape.__points[updatedDataInfo[i].ptIdx]);\n                    }\n                });\n            }\n        },\n\n        remove: function (ecModel) {\n            var group = this.group;\n            var oldData = this._data;\n            this._lineGroup.removeAll();\n            this._symbolDraw.remove(true);\n            // Remove temporary created elements when highlighting\n            oldData && oldData.eachItemGraphicEl(function (el, idx) {\n                if (el.__temp) {\n                    group.remove(el);\n                    oldData.setItemGraphicEl(idx, null);\n                }\n            });\n\n            this._polyline =\n            this._polygon =\n            this._coordSys =\n            this._points =\n            this._stackedOnPoints =\n            this._data = null;\n        }\n    });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/chart/line/LineView.js\n// module id = 379\n// module chunks = 0 1 2 3 4","\n\n    // var arrayDiff = require('zrender/lib/core/arrayDiff');\n    // 'zrender/core/arrayDiff' has been used before, but it did\n    // not do well in performance when roam with fixed dataZoom window.\n\n    function sign(val) {\n        return val >= 0 ? 1 : -1;\n    }\n\n    function getStackedOnPoint(coordSys, data, idx) {\n        var baseAxis = coordSys.getBaseAxis();\n        var valueAxis = coordSys.getOtherAxis(baseAxis);\n        var valueStart = baseAxis.onZero\n            ? 0 : valueAxis.scale.getExtent()[0];\n\n        var valueDim = valueAxis.dim;\n        var baseDataOffset = valueDim === 'x' || valueDim === 'radius' ? 1 : 0;\n\n        var stackedOnSameSign;\n        var stackedOn = data.stackedOn;\n        var val = data.get(valueDim, idx);\n        // Find first stacked value with same sign\n        while (stackedOn &&\n            sign(stackedOn.get(valueDim, idx)) === sign(val)\n        ) {\n            stackedOnSameSign = stackedOn;\n            break;\n        }\n        var stackedData = [];\n        stackedData[baseDataOffset] = data.get(baseAxis.dim, idx);\n        stackedData[1 - baseDataOffset] = stackedOnSameSign\n            ? stackedOnSameSign.get(valueDim, idx, true) : valueStart;\n\n        return coordSys.dataToPoint(stackedData);\n    }\n\n    // function convertToIntId(newIdList, oldIdList) {\n    //     // Generate int id instead of string id.\n    //     // Compare string maybe slow in score function of arrDiff\n\n    //     // Assume id in idList are all unique\n    //     var idIndicesMap = {};\n    //     var idx = 0;\n    //     for (var i = 0; i < newIdList.length; i++) {\n    //         idIndicesMap[newIdList[i]] = idx;\n    //         newIdList[i] = idx++;\n    //     }\n    //     for (var i = 0; i < oldIdList.length; i++) {\n    //         var oldId = oldIdList[i];\n    //         // Same with newIdList\n    //         if (idIndicesMap[oldId]) {\n    //             oldIdList[i] = idIndicesMap[oldId];\n    //         }\n    //         else {\n    //             oldIdList[i] = idx++;\n    //         }\n    //     }\n    // }\n\n    function diffData(oldData, newData) {\n        var diffResult = [];\n\n        newData.diff(oldData)\n            .add(function (idx) {\n                diffResult.push({cmd: '+', idx: idx});\n            })\n            .update(function (newIdx, oldIdx) {\n                diffResult.push({cmd: '=', idx: oldIdx, idx1: newIdx});\n            })\n            .remove(function (idx) {\n                diffResult.push({cmd: '-', idx: idx});\n            })\n            .execute();\n\n        return diffResult;\n    }\n\n    module.exports = function (\n        oldData, newData,\n        oldStackedOnPoints, newStackedOnPoints,\n        oldCoordSys, newCoordSys\n    ) {\n        var diff = diffData(oldData, newData);\n\n        // var newIdList = newData.mapArray(newData.getId);\n        // var oldIdList = oldData.mapArray(oldData.getId);\n\n        // convertToIntId(newIdList, oldIdList);\n\n        // // FIXME One data ?\n        // diff = arrayDiff(oldIdList, newIdList);\n\n        var currPoints = [];\n        var nextPoints = [];\n        // Points for stacking base line\n        var currStackedPoints = [];\n        var nextStackedPoints = [];\n\n        var status = [];\n        var sortedIndices = [];\n        var rawIndices = [];\n        var dims = newCoordSys.dimensions;\n        for (var i = 0; i < diff.length; i++) {\n            var diffItem = diff[i];\n            var pointAdded = true;\n\n            // FIXME, animation is not so perfect when dataZoom window moves fast\n            // Which is in case remvoing or add more than one data in the tail or head\n            switch (diffItem.cmd) {\n                case '=':\n                    var currentPt = oldData.getItemLayout(diffItem.idx);\n                    var nextPt = newData.getItemLayout(diffItem.idx1);\n                    // If previous data is NaN, use next point directly\n                    if (isNaN(currentPt[0]) || isNaN(currentPt[1])) {\n                        currentPt = nextPt.slice();\n                    }\n                    currPoints.push(currentPt);\n                    nextPoints.push(nextPt);\n\n                    currStackedPoints.push(oldStackedOnPoints[diffItem.idx]);\n                    nextStackedPoints.push(newStackedOnPoints[diffItem.idx1]);\n\n                    rawIndices.push(newData.getRawIndex(diffItem.idx1));\n                    break;\n                case '+':\n                    var idx = diffItem.idx;\n                    currPoints.push(\n                        oldCoordSys.dataToPoint([\n                            newData.get(dims[0], idx, true), newData.get(dims[1], idx, true)\n                        ])\n                    );\n\n                    nextPoints.push(newData.getItemLayout(idx).slice());\n\n                    currStackedPoints.push(\n                        getStackedOnPoint(oldCoordSys, newData, idx)\n                    );\n                    nextStackedPoints.push(newStackedOnPoints[idx]);\n\n                    rawIndices.push(newData.getRawIndex(idx));\n                    break;\n                case '-':\n                    var idx = diffItem.idx;\n                    var rawIndex = oldData.getRawIndex(idx);\n                    // Data is replaced. In the case of dynamic data queue\n                    // FIXME FIXME FIXME\n                    if (rawIndex !== idx) {\n                        currPoints.push(oldData.getItemLayout(idx));\n                        nextPoints.push(newCoordSys.dataToPoint([\n                            oldData.get(dims[0], idx, true), oldData.get(dims[1], idx, true)\n                        ]));\n\n                        currStackedPoints.push(oldStackedOnPoints[idx]);\n                        nextStackedPoints.push(\n                            getStackedOnPoint(\n                                newCoordSys, oldData, idx\n                            )\n                        );\n\n                        rawIndices.push(rawIndex);\n                    }\n                    else {\n                        pointAdded = false;\n                    }\n            }\n\n            // Original indices\n            if (pointAdded) {\n                status.push(diffItem);\n                sortedIndices.push(sortedIndices.length);\n            }\n        }\n\n        // Diff result may be crossed if all items are changed\n        // Sort by data index\n        sortedIndices.sort(function (a, b) {\n            return rawIndices[a] - rawIndices[b];\n        });\n\n        var sortedCurrPoints = [];\n        var sortedNextPoints = [];\n\n        var sortedCurrStackedPoints = [];\n        var sortedNextStackedPoints = [];\n\n        var sortedStatus = [];\n        for (var i = 0; i < sortedIndices.length; i++) {\n            var idx = sortedIndices[i];\n            sortedCurrPoints[i] = currPoints[idx];\n            sortedNextPoints[i] = nextPoints[idx];\n\n            sortedCurrStackedPoints[i] = currStackedPoints[idx];\n            sortedNextStackedPoints[i] = nextStackedPoints[idx];\n\n            sortedStatus[i] = status[idx];\n        }\n\n        return {\n            current: sortedCurrPoints,\n            next: sortedNextPoints,\n\n            stackedOnCurrent: sortedCurrStackedPoints,\n            stackedOnNext: sortedNextStackedPoints,\n\n            status: sortedStatus\n        };\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/chart/line/lineAnimationDiff.js\n// module id = 380\n// module chunks = 0 1 2 3 4","// Poly path support NaN point\n\n\n    var Path = require('zrender/lib/graphic/Path');\n    var vec2 = require('zrender/lib/core/vector');\n\n    var vec2Min = vec2.min;\n    var vec2Max = vec2.max;\n\n    var scaleAndAdd = vec2.scaleAndAdd;\n    var v2Copy = vec2.copy;\n\n    // Temporary variable\n    var v = [];\n    var cp0 = [];\n    var cp1 = [];\n\n    function isPointNull(p) {\n        return isNaN(p[0]) || isNaN(p[1]);\n    }\n\n    function drawSegment(\n        ctx, points, start, segLen, allLen,\n        dir, smoothMin, smoothMax, smooth, smoothMonotone, connectNulls\n    ) {\n        var prevIdx = 0;\n        var idx = start;\n        for (var k = 0; k < segLen; k++) {\n            var p = points[idx];\n            if (idx >= allLen || idx < 0) {\n                break;\n            }\n            if (isPointNull(p)) {\n                if (connectNulls) {\n                    idx += dir;\n                    continue;\n                }\n                break;\n            }\n\n            if (idx === start) {\n                ctx[dir > 0 ? 'moveTo' : 'lineTo'](p[0], p[1]);\n                v2Copy(cp0, p);\n            }\n            else {\n                if (smooth > 0) {\n                    var nextIdx = idx + dir;\n                    var nextP = points[nextIdx];\n                    if (connectNulls) {\n                        // Find next point not null\n                        while (nextP && isPointNull(points[nextIdx])) {\n                            nextIdx += dir;\n                            nextP = points[nextIdx];\n                        }\n                    }\n\n                    var ratioNextSeg = 0.5;\n                    var prevP = points[prevIdx];\n                    var nextP = points[nextIdx];\n                    // Last point\n                    if (!nextP || isPointNull(nextP)) {\n                        v2Copy(cp1, p);\n                    }\n                    else {\n                        // If next data is null in not connect case\n                        if (isPointNull(nextP) && !connectNulls) {\n                            nextP = p;\n                        }\n\n                        vec2.sub(v, nextP, prevP);\n\n                        var lenPrevSeg;\n                        var lenNextSeg;\n                        if (smoothMonotone === 'x' || smoothMonotone === 'y') {\n                            var dim = smoothMonotone === 'x' ? 0 : 1;\n                            lenPrevSeg = Math.abs(p[dim] - prevP[dim]);\n                            lenNextSeg = Math.abs(p[dim] - nextP[dim]);\n                        }\n                        else {\n                            lenPrevSeg = vec2.dist(p, prevP);\n                            lenNextSeg = vec2.dist(p, nextP);\n                        }\n\n                        // Use ratio of seg length\n                        ratioNextSeg = lenNextSeg / (lenNextSeg + lenPrevSeg);\n\n                        scaleAndAdd(cp1, p, v, -smooth * (1 - ratioNextSeg));\n                    }\n                    // Smooth constraint\n                    vec2Min(cp0, cp0, smoothMax);\n                    vec2Max(cp0, cp0, smoothMin);\n                    vec2Min(cp1, cp1, smoothMax);\n                    vec2Max(cp1, cp1, smoothMin);\n\n                    ctx.bezierCurveTo(\n                        cp0[0], cp0[1],\n                        cp1[0], cp1[1],\n                        p[0], p[1]\n                    );\n                    // cp0 of next segment\n                    scaleAndAdd(cp0, p, v, smooth * ratioNextSeg);\n                }\n                else {\n                    ctx.lineTo(p[0], p[1]);\n                }\n            }\n\n            prevIdx = idx;\n            idx += dir;\n        }\n\n        return k;\n    }\n\n    function getBoundingBox(points, smoothConstraint) {\n        var ptMin = [Infinity, Infinity];\n        var ptMax = [-Infinity, -Infinity];\n        if (smoothConstraint) {\n            for (var i = 0; i < points.length; i++) {\n                var pt = points[i];\n                if (pt[0] < ptMin[0]) { ptMin[0] = pt[0]; }\n                if (pt[1] < ptMin[1]) { ptMin[1] = pt[1]; }\n                if (pt[0] > ptMax[0]) { ptMax[0] = pt[0]; }\n                if (pt[1] > ptMax[1]) { ptMax[1] = pt[1]; }\n            }\n        }\n        return {\n            min: smoothConstraint ? ptMin : ptMax,\n            max: smoothConstraint ? ptMax : ptMin\n        };\n    }\n\n    module.exports = {\n\n        Polyline: Path.extend({\n\n            type: 'ec-polyline',\n\n            shape: {\n                points: [],\n\n                smooth: 0,\n\n                smoothConstraint: true,\n\n                smoothMonotone: null,\n\n                connectNulls: false\n            },\n\n            style: {\n                fill: null,\n\n                stroke: '#000'\n            },\n\n            buildPath: function (ctx, shape) {\n                var points = shape.points;\n\n                var i = 0;\n                var len = points.length;\n\n                var result = getBoundingBox(points, shape.smoothConstraint);\n\n                if (shape.connectNulls) {\n                    // Must remove first and last null values avoid draw error in polygon\n                    for (; len > 0; len--) {\n                        if (!isPointNull(points[len - 1])) {\n                            break;\n                        }\n                    }\n                    for (; i < len; i++) {\n                        if (!isPointNull(points[i])) {\n                            break;\n                        }\n                    }\n                }\n                while (i < len) {\n                    i += drawSegment(\n                        ctx, points, i, len, len,\n                        1, result.min, result.max, shape.smooth,\n                        shape.smoothMonotone, shape.connectNulls\n                    ) + 1;\n                }\n            }\n        }),\n\n        Polygon: Path.extend({\n\n            type: 'ec-polygon',\n\n            shape: {\n                points: [],\n\n                // Offset between stacked base points and points\n                stackedOnPoints: [],\n\n                smooth: 0,\n\n                stackedOnSmooth: 0,\n\n                smoothConstraint: true,\n\n                smoothMonotone: null,\n\n                connectNulls: false\n            },\n\n            buildPath: function (ctx, shape) {\n                var points = shape.points;\n                var stackedOnPoints = shape.stackedOnPoints;\n\n                var i = 0;\n                var len = points.length;\n                var smoothMonotone = shape.smoothMonotone;\n                var bbox = getBoundingBox(points, shape.smoothConstraint);\n                var stackedOnBBox = getBoundingBox(stackedOnPoints, shape.smoothConstraint);\n\n                if (shape.connectNulls) {\n                    // Must remove first and last null values avoid draw error in polygon\n                    for (; len > 0; len--) {\n                        if (!isPointNull(points[len - 1])) {\n                            break;\n                        }\n                    }\n                    for (; i < len; i++) {\n                        if (!isPointNull(points[i])) {\n                            break;\n                        }\n                    }\n                }\n                while (i < len) {\n                    var k = drawSegment(\n                        ctx, points, i, len, len,\n                        1, bbox.min, bbox.max, shape.smooth,\n                        smoothMonotone, shape.connectNulls\n                    );\n                    drawSegment(\n                        ctx, stackedOnPoints, i + k - 1, k, len,\n                        -1, stackedOnBBox.min, stackedOnBBox.max, shape.stackedOnSmooth,\n                        smoothMonotone, shape.connectNulls\n                    );\n                    i += k + 1;\n\n                    ctx.closePath();\n                }\n            }\n        })\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/chart/line/poly.js\n// module id = 381\n// module chunks = 0 1 2 3 4","'use strict';\n// TODO boundaryGap\n\n\n    require('../coord/cartesian/AxisModel');\n\n    require('./axis/AxisView');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/component/axis.js\n// module id = 382\n// module chunks = 0 1 2 3 4","\n\n    var zrUtil = require('zrender/lib/core/util');\n    var formatUtil = require('../../util/format');\n    var graphic = require('../../util/graphic');\n    var Model = require('../../model/Model');\n    var numberUtil = require('../../util/number');\n    var remRadian = numberUtil.remRadian;\n    var isRadianAroundZero = numberUtil.isRadianAroundZero;\n    var vec2 = require('zrender/lib/core/vector');\n    var v2ApplyTransform = vec2.applyTransform;\n    var retrieve = zrUtil.retrieve;\n\n    var PI = Math.PI;\n\n    function makeAxisEventDataBase(axisModel) {\n        var eventData = {\n            componentType: axisModel.mainType\n        };\n        eventData[axisModel.mainType + 'Index'] = axisModel.componentIndex;\n        return eventData;\n    }\n\n    /**\n     * A final axis is translated and rotated from a \"standard axis\".\n     * So opt.position and opt.rotation is required.\n     *\n     * A standard axis is and axis from [0, 0] to [0, axisExtent[1]],\n     * for example: (0, 0) ------------> (0, 50)\n     *\n     * nameDirection or tickDirection or labelDirection is 1 means tick\n     * or label is below the standard axis, whereas is -1 means above\n     * the standard axis. labelOffset means offset between label and axis,\n     * which is useful when 'onZero', where axisLabel is in the grid and\n     * label in outside grid.\n     *\n     * Tips: like always,\n     * positive rotation represents anticlockwise, and negative rotation\n     * represents clockwise.\n     * The direction of position coordinate is the same as the direction\n     * of screen coordinate.\n     *\n     * Do not need to consider axis 'inverse', which is auto processed by\n     * axis extent.\n     *\n     * @param {module:zrender/container/Group} group\n     * @param {Object} axisModel\n     * @param {Object} opt Standard axis parameters.\n     * @param {Array.<number>} opt.position [x, y]\n     * @param {number} opt.rotation by radian\n     * @param {number} [opt.nameDirection=1] 1 or -1 Used when nameLocation is 'middle'.\n     * @param {number} [opt.tickDirection=1] 1 or -1\n     * @param {number} [opt.labelDirection=1] 1 or -1\n     * @param {number} [opt.labelOffset=0] Usefull when onZero.\n     * @param {string} [opt.axisLabelShow] default get from axisModel.\n     * @param {string} [opt.axisName] default get from axisModel.\n     * @param {number} [opt.axisNameAvailableWidth]\n     * @param {number} [opt.labelRotation] by degree, default get from axisModel.\n     * @param {number} [opt.labelInterval] Default label interval when label\n     *                                     interval from model is null or 'auto'.\n     * @param {number} [opt.strokeContainThreshold] Default label interval when label\n     */\n    var AxisBuilder = function (axisModel, opt) {\n\n        /**\n         * @readOnly\n         */\n        this.opt = opt;\n\n        /**\n         * @readOnly\n         */\n        this.axisModel = axisModel;\n\n        // Default value\n        zrUtil.defaults(\n            opt,\n            {\n                labelOffset: 0,\n                nameDirection: 1,\n                tickDirection: 1,\n                labelDirection: 1,\n                silent: true\n            }\n        );\n\n        /**\n         * @readOnly\n         */\n        this.group = new graphic.Group();\n\n        // FIXME Not use a seperate text group?\n        var dumbGroup = new graphic.Group({\n            position: opt.position.slice(),\n            rotation: opt.rotation\n        });\n\n        // this.group.add(dumbGroup);\n        // this._dumbGroup = dumbGroup;\n\n        dumbGroup.updateTransform();\n        this._transform = dumbGroup.transform;\n\n        this._dumbGroup = dumbGroup;\n    };\n\n    AxisBuilder.prototype = {\n\n        constructor: AxisBuilder,\n\n        hasBuilder: function (name) {\n            return !!builders[name];\n        },\n\n        add: function (name) {\n            builders[name].call(this);\n        },\n\n        getGroup: function () {\n            return this.group;\n        }\n\n    };\n\n    var builders = {\n\n        /**\n         * @private\n         */\n        axisLine: function () {\n            var opt = this.opt;\n            var axisModel = this.axisModel;\n\n            if (!axisModel.get('axisLine.show')) {\n                return;\n            }\n\n            var extent = this.axisModel.axis.getExtent();\n\n            var matrix = this._transform;\n            var pt1 = [extent[0], 0];\n            var pt2 = [extent[1], 0];\n            if (matrix) {\n                v2ApplyTransform(pt1, pt1, matrix);\n                v2ApplyTransform(pt2, pt2, matrix);\n            }\n\n            this.group.add(new graphic.Line(graphic.subPixelOptimizeLine({\n\n                // Id for animation\n                anid: 'line',\n\n                shape: {\n                    x1: pt1[0],\n                    y1: pt1[1],\n                    x2: pt2[0],\n                    y2: pt2[1]\n                },\n                style: zrUtil.extend(\n                    {lineCap: 'round'},\n                    axisModel.getModel('axisLine.lineStyle').getLineStyle()\n                ),\n                strokeContainThreshold: opt.strokeContainThreshold || 5,\n                silent: true,\n                z2: 1\n            })));\n        },\n\n        /**\n         * @private\n         */\n        axisTick: function () {\n            var axisModel = this.axisModel;\n            var axis = axisModel.axis;\n\n            if (!axisModel.get('axisTick.show') || axis.isBlank()) {\n                return;\n            }\n\n            var tickModel = axisModel.getModel('axisTick');\n            var opt = this.opt;\n\n            var lineStyleModel = tickModel.getModel('lineStyle');\n            var tickLen = tickModel.get('length');\n\n            var tickInterval = getInterval(tickModel, opt.labelInterval);\n            var ticksCoords = axis.getTicksCoords(tickModel.get('alignWithLabel'));\n            var ticks = axis.scale.getTicks();\n\n            var pt1 = [];\n            var pt2 = [];\n            var matrix = this._transform;\n\n            for (var i = 0; i < ticksCoords.length; i++) {\n                // Only ordinal scale support tick interval\n                if (ifIgnoreOnTick(axis, i, tickInterval)) {\n                     continue;\n                }\n\n                var tickCoord = ticksCoords[i];\n\n                pt1[0] = tickCoord;\n                pt1[1] = 0;\n                pt2[0] = tickCoord;\n                pt2[1] = opt.tickDirection * tickLen;\n\n                if (matrix) {\n                    v2ApplyTransform(pt1, pt1, matrix);\n                    v2ApplyTransform(pt2, pt2, matrix);\n                }\n                // Tick line, Not use group transform to have better line draw\n                this.group.add(new graphic.Line(graphic.subPixelOptimizeLine({\n\n                    // Id for animation\n                    anid: 'tick_' + ticks[i],\n\n                    shape: {\n                        x1: pt1[0],\n                        y1: pt1[1],\n                        x2: pt2[0],\n                        y2: pt2[1]\n                    },\n                    style: zrUtil.defaults(\n                        lineStyleModel.getLineStyle(),\n                        {\n                            stroke: axisModel.get('axisLine.lineStyle.color')\n                        }\n                    ),\n                    z2: 2,\n                    silent: true\n                })));\n            }\n        },\n\n        /**\n         * @param {module:echarts/coord/cartesian/AxisModel} axisModel\n         * @param {module:echarts/coord/cartesian/GridModel} gridModel\n         * @private\n         */\n        axisLabel: function () {\n            var opt = this.opt;\n            var axisModel = this.axisModel;\n            var axis = axisModel.axis;\n            var show = retrieve(opt.axisLabelShow, axisModel.get('axisLabel.show'));\n\n            if (!show || axis.isBlank()) {\n                return;\n            }\n\n            var labelModel = axisModel.getModel('axisLabel');\n            var textStyleModel = labelModel.getModel('textStyle');\n            var labelMargin = labelModel.get('margin');\n            var ticks = axis.scale.getTicks();\n            var labels = axisModel.getFormattedLabels();\n\n            // Special label rotate.\n            var labelRotation = retrieve(opt.labelRotation, labelModel.get('rotate')) || 0;\n            // To radian.\n            labelRotation = labelRotation * PI / 180;\n\n            var labelLayout = innerTextLayout(opt, labelRotation, opt.labelDirection);\n            var categoryData = axisModel.get('data');\n\n            var textEls = [];\n            var silent = isSilent(axisModel);\n            var triggerEvent = axisModel.get('triggerEvent');\n\n            zrUtil.each(ticks, function (tickVal, index) {\n                if (ifIgnoreOnTick(axis, index, opt.labelInterval)) {\n                     return;\n                }\n\n                var itemTextStyleModel = textStyleModel;\n                if (categoryData && categoryData[tickVal] && categoryData[tickVal].textStyle) {\n                    itemTextStyleModel = new Model(\n                        categoryData[tickVal].textStyle, textStyleModel, axisModel.ecModel\n                    );\n                }\n                var textColor = itemTextStyleModel.getTextColor()\n                    || axisModel.get('axisLine.lineStyle.color');\n\n                var tickCoord = axis.dataToCoord(tickVal);\n                var pos = [\n                    tickCoord,\n                    opt.labelOffset + opt.labelDirection * labelMargin\n                ];\n                var labelBeforeFormat = axis.scale.getLabel(tickVal);\n\n                var textEl = new graphic.Text({\n\n                    // Id for animation\n                    anid: 'label_' + tickVal,\n\n                    style: {\n                        text: labels[index],\n                        textAlign: itemTextStyleModel.get('align', true) || labelLayout.textAlign,\n                        textVerticalAlign: itemTextStyleModel.get('baseline', true) || labelLayout.verticalAlign,\n                        textFont: itemTextStyleModel.getFont(),\n                        fill: typeof textColor === 'function' ? textColor(labelBeforeFormat) : textColor\n                    },\n                    position: pos,\n                    rotation: labelLayout.rotation,\n                    silent: silent,\n                    z2: 10\n                });\n\n                // Pack data for mouse event\n                if (triggerEvent) {\n                    textEl.eventData = makeAxisEventDataBase(axisModel);\n                    textEl.eventData.targetType = 'axisLabel';\n                    textEl.eventData.value = labelBeforeFormat;\n                }\n\n                // FIXME\n                this._dumbGroup.add(textEl);\n                textEl.updateTransform();\n\n                textEls.push(textEl);\n                this.group.add(textEl);\n\n                textEl.decomposeTransform();\n\n            }, this);\n\n            function isTwoLabelOverlapped(current, next) {\n                var firstRect = current && current.getBoundingRect().clone();\n                var nextRect = next && next.getBoundingRect().clone();\n                if (firstRect && nextRect) {\n                    firstRect.applyTransform(current.getLocalTransform());\n                    nextRect.applyTransform(next.getLocalTransform());\n                    return firstRect.intersect(nextRect);\n                }\n            }\n\n            // If min or max are user set, we need to check\n            // If the tick on min(max) are overlap on their neighbour tick\n            // If they are overlapped, we need to hide the min(max) tick label\n            if (axisModel.getMin() != null) {\n                var firstLabel = textEls[0];\n                var nextLabel = textEls[1];\n                if (isTwoLabelOverlapped(firstLabel, nextLabel)) {\n                    firstLabel.ignore = true;\n                }\n            }\n            if (axisModel.getMax() != null) {\n                var lastLabel = textEls[textEls.length - 1];\n                var prevLabel = textEls[textEls.length - 2];\n                if (isTwoLabelOverlapped(prevLabel, lastLabel)) {\n                    lastLabel.ignore = true;\n                }\n            }\n        },\n\n        /**\n         * @private\n         */\n        axisName: function () {\n            var opt = this.opt;\n            var axisModel = this.axisModel;\n            var name = retrieve(opt.axisName, axisModel.get('name'));\n\n            if (!name) {\n                return;\n            }\n\n            var nameLocation = axisModel.get('nameLocation');\n            var nameDirection = opt.nameDirection;\n            var textStyleModel = axisModel.getModel('nameTextStyle');\n            var gap = axisModel.get('nameGap') || 0;\n\n            var extent = this.axisModel.axis.getExtent();\n            var gapSignal = extent[0] > extent[1] ? -1 : 1;\n            var pos = [\n                nameLocation === 'start'\n                    ? extent[0] - gapSignal * gap\n                    : nameLocation === 'end'\n                    ? extent[1] + gapSignal * gap\n                    : (extent[0] + extent[1]) / 2, // 'middle'\n                // Reuse labelOffset.\n                nameLocation === 'middle' ? opt.labelOffset + nameDirection * gap : 0\n            ];\n\n            var labelLayout;\n\n            var nameRotation = axisModel.get('nameRotate');\n            if (nameRotation != null) {\n                nameRotation = nameRotation * PI / 180; // To radian.\n            }\n\n            var axisNameAvailableWidth;\n\n            if (nameLocation === 'middle') {\n                labelLayout = innerTextLayout(\n                    opt,\n                    nameRotation != null ? nameRotation : opt.rotation, // Adapt to axis.\n                    nameDirection\n                );\n            }\n            else {\n                labelLayout = endTextLayout(\n                    opt, nameLocation, nameRotation || 0, extent\n                );\n\n                axisNameAvailableWidth = opt.axisNameAvailableWidth;\n                if (axisNameAvailableWidth != null) {\n                    axisNameAvailableWidth = Math.abs(\n                        axisNameAvailableWidth / Math.sin(labelLayout.rotation)\n                    );\n                    !isFinite(axisNameAvailableWidth) && (axisNameAvailableWidth = null);\n                }\n            }\n\n            var textFont = textStyleModel.getFont();\n\n            var truncateOpt = axisModel.get('nameTruncate', true) || {};\n            var ellipsis = truncateOpt.ellipsis;\n            var maxWidth = retrieve(truncateOpt.maxWidth, axisNameAvailableWidth);\n            var truncatedText = (ellipsis != null && maxWidth != null)\n                ? formatUtil.truncateText(\n                    name, maxWidth, textFont, ellipsis,\n                    {minChar: 2, placeholder: truncateOpt.placeholder}\n                )\n                : name;\n\n            var tooltipOpt = axisModel.get('tooltip', true);\n\n            var mainType = axisModel.mainType;\n            var formatterParams = {\n                componentType: mainType,\n                name: name,\n                $vars: ['name']\n            };\n            formatterParams[mainType + 'Index'] = axisModel.componentIndex;\n\n            var textEl = new graphic.Text({\n\n                // Id for animation\n                anid: 'name',\n\n                __fullText: name,\n                __truncatedText: truncatedText,\n\n                style: {\n                    text: truncatedText,\n                    textFont: textFont,\n                    fill: textStyleModel.getTextColor()\n                        || axisModel.get('axisLine.lineStyle.color'),\n                    textAlign: labelLayout.textAlign,\n                    textVerticalAlign: labelLayout.verticalAlign\n                },\n                position: pos,\n                rotation: labelLayout.rotation,\n                silent: isSilent(axisModel),\n                z2: 1,\n                tooltip: (tooltipOpt && tooltipOpt.show)\n                    ? zrUtil.extend({\n                        content: name,\n                        formatter: function () {\n                            return name;\n                        },\n                        formatterParams: formatterParams\n                    }, tooltipOpt)\n                    : null\n            });\n\n            if (axisModel.get('triggerEvent')) {\n                textEl.eventData = makeAxisEventDataBase(axisModel);\n                textEl.eventData.targetType = 'axisName';\n                textEl.eventData.name = name;\n            }\n\n            // FIXME\n            this._dumbGroup.add(textEl);\n            textEl.updateTransform();\n\n            this.group.add(textEl);\n\n            textEl.decomposeTransform();\n        }\n\n    };\n\n    /**\n     * @inner\n     */\n    function innerTextLayout(opt, textRotation, direction) {\n        var rotationDiff = remRadian(textRotation - opt.rotation);\n        var textAlign;\n        var verticalAlign;\n\n        if (isRadianAroundZero(rotationDiff)) { // Label is parallel with axis line.\n            verticalAlign = direction > 0 ? 'top' : 'bottom';\n            textAlign = 'center';\n        }\n        else if (isRadianAroundZero(rotationDiff - PI)) { // Label is inverse parallel with axis line.\n            verticalAlign = direction > 0 ? 'bottom' : 'top';\n            textAlign = 'center';\n        }\n        else {\n            verticalAlign = 'middle';\n\n            if (rotationDiff > 0 && rotationDiff < PI) {\n                textAlign = direction > 0 ? 'right' : 'left';\n            }\n            else {\n                textAlign = direction > 0 ? 'left' : 'right';\n            }\n        }\n\n        return {\n            rotation: rotationDiff,\n            textAlign: textAlign,\n            verticalAlign: verticalAlign\n        };\n    }\n\n    /**\n     * @inner\n     */\n    function endTextLayout(opt, textPosition, textRotate, extent) {\n        var rotationDiff = remRadian(textRotate - opt.rotation);\n        var textAlign;\n        var verticalAlign;\n        var inverse = extent[0] > extent[1];\n        var onLeft = (textPosition === 'start' && !inverse)\n            || (textPosition !== 'start' && inverse);\n\n        if (isRadianAroundZero(rotationDiff - PI / 2)) {\n            verticalAlign = onLeft ? 'bottom' : 'top';\n            textAlign = 'center';\n        }\n        else if (isRadianAroundZero(rotationDiff - PI * 1.5)) {\n            verticalAlign = onLeft ? 'top' : 'bottom';\n            textAlign = 'center';\n        }\n        else {\n            verticalAlign = 'middle';\n            if (rotationDiff < PI * 1.5 && rotationDiff > PI / 2) {\n                textAlign = onLeft ? 'left' : 'right';\n            }\n            else {\n                textAlign = onLeft ? 'right' : 'left';\n            }\n        }\n\n        return {\n            rotation: rotationDiff,\n            textAlign: textAlign,\n            verticalAlign: verticalAlign\n        };\n    }\n\n    /**\n     * @inner\n     */\n    function isSilent(axisModel) {\n        var tooltipOpt = axisModel.get('tooltip');\n        return axisModel.get('silent')\n            // Consider mouse cursor, add these restrictions.\n            || !(\n                axisModel.get('triggerEvent') || (tooltipOpt && tooltipOpt.show)\n            );\n    }\n\n    /**\n     * @static\n     */\n    var ifIgnoreOnTick = AxisBuilder.ifIgnoreOnTick = function (axis, i, interval) {\n        var rawTick;\n        var scale = axis.scale;\n        return scale.type === 'ordinal'\n            && (\n                typeof interval === 'function'\n                    ? (\n                        rawTick = scale.getTicks()[i],\n                        !interval(rawTick, scale.getLabel(rawTick))\n                    )\n                    : i % (interval + 1)\n            );\n    };\n\n    /**\n     * @static\n     */\n    var getInterval = AxisBuilder.getInterval = function (model, labelInterval) {\n        var interval = model.get('interval');\n        if (interval == null || interval == 'auto') {\n            interval = labelInterval;\n        }\n        return interval;\n    };\n\n    module.exports = AxisBuilder;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/component/axis/AxisBuilder.js\n// module id = 383\n// module chunks = 0 1 2 3 4","\n\n    var zrUtil = require('zrender/lib/core/util');\n    var graphic = require('../../util/graphic');\n    var AxisBuilder = require('./AxisBuilder');\n    var ifIgnoreOnTick = AxisBuilder.ifIgnoreOnTick;\n    var getInterval = AxisBuilder.getInterval;\n\n    var axisBuilderAttrs = [\n        'axisLine', 'axisLabel', 'axisTick', 'axisName'\n    ];\n    var selfBuilderAttrs = [\n        'splitArea', 'splitLine'\n    ];\n\n    // function getAlignWithLabel(model, axisModel) {\n    //     var alignWithLabel = model.get('alignWithLabel');\n    //     if (alignWithLabel === 'auto') {\n    //         alignWithLabel = axisModel.get('axisTick.alignWithLabel');\n    //     }\n    //     return alignWithLabel;\n    // }\n\n    var AxisView = require('../../echarts').extendComponentView({\n\n        type: 'axis',\n\n        render: function (axisModel, ecModel) {\n\n            this.group.removeAll();\n\n            var oldAxisGroup = this._axisGroup;\n            this._axisGroup = new graphic.Group();\n\n            this.group.add(this._axisGroup);\n\n            if (!axisModel.get('show')) {\n                return;\n            }\n\n            var gridModel = axisModel.getCoordSysModel();\n\n            var layout = layoutAxis(gridModel, axisModel);\n\n            var axisBuilder = new AxisBuilder(axisModel, layout);\n\n            zrUtil.each(axisBuilderAttrs, axisBuilder.add, axisBuilder);\n\n            this._axisGroup.add(axisBuilder.getGroup());\n\n            zrUtil.each(selfBuilderAttrs, function (name) {\n                if (axisModel.get(name + '.show')) {\n                    this['_' + name](axisModel, gridModel, layout.labelInterval);\n                }\n            }, this);\n\n            graphic.groupTransition(oldAxisGroup, this._axisGroup, axisModel);\n        },\n\n        /**\n         * @param {module:echarts/coord/cartesian/AxisModel} axisModel\n         * @param {module:echarts/coord/cartesian/GridModel} gridModel\n         * @param {number|Function} labelInterval\n         * @private\n         */\n        _splitLine: function (axisModel, gridModel, labelInterval) {\n            var axis = axisModel.axis;\n\n            if (axis.isBlank()) {\n                return;\n            }\n\n            var splitLineModel = axisModel.getModel('splitLine');\n            var lineStyleModel = splitLineModel.getModel('lineStyle');\n            var lineColors = lineStyleModel.get('color');\n\n            var lineInterval = getInterval(splitLineModel, labelInterval);\n\n            lineColors = zrUtil.isArray(lineColors) ? lineColors : [lineColors];\n\n            var gridRect = gridModel.coordinateSystem.getRect();\n            var isHorizontal = axis.isHorizontal();\n\n            var lineCount = 0;\n\n            var ticksCoords = axis.getTicksCoords(\n                // splitLineModel.get('alignWithLabel')\n            );\n            var ticks = axis.scale.getTicks();\n\n            var p1 = [];\n            var p2 = [];\n            // Simple optimization\n            // Batching the lines if color are the same\n            var lineStyle = lineStyleModel.getLineStyle();\n            for (var i = 0; i < ticksCoords.length; i++) {\n                if (ifIgnoreOnTick(axis, i, lineInterval)) {\n                    continue;\n                }\n\n                var tickCoord = axis.toGlobalCoord(ticksCoords[i]);\n\n                if (isHorizontal) {\n                    p1[0] = tickCoord;\n                    p1[1] = gridRect.y;\n                    p2[0] = tickCoord;\n                    p2[1] = gridRect.y + gridRect.height;\n                }\n                else {\n                    p1[0] = gridRect.x;\n                    p1[1] = tickCoord;\n                    p2[0] = gridRect.x + gridRect.width;\n                    p2[1] = tickCoord;\n                }\n\n                var colorIndex = (lineCount++) % lineColors.length;\n                this._axisGroup.add(new graphic.Line(graphic.subPixelOptimizeLine({\n                    anid: 'line_' + ticks[i],\n\n                    shape: {\n                        x1: p1[0],\n                        y1: p1[1],\n                        x2: p2[0],\n                        y2: p2[1]\n                    },\n                    style: zrUtil.defaults({\n                        stroke: lineColors[colorIndex]\n                    }, lineStyle),\n                    silent: true\n                })));\n            }\n        },\n\n        /**\n         * @param {module:echarts/coord/cartesian/AxisModel} axisModel\n         * @param {module:echarts/coord/cartesian/GridModel} gridModel\n         * @param {number|Function} labelInterval\n         * @private\n         */\n        _splitArea: function (axisModel, gridModel, labelInterval) {\n            var axis = axisModel.axis;\n\n            if (axis.isBlank()) {\n                return;\n            }\n\n            var splitAreaModel = axisModel.getModel('splitArea');\n            var areaStyleModel = splitAreaModel.getModel('areaStyle');\n            var areaColors = areaStyleModel.get('color');\n\n            var gridRect = gridModel.coordinateSystem.getRect();\n\n            var ticksCoords = axis.getTicksCoords(\n                // splitAreaModel.get('alignWithLabel')\n            );\n            var ticks = axis.scale.getTicks();\n\n            var prevX = axis.toGlobalCoord(ticksCoords[0]);\n            var prevY = axis.toGlobalCoord(ticksCoords[0]);\n\n            var count = 0;\n\n            var areaInterval = getInterval(splitAreaModel, labelInterval);\n\n            var areaStyle = areaStyleModel.getAreaStyle();\n            areaColors = zrUtil.isArray(areaColors) ? areaColors : [areaColors];\n\n            for (var i = 1; i < ticksCoords.length; i++) {\n                if (ifIgnoreOnTick(axis, i, areaInterval)) {\n                    continue;\n                }\n\n                var tickCoord = axis.toGlobalCoord(ticksCoords[i]);\n\n                var x;\n                var y;\n                var width;\n                var height;\n                if (axis.isHorizontal()) {\n                    x = prevX;\n                    y = gridRect.y;\n                    width = tickCoord - x;\n                    height = gridRect.height;\n                }\n                else {\n                    x = gridRect.x;\n                    y = prevY;\n                    width = gridRect.width;\n                    height = tickCoord - y;\n                }\n\n                var colorIndex = (count++) % areaColors.length;\n                this._axisGroup.add(new graphic.Rect({\n                    anid: 'area_' + ticks[i],\n\n                    shape: {\n                        x: x,\n                        y: y,\n                        width: width,\n                        height: height\n                    },\n                    style: zrUtil.defaults({\n                        fill: areaColors[colorIndex]\n                    }, areaStyle),\n                    silent: true\n                }));\n\n                prevX = x + width;\n                prevY = y + height;\n            }\n        }\n    });\n\n    AxisView.extend({\n        type: 'xAxis'\n    });\n    AxisView.extend({\n        type: 'yAxis'\n    });\n\n    /**\n     * @inner\n     */\n    function layoutAxis(gridModel, axisModel) {\n        var grid = gridModel.coordinateSystem;\n        var axis = axisModel.axis;\n        var layout = {};\n\n        var rawAxisPosition = axis.position;\n        var axisPosition = axis.onZero ? 'onZero' : rawAxisPosition;\n        var axisDim = axis.dim;\n\n        // [left, right, top, bottom]\n        var rect = grid.getRect();\n        var rectBound = [rect.x, rect.x + rect.width, rect.y, rect.y + rect.height];\n\n        var axisOffset = axisModel.get('offset') || 0;\n\n        var posMap = {\n            x: { top: rectBound[2] - axisOffset, bottom: rectBound[3] + axisOffset },\n            y: { left: rectBound[0] - axisOffset, right: rectBound[1] + axisOffset }\n        };\n\n        posMap.x.onZero = Math.max(Math.min(getZero('y'), posMap.x.bottom), posMap.x.top);\n        posMap.y.onZero = Math.max(Math.min(getZero('x'), posMap.y.right), posMap.y.left);\n\n        function getZero(dim, val) {\n            var theAxis = grid.getAxis(dim);\n            return theAxis.toGlobalCoord(theAxis.dataToCoord(0));\n        }\n\n        // Axis position\n        layout.position = [\n            axisDim === 'y' ? posMap.y[axisPosition] : rectBound[0],\n            axisDim === 'x' ? posMap.x[axisPosition] : rectBound[3]\n        ];\n\n        // Axis rotation\n        layout.rotation = Math.PI / 2 * (axisDim === 'x' ? 0 : 1);\n\n        // Tick and label direction, x y is axisDim\n        var dirMap = {top: -1, bottom: 1, left: -1, right: 1};\n\n        layout.labelDirection = layout.tickDirection = layout.nameDirection = dirMap[rawAxisPosition];\n        if (axis.onZero) {\n            layout.labelOffset = posMap[axisDim][rawAxisPosition] - posMap[axisDim].onZero;\n        }\n\n        if (axisModel.getModel('axisTick').get('inside')) {\n            layout.tickDirection = -layout.tickDirection;\n        }\n        if (axisModel.getModel('axisLabel').get('inside')) {\n            layout.labelDirection = -layout.labelDirection;\n        }\n\n        // Special label rotation\n        var labelRotation = axisModel.getModel('axisLabel').get('rotate');\n        layout.labelRotation = axisPosition === 'top' ? -labelRotation : labelRotation;\n\n        // label interval when auto mode.\n        layout.labelInterval = axis.getLabelInterval();\n\n        // Over splitLine and splitArea\n        layout.z2 = 1;\n\n        return layout;\n    }\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/component/axis/AxisView.js\n// module id = 384\n// module chunks = 0 1 2 3 4","/**\n * @module echarts/component/tooltip/TooltipContent\n */\n\n\n    var zrUtil = require('zrender/lib/core/util');\n    var zrColor = require('zrender/lib/tool/color');\n    var eventUtil = require('zrender/lib/core/event');\n    var formatUtil = require('../../util/format');\n    var each = zrUtil.each;\n    var toCamelCase = formatUtil.toCamelCase;\n    var env = require('zrender/lib/core/env');\n\n    var vendors = ['', '-webkit-', '-moz-', '-o-'];\n\n    var gCssText = 'position:absolute;display:block;border-style:solid;white-space:nowrap;z-index:9999999;';\n\n    /**\n     * @param {number} duration\n     * @return {string}\n     * @inner\n     */\n    function assembleTransition(duration) {\n        var transitionCurve = 'cubic-bezier(0.23, 1, 0.32, 1)';\n        var transitionText = 'left ' + duration + 's ' + transitionCurve + ','\n                            + 'top ' + duration + 's ' + transitionCurve;\n        return zrUtil.map(vendors, function (vendorPrefix) {\n            return vendorPrefix + 'transition:' + transitionText;\n        }).join(';');\n    }\n\n    /**\n     * @param {Object} textStyle\n     * @return {string}\n     * @inner\n     */\n    function assembleFont(textStyleModel) {\n        var cssText = [];\n\n        var fontSize = textStyleModel.get('fontSize');\n        var color = textStyleModel.getTextColor();\n\n        color && cssText.push('color:' + color);\n\n        cssText.push('font:' + textStyleModel.getFont());\n\n        fontSize &&\n            cssText.push('line-height:' + Math.round(fontSize * 3 / 2) + 'px');\n\n        each(['decoration', 'align'], function (name) {\n            var val = textStyleModel.get(name);\n            val && cssText.push('text-' + name + ':' + val);\n        });\n\n        return cssText.join(';');\n    }\n\n    /**\n     * @param {Object} tooltipModel\n     * @return {string}\n     * @inner\n     */\n    function assembleCssText(tooltipModel) {\n\n        tooltipModel = tooltipModel;\n\n        var cssText = [];\n\n        var transitionDuration = tooltipModel.get('transitionDuration');\n        var backgroundColor = tooltipModel.get('backgroundColor');\n        var textStyleModel = tooltipModel.getModel('textStyle');\n        var padding = tooltipModel.get('padding');\n\n        // Animation transition\n        transitionDuration &&\n            cssText.push(assembleTransition(transitionDuration));\n\n        if (backgroundColor) {\n            if (env.canvasSupported) {\n                cssText.push('background-Color:' + backgroundColor);\n            }\n            else {\n                // for ie\n                cssText.push(\n                    'background-Color:#' + zrColor.toHex(backgroundColor)\n                );\n                cssText.push('filter:alpha(opacity=70)');\n            }\n        }\n\n        // Border style\n        each(['width', 'color', 'radius'], function (name) {\n            var borderName = 'border-' + name;\n            var camelCase = toCamelCase(borderName);\n            var val = tooltipModel.get(camelCase);\n            val != null &&\n                cssText.push(borderName + ':' + val + (name === 'color' ? '' : 'px'));\n        });\n\n        // Text style\n        cssText.push(assembleFont(textStyleModel));\n\n        // Padding\n        if (padding != null) {\n            cssText.push('padding:' + formatUtil.normalizeCssArray(padding).join('px ') + 'px');\n        }\n\n        return cssText.join(';') + ';';\n    }\n\n    /**\n     * @alias module:echarts/component/tooltip/TooltipContent\n     * @constructor\n     */\n    function TooltipContent(container, api) {\n        var el = document.createElement('div');\n        var zr = api.getZr();\n\n        this.el = el;\n\n        this._x = api.getWidth() / 2;\n        this._y = api.getHeight() / 2;\n\n        container.appendChild(el);\n\n        this._container = container;\n\n        this._show = false;\n\n        /**\n         * @private\n         */\n        this._hideTimeout;\n\n        var self = this;\n        el.onmouseenter = function () {\n            // clear the timeout in hideLater and keep showing tooltip\n            if (self.enterable) {\n                clearTimeout(self._hideTimeout);\n                self._show = true;\n            }\n            self._inContent = true;\n        };\n        el.onmousemove = function (e) {\n            e = e || window.event;\n            if (!self.enterable) {\n                // Try trigger zrender event to avoid mouse\n                // in and out shape too frequently\n                var handler = zr.handler;\n                eventUtil.normalizeEvent(container, e, true);\n                handler.dispatch('mousemove', e);\n            }\n        };\n        el.onmouseleave = function () {\n            if (self.enterable) {\n                if (self._show) {\n                    self.hideLater(self._hideDelay);\n                }\n            }\n            self._inContent = false;\n        };\n    }\n\n    TooltipContent.prototype = {\n\n        constructor: TooltipContent,\n\n        enterable: true,\n\n        /**\n         * Update when tooltip is rendered\n         */\n        update: function () {\n            var container = this._container;\n            var stl = container.currentStyle\n                || document.defaultView.getComputedStyle(container);\n            var domStyle = container.style;\n            if (domStyle.position !== 'absolute' && stl.position !== 'absolute') {\n                domStyle.position = 'relative';\n            }\n            // Hide the tooltip\n            // PENDING\n            // this.hide();\n        },\n\n        show: function (tooltipModel) {\n            clearTimeout(this._hideTimeout);\n            var el = this.el;\n\n            el.style.cssText = gCssText + assembleCssText(tooltipModel)\n                // http://stackoverflow.com/questions/21125587/css3-transition-not-working-in-chrome-anymore\n                + ';left:' + this._x + 'px;top:' + this._y + 'px;'\n                + (tooltipModel.get('extraCssText') || '');\n\n            el.style.display = el.innerHTML ?  'block' : 'none';\n\n            this._show = true;\n        },\n\n        setContent: function (content) {\n            var el = this.el;\n            el.innerHTML = content;\n            el.style.display = content ? 'block' : 'none';\n        },\n\n        moveTo: function (x, y) {\n            var style = this.el.style;\n            style.left = x + 'px';\n            style.top = y + 'px';\n\n            this._x = x;\n            this._y = y;\n        },\n\n        hide: function () {\n            this.el.style.display = 'none';\n            this._show = false;\n        },\n\n        // showLater: function ()\n\n        hideLater: function (time) {\n            if (this._show && !(this._inContent && this.enterable)) {\n                if (time) {\n                    this._hideDelay = time;\n                    // Set show false to avoid invoke hideLater mutiple times\n                    this._show = false;\n                    this._hideTimeout = setTimeout(zrUtil.bind(this.hide, this), time);\n                }\n                else {\n                    this.hide();\n                }\n            }\n        },\n\n        isShow: function () {\n            return this._show;\n        }\n    };\n\n    module.exports = TooltipContent;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/component/tooltip/TooltipContent.js\n// module id = 385\n// module chunks = 0 1 2 3 4","\n\n    require('../../echarts').extendComponentModel({\n\n        type: 'tooltip',\n\n        defaultOption: {\n            zlevel: 0,\n\n            z: 8,\n\n            show: true,\n\n            // tooltip主体内容\n            showContent: true,\n\n            // 触发类型，默认数据触发，见下图，可选为：'item' ¦ 'axis'\n            trigger: 'item',\n\n            // 触发条件，支持 'click' | 'mousemove' | 'none'\n            triggerOn: 'mousemove',\n\n            // 是否永远显示 content\n            alwaysShowContent: false,\n\n            // 位置 {Array} | {Function}\n            // position: null\n\n            // 是否约束 content 在 viewRect 中。默认 false 是为了兼容以前版本。\n            confine: false,\n\n            // 内容格式器：{string}（Template） ¦ {Function}\n            // formatter: null\n\n            showDelay: 0,\n\n            // 隐藏延迟，单位ms\n            hideDelay: 100,\n\n            // 动画变换时间，单位s\n            transitionDuration: 0.4,\n\n            enterable: false,\n\n            // 提示背景颜色，默认为透明度为0.7的黑色\n            backgroundColor: 'rgba(50,50,50,0.7)',\n\n            // 提示边框颜色\n            borderColor: '#333',\n\n            // 提示边框圆角，单位px，默认为4\n            borderRadius: 4,\n\n            // 提示边框线宽，单位px，默认为0（无边框）\n            borderWidth: 0,\n\n            // 提示内边距，单位px，默认各方向内边距为5，\n            // 接受数组分别设定上右下左边距，同css\n            padding: 5,\n\n            // Extra css text\n            extraCssText: '',\n\n            // 坐标轴指示器，坐标轴触发有效\n            axisPointer: {\n                // 默认为直线\n                // 可选为：'line' | 'shadow' | 'cross'\n                type: 'line',\n\n                // type 为 line 的时候有效，指定 tooltip line 所在的轴，可选\n                // 可选 'x' | 'y' | 'angle' | 'radius' | 'auto'\n                // 默认 'auto'，会选择类型为 cateogry 的轴，对于双数值轴，笛卡尔坐标系会默认选择 x 轴\n                // 极坐标系会默认选择 angle 轴\n                axis: 'auto',\n\n                animation: true,\n                animationDurationUpdate: 200,\n                animationEasingUpdate: 'exponentialOut',\n\n                // 直线指示器样式设置\n                lineStyle: {\n                    color: '#555',\n                    width: 1,\n                    type: 'solid'\n                },\n\n                crossStyle: {\n                    color: '#555',\n                    width: 1,\n                    type: 'dashed',\n\n                    // TODO formatter\n                    textStyle: {}\n                },\n\n                // 阴影指示器样式设置\n                shadowStyle: {\n                    color: 'rgba(150,150,150,0.3)'\n                }\n            },\n            textStyle: {\n                color: '#fff',\n                fontSize: 14\n            }\n        }\n    });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/component/tooltip/TooltipModel.js\n// module id = 386\n// module chunks = 0 1 2 3 4","\n\n    var TooltipContent = require('./TooltipContent');\n    var graphic = require('../../util/graphic');\n    var zrUtil = require('zrender/lib/core/util');\n    var formatUtil = require('../../util/format');\n    var numberUtil = require('../../util/number');\n    var modelUtil = require('../../util/model');\n    var parsePercent = numberUtil.parsePercent;\n    var env = require('zrender/lib/core/env');\n    var Model = require('../../model/Model');\n\n    function dataEqual(a, b) {\n        if (!a || !b) {\n            return false;\n        }\n        var round = numberUtil.round;\n        return round(a[0]) === round(b[0])\n            && round(a[1]) === round(b[1]);\n    }\n    /**\n     * @inner\n     */\n    function makeLineShape(x1, y1, x2, y2) {\n        return {\n            x1: x1,\n            y1: y1,\n            x2: x2,\n            y2: y2\n        };\n    }\n\n    /**\n     * @inner\n     */\n    function makeRectShape(x, y, width, height) {\n        return {\n            x: x,\n            y: y,\n            width: width,\n            height: height\n        };\n    }\n\n    /**\n     * @inner\n     */\n    function makeSectorShape(cx, cy, r0, r, startAngle, endAngle) {\n        return {\n            cx: cx,\n            cy: cy,\n            r0: r0,\n            r: r,\n            startAngle: startAngle,\n            endAngle: endAngle,\n            clockwise: true\n        };\n    }\n\n    function refixTooltipPosition(x, y, el, viewWidth, viewHeight) {\n        var width = el.clientWidth;\n        var height = el.clientHeight;\n        var gap = 20;\n\n        if (x + width + gap > viewWidth) {\n            x -= width + gap;\n        }\n        else {\n            x += gap;\n        }\n        if (y + height + gap > viewHeight) {\n            y -= height + gap;\n        }\n        else {\n            y += gap;\n        }\n        return [x, y];\n    }\n\n    function confineTooltipPosition(x, y, el, viewWidth, viewHeight) {\n        var width = el.clientWidth;\n        var height = el.clientHeight;\n\n        x = Math.min(x + width, viewWidth) - width;\n        y = Math.min(y + height, viewHeight) - height;\n        x = Math.max(x, 0);\n        y = Math.max(y, 0);\n\n        return [x, y];\n    }\n\n    function calcTooltipPosition(position, rect, dom) {\n        var domWidth = dom.clientWidth;\n        var domHeight = dom.clientHeight;\n        var gap = 5;\n        var x = 0;\n        var y = 0;\n        var rectWidth = rect.width;\n        var rectHeight = rect.height;\n        switch (position) {\n            case 'inside':\n                x = rect.x + rectWidth / 2 - domWidth / 2;\n                y = rect.y + rectHeight / 2 - domHeight / 2;\n                break;\n            case 'top':\n                x = rect.x + rectWidth / 2 - domWidth / 2;\n                y = rect.y - domHeight - gap;\n                break;\n            case 'bottom':\n                x = rect.x + rectWidth / 2 - domWidth / 2;\n                y = rect.y + rectHeight + gap;\n                break;\n            case 'left':\n                x = rect.x - domWidth - gap;\n                y = rect.y + rectHeight / 2 - domHeight / 2;\n                break;\n            case 'right':\n                x = rect.x + rectWidth + gap;\n                y = rect.y + rectHeight / 2 - domHeight / 2;\n        }\n        return [x, y];\n    }\n\n    /**\n     * @param  {string|Function|Array.<number>} positionExpr\n     * @param  {number} x Mouse x\n     * @param  {number} y Mouse y\n     * @param  {boolean} confine Whether confine tooltip content in view rect.\n     * @param  {module:echarts/component/tooltip/TooltipContent} content\n     * @param  {Object|<Array.<Object>} params\n     * @param  {module:zrender/Element} el target element\n     * @param  {module:echarts/ExtensionAPI} api\n     * @return {Array.<number>}\n     */\n    function updatePosition(positionExpr, x, y, confine, content, params, el, api) {\n        var viewWidth = api.getWidth();\n        var viewHeight = api.getHeight();\n\n        var rect = el && el.getBoundingRect().clone();\n        el && rect.applyTransform(el.transform);\n        if (typeof positionExpr === 'function') {\n            // Callback of position can be an array or a string specify the position\n            positionExpr = positionExpr([x, y], params, content.el, rect);\n        }\n\n        if (zrUtil.isArray(positionExpr)) {\n            x = parsePercent(positionExpr[0], viewWidth);\n            y = parsePercent(positionExpr[1], viewHeight);\n        }\n        // Specify tooltip position by string 'top' 'bottom' 'left' 'right' around graphic element\n        else if (typeof positionExpr === 'string' && el) {\n            var pos = calcTooltipPosition(\n                positionExpr, rect, content.el\n            );\n            x = pos[0];\n            y = pos[1];\n        }\n        else {\n            var pos = refixTooltipPosition(\n                x, y, content.el, viewWidth, viewHeight\n            );\n            x = pos[0];\n            y = pos[1];\n        }\n\n        if (confine) {\n            var pos = confineTooltipPosition(\n                x, y, content.el, viewWidth, viewHeight\n            );\n            x = pos[0];\n            y = pos[1];\n        }\n\n        content.moveTo(x, y);\n    }\n\n    function ifSeriesSupportAxisTrigger(seriesModel) {\n        var coordSys = seriesModel.coordinateSystem;\n        var trigger = seriesModel.get('tooltip.trigger', true);\n        // Ignore series use item tooltip trigger and series coordinate system is not cartesian or\n        return !(!coordSys\n            || (coordSys.type !== 'cartesian2d' && coordSys.type !== 'polar' && coordSys.type !== 'singleAxis')\n            || trigger === 'item');\n    }\n\n    require('../../echarts').extendComponentView({\n\n        type: 'tooltip',\n\n        _axisPointers: {},\n\n        init: function (ecModel, api) {\n            if (env.node) {\n                return;\n            }\n            var tooltipContent = new TooltipContent(api.getDom(), api);\n            this._tooltipContent = tooltipContent;\n        },\n\n        render: function (tooltipModel, ecModel, api) {\n            if (env.node) {\n                return;\n            }\n\n            // Reset\n            this.group.removeAll();\n\n            /**\n             * @type {Object}\n             * @private\n             */\n            this._axisPointers = {};\n\n            /**\n             * @private\n             * @type {module:echarts/component/tooltip/TooltipModel}\n             */\n            this._tooltipModel = tooltipModel;\n\n            /**\n             * @private\n             * @type {module:echarts/model/Global}\n             */\n            this._ecModel = ecModel;\n\n            /**\n             * @private\n             * @type {module:echarts/ExtensionAPI}\n             */\n            this._api = api;\n\n            /**\n             * @type {Object}\n             * @private\n             */\n            this._lastHover = {\n                // data\n                // payloadBatch\n            };\n\n            var tooltipContent = this._tooltipContent;\n            tooltipContent.update();\n            tooltipContent.enterable = tooltipModel.get('enterable');\n            this._alwaysShowContent = tooltipModel.get('alwaysShowContent');\n\n            /**\n             * @type {Object.<string, Array>}\n             */\n            this._seriesGroupByAxis = this._prepareAxisTriggerData(\n                tooltipModel, ecModel\n            );\n\n            var crossText = this._crossText;\n            if (crossText) {\n                this.group.add(crossText);\n            }\n\n            var triggerOn = tooltipModel.get('triggerOn');\n\n            // Try to keep the tooltip show when refreshing\n            if (this._lastX != null\n                && this._lastY != null\n                // When user is willing to control tooltip totally using API,\n                // self.manuallyShowTip({x, y}) might cause tooltip hide,\n                // which is not expected.\n                && triggerOn !== 'none'\n            ) {\n                var self = this;\n                clearTimeout(this._refreshUpdateTimeout);\n                this._refreshUpdateTimeout = setTimeout(function () {\n                    // Show tip next tick after other charts are rendered\n                    // In case highlight action has wrong result\n                    // FIXME\n                    self.manuallyShowTip(tooltipModel, ecModel, api, {\n                        x: self._lastX,\n                        y: self._lastY\n                    });\n                });\n            }\n\n            var zr = this._api.getZr();\n            zr.off('click', this._tryShow);\n            zr.off('mousemove', this._mousemove);\n            zr.off('mouseout', this._hide);\n            zr.off('globalout', this._hide);\n\n            if (triggerOn === 'click') {\n                zr.on('click', this._tryShow, this);\n            }\n            else if (triggerOn === 'mousemove') {\n                zr.on('mousemove', this._mousemove, this);\n                zr.on('mouseout', this._hide, this);\n                zr.on('globalout', this._hide, this);\n            }\n            // else triggerOn is 'none', which enable user\n            // to control tooltip totally using API.\n        },\n\n        _mousemove: function (e) {\n            var showDelay = this._tooltipModel.get('showDelay');\n            var self = this;\n            clearTimeout(this._showTimeout);\n            if (showDelay > 0) {\n                this._showTimeout = setTimeout(function () {\n                    self._tryShow(e);\n                }, showDelay);\n            }\n            else {\n                this._tryShow(e);\n            }\n        },\n\n        /**\n         * Show tip manually by\n         * dispatchAction({\n         *     type: 'showTip',\n         *     x: 10,\n         *     y: 10\n         * });\n         * Or\n         * dispatchAction({\n         *      type: 'showTip',\n         *      seriesIndex: 0,\n         *      dataIndex or dataIndexInside or name\n         * });\n         *\n         *  TODO Batch\n         */\n        manuallyShowTip: function (tooltipModel, ecModel, api, payload) {\n            // From self\n            if (payload.from === this.uid) {\n                return;\n            }\n\n            var ecModel = this._ecModel;\n            var seriesIndex = payload.seriesIndex;\n            var seriesModel = ecModel.getSeriesByIndex(seriesIndex);\n            var api = this._api;\n\n            var isTriggerAxis = this._tooltipModel.get('trigger') === 'axis';\n            function seriesHaveDataOnIndex(_series) {\n                var data = _series.getData();\n                var dataIndex = modelUtil.queryDataIndex(data, payload);\n                // Have single dataIndex\n                if (dataIndex != null && !zrUtil.isArray(dataIndex)\n                    && data.hasValue(dataIndex)\n                ) {\n                    return true;\n                }\n            }\n\n            if (payload.x == null || payload.y == null) {\n                if (isTriggerAxis) {\n                    // Find another series.\n                    if (seriesModel && !seriesHaveDataOnIndex(seriesModel)) {\n                        seriesModel = null;\n                    }\n                    if (!seriesModel) {\n                        // Find the first series can use axis trigger And data is not null\n                        ecModel.eachSeries(function (_series) {\n                            if (ifSeriesSupportAxisTrigger(_series) && !seriesModel) {\n                                if (seriesHaveDataOnIndex(_series)) {\n                                    seriesModel = _series;\n                                }\n                            }\n                        });\n                    }\n                }\n                else {\n                    // Use the first series by default.\n                    seriesModel = seriesModel || ecModel.getSeriesByIndex(0);\n                }\n                if (seriesModel) {\n                    var data = seriesModel.getData();\n                    var dataIndex = modelUtil.queryDataIndex(data, payload);\n\n                    if (dataIndex == null || zrUtil.isArray(dataIndex)) {\n                        return;\n                    }\n\n                    var el = data.getItemGraphicEl(dataIndex);\n                    var cx;\n                    var cy;\n                    // Try to get the point in coordinate system\n                    var coordSys = seriesModel.coordinateSystem;\n                    if (seriesModel.getTooltipPosition) {\n                        var point = seriesModel.getTooltipPosition(dataIndex) || [];\n                        cx = point[0];\n                        cy = point[1];\n                    }\n                    else if (coordSys && coordSys.dataToPoint) {\n                        var point = coordSys.dataToPoint(\n                            data.getValues(\n                                zrUtil.map(coordSys.dimensions, function (dim) {\n                                    return seriesModel.coordDimToDataDim(dim)[0];\n                                }), dataIndex, true\n                            )\n                        );\n                        cx = point && point[0];\n                        cy = point && point[1];\n                    }\n                    else if (el) {\n                        // Use graphic bounding rect\n                        var rect = el.getBoundingRect().clone();\n                        rect.applyTransform(el.transform);\n                        cx = rect.x + rect.width / 2;\n                        cy = rect.y + rect.height / 2;\n                    }\n\n                    if (cx != null && cy != null) {\n                        this._tryShow({\n                            offsetX: cx,\n                            offsetY: cy,\n                            position: payload.position,\n                            target: el,\n                            event: {}\n                        });\n                    }\n                }\n            }\n            else {\n                var el = api.getZr().handler.findHover(payload.x, payload.y);\n                this._tryShow({\n                    offsetX: payload.x,\n                    offsetY: payload.y,\n                    position: payload.position,\n                    target: el,\n                    event: {}\n                });\n            }\n        },\n\n        manuallyHideTip: function (tooltipModel, ecModel, api, payload) {\n            if (payload.from === this.uid) {\n                return;\n            }\n\n            this._hide();\n        },\n\n        _prepareAxisTriggerData: function (tooltipModel, ecModel) {\n            // Prepare data for axis trigger\n            var seriesGroupByAxis = {};\n            ecModel.eachSeries(function (seriesModel) {\n                if (ifSeriesSupportAxisTrigger(seriesModel)) {\n                    var coordSys = seriesModel.coordinateSystem;\n                    var baseAxis;\n                    var key;\n\n                    // Only cartesian2d, polar and single support axis trigger\n                    if (coordSys.type === 'cartesian2d') {\n                        // FIXME `axisPointer.axis` is not baseAxis\n                        baseAxis = coordSys.getBaseAxis();\n                        key = baseAxis.dim + baseAxis.index;\n                    }\n                    else if (coordSys.type === 'singleAxis') {\n                        baseAxis = coordSys.getAxis();\n                        key = baseAxis.dim + baseAxis.type;\n                    }\n                    else {\n                        baseAxis = coordSys.getBaseAxis();\n                        key = baseAxis.dim + coordSys.name;\n                    }\n\n                    seriesGroupByAxis[key] = seriesGroupByAxis[key] || {\n                        coordSys: [],\n                        series: []\n                    };\n                    seriesGroupByAxis[key].coordSys.push(coordSys);\n                    seriesGroupByAxis[key].series.push(seriesModel);\n                }\n            }, this);\n\n            return seriesGroupByAxis;\n        },\n\n        /**\n         * mousemove handler\n         * @param {Object} e\n         * @private\n         */\n        _tryShow: function (e) {\n            var el = e.target;\n            var tooltipModel = this._tooltipModel;\n            var globalTrigger = tooltipModel.get('trigger');\n            var ecModel = this._ecModel;\n            var api = this._api;\n\n            if (!tooltipModel) {\n                return;\n            }\n\n            // Save mouse x, mouse y. So we can try to keep showing the tip if chart is refreshed\n            this._lastX = e.offsetX;\n            this._lastY = e.offsetY;\n\n            // Always show item tooltip if mouse is on the element with dataIndex\n            if (el && el.dataIndex != null) {\n                // Use dataModel in element if possible\n                // Used when mouseover on a element like markPoint or edge\n                // In which case, the data is not main data in series.\n                var dataModel = el.dataModel || ecModel.getSeriesByIndex(el.seriesIndex);\n                var dataIndex = el.dataIndex;\n                var data = dataModel.getData();\n                var itemModel = data.getItemModel(dataIndex);\n                // Series or single data may use item trigger when global is axis trigger\n                if ((itemModel.get('tooltip.trigger') || globalTrigger) === 'axis') {\n                    this._showAxisTooltip(tooltipModel, ecModel, e);\n                }\n                else {\n                    // Reset ticket\n                    this._ticket = '';\n                    // If either single data or series use item trigger\n                    this._hideAxisPointer();\n                    // Reset last hover and dispatch downplay action\n                    this._resetLastHover();\n\n                    this._showItemTooltipContent(dataModel, dataIndex, el.dataType, e);\n                }\n\n                api.dispatchAction({\n                    type: 'showTip',\n                    from: this.uid,\n                    dataIndexInside: dataIndex,\n                    dataIndex: data.getRawIndex(dataIndex), // expose to user.\n                    seriesIndex: el.seriesIndex\n                });\n            }\n            // Tooltip provided directly. Like legend\n            else if (el && el.tooltip) {\n                var tooltipOpt = el.tooltip;\n                if (typeof tooltipOpt === 'string') {\n                    var content = tooltipOpt;\n                    tooltipOpt = {\n                        content: content,\n                        // Fixed formatter\n                        formatter: content\n                    };\n                }\n                var subTooltipModel = new Model(tooltipOpt, tooltipModel);\n                var defaultHtml = subTooltipModel.get('content');\n                var asyncTicket = Math.random();\n                this._showTooltipContent(\n                    // TODO params\n                    subTooltipModel, defaultHtml, subTooltipModel.get('formatterParams') || {},\n                    asyncTicket, e.offsetX, e.offsetY, e.position, el, api\n                );\n            }\n            else {\n                if (globalTrigger === 'item') {\n                    this._hide();\n                }\n                else {\n                    // Try show axis tooltip\n                    this._showAxisTooltip(tooltipModel, ecModel, e);\n                }\n\n                // Action of cross pointer\n                // other pointer types will trigger action in _dispatchAndShowSeriesTooltipContent method\n                if (tooltipModel.get('axisPointer.type') === 'cross') {\n                    api.dispatchAction({\n                        type: 'showTip',\n                        from: this.uid,\n                        x: e.offsetX,\n                        y: e.offsetY\n                    });\n                }\n            }\n        },\n\n        /**\n         * Show tooltip on axis\n         * @param {module:echarts/component/tooltip/TooltipModel} tooltipModel\n         * @param {module:echarts/model/Global} ecModel\n         * @param {Object} e\n         * @private\n         */\n        _showAxisTooltip: function (tooltipModel, ecModel, e) {\n            var axisPointerModel = tooltipModel.getModel('axisPointer');\n            var axisPointerType = axisPointerModel.get('type');\n\n            if (axisPointerType === 'cross') {\n                var el = e.target;\n                if (el && el.dataIndex != null) {\n                    var seriesModel = ecModel.getSeriesByIndex(el.seriesIndex);\n                    var dataIndex = el.dataIndex;\n                    this._showItemTooltipContent(seriesModel, dataIndex, el.dataType, e);\n                }\n            }\n\n            this._showAxisPointer();\n            var allNotShow = true;\n            zrUtil.each(this._seriesGroupByAxis, function (seriesCoordSysSameAxis) {\n                // Try show the axis pointer\n                var allCoordSys = seriesCoordSysSameAxis.coordSys;\n                var coordSys = allCoordSys[0];\n\n                // If mouse position is not in the grid or polar\n                var point = [e.offsetX, e.offsetY];\n\n                if (!coordSys.containPoint(point)) {\n                    // Hide axis pointer\n                    this._hideAxisPointer(coordSys.name);\n                    return;\n                }\n\n                allNotShow = false;\n                // Make sure point is discrete on cateogry axis\n                var dimensions = coordSys.dimensions;\n                var value = coordSys.pointToData(point, true);\n                point = coordSys.dataToPoint(value);\n\n                var baseAxis = coordSys.getBaseAxis();\n                var axisType = axisPointerModel.get('axis');\n                if (axisType === 'auto') {\n                    axisType = baseAxis.dim;\n                }\n\n                if (baseAxis.isBlank() || zrUtil.eqNaN(point[0]) || zrUtil.eqNaN(point[1])) {\n                    this._hideAxisPointer(coordSys.name);\n                    return;\n                }\n\n                var contentNotChange = false;\n                var lastHover = this._lastHover;\n                if (axisPointerType === 'cross') {\n                    // If hover data not changed\n                    // Possible when two axes are all category\n                    if (dataEqual(lastHover.data, value)) {\n                        contentNotChange = true;\n                    }\n                    lastHover.data = value;\n                }\n                else {\n                    var valIndex = zrUtil.indexOf(dimensions, axisType);\n\n                    // If hover data not changed on the axis dimension\n                    if (lastHover.data === value[valIndex]) {\n                        contentNotChange = true;\n                    }\n                    lastHover.data = value[valIndex];\n                }\n\n                var enableAnimation = tooltipModel.get('animation');\n\n                if (coordSys.type === 'cartesian2d' && !contentNotChange) {\n                    this._showCartesianPointer(\n                        axisPointerModel, coordSys, axisType, point, enableAnimation\n                    );\n                }\n                else if (coordSys.type === 'polar' && !contentNotChange) {\n                    this._showPolarPointer(\n                        axisPointerModel, coordSys, axisType, point, enableAnimation\n                    );\n                }\n                else if (coordSys.type === 'singleAxis' && !contentNotChange) {\n                    this._showSinglePointer(\n                        axisPointerModel, coordSys, axisType, point, enableAnimation\n                    );\n                }\n\n                if (axisPointerType !== 'cross') {\n                    this._dispatchAndShowSeriesTooltipContent(\n                        coordSys, seriesCoordSysSameAxis.series, point, value, contentNotChange, e.position\n                    );\n                }\n            }, this);\n\n            if (!this._tooltipModel.get('show')) {\n                this._hideAxisPointer();\n            }\n\n            if (allNotShow) {\n                this._hide();\n            }\n        },\n\n        /**\n         * Show tooltip on axis of cartesian coordinate\n         * @param {module:echarts/model/Model} axisPointerModel\n         * @param {module:echarts/coord/cartesian/Cartesian2D} cartesians\n         * @param {string} axisType\n         * @param {Array.<number>} point\n         * @private\n         */\n        _showCartesianPointer: function (axisPointerModel, cartesian, axisType, point, enableAnimation) {\n            var self = this;\n\n            var axisPointerType = axisPointerModel.get('type');\n            var baseAxis = cartesian.getBaseAxis();\n            var moveAnimation = enableAnimation\n                && axisPointerType !== 'cross'\n                && baseAxis.type === 'category'\n                && baseAxis.getBandWidth() > 20;\n\n            if (axisPointerType === 'cross') {\n                moveGridLine('x', point, cartesian.getAxis('y').getGlobalExtent());\n                moveGridLine('y', point, cartesian.getAxis('x').getGlobalExtent());\n\n                this._updateCrossText(cartesian, point, axisPointerModel);\n            }\n            else {\n                var otherAxis = cartesian.getAxis(axisType === 'x' ? 'y' : 'x');\n                var otherExtent = otherAxis.getGlobalExtent();\n\n                if (cartesian.type === 'cartesian2d') {\n                    (axisPointerType === 'line' ? moveGridLine : moveGridShadow)(\n                        axisType, point, otherExtent\n                    );\n                }\n            }\n\n            /**\n             * @inner\n             */\n            function moveGridLine(axisType, point, otherExtent) {\n                var targetShape = axisType === 'x'\n                    ? makeLineShape(point[0], otherExtent[0], point[0], otherExtent[1])\n                    : makeLineShape(otherExtent[0], point[1], otherExtent[1], point[1]);\n\n                var pointerEl = self._getPointerElement(\n                    cartesian, axisPointerModel, axisType, targetShape\n                );\n                graphic.subPixelOptimizeLine({\n                    shape: targetShape,\n                    style: pointerEl.style\n                });\n\n                moveAnimation\n                    ? graphic.updateProps(pointerEl, {\n                        shape: targetShape\n                    }, axisPointerModel)\n                    :  pointerEl.attr({\n                        shape: targetShape\n                    });\n            }\n\n            /**\n             * @inner\n             */\n            function moveGridShadow(axisType, point, otherExtent) {\n                var axis = cartesian.getAxis(axisType);\n                var bandWidth = axis.getBandWidth();\n                var span = otherExtent[1] - otherExtent[0];\n                var targetShape = axisType === 'x'\n                    ? makeRectShape(point[0] - bandWidth / 2, otherExtent[0], bandWidth, span)\n                    : makeRectShape(otherExtent[0], point[1] - bandWidth / 2, span, bandWidth);\n\n                var pointerEl = self._getPointerElement(\n                    cartesian, axisPointerModel, axisType, targetShape\n                );\n                moveAnimation\n                    ? graphic.updateProps(pointerEl, {\n                        shape: targetShape\n                    }, axisPointerModel)\n                    :  pointerEl.attr({\n                        shape: targetShape\n                    });\n            }\n        },\n\n        _showSinglePointer: function (axisPointerModel, single, axisType, point, enableAnimation) {\n            var self = this;\n            var axisPointerType = axisPointerModel.get('type');\n            var moveAnimation =\n                enableAnimation\n                && axisPointerType !== 'cross'\n                && single.getBaseAxis().type === 'category';\n            var rect = single.getRect();\n            var otherExtent = [rect.y, rect.y + rect.height];\n\n            moveSingleLine(axisType, point, otherExtent);\n\n            /**\n             * @inner\n             */\n            function moveSingleLine(axisType, point, otherExtent) {\n                var axis = single.getAxis();\n                var orient = axis.orient;\n\n                var targetShape = orient === 'horizontal'\n                    ? makeLineShape(point[0], otherExtent[0], point[0], otherExtent[1])\n                    : makeLineShape(otherExtent[0], point[1], otherExtent[1], point[1]);\n\n                var pointerEl = self._getPointerElement(\n                    single, axisPointerModel, axisType, targetShape\n                );\n                moveAnimation\n                    ? graphic.updateProps(pointerEl, {\n                        shape: targetShape\n                    }, axisPointerModel)\n                    :  pointerEl.attr({\n                        shape: targetShape\n                    });\n            }\n\n        },\n\n        /**\n         * Show tooltip on axis of polar coordinate\n         * @param {module:echarts/model/Model} axisPointerModel\n         * @param {Array.<module:echarts/coord/polar/Polar>} polar\n         * @param {string} axisType\n         * @param {Array.<number>} point\n         */\n        _showPolarPointer: function (axisPointerModel, polar, axisType, point, enableAnimation) {\n            var self = this;\n\n            var axisPointerType = axisPointerModel.get('type');\n\n            var angleAxis = polar.getAngleAxis();\n            var radiusAxis = polar.getRadiusAxis();\n\n            var moveAnimation = enableAnimation\n                && axisPointerType !== 'cross'\n                && polar.getBaseAxis().type === 'category';\n\n            if (axisPointerType === 'cross') {\n                movePolarLine('angle', point, radiusAxis.getExtent());\n                movePolarLine('radius', point, angleAxis.getExtent());\n\n                this._updateCrossText(polar, point, axisPointerModel);\n            }\n            else {\n                var otherAxis = polar.getAxis(axisType === 'radius' ? 'angle' : 'radius');\n                var otherExtent = otherAxis.getExtent();\n\n                (axisPointerType === 'line' ? movePolarLine : movePolarShadow)(\n                    axisType, point, otherExtent\n                );\n            }\n            /**\n             * @inner\n             */\n            function movePolarLine(axisType, point, otherExtent) {\n                var mouseCoord = polar.pointToCoord(point);\n\n                var targetShape;\n\n                if (axisType === 'angle') {\n                    var p1 = polar.coordToPoint([otherExtent[0], mouseCoord[1]]);\n                    var p2 = polar.coordToPoint([otherExtent[1], mouseCoord[1]]);\n                    targetShape = makeLineShape(p1[0], p1[1], p2[0], p2[1]);\n                }\n                else {\n                    targetShape = {\n                        cx: polar.cx,\n                        cy: polar.cy,\n                        r: mouseCoord[0]\n                    };\n                }\n\n                var pointerEl = self._getPointerElement(\n                    polar, axisPointerModel, axisType, targetShape\n                );\n\n                moveAnimation\n                    ? graphic.updateProps(pointerEl, {\n                        shape: targetShape\n                    }, axisPointerModel)\n                    :  pointerEl.attr({\n                        shape: targetShape\n                    });\n            }\n\n            /**\n             * @inner\n             */\n            function movePolarShadow(axisType, point, otherExtent) {\n                var axis = polar.getAxis(axisType);\n                var bandWidth = axis.getBandWidth();\n\n                var mouseCoord = polar.pointToCoord(point);\n\n                var targetShape;\n\n                var radian = Math.PI / 180;\n\n                if (axisType === 'angle') {\n                    targetShape = makeSectorShape(\n                        polar.cx, polar.cy,\n                        otherExtent[0], otherExtent[1],\n                        // In ECharts y is negative if angle is positive\n                        (-mouseCoord[1] - bandWidth / 2) * radian,\n                        (-mouseCoord[1] + bandWidth / 2) * radian\n                    );\n                }\n                else {\n                    targetShape = makeSectorShape(\n                        polar.cx, polar.cy,\n                        mouseCoord[0] - bandWidth / 2,\n                        mouseCoord[0] + bandWidth / 2,\n                        0, Math.PI * 2\n                    );\n                }\n\n                var pointerEl = self._getPointerElement(\n                    polar, axisPointerModel, axisType, targetShape\n                );\n                moveAnimation\n                    ? graphic.updateProps(pointerEl, {\n                        shape: targetShape\n                    }, axisPointerModel)\n                    :  pointerEl.attr({\n                        shape: targetShape\n                    });\n            }\n        },\n\n        _updateCrossText: function (coordSys, point, axisPointerModel) {\n            var crossStyleModel = axisPointerModel.getModel('crossStyle');\n            var textStyleModel = crossStyleModel.getModel('textStyle');\n\n            var tooltipModel = this._tooltipModel;\n\n            var text = this._crossText;\n            if (!text) {\n                text = this._crossText = new graphic.Text({\n                    style: {\n                        textAlign: 'left',\n                        textVerticalAlign: 'bottom'\n                    }\n                });\n                this.group.add(text);\n            }\n\n            var value = coordSys.pointToData(point);\n\n            var dims = coordSys.dimensions;\n            value = zrUtil.map(value, function (val, idx) {\n                var axis = coordSys.getAxis(dims[idx]);\n                if (axis.type === 'category' || axis.type === 'time') {\n                    val = axis.scale.getLabel(val);\n                }\n                else {\n                    val = formatUtil.addCommas(\n                        val.toFixed(axis.getPixelPrecision())\n                    );\n                }\n                return val;\n            });\n\n            text.setStyle({\n                fill: textStyleModel.getTextColor() || crossStyleModel.get('color'),\n                textFont: textStyleModel.getFont(),\n                text: value.join(', '),\n                x: point[0] + 5,\n                y: point[1] - 5\n            });\n            text.z = tooltipModel.get('z');\n            text.zlevel = tooltipModel.get('zlevel');\n        },\n\n        _getPointerElement: function (coordSys, pointerModel, axisType, initShape) {\n            var tooltipModel = this._tooltipModel;\n            var z = tooltipModel.get('z');\n            var zlevel = tooltipModel.get('zlevel');\n            var axisPointers = this._axisPointers;\n            var coordSysName = coordSys.name;\n            axisPointers[coordSysName] = axisPointers[coordSysName] || {};\n            if (axisPointers[coordSysName][axisType]) {\n                return axisPointers[coordSysName][axisType];\n            }\n\n            // Create if not exists\n            var pointerType = pointerModel.get('type');\n            var styleModel = pointerModel.getModel(pointerType + 'Style');\n            var isShadow = pointerType === 'shadow';\n            var style = styleModel[isShadow ? 'getAreaStyle' : 'getLineStyle']();\n\n            var elementType = coordSys.type === 'polar'\n                ? (isShadow ? 'Sector' : (axisType === 'radius' ? 'Circle' : 'Line'))\n                : (isShadow ? 'Rect' : 'Line');\n\n            isShadow ? (style.stroke = null) : (style.fill = null);\n\n            var el = axisPointers[coordSysName][axisType] = new graphic[elementType]({\n                style: style,\n                z: z,\n                zlevel: zlevel,\n                silent: true,\n                shape: initShape\n            });\n\n            this.group.add(el);\n            return el;\n        },\n\n        /**\n         * Dispatch actions and show tooltip on series\n         * @param {Array.<module:echarts/model/Series>} seriesList\n         * @param {Array.<number>} point\n         * @param {Array.<number>} value\n         * @param {boolean} contentNotChange\n         * @param {Array.<number>|string|Function} [positionExpr]\n         */\n        _dispatchAndShowSeriesTooltipContent: function (\n            coordSys, seriesList, point, value, contentNotChange, positionExpr\n        ) {\n\n            var rootTooltipModel = this._tooltipModel;\n\n            var baseAxis = coordSys.getBaseAxis();\n            var baseDimIndex = ({x: 1, radius: 1, single: 1})[baseAxis.dim] ? 0 : 1;\n\n            if (!seriesList.length) {\n                return;\n            }\n\n            var payloadBatch = zrUtil.map(seriesList, function (series) {\n                return {\n                    seriesIndex: series.seriesIndex,\n                    dataIndexInside: series.getAxisTooltipDataIndex\n                        ? series.getAxisTooltipDataIndex(series.coordDimToDataDim(baseAxis.dim), value, baseAxis)\n                        : series.getData().indexOfNearest(\n                            series.coordDimToDataDim(baseAxis.dim)[0],\n                            value[baseDimIndex],\n                            // Add a threshold to avoid find the wrong dataIndex when data length is not same\n                            false, baseAxis.type === 'category' ? 0.5 : null\n                        )\n                };\n            });\n            var sampleSeriesIndex;\n            zrUtil.each(payloadBatch, function (payload, idx) {\n                if (seriesList[idx].getData().hasValue(payload.dataIndexInside)) {\n                    sampleSeriesIndex = idx;\n                }\n            });\n            // Fallback to 0.\n            sampleSeriesIndex = sampleSeriesIndex || 0;\n\n            var lastHover = this._lastHover;\n            var api = this._api;\n            // Dispatch downplay action\n            if (lastHover.payloadBatch && !contentNotChange) {\n                api.dispatchAction({\n                    type: 'downplay',\n                    batch: lastHover.payloadBatch\n                });\n            }\n            // Dispatch highlight action\n            if (!contentNotChange) {\n                api.dispatchAction({\n                    type: 'highlight',\n                    batch: payloadBatch\n                });\n                lastHover.payloadBatch = payloadBatch;\n            }\n            // Dispatch showTip action\n            var dataIndex = payloadBatch[sampleSeriesIndex].dataIndexInside;\n            api.dispatchAction({\n                type: 'showTip',\n                dataIndexInside: dataIndex,\n                // expose to user.\n                dataIndex: seriesList[sampleSeriesIndex].getData().getRawIndex(dataIndex),\n                seriesIndex: payloadBatch[sampleSeriesIndex].seriesIndex,\n                from: this.uid\n            });\n\n            if (baseAxis && rootTooltipModel.get('showContent') && rootTooltipModel.get('show')) {\n                var paramsList = zrUtil.map(seriesList, function (series, index) {\n                    return series.getDataParams(payloadBatch[index].dataIndexInside);\n                });\n\n                if (!contentNotChange) {\n                    // Update html content\n                    var firstDataIndex = payloadBatch[sampleSeriesIndex].dataIndexInside;\n\n                    // Default tooltip content\n                    // FIXME\n                    // (1) shold be the first data which has name?\n                    // (2) themeRiver, firstDataIndex is array, and first line is unnecessary.\n                    var firstLine = baseAxis.type === 'time'\n                        ? baseAxis.scale.getLabel(value[baseDimIndex])\n                        : seriesList[sampleSeriesIndex].getData().getName(firstDataIndex);\n                    var defaultHtml = (firstLine ? formatUtil.encodeHTML(firstLine) + '<br />' : '')\n                        + zrUtil.map(seriesList, function (series, index) {\n                            return series.formatTooltip(payloadBatch[index].dataIndexInside, true);\n                        }).join('<br />');\n\n                    var asyncTicket = 'axis_' + coordSys.name + '_' + firstDataIndex;\n\n                    this._showTooltipContent(\n                        rootTooltipModel, defaultHtml, paramsList, asyncTicket,\n                        point[0], point[1], positionExpr, null, api\n                    );\n                }\n                else {\n                    updatePosition(\n                        positionExpr || rootTooltipModel.get('position'),\n                        point[0], point[1],\n                        rootTooltipModel.get('confine'),\n                        this._tooltipContent, paramsList, null, api\n                    );\n                }\n            }\n        },\n\n        /**\n         * Show tooltip on item\n         * @param {module:echarts/model/Series} seriesModel\n         * @param {number} dataIndex\n         * @param {string} dataType\n         * @param {Object} e\n         */\n        _showItemTooltipContent: function (seriesModel, dataIndex, dataType, e) {\n            // FIXME Graph data\n            var api = this._api;\n            var data = seriesModel.getData(dataType);\n            var itemModel = data.getItemModel(dataIndex);\n\n            var tooltipOpt = itemModel.get('tooltip', true);\n            if (typeof tooltipOpt === 'string') {\n                // In each data item tooltip can be simply write:\n                // {\n                //  value: 10,\n                //  tooltip: 'Something you need to know'\n                // }\n                var tooltipContent = tooltipOpt;\n                tooltipOpt = {\n                    formatter: tooltipContent\n                };\n            }\n            var rootTooltipModel = this._tooltipModel;\n            var seriesTooltipModel = seriesModel.getModel(\n                'tooltip', rootTooltipModel\n            );\n            var tooltipModel = new Model(tooltipOpt, seriesTooltipModel, seriesTooltipModel.ecModel);\n\n            var params = seriesModel.getDataParams(dataIndex, dataType);\n            var defaultHtml = seriesModel.formatTooltip(dataIndex, false, dataType);\n\n            var asyncTicket = 'item_' + seriesModel.name + '_' + dataIndex;\n\n            this._showTooltipContent(\n                tooltipModel, defaultHtml, params, asyncTicket,\n                e.offsetX, e.offsetY, e.position, e.target, api\n            );\n        },\n\n        _showTooltipContent: function (\n            tooltipModel, defaultHtml, params, asyncTicket, x, y, positionExpr, target, api\n        ) {\n            // Reset ticket\n            this._ticket = '';\n\n            if (tooltipModel.get('showContent') && tooltipModel.get('show')) {\n                var tooltipContent = this._tooltipContent;\n                var confine = tooltipModel.get('confine');\n\n                var formatter = tooltipModel.get('formatter');\n                positionExpr = positionExpr || tooltipModel.get('position');\n                var html = defaultHtml;\n\n                if (formatter) {\n                    if (typeof formatter === 'string') {\n                        html = formatUtil.formatTpl(formatter, params, true);\n                    }\n                    else if (typeof formatter === 'function') {\n                        var self = this;\n                        var ticket = asyncTicket;\n                        var callback = function (cbTicket, html) {\n                            if (cbTicket === self._ticket) {\n                                tooltipContent.setContent(html);\n\n                                updatePosition(\n                                    positionExpr, x, y, confine,\n                                    tooltipContent, params, target, api\n                                );\n                            }\n                        };\n                        self._ticket = ticket;\n                        html = formatter(params, ticket, callback);\n                    }\n                }\n\n                tooltipContent.show(tooltipModel);\n                tooltipContent.setContent(html);\n\n                updatePosition(\n                    positionExpr, x, y, confine,\n                    tooltipContent, params, target, api\n                );\n            }\n        },\n\n        /**\n         * Show axis pointer\n         * @param {string} [coordSysName]\n         */\n        _showAxisPointer: function (coordSysName) {\n            if (coordSysName) {\n                var axisPointers = this._axisPointers[coordSysName];\n                axisPointers && zrUtil.each(axisPointers, function (el) {\n                    el.show();\n                });\n            }\n            else {\n                this.group.eachChild(function (child) {\n                    child.show();\n                });\n                this.group.show();\n            }\n        },\n\n        _resetLastHover: function () {\n            var lastHover = this._lastHover;\n            if (lastHover.payloadBatch) {\n                this._api.dispatchAction({\n                    type: 'downplay',\n                    batch: lastHover.payloadBatch\n                });\n            }\n            // Reset lastHover\n            this._lastHover = {};\n        },\n        /**\n         * Hide axis pointer\n         * @param {string} [coordSysName]\n         */\n        _hideAxisPointer: function (coordSysName) {\n            if (coordSysName) {\n                var axisPointers = this._axisPointers[coordSysName];\n                axisPointers && zrUtil.each(axisPointers, function (el) {\n                    el.hide();\n                });\n            }\n            else {\n                if (this.group.children().length) {\n                    this.group.hide();\n                }\n            }\n        },\n\n        _hide: function () {\n            clearTimeout(this._showTimeout);\n\n            this._hideAxisPointer();\n            this._resetLastHover();\n            if (!this._alwaysShowContent) {\n                this._tooltipContent.hideLater(this._tooltipModel.get('hideDelay'));\n            }\n\n            this._api.dispatchAction({\n                type: 'hideTip',\n                from: this.uid\n            });\n\n            this._lastX = this._lastY = null;\n        },\n\n        dispose: function (ecModel, api) {\n            if (env.node) {\n                return;\n            }\n            var zr = api.getZr();\n            this._tooltipContent.hide();\n\n            zr.off('click', this._tryShow);\n            zr.off('mousemove', this._mousemove);\n            zr.off('mouseout', this._hide);\n            zr.off('globalout', this._hide);\n        }\n    });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/component/tooltip/TooltipView.js\n// module id = 387\n// module chunks = 0 1 2 3 4","\n\n    var numberUtil = require('../util/number');\n    var linearMap = numberUtil.linearMap;\n    var zrUtil = require('zrender/lib/core/util');\n\n    function fixExtentWithBands(extent, nTick) {\n        var size = extent[1] - extent[0];\n        var len = nTick;\n        var margin = size / len / 2;\n        extent[0] += margin;\n        extent[1] -= margin;\n    }\n\n    var normalizedExtent = [0, 1];\n    /**\n     * @name module:echarts/coord/CartesianAxis\n     * @constructor\n     */\n    var Axis = function (dim, scale, extent) {\n\n        /**\n         * Axis dimension. Such as 'x', 'y', 'z', 'angle', 'radius'\n         * @type {string}\n         */\n        this.dim = dim;\n\n        /**\n         * Axis scale\n         * @type {module:echarts/coord/scale/*}\n         */\n        this.scale = scale;\n\n        /**\n         * @type {Array.<number>}\n         * @private\n         */\n        this._extent = extent || [0, 0];\n\n        /**\n         * @type {boolean}\n         */\n        this.inverse = false;\n\n        /**\n         * Usually true when axis has a ordinal scale\n         * @type {boolean}\n         */\n        this.onBand = false;\n    };\n\n    Axis.prototype = {\n\n        constructor: Axis,\n\n        /**\n         * If axis extent contain given coord\n         * @param {number} coord\n         * @return {boolean}\n         */\n        contain: function (coord) {\n            var extent = this._extent;\n            var min = Math.min(extent[0], extent[1]);\n            var max = Math.max(extent[0], extent[1]);\n            return coord >= min && coord <= max;\n        },\n\n        /**\n         * If axis extent contain given data\n         * @param {number} data\n         * @return {boolean}\n         */\n        containData: function (data) {\n            return this.contain(this.dataToCoord(data));\n        },\n\n        /**\n         * Get coord extent.\n         * @return {Array.<number>}\n         */\n        getExtent: function () {\n            var ret = this._extent.slice();\n            return ret;\n        },\n\n        /**\n         * Get precision used for formatting\n         * @param {Array.<number>} [dataExtent]\n         * @return {number}\n         */\n        getPixelPrecision: function (dataExtent) {\n            return numberUtil.getPixelPrecision(\n                dataExtent || this.scale.getExtent(),\n                this._extent\n            );\n        },\n\n        /**\n         * Set coord extent\n         * @param {number} start\n         * @param {number} end\n         */\n        setExtent: function (start, end) {\n            var extent = this._extent;\n            extent[0] = start;\n            extent[1] = end;\n        },\n\n        /**\n         * Convert data to coord. Data is the rank if it has a ordinal scale\n         * @param {number} data\n         * @param  {boolean} clamp\n         * @return {number}\n         */\n        dataToCoord: function (data, clamp) {\n            var extent = this._extent;\n            var scale = this.scale;\n            data = scale.normalize(data);\n\n            if (this.onBand && scale.type === 'ordinal') {\n                extent = extent.slice();\n                fixExtentWithBands(extent, scale.count());\n            }\n\n            return linearMap(data, normalizedExtent, extent, clamp);\n        },\n\n        /**\n         * Convert coord to data. Data is the rank if it has a ordinal scale\n         * @param {number} coord\n         * @param  {boolean} clamp\n         * @return {number}\n         */\n        coordToData: function (coord, clamp) {\n            var extent = this._extent;\n            var scale = this.scale;\n\n            if (this.onBand && scale.type === 'ordinal') {\n                extent = extent.slice();\n                fixExtentWithBands(extent, scale.count());\n            }\n\n            var t = linearMap(coord, extent, normalizedExtent, clamp);\n\n            return this.scale.scale(t);\n        },\n        /**\n         * @return {Array.<number>}\n         */\n        getTicksCoords: function (alignWithLabel) {\n            if (this.onBand && !alignWithLabel) {\n                var bands = this.getBands();\n                var coords = [];\n                for (var i = 0; i < bands.length; i++) {\n                    coords.push(bands[i][0]);\n                }\n                if (bands[i - 1]) {\n                    coords.push(bands[i - 1][1]);\n                }\n                return coords;\n            }\n            else {\n                return zrUtil.map(this.scale.getTicks(), this.dataToCoord, this);\n            }\n        },\n\n        /**\n         * Coords of labels are on the ticks or on the middle of bands\n         * @return {Array.<number>}\n         */\n        getLabelsCoords: function () {\n            return zrUtil.map(this.scale.getTicks(), this.dataToCoord, this);\n        },\n\n        /**\n         * Get bands.\n         *\n         * If axis has labels [1, 2, 3, 4]. Bands on the axis are\n         * |---1---|---2---|---3---|---4---|.\n         *\n         * @return {Array}\n         */\n         // FIXME Situation when labels is on ticks\n        getBands: function () {\n            var extent = this.getExtent();\n            var bands = [];\n            var len = this.scale.count();\n            var start = extent[0];\n            var end = extent[1];\n            var span = end - start;\n\n            for (var i = 0; i < len; i++) {\n                bands.push([\n                    span * i / len + start,\n                    span * (i + 1) / len + start\n                ]);\n            }\n            return bands;\n        },\n\n        /**\n         * Get width of band\n         * @return {number}\n         */\n        getBandWidth: function () {\n            var axisExtent = this._extent;\n            var dataExtent = this.scale.getExtent();\n\n            var len = dataExtent[1] - dataExtent[0] + (this.onBand ? 1 : 0);\n            // Fix #2728, avoid NaN when only one data.\n            len === 0 && (len = 1);\n\n            var size = Math.abs(axisExtent[1] - axisExtent[0]);\n\n            return Math.abs(size) / len;\n        },\n\n        /**\n         * When axis extent depends on data and no data exists,\n         * axis ticks should not be drawn, which is named 'blank'.\n         */\n        isBlank: function () {\n            return this._isBlank;\n        },\n\n        /**\n         * When axis extent depends on data and no data exists,\n         * axis ticks should not be drawn, which is named 'blank'.\n         */\n        setBlank: function (isBlank) {\n            this._isBlank = isBlank;\n        }\n\n    };\n\n    module.exports = Axis;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/coord/Axis.js\n// module id = 388\n// module chunks = 0 1 2 3 4","\n\n    var zrUtil = require('zrender/lib/core/util');\n\n    var defaultOption = {\n        show: true,\n        zlevel: 0,                  // 一级层叠\n        z: 0,                       // 二级层叠\n        // 反向坐标轴\n        inverse: false,\n\n        // 坐标轴名字，默认为空\n        name: '',\n        // 坐标轴名字位置，支持'start' | 'middle' | 'end'\n        nameLocation: 'end',\n        // 坐标轴名字旋转，degree。\n        nameRotate: null, // Adapt to axis rotate, when nameLocation is 'middle'.\n        nameTruncate: {\n            maxWidth: null,\n            ellipsis: '...',\n            placeholder: '.'\n        },\n        // 坐标轴文字样式，默认取全局样式\n        nameTextStyle: {},\n        // 文字与轴线距离\n        nameGap: 15,\n\n        silent: false, // Default false to support tooltip.\n        triggerEvent: false, // Default false to avoid legacy user event listener fail.\n\n        tooltip: {\n            show: false\n        },\n\n        // 坐标轴线\n        axisLine: {\n            // 默认显示，属性show控制显示与否\n            show: true,\n            onZero: true,\n            // 属性lineStyle控制线条样式\n            lineStyle: {\n                color: '#333',\n                width: 1,\n                type: 'solid'\n            }\n        },\n        // 坐标轴小标记\n        axisTick: {\n            // 属性show控制显示与否，默认显示\n            show: true,\n            // 控制小标记是否在grid里\n            inside: false,\n            // 属性length控制线长\n            length: 5,\n            // 属性lineStyle控制线条样式\n            lineStyle: {\n                width: 1\n            }\n        },\n        // 坐标轴文本标签，详见axis.axisLabel\n        axisLabel: {\n            show: true,\n            // 控制文本标签是否在grid里\n            inside: false,\n            rotate: 0,\n            margin: 8,\n            // formatter: null,\n            // 其余属性默认使用全局文本样式，详见TEXTSTYLE\n            textStyle: {\n                fontSize: 12\n            }\n        },\n        // 分隔线\n        splitLine: {\n            // 默认显示，属性show控制显示与否\n            show: true,\n            // 属性lineStyle（详见lineStyle）控制线条样式\n            lineStyle: {\n                color: ['#ccc'],\n                width: 1,\n                type: 'solid'\n            }\n        },\n        // 分隔区域\n        splitArea: {\n            // 默认不显示，属性show控制显示与否\n            show: false,\n            // 属性areaStyle（详见areaStyle）控制区域样式\n            areaStyle: {\n                color: ['rgba(250,250,250,0.3)','rgba(200,200,200,0.3)']\n            }\n        }\n    };\n\n    var categoryAxis = zrUtil.merge({\n        // 类目起始和结束两端空白策略\n        boundaryGap: true,\n        // splitArea: {\n            // show: false\n        // },\n        splitLine: {\n            show: false\n        },\n        // 坐标轴小标记\n        axisTick: {\n            // If tick is align with label when boundaryGap is true\n            // Default with axisTick\n            alignWithLabel: false,\n            interval: 'auto'\n        },\n        // 坐标轴文本标签，详见axis.axisLabel\n        axisLabel: {\n            interval: 'auto'\n        }\n    }, defaultOption);\n\n    var valueAxis = zrUtil.merge({\n        // 数值起始和结束两端空白策略\n        boundaryGap: [0, 0],\n        // 最小值, 设置成 'dataMin' 则从数据中计算最小值\n        // min: null,\n        // 最大值，设置成 'dataMax' 则从数据中计算最大值\n        // max: null,\n        // Readonly prop, specifies start value of the range when using data zoom.\n        // rangeStart: null\n        // Readonly prop, specifies end value of the range when using data zoom.\n        // rangeEnd: null\n        // 脱离0值比例，放大聚焦到最终_min，_max区间\n        // scale: false,\n        // 分割段数，默认为5\n        splitNumber: 5\n        // Minimum interval\n        // minInterval: null\n    }, defaultOption);\n\n    // FIXME\n    var timeAxis = zrUtil.defaults({\n        scale: true,\n        min: 'dataMin',\n        max: 'dataMax'\n    }, valueAxis);\n    var logAxis = zrUtil.defaults({\n        logBase: 10\n    }, valueAxis);\n    logAxis.scale = true;\n\n    module.exports = {\n        categoryAxis: categoryAxis,\n        valueAxis: valueAxis,\n        timeAxis: timeAxis,\n        logAxis: logAxis\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/coord/axisDefault.js\n// module id = 389\n// module chunks = 0 1 2 3 4","\n\n    var zrUtil = require('zrender/lib/core/util');\n    var axisHelper = require('./axisHelper');\n\n    function getName(obj) {\n        if (zrUtil.isObject(obj) && obj.value != null) {\n            return obj.value;\n        }\n        else {\n            return obj;\n        }\n    }\n\n    module.exports = {\n\n        /**\n         * Format labels\n         * @return {Array.<string>}\n         */\n        getFormattedLabels: function () {\n            return axisHelper.getFormattedLabels(\n                this.axis,\n                this.get('axisLabel.formatter')\n            );\n        },\n\n        /**\n         * Get categories\n         */\n        getCategories: function () {\n            return this.get('type') === 'category'\n                && zrUtil.map(this.get('data'), getName);\n        },\n\n        /**\n         * @param {boolean} origin\n         * @return {number|string} min value or 'dataMin' or null/undefined (means auto) or NaN\n         */\n        getMin: function (origin) {\n            var option = this.option;\n            var min = (!origin && option.rangeStart != null)\n                ? option.rangeStart : option.min;\n\n            if (min != null && min !== 'dataMin' && !zrUtil.eqNaN(min)) {\n                min = this.axis.scale.parse(min);\n            }\n            return min;\n        },\n\n        /**\n         * @param {boolean} origin\n         * @return {number|string} max value or 'dataMax' or null/undefined (means auto) or NaN\n         */\n        getMax: function (origin) {\n            var option = this.option;\n            var max = (!origin && option.rangeEnd != null)\n                ? option.rangeEnd : option.max;\n\n            if (max != null && max !== 'dataMax' && !zrUtil.eqNaN(max)) {\n                max = this.axis.scale.parse(max);\n            }\n            return max;\n        },\n\n        /**\n         * @return {boolean}\n         */\n        getNeedCrossZero: function () {\n            var option = this.option;\n            return (option.rangeStart != null || option.rangeEnd != null)\n                ? false : !option.scale;\n        },\n\n        /**\n         * Should be implemented by each axis model if necessary.\n         * @return {module:echarts/model/Component} coordinate system model\n         */\n        getCoordSysModel: zrUtil.noop,\n\n        /**\n         * @param {number} rangeStart Can only be finite number or null/undefined or NaN.\n         * @param {number} rangeEnd Can only be finite number or null/undefined or NaN.\n         */\n        setRange: function (rangeStart, rangeEnd) {\n            this.option.rangeStart = rangeStart;\n            this.option.rangeEnd = rangeEnd;\n        },\n\n        /**\n         * Reset range\n         */\n        resetRange: function () {\n            // rangeStart and rangeEnd is readonly.\n            this.option.rangeStart = this.option.rangeEnd = null;\n        }\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/coord/axisModelCommonMixin.js\n// module id = 390\n// module chunks = 0 1 2 3 4","\n\n    var axisDefault = require('./axisDefault');\n    var zrUtil = require('zrender/lib/core/util');\n    var ComponentModel = require('../model/Component');\n    var layout = require('../util/layout');\n\n    // FIXME axisType is fixed ?\n    var AXIS_TYPES = ['value', 'category', 'time', 'log'];\n\n    /**\n     * Generate sub axis model class\n     * @param {string} axisName 'x' 'y' 'radius' 'angle' 'parallel'\n     * @param {module:echarts/model/Component} BaseAxisModelClass\n     * @param {Function} axisTypeDefaulter\n     * @param {Object} [extraDefaultOption]\n     */\n    module.exports = function (axisName, BaseAxisModelClass, axisTypeDefaulter, extraDefaultOption) {\n\n        zrUtil.each(AXIS_TYPES, function (axisType) {\n\n            BaseAxisModelClass.extend({\n\n                type: axisName + 'Axis.' + axisType,\n\n                mergeDefaultAndTheme: function (option, ecModel) {\n                    var layoutMode = this.layoutMode;\n                    var inputPositionParams = layoutMode\n                        ? layout.getLayoutParams(option) : {};\n\n                    var themeModel = ecModel.getTheme();\n                    zrUtil.merge(option, themeModel.get(axisType + 'Axis'));\n                    zrUtil.merge(option, this.getDefaultOption());\n\n                    option.type = axisTypeDefaulter(axisName, option);\n\n                    if (layoutMode) {\n                        layout.mergeLayoutParam(option, inputPositionParams, layoutMode);\n                    }\n                },\n\n                defaultOption: zrUtil.mergeAll(\n                    [\n                        {},\n                        axisDefault[axisType + 'Axis'],\n                        extraDefaultOption\n                    ],\n                    true\n                )\n            });\n        });\n\n        ComponentModel.registerSubTypeDefaulter(\n            axisName + 'Axis',\n            zrUtil.curry(axisTypeDefaulter, axisName)\n        );\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/coord/axisModelCreator.js\n// module id = 391\n// module chunks = 0 1 2 3 4","\n\n    var zrUtil = require('zrender/lib/core/util');\n    var Axis = require('../Axis');\n    var axisLabelInterval = require('./axisLabelInterval');\n\n    /**\n     * Extend axis 2d\n     * @constructor module:echarts/coord/cartesian/Axis2D\n     * @extends {module:echarts/coord/cartesian/Axis}\n     * @param {string} dim\n     * @param {*} scale\n     * @param {Array.<number>} coordExtent\n     * @param {string} axisType\n     * @param {string} position\n     */\n    var Axis2D = function (dim, scale, coordExtent, axisType, position) {\n        Axis.call(this, dim, scale, coordExtent);\n        /**\n         * Axis type\n         *  - 'category'\n         *  - 'value'\n         *  - 'time'\n         *  - 'log'\n         * @type {string}\n         */\n        this.type = axisType || 'value';\n\n        /**\n         * Axis position\n         *  - 'top'\n         *  - 'bottom'\n         *  - 'left'\n         *  - 'right'\n         */\n        this.position = position || 'bottom';\n    };\n\n    Axis2D.prototype = {\n\n        constructor: Axis2D,\n\n        /**\n         * Index of axis, can be used as key\n         */\n        index: 0,\n        /**\n         * If axis is on the zero position of the other axis\n         * @type {boolean}\n         */\n        onZero: false,\n\n        /**\n         * Axis model\n         * @param {module:echarts/coord/cartesian/AxisModel}\n         */\n        model: null,\n\n        isHorizontal: function () {\n            var position = this.position;\n            return position === 'top' || position === 'bottom';\n        },\n\n        getGlobalExtent: function () {\n            var ret = this.getExtent();\n            ret[0] = this.toGlobalCoord(ret[0]);\n            ret[1] = this.toGlobalCoord(ret[1]);\n            return ret;\n        },\n\n        /**\n         * @return {number}\n         */\n        getLabelInterval: function () {\n            var labelInterval = this._labelInterval;\n            if (!labelInterval) {\n                labelInterval = this._labelInterval = axisLabelInterval(this);\n            }\n            return labelInterval;\n        },\n\n        /**\n         * If label is ignored.\n         * Automatically used when axis is category and label can not be all shown\n         * @param  {number}  idx\n         * @return {boolean}\n         */\n        isLabelIgnored: function (idx) {\n            if (this.type === 'category') {\n                var labelInterval = this.getLabelInterval();\n                return ((typeof labelInterval === 'function')\n                    && !labelInterval(idx, this.scale.getLabel(idx)))\n                    || idx % (labelInterval + 1);\n            }\n        },\n\n        /**\n         * Transform global coord to local coord,\n         * i.e. var localCoord = axis.toLocalCoord(80);\n         * designate by module:echarts/coord/cartesian/Grid.\n         * @type {Function}\n         */\n        toLocalCoord: null,\n\n        /**\n         * Transform global coord to local coord,\n         * i.e. var globalCoord = axis.toLocalCoord(40);\n         * designate by module:echarts/coord/cartesian/Grid.\n         * @type {Function}\n         */\n        toGlobalCoord: null\n\n    };\n    zrUtil.inherits(Axis2D, Axis);\n\n    module.exports = Axis2D;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/coord/cartesian/Axis2D.js\n// module id = 392\n// module chunks = 0 1 2 3 4","'use strict';\n/**\n * Cartesian coordinate system\n * @module  echarts/coord/Cartesian\n *\n */\n\n\n    var zrUtil = require('zrender/lib/core/util');\n\n    function dimAxisMapper(dim) {\n        return this._axes[dim];\n    }\n\n    /**\n     * @alias module:echarts/coord/Cartesian\n     * @constructor\n     */\n    var Cartesian = function (name) {\n        this._axes = {};\n\n        this._dimList = [];\n\n        /**\n         * @type {string}\n         */\n        this.name = name || '';\n    };\n\n    Cartesian.prototype = {\n\n        constructor: Cartesian,\n\n        type: 'cartesian',\n\n        /**\n         * Get axis\n         * @param  {number|string} dim\n         * @return {module:echarts/coord/Cartesian~Axis}\n         */\n        getAxis: function (dim) {\n            return this._axes[dim];\n        },\n\n        /**\n         * Get axes list\n         * @return {Array.<module:echarts/coord/Cartesian~Axis>}\n         */\n        getAxes: function () {\n            return zrUtil.map(this._dimList, dimAxisMapper, this);\n        },\n\n        /**\n         * Get axes list by given scale type\n         */\n        getAxesByScale: function (scaleType) {\n            scaleType = scaleType.toLowerCase();\n            return zrUtil.filter(\n                this.getAxes(),\n                function (axis) {\n                    return axis.scale.type === scaleType;\n                }\n            );\n        },\n\n        /**\n         * Add axis\n         * @param {module:echarts/coord/Cartesian.Axis}\n         */\n        addAxis: function (axis) {\n            var dim = axis.dim;\n\n            this._axes[dim] = axis;\n\n            this._dimList.push(dim);\n        },\n\n        /**\n         * Convert data to coord in nd space\n         * @param {Array.<number>|Object.<string, number>} val\n         * @return {Array.<number>|Object.<string, number>}\n         */\n        dataToCoord: function (val) {\n            return this._dataCoordConvert(val, 'dataToCoord');\n        },\n\n        /**\n         * Convert coord in nd space to data\n         * @param  {Array.<number>|Object.<string, number>} val\n         * @return {Array.<number>|Object.<string, number>}\n         */\n        coordToData: function (val) {\n            return this._dataCoordConvert(val, 'coordToData');\n        },\n\n        _dataCoordConvert: function (input, method) {\n            var dimList = this._dimList;\n\n            var output = input instanceof Array ? [] : {};\n\n            for (var i = 0; i < dimList.length; i++) {\n                var dim = dimList[i];\n                var axis = this._axes[dim];\n\n                output[dim] = axis[method](input[dim]);\n            }\n\n            return output;\n        }\n    };\n\n    module.exports = Cartesian;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/coord/cartesian/Cartesian.js\n// module id = 393\n// module chunks = 0 1 2 3 4","'use strict';\n\n\n    var zrUtil = require('zrender/lib/core/util');\n    var Cartesian = require('./Cartesian');\n\n    function Cartesian2D(name) {\n\n        Cartesian.call(this, name);\n    }\n\n    Cartesian2D.prototype = {\n\n        constructor: Cartesian2D,\n\n        type: 'cartesian2d',\n\n        /**\n         * @type {Array.<string>}\n         * @readOnly\n         */\n        dimensions: ['x', 'y'],\n\n        /**\n         * Base axis will be used on stacking.\n         *\n         * @return {module:echarts/coord/cartesian/Axis2D}\n         */\n        getBaseAxis: function () {\n            return this.getAxesByScale('ordinal')[0]\n                || this.getAxesByScale('time')[0]\n                || this.getAxis('x');\n        },\n\n        /**\n         * If contain point\n         * @param {Array.<number>} point\n         * @return {boolean}\n         */\n        containPoint: function (point) {\n            var axisX = this.getAxis('x');\n            var axisY = this.getAxis('y');\n            return axisX.contain(axisX.toLocalCoord(point[0]))\n                && axisY.contain(axisY.toLocalCoord(point[1]));\n        },\n\n        /**\n         * If contain data\n         * @param {Array.<number>} data\n         * @return {boolean}\n         */\n        containData: function (data) {\n            return this.getAxis('x').containData(data[0])\n                && this.getAxis('y').containData(data[1]);\n        },\n\n        /**\n         * Convert series data to an array of points\n         * @param {module:echarts/data/List} data\n         * @param {boolean} stack\n         * @return {Array}\n         *  Return array of points. For example:\n         *  `[[10, 10], [20, 20], [30, 30]]`\n         */\n        dataToPoints: function (data, stack) {\n            return data.mapArray(['x', 'y'], function (x, y) {\n                return this.dataToPoint([x, y]);\n            }, stack, this);\n        },\n\n        /**\n         * @param {Array.<number>} data\n         * @param {boolean} [clamp=false]\n         * @return {Array.<number>}\n         */\n        dataToPoint: function (data, clamp) {\n            var xAxis = this.getAxis('x');\n            var yAxis = this.getAxis('y');\n            return [\n                xAxis.toGlobalCoord(xAxis.dataToCoord(data[0], clamp)),\n                yAxis.toGlobalCoord(yAxis.dataToCoord(data[1], clamp))\n            ];\n        },\n\n        /**\n         * @param {Array.<number>} point\n         * @param {boolean} [clamp=false]\n         * @return {Array.<number>}\n         */\n        pointToData: function (point, clamp) {\n            var xAxis = this.getAxis('x');\n            var yAxis = this.getAxis('y');\n            return [\n                xAxis.coordToData(xAxis.toLocalCoord(point[0]), clamp),\n                yAxis.coordToData(yAxis.toLocalCoord(point[1]), clamp)\n            ];\n        },\n\n        /**\n         * Get other axis\n         * @param {module:echarts/coord/cartesian/Axis2D} axis\n         */\n        getOtherAxis: function (axis) {\n            return this.getAxis(axis.dim === 'x' ? 'y' : 'x');\n        }\n    };\n\n    zrUtil.inherits(Cartesian2D, Cartesian);\n\n    module.exports = Cartesian2D;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/coord/cartesian/Cartesian2D.js\n// module id = 394\n// module chunks = 0 1 2 3 4","'use strict';\n// Grid 是在有直角坐标系的时候必须要存在的\n// 所以这里也要被 Cartesian2D 依赖\n\n\n    require('./AxisModel');\n    var ComponentModel = require('../../model/Component');\n\n    module.exports = ComponentModel.extend({\n\n        type: 'grid',\n\n        dependencies: ['xAxis', 'yAxis'],\n\n        layoutMode: 'box',\n\n        /**\n         * @type {module:echarts/coord/cartesian/Grid}\n         */\n        coordinateSystem: null,\n\n        defaultOption: {\n            show: false,\n            zlevel: 0,\n            z: 0,\n            left: '10%',\n            top: 60,\n            right: '10%',\n            bottom: 60,\n            // If grid size contain label\n            containLabel: false,\n            // width: {totalWidth} - left - right,\n            // height: {totalHeight} - top - bottom,\n            backgroundColor: 'rgba(0,0,0,0)',\n            borderWidth: 1,\n            borderColor: '#ccc'\n        }\n    });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/coord/cartesian/GridModel.js\n// module id = 395\n// module chunks = 0 1 2 3 4","'use strict';\n/**\n * Helper function for axisLabelInterval calculation\n */\n\n\n\n    var zrUtil = require('zrender/lib/core/util');\n    var axisHelper = require('../axisHelper');\n\n    module.exports = function (axis) {\n        var axisModel = axis.model;\n        var labelModel = axisModel.getModel('axisLabel');\n        var labelInterval = labelModel.get('interval');\n        if (!(axis.type === 'category' && labelInterval === 'auto')) {\n            return labelInterval === 'auto' ? 0 : labelInterval;\n        }\n\n        return axisHelper.getAxisLabelInterval(\n            zrUtil.map(axis.scale.getTicks(), axis.dataToCoord, axis),\n            axisModel.getFormattedLabels(),\n            labelModel.getModel('textStyle').getFont(),\n            axis.isHorizontal()\n        );\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/coord/cartesian/axisLabelInterval.js\n// module id = 396\n// module chunks = 0 1 2 3 4","'use strict';\n\n\n    function defaultKeyGetter(item) {\n        return item;\n    }\n\n    function DataDiffer(oldArr, newArr, oldKeyGetter, newKeyGetter) {\n        this._old = oldArr;\n        this._new = newArr;\n\n        this._oldKeyGetter = oldKeyGetter || defaultKeyGetter;\n        this._newKeyGetter = newKeyGetter || defaultKeyGetter;\n    }\n\n    DataDiffer.prototype = {\n\n        constructor: DataDiffer,\n\n        /**\n         * Callback function when add a data\n         */\n        add: function (func) {\n            this._add = func;\n            return this;\n        },\n\n        /**\n         * Callback function when update a data\n         */\n        update: function (func) {\n            this._update = func;\n            return this;\n        },\n\n        /**\n         * Callback function when remove a data\n         */\n        remove: function (func) {\n            this._remove = func;\n            return this;\n        },\n\n        execute: function () {\n            var oldArr = this._old;\n            var newArr = this._new;\n            var oldKeyGetter = this._oldKeyGetter;\n            var newKeyGetter = this._newKeyGetter;\n\n            var oldDataIndexMap = {};\n            var newDataIndexMap = {};\n            var oldDataKeyArr = [];\n            var newDataKeyArr = [];\n            var i;\n\n            initIndexMap(oldArr, oldDataIndexMap, oldDataKeyArr, oldKeyGetter);\n            initIndexMap(newArr, newDataIndexMap, newDataKeyArr, newKeyGetter);\n\n            // Travel by inverted order to make sure order consistency\n            // when duplicate keys exists (consider newDataIndex.pop() below).\n            // For performance consideration, these code below do not look neat.\n            for (i = 0; i < oldArr.length; i++) {\n                var key = oldDataKeyArr[i];\n                var idx = newDataIndexMap[key];\n\n                // idx can never be empty array here. see 'set null' logic below.\n                if (idx != null) {\n                    // Consider there is duplicate key (for example, use dataItem.name as key).\n                    // We should make sure every item in newArr and oldArr can be visited.\n                    var len = idx.length;\n                    if (len) {\n                        len === 1 && (newDataIndexMap[key] = null);\n                        idx = idx.unshift();\n                    }\n                    else {\n                        newDataIndexMap[key] = null;\n                    }\n                    this._update && this._update(idx, i);\n                }\n                else {\n                    this._remove && this._remove(i);\n                }\n            }\n\n            for (var i = 0; i < newDataKeyArr.length; i++) {\n                var key = newDataKeyArr[i];\n                if (newDataIndexMap.hasOwnProperty(key)) {\n                    var idx = newDataIndexMap[key];\n                    if (idx == null) {\n                        continue;\n                    }\n                    // idx can never be empty array here. see 'set null' logic above.\n                    if (!idx.length) {\n                        this._add && this._add(idx);\n                    }\n                    else {\n                        for (var j = 0, len = idx.length; j < len; j++) {\n                            this._add && this._add(idx[j]);\n                        }\n                    }\n                }\n            }\n        }\n    };\n\n    function initIndexMap(arr, map, keyArr, keyGetter) {\n        for (var i = 0; i < arr.length; i++) {\n            var key = keyGetter(arr[i], i);\n            var existence = map[key];\n            if (existence == null) {\n                keyArr.push(key);\n                map[key] = i;\n            }\n            else {\n                if (!existence.length) {\n                    map[key] = existence = [existence];\n                }\n                existence.push(i);\n            }\n        }\n    }\n\n    module.exports = DataDiffer;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/data/DataDiffer.js\n// module id = 397\n// module chunks = 0 1 2 3 4","/**\n * Complete dimensions by data (guess dimension).\n */\n\n\n    var zrUtil = require('zrender/lib/core/util');\n\n    /**\n     * Complete the dimensions array guessed from the data structure.\n     * @param  {Array.<string>} dimensions      Necessary dimensions, like ['x', 'y']\n     * @param  {Array} data                     Data list. [[1, 2, 3], [2, 3, 4]]\n     * @param  {Array.<string>} [defaultNames]    Default names to fill not necessary dimensions, like ['value']\n     * @param  {string} [extraPrefix]             Prefix of name when filling the left dimensions.\n     * @return {Array.<string>}\n     */\n    function completeDimensions(dimensions, data, defaultNames, extraPrefix) {\n        if (!data) {\n            return dimensions;\n        }\n\n        var value0 = retrieveValue(data[0]);\n        var dimSize = zrUtil.isArray(value0) && value0.length || 1;\n\n        defaultNames = defaultNames || [];\n        extraPrefix = extraPrefix || 'extra';\n        for (var i = 0; i < dimSize; i++) {\n            if (!dimensions[i]) {\n                var name = defaultNames[i] || (extraPrefix + (i - defaultNames.length));\n                dimensions[i] = guessOrdinal(data, i)\n                    ? {type: 'ordinal', name: name}\n                    : name;\n            }\n        }\n\n        return dimensions;\n    }\n\n    // The rule should not be complex, otherwise user might not\n    // be able to known where the data is wrong.\n    var guessOrdinal = completeDimensions.guessOrdinal = function (data, dimIndex) {\n        for (var i = 0, len = data.length; i < len; i++) {\n            var value = retrieveValue(data[i]);\n\n            if (!zrUtil.isArray(value)) {\n                return false;\n            }\n\n            var value = value[dimIndex];\n            if (value != null && isFinite(value)) {\n                return false;\n            }\n            else if (zrUtil.isString(value) && value !== '-') {\n                return true;\n            }\n        }\n        return false;\n    };\n\n    function retrieveValue(o) {\n        return zrUtil.isArray(o) ? o : zrUtil.isObject(o) ? o.value: o;\n    }\n\n    module.exports = completeDimensions;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/data/helper/completeDimensions.js\n// module id = 398\n// module chunks = 0 1 2 3 4","\n\n    module.exports = function (seriesType, ecModel) {\n        ecModel.eachSeriesByType(seriesType, function (seriesModel) {\n            var data = seriesModel.getData();\n            var coordSys = seriesModel.coordinateSystem;\n\n            if (coordSys) {\n                var dims = coordSys.dimensions;\n\n                if (coordSys.type === 'singleAxis') {\n                    data.each(dims[0], function (x, idx) {\n                        // Also {Array.<number>}, not undefined to avoid if...else... statement\n                        data.setItemLayout(idx, isNaN(x) ? [NaN, NaN] : coordSys.dataToPoint(x));\n                    });\n                }\n                else {\n                    data.each(dims, function (x, y, idx) {\n                        // Also {Array.<number>}, not undefined to avoid if...else... statement\n                        data.setItemLayout(\n                            idx, (isNaN(x) || isNaN(y)) ? [NaN, NaN] : coordSys.dataToPoint([x, y])\n                        );\n                    }, true);\n                }\n            }\n        });\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/layout/points.js\n// module id = 399\n// module chunks = 0 1 2 3 4","\n\n    var graphic = require('../util/graphic');\n    var zrUtil = require('zrender/lib/core/util');\n    var PI = Math.PI;\n    /**\n     * @param {module:echarts/ExtensionAPI} api\n     * @param {Object} [opts]\n     * @param {string} [opts.text]\n     * @param {string} [opts.color]\n     * @param {string} [opts.textColor]\n     * @return {module:zrender/Element}\n     */\n    module.exports = function (api, opts) {\n        opts = opts || {};\n        zrUtil.defaults(opts, {\n            text: 'loading',\n            color: '#c23531',\n            textColor: '#000',\n            maskColor: 'rgba(255, 255, 255, 0.8)',\n            zlevel: 0\n        });\n        var mask = new graphic.Rect({\n            style: {\n                fill: opts.maskColor\n            },\n            zlevel: opts.zlevel,\n            z: 10000\n        });\n        var arc = new graphic.Arc({\n            shape: {\n                startAngle: -PI / 2,\n                endAngle: -PI / 2 + 0.1,\n                r: 10\n            },\n            style: {\n                stroke: opts.color,\n                lineCap: 'round',\n                lineWidth: 5\n            },\n            zlevel: opts.zlevel,\n            z: 10001\n        });\n        var labelRect = new graphic.Rect({\n            style: {\n                fill: 'none',\n                text: opts.text,\n                textPosition: 'right',\n                textDistance: 10,\n                textFill: opts.textColor\n            },\n            zlevel: opts.zlevel,\n            z: 10001\n        });\n\n        arc.animateShape(true)\n            .when(1000, {\n                endAngle: PI * 3 / 2\n            })\n            .start('circularInOut');\n        arc.animateShape(true)\n            .when(1000, {\n                startAngle: PI * 3 / 2\n            })\n            .delay(300)\n            .start('circularInOut');\n\n        var group = new graphic.Group();\n        group.add(arc);\n        group.add(labelRect);\n        group.add(mask);\n        // Inject resize\n        group.resize = function () {\n            var cx = api.getWidth() / 2;\n            var cy = api.getHeight() / 2;\n            arc.setShape({\n                cx: cx,\n                cy: cy\n            });\n            var r = arc.shape.r;\n            labelRect.setShape({\n                x: cx - r,\n                y: cy - r,\n                width: r * 2,\n                height: r * 2\n            });\n\n            mask.setShape({\n                x: 0,\n                y: 0,\n                width: api.getWidth(),\n                height: api.getHeight()\n            });\n        };\n        group.resize();\n        return group;\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/loading/default.js\n// module id = 400\n// module chunks = 0 1 2 3 4","/**\n * ECharts global model\n *\n * @module {echarts/model/Global}\n */\n\n\n\n    /**\n     * Caution: If the mechanism should be changed some day, these cases\n     * should be considered:\n     *\n     * (1) In `merge option` mode, if using the same option to call `setOption`\n     * many times, the result should be the same (try our best to ensure that).\n     * (2) In `merge option` mode, if a component has no id/name specified, it\n     * will be merged by index, and the result sequence of the components is\n     * consistent to the original sequence.\n     * (3) `reset` feature (in toolbox). Find detailed info in comments about\n     * `mergeOption` in module:echarts/model/OptionManager.\n     */\n\n    var zrUtil = require('zrender/lib/core/util');\n    var modelUtil = require('../util/model');\n    var Model = require('./Model');\n    var each = zrUtil.each;\n    var filter = zrUtil.filter;\n    var map = zrUtil.map;\n    var isArray = zrUtil.isArray;\n    var indexOf = zrUtil.indexOf;\n    var isObject = zrUtil.isObject;\n\n    var ComponentModel = require('./Component');\n\n    var globalDefault = require('./globalDefault');\n\n    var OPTION_INNER_KEY = '\\0_ec_inner';\n\n    /**\n     * @alias module:echarts/model/Global\n     *\n     * @param {Object} option\n     * @param {module:echarts/model/Model} parentModel\n     * @param {Object} theme\n     */\n    var GlobalModel = Model.extend({\n\n        constructor: GlobalModel,\n\n        init: function (option, parentModel, theme, optionManager) {\n            theme = theme || {};\n\n            this.option = null; // Mark as not initialized.\n\n            /**\n             * @type {module:echarts/model/Model}\n             * @private\n             */\n            this._theme = new Model(theme);\n\n            /**\n             * @type {module:echarts/model/OptionManager}\n             */\n            this._optionManager = optionManager;\n        },\n\n        setOption: function (option, optionPreprocessorFuncs) {\n            zrUtil.assert(\n                !(OPTION_INNER_KEY in option),\n                'please use chart.getOption()'\n            );\n\n            this._optionManager.setOption(option, optionPreprocessorFuncs);\n\n            this.resetOption();\n        },\n\n        /**\n         * @param {string} type null/undefined: reset all.\n         *                      'recreate': force recreate all.\n         *                      'timeline': only reset timeline option\n         *                      'media': only reset media query option\n         * @return {boolean} Whether option changed.\n         */\n        resetOption: function (type) {\n            var optionChanged = false;\n            var optionManager = this._optionManager;\n\n            if (!type || type === 'recreate') {\n                var baseOption = optionManager.mountOption(type === 'recreate');\n\n                if (!this.option || type === 'recreate') {\n                    initBase.call(this, baseOption);\n                }\n                else {\n                    this.restoreData();\n                    this.mergeOption(baseOption);\n                }\n                optionChanged = true;\n            }\n\n            if (type === 'timeline' || type === 'media') {\n                this.restoreData();\n            }\n\n            if (!type || type === 'recreate' || type === 'timeline') {\n                var timelineOption = optionManager.getTimelineOption(this);\n                timelineOption && (this.mergeOption(timelineOption), optionChanged = true);\n            }\n\n            if (!type || type === 'recreate' || type === 'media') {\n                var mediaOptions = optionManager.getMediaOption(this, this._api);\n                if (mediaOptions.length) {\n                    each(mediaOptions, function (mediaOption) {\n                        this.mergeOption(mediaOption, optionChanged = true);\n                    }, this);\n                }\n            }\n\n            return optionChanged;\n        },\n\n        /**\n         * @protected\n         */\n        mergeOption: function (newOption) {\n            var option = this.option;\n            var componentsMap = this._componentsMap;\n            var newCptTypes = [];\n\n            // 如果不存在对应的 component model 则直接 merge\n            each(newOption, function (componentOption, mainType) {\n                if (componentOption == null) {\n                    return;\n                }\n\n                if (!ComponentModel.hasClass(mainType)) {\n                    option[mainType] = option[mainType] == null\n                        ? zrUtil.clone(componentOption)\n                        : zrUtil.merge(option[mainType], componentOption, true);\n                }\n                else {\n                    newCptTypes.push(mainType);\n                }\n            });\n\n            // FIXME OPTION 同步是否要改回原来的\n            ComponentModel.topologicalTravel(\n                newCptTypes, ComponentModel.getAllClassMainTypes(), visitComponent, this\n            );\n\n            this._seriesIndices = this._seriesIndices || [];\n\n            function visitComponent(mainType, dependencies) {\n                var newCptOptionList = modelUtil.normalizeToArray(newOption[mainType]);\n\n                var mapResult = modelUtil.mappingToExists(\n                    componentsMap[mainType], newCptOptionList\n                );\n\n                modelUtil.makeIdAndName(mapResult);\n\n                // Set mainType and complete subType.\n                each(mapResult, function (item, index) {\n                    var opt = item.option;\n                    if (isObject(opt)) {\n                        item.keyInfo.mainType = mainType;\n                        item.keyInfo.subType = determineSubType(mainType, opt, item.exist);\n                    }\n                });\n\n                var dependentModels = getComponentsByTypes(\n                    componentsMap, dependencies\n                );\n\n                option[mainType] = [];\n                componentsMap[mainType] = [];\n\n                each(mapResult, function (resultItem, index) {\n                    var componentModel = resultItem.exist;\n                    var newCptOption = resultItem.option;\n\n                    zrUtil.assert(\n                        isObject(newCptOption) || componentModel,\n                        'Empty component definition'\n                    );\n\n                    // Consider where is no new option and should be merged using {},\n                    // see removeEdgeAndAdd in topologicalTravel and\n                    // ComponentModel.getAllClassMainTypes.\n                    if (!newCptOption) {\n                        componentModel.mergeOption({}, this);\n                        componentModel.optionUpdated({}, false);\n                    }\n                    else {\n                        var ComponentModelClass = ComponentModel.getClass(\n                            mainType, resultItem.keyInfo.subType, true\n                        );\n\n                        if (componentModel && componentModel instanceof ComponentModelClass) {\n                            componentModel.name = resultItem.keyInfo.name;\n                            componentModel.mergeOption(newCptOption, this);\n                            componentModel.optionUpdated(newCptOption, false);\n                        }\n                        else {\n                            // PENDING Global as parent ?\n                            var extraOpt = zrUtil.extend(\n                                {\n                                    dependentModels: dependentModels,\n                                    componentIndex: index\n                                },\n                                resultItem.keyInfo\n                            );\n                            componentModel = new ComponentModelClass(\n                                newCptOption, this, this, extraOpt\n                            );\n                            zrUtil.extend(componentModel, extraOpt);\n                            componentModel.init(newCptOption, this, this, extraOpt);\n                            // Call optionUpdated after init.\n                            // newCptOption has been used as componentModel.option\n                            // and may be merged with theme and default, so pass null\n                            // to avoid confusion.\n                            componentModel.optionUpdated(null, true);\n                        }\n                    }\n\n                    componentsMap[mainType][index] = componentModel;\n                    option[mainType][index] = componentModel.option;\n                }, this);\n\n                // Backup series for filtering.\n                if (mainType === 'series') {\n                    this._seriesIndices = createSeriesIndices(componentsMap.series);\n                }\n            }\n        },\n\n        /**\n         * Get option for output (cloned option and inner info removed)\n         * @public\n         * @return {Object}\n         */\n        getOption: function () {\n            var option = zrUtil.clone(this.option);\n\n            each(option, function (opts, mainType) {\n                if (ComponentModel.hasClass(mainType)) {\n                    var opts = modelUtil.normalizeToArray(opts);\n                    for (var i = opts.length - 1; i >= 0; i--) {\n                        // Remove options with inner id.\n                        if (modelUtil.isIdInner(opts[i])) {\n                            opts.splice(i, 1);\n                        }\n                    }\n                    option[mainType] = opts;\n                }\n            });\n\n            delete option[OPTION_INNER_KEY];\n\n            return option;\n        },\n\n        /**\n         * @return {module:echarts/model/Model}\n         */\n        getTheme: function () {\n            return this._theme;\n        },\n\n        /**\n         * @param {string} mainType\n         * @param {number} [idx=0]\n         * @return {module:echarts/model/Component}\n         */\n        getComponent: function (mainType, idx) {\n            var list = this._componentsMap[mainType];\n            if (list) {\n                return list[idx || 0];\n            }\n        },\n\n        /**\n         * If none of index and id and name used, return all components with mainType.\n         * @param {Object} condition\n         * @param {string} condition.mainType\n         * @param {string} [condition.subType] If ignore, only query by mainType\n         * @param {number|Array.<number>} [condition.index] Either input index or id or name.\n         * @param {string|Array.<string>} [condition.id] Either input index or id or name.\n         * @param {string|Array.<string>} [condition.name] Either input index or id or name.\n         * @return {Array.<module:echarts/model/Component>}\n         */\n        queryComponents: function (condition) {\n            var mainType = condition.mainType;\n            if (!mainType) {\n                return [];\n            }\n\n            var index = condition.index;\n            var id = condition.id;\n            var name = condition.name;\n\n            var cpts = this._componentsMap[mainType];\n\n            if (!cpts || !cpts.length) {\n                return [];\n            }\n\n            var result;\n\n            if (index != null) {\n                if (!isArray(index)) {\n                    index = [index];\n                }\n                result = filter(map(index, function (idx) {\n                    return cpts[idx];\n                }), function (val) {\n                    return !!val;\n                });\n            }\n            else if (id != null) {\n                var isIdArray = isArray(id);\n                result = filter(cpts, function (cpt) {\n                    return (isIdArray && indexOf(id, cpt.id) >= 0)\n                        || (!isIdArray && cpt.id === id);\n                });\n            }\n            else if (name != null) {\n                var isNameArray = isArray(name);\n                result = filter(cpts, function (cpt) {\n                    return (isNameArray && indexOf(name, cpt.name) >= 0)\n                        || (!isNameArray && cpt.name === name);\n                });\n            }\n            else {\n                // Return all components with mainType\n                result = cpts;\n            }\n\n            return filterBySubType(result, condition);\n        },\n\n        /**\n         * The interface is different from queryComponents,\n         * which is convenient for inner usage.\n         *\n         * @usage\n         * var result = findComponents(\n         *     {mainType: 'dataZoom', query: {dataZoomId: 'abc'}}\n         * );\n         * var result = findComponents(\n         *     {mainType: 'series', subType: 'pie', query: {seriesName: 'uio'}}\n         * );\n         * var result = findComponents(\n         *     {mainType: 'series'},\n         *     function (model, index) {...}\n         * );\n         * // result like [component0, componnet1, ...]\n         *\n         * @param {Object} condition\n         * @param {string} condition.mainType Mandatory.\n         * @param {string} [condition.subType] Optional.\n         * @param {Object} [condition.query] like {xxxIndex, xxxId, xxxName},\n         *        where xxx is mainType.\n         *        If query attribute is null/undefined or has no index/id/name,\n         *        do not filtering by query conditions, which is convenient for\n         *        no-payload situations or when target of action is global.\n         * @param {Function} [condition.filter] parameter: component, return boolean.\n         * @return {Array.<module:echarts/model/Component>}\n         */\n        findComponents: function (condition) {\n            var query = condition.query;\n            var mainType = condition.mainType;\n\n            var queryCond = getQueryCond(query);\n            var result = queryCond\n                ? this.queryComponents(queryCond)\n                : this._componentsMap[mainType];\n\n            return doFilter(filterBySubType(result, condition));\n\n            function getQueryCond(q) {\n                var indexAttr = mainType + 'Index';\n                var idAttr = mainType + 'Id';\n                var nameAttr = mainType + 'Name';\n                return q && (\n                        q[indexAttr] != null\n                        || q[idAttr] != null\n                        || q[nameAttr] != null\n                    )\n                    ? {\n                        mainType: mainType,\n                        // subType will be filtered finally.\n                        index: q[indexAttr],\n                        id: q[idAttr],\n                        name: q[nameAttr]\n                    }\n                    : null;\n            }\n\n            function doFilter(res) {\n                return condition.filter\n                     ? filter(res, condition.filter)\n                     : res;\n            }\n        },\n\n        /**\n         * @usage\n         * eachComponent('legend', function (legendModel, index) {\n         *     ...\n         * });\n         * eachComponent(function (componentType, model, index) {\n         *     // componentType does not include subType\n         *     // (componentType is 'xxx' but not 'xxx.aa')\n         * });\n         * eachComponent(\n         *     {mainType: 'dataZoom', query: {dataZoomId: 'abc'}},\n         *     function (model, index) {...}\n         * );\n         * eachComponent(\n         *     {mainType: 'series', subType: 'pie', query: {seriesName: 'uio'}},\n         *     function (model, index) {...}\n         * );\n         *\n         * @param {string|Object=} mainType When mainType is object, the definition\n         *                                  is the same as the method 'findComponents'.\n         * @param {Function} cb\n         * @param {*} context\n         */\n        eachComponent: function (mainType, cb, context) {\n            var componentsMap = this._componentsMap;\n\n            if (typeof mainType === 'function') {\n                context = cb;\n                cb = mainType;\n                each(componentsMap, function (components, componentType) {\n                    each(components, function (component, index) {\n                        cb.call(context, componentType, component, index);\n                    });\n                });\n            }\n            else if (zrUtil.isString(mainType)) {\n                each(componentsMap[mainType], cb, context);\n            }\n            else if (isObject(mainType)) {\n                var queryResult = this.findComponents(mainType);\n                each(queryResult, cb, context);\n            }\n        },\n\n        /**\n         * @param {string} name\n         * @return {Array.<module:echarts/model/Series>}\n         */\n        getSeriesByName: function (name) {\n            var series = this._componentsMap.series;\n            return filter(series, function (oneSeries) {\n                return oneSeries.name === name;\n            });\n        },\n\n        /**\n         * @param {number} seriesIndex\n         * @return {module:echarts/model/Series}\n         */\n        getSeriesByIndex: function (seriesIndex) {\n            return this._componentsMap.series[seriesIndex];\n        },\n\n        /**\n         * @param {string} subType\n         * @return {Array.<module:echarts/model/Series>}\n         */\n        getSeriesByType: function (subType) {\n            var series = this._componentsMap.series;\n            return filter(series, function (oneSeries) {\n                return oneSeries.subType === subType;\n            });\n        },\n\n        /**\n         * @return {Array.<module:echarts/model/Series>}\n         */\n        getSeries: function () {\n            return this._componentsMap.series.slice();\n        },\n\n        /**\n         * After filtering, series may be different\n         * frome raw series.\n         *\n         * @param {Function} cb\n         * @param {*} context\n         */\n        eachSeries: function (cb, context) {\n            assertSeriesInitialized(this);\n            each(this._seriesIndices, function (rawSeriesIndex) {\n                var series = this._componentsMap.series[rawSeriesIndex];\n                cb.call(context, series, rawSeriesIndex);\n            }, this);\n        },\n\n        /**\n         * Iterate raw series before filtered.\n         *\n         * @param {Function} cb\n         * @param {*} context\n         */\n        eachRawSeries: function (cb, context) {\n            each(this._componentsMap.series, cb, context);\n        },\n\n        /**\n         * After filtering, series may be different.\n         * frome raw series.\n         *\n         * @parma {string} subType\n         * @param {Function} cb\n         * @param {*} context\n         */\n        eachSeriesByType: function (subType, cb, context) {\n            assertSeriesInitialized(this);\n            each(this._seriesIndices, function (rawSeriesIndex) {\n                var series = this._componentsMap.series[rawSeriesIndex];\n                if (series.subType === subType) {\n                    cb.call(context, series, rawSeriesIndex);\n                }\n            }, this);\n        },\n\n        /**\n         * Iterate raw series before filtered of given type.\n         *\n         * @parma {string} subType\n         * @param {Function} cb\n         * @param {*} context\n         */\n        eachRawSeriesByType: function (subType, cb, context) {\n            return each(this.getSeriesByType(subType), cb, context);\n        },\n\n        /**\n         * @param {module:echarts/model/Series} seriesModel\n         */\n        isSeriesFiltered: function (seriesModel) {\n            assertSeriesInitialized(this);\n            return zrUtil.indexOf(this._seriesIndices, seriesModel.componentIndex) < 0;\n        },\n\n        /**\n         * @param {Function} cb\n         * @param {*} context\n         */\n        filterSeries: function (cb, context) {\n            assertSeriesInitialized(this);\n            var filteredSeries = filter(\n                this._componentsMap.series, cb, context\n            );\n            this._seriesIndices = createSeriesIndices(filteredSeries);\n        },\n\n        restoreData: function () {\n            var componentsMap = this._componentsMap;\n\n            this._seriesIndices = createSeriesIndices(componentsMap.series);\n\n            var componentTypes = [];\n            each(componentsMap, function (components, componentType) {\n                componentTypes.push(componentType);\n            });\n\n            ComponentModel.topologicalTravel(\n                componentTypes,\n                ComponentModel.getAllClassMainTypes(),\n                function (componentType, dependencies) {\n                    each(componentsMap[componentType], function (component) {\n                        component.restoreData();\n                    });\n                }\n            );\n        }\n\n    });\n\n    /**\n     * @inner\n     */\n    function mergeTheme(option, theme) {\n        zrUtil.each(theme, function (themeItem, name) {\n            // 如果有 component model 则把具体的 merge 逻辑交给该 model 处理\n            if (!ComponentModel.hasClass(name)) {\n                if (typeof themeItem === 'object') {\n                    option[name] = !option[name]\n                        ? zrUtil.clone(themeItem)\n                        : zrUtil.merge(option[name], themeItem, false);\n                }\n                else {\n                    if (option[name] == null) {\n                        option[name] = themeItem;\n                    }\n                }\n            }\n        });\n    }\n\n    function initBase(baseOption) {\n        baseOption = baseOption;\n\n        // Using OPTION_INNER_KEY to mark that this option can not be used outside,\n        // i.e. `chart.setOption(chart.getModel().option);` is forbiden.\n        this.option = {};\n        this.option[OPTION_INNER_KEY] = 1;\n\n        /**\n         * @type {Object.<string, Array.<module:echarts/model/Model>>}\n         * @private\n         */\n        this._componentsMap = {};\n\n        /**\n         * Mapping between filtered series list and raw series list.\n         * key: filtered series indices, value: raw series indices.\n         * @type {Array.<nubmer>}\n         * @private\n         */\n        this._seriesIndices = null;\n\n        mergeTheme(baseOption, this._theme.option);\n\n        // TODO Needs clone when merging to the unexisted property\n        zrUtil.merge(baseOption, globalDefault, false);\n\n        this.mergeOption(baseOption);\n    }\n\n    /**\n     * @inner\n     * @param {Array.<string>|string} types model types\n     * @return {Object} key: {string} type, value: {Array.<Object>} models\n     */\n    function getComponentsByTypes(componentsMap, types) {\n        if (!zrUtil.isArray(types)) {\n            types = types ? [types] : [];\n        }\n\n        var ret = {};\n        each(types, function (type) {\n            ret[type] = (componentsMap[type] || []).slice();\n        });\n\n        return ret;\n    }\n\n    /**\n     * @inner\n     */\n    function determineSubType(mainType, newCptOption, existComponent) {\n        var subType = newCptOption.type\n            ? newCptOption.type\n            : existComponent\n            ? existComponent.subType\n            // Use determineSubType only when there is no existComponent.\n            : ComponentModel.determineSubType(mainType, newCptOption);\n\n        // tooltip, markline, markpoint may always has no subType\n        return subType;\n    }\n\n    /**\n     * @inner\n     */\n    function createSeriesIndices(seriesModels) {\n        return map(seriesModels, function (series) {\n            return series.componentIndex;\n        }) || [];\n    }\n\n    /**\n     * @inner\n     */\n    function filterBySubType(components, condition) {\n        // Using hasOwnProperty for restrict. Consider\n        // subType is undefined in user payload.\n        return condition.hasOwnProperty('subType')\n            ? filter(components, function (cpt) {\n                return cpt.subType === condition.subType;\n            })\n            : components;\n    }\n\n    /**\n     * @inner\n     */\n    function assertSeriesInitialized(ecModel) {\n        // Components that use _seriesIndices should depends on series component,\n        // which make sure that their initialization is after series.\n        if (__DEV__) {\n            if (!ecModel._seriesIndices) {\n                throw new Error('Series has not been initialized yet.');\n            }\n        }\n    }\n\n    zrUtil.mixin(GlobalModel, require('./mixin/colorPalette'));\n\n    module.exports = GlobalModel;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/model/Global.js\n// module id = 401\n// module chunks = 0 1 2 3 4","/**\n * ECharts option manager\n *\n * @module {echarts/model/OptionManager}\n */\n\n\n\n    var zrUtil = require('zrender/lib/core/util');\n    var modelUtil = require('../util/model');\n    var ComponentModel = require('./Component');\n    var each = zrUtil.each;\n    var clone = zrUtil.clone;\n    var map = zrUtil.map;\n    var merge = zrUtil.merge;\n\n    var QUERY_REG = /^(min|max)?(.+)$/;\n\n    /**\n     * TERM EXPLANATIONS:\n     *\n     * [option]:\n     *\n     *     An object that contains definitions of components. For example:\n     *     var option = {\n     *         title: {...},\n     *         legend: {...},\n     *         visualMap: {...},\n     *         series: [\n     *             {data: [...]},\n     *             {data: [...]},\n     *             ...\n     *         ]\n     *     };\n     *\n     * [rawOption]:\n     *\n     *     An object input to echarts.setOption. 'rawOption' may be an\n     *     'option', or may be an object contains multi-options. For example:\n     *     var option = {\n     *         baseOption: {\n     *             title: {...},\n     *             legend: {...},\n     *             series: [\n     *                 {data: [...]},\n     *                 {data: [...]},\n     *                 ...\n     *             ]\n     *         },\n     *         timeline: {...},\n     *         options: [\n     *             {title: {...}, series: {data: [...]}},\n     *             {title: {...}, series: {data: [...]}},\n     *             ...\n     *         ],\n     *         media: [\n     *             {\n     *                 query: {maxWidth: 320},\n     *                 option: {series: {x: 20}, visualMap: {show: false}}\n     *             },\n     *             {\n     *                 query: {minWidth: 320, maxWidth: 720},\n     *                 option: {series: {x: 500}, visualMap: {show: true}}\n     *             },\n     *             {\n     *                 option: {series: {x: 1200}, visualMap: {show: true}}\n     *             }\n     *         ]\n     *     };\n     *\n     * @alias module:echarts/model/OptionManager\n     * @param {module:echarts/ExtensionAPI} api\n     */\n    function OptionManager(api) {\n\n        /**\n         * @private\n         * @type {module:echarts/ExtensionAPI}\n         */\n        this._api = api;\n\n        /**\n         * @private\n         * @type {Array.<number>}\n         */\n        this._timelineOptions = [];\n\n        /**\n         * @private\n         * @type {Array.<Object>}\n         */\n        this._mediaList = [];\n\n        /**\n         * @private\n         * @type {Object}\n         */\n        this._mediaDefault;\n\n        /**\n         * -1, means default.\n         * empty means no media.\n         * @private\n         * @type {Array.<number>}\n         */\n        this._currentMediaIndices = [];\n\n        /**\n         * @private\n         * @type {Object}\n         */\n        this._optionBackup;\n\n        /**\n         * @private\n         * @type {Object}\n         */\n        this._newBaseOption;\n    }\n\n    // timeline.notMerge is not supported in ec3. Firstly there is rearly\n    // case that notMerge is needed. Secondly supporting 'notMerge' requires\n    // rawOption cloned and backuped when timeline changed, which does no\n    // good to performance. What's more, that both timeline and setOption\n    // method supply 'notMerge' brings complex and some problems.\n    // Consider this case:\n    // (step1) chart.setOption({timeline: {notMerge: false}, ...}, false);\n    // (step2) chart.setOption({timeline: {notMerge: true}, ...}, false);\n\n    OptionManager.prototype = {\n\n        constructor: OptionManager,\n\n        /**\n         * @public\n         * @param {Object} rawOption Raw option.\n         * @param {module:echarts/model/Global} ecModel\n         * @param {Array.<Function>} optionPreprocessorFuncs\n         * @return {Object} Init option\n         */\n        setOption: function (rawOption, optionPreprocessorFuncs) {\n            rawOption = clone(rawOption, true);\n\n            // FIXME\n            // 如果 timeline options 或者 media 中设置了某个属性，而baseOption中没有设置，则进行警告。\n\n            var oldOptionBackup = this._optionBackup;\n            var newParsedOption = parseRawOption.call(\n                this, rawOption, optionPreprocessorFuncs, !oldOptionBackup\n            );\n            this._newBaseOption = newParsedOption.baseOption;\n\n            // For setOption at second time (using merge mode);\n            if (oldOptionBackup) {\n                // Only baseOption can be merged.\n                mergeOption(oldOptionBackup.baseOption, newParsedOption.baseOption);\n\n                // For simplicity, timeline options and media options do not support merge,\n                // that is, if you `setOption` twice and both has timeline options, the latter\n                // timeline opitons will not be merged to the formers, but just substitude them.\n                if (newParsedOption.timelineOptions.length) {\n                    oldOptionBackup.timelineOptions = newParsedOption.timelineOptions;\n                }\n                if (newParsedOption.mediaList.length) {\n                    oldOptionBackup.mediaList = newParsedOption.mediaList;\n                }\n                if (newParsedOption.mediaDefault) {\n                    oldOptionBackup.mediaDefault = newParsedOption.mediaDefault;\n                }\n            }\n            else {\n                this._optionBackup = newParsedOption;\n            }\n        },\n\n        /**\n         * @param {boolean} isRecreate\n         * @return {Object}\n         */\n        mountOption: function (isRecreate) {\n            var optionBackup = this._optionBackup;\n\n            // TODO\n            // 如果没有reset功能则不clone。\n\n            this._timelineOptions = map(optionBackup.timelineOptions, clone);\n            this._mediaList = map(optionBackup.mediaList, clone);\n            this._mediaDefault = clone(optionBackup.mediaDefault);\n            this._currentMediaIndices = [];\n\n            return clone(isRecreate\n                // this._optionBackup.baseOption, which is created at the first `setOption`\n                // called, and is merged into every new option by inner method `mergeOption`\n                // each time `setOption` called, can be only used in `isRecreate`, because\n                // its reliability is under suspicion. In other cases option merge is\n                // performed by `model.mergeOption`.\n                ? optionBackup.baseOption : this._newBaseOption\n            );\n        },\n\n        /**\n         * @param {module:echarts/model/Global} ecModel\n         * @return {Object}\n         */\n        getTimelineOption: function (ecModel) {\n            var option;\n            var timelineOptions = this._timelineOptions;\n\n            if (timelineOptions.length) {\n                // getTimelineOption can only be called after ecModel inited,\n                // so we can get currentIndex from timelineModel.\n                var timelineModel = ecModel.getComponent('timeline');\n                if (timelineModel) {\n                    option = clone(\n                        timelineOptions[timelineModel.getCurrentIndex()],\n                        true\n                    );\n                }\n            }\n\n            return option;\n        },\n\n        /**\n         * @param {module:echarts/model/Global} ecModel\n         * @return {Array.<Object>}\n         */\n        getMediaOption: function (ecModel) {\n            var ecWidth = this._api.getWidth();\n            var ecHeight = this._api.getHeight();\n            var mediaList = this._mediaList;\n            var mediaDefault = this._mediaDefault;\n            var indices = [];\n            var result = [];\n\n            // No media defined.\n            if (!mediaList.length && !mediaDefault) {\n                return result;\n            }\n\n            // Multi media may be applied, the latter defined media has higher priority.\n            for (var i = 0, len = mediaList.length; i < len; i++) {\n                if (applyMediaQuery(mediaList[i].query, ecWidth, ecHeight)) {\n                    indices.push(i);\n                }\n            }\n\n            // FIXME\n            // 是否mediaDefault应该强制用户设置，否则可能修改不能回归。\n            if (!indices.length && mediaDefault) {\n                indices = [-1];\n            }\n\n            if (indices.length && !indicesEquals(indices, this._currentMediaIndices)) {\n                result = map(indices, function (index) {\n                    return clone(\n                        index === -1 ? mediaDefault.option : mediaList[index].option\n                    );\n                });\n            }\n            // Otherwise return nothing.\n\n            this._currentMediaIndices = indices;\n\n            return result;\n        }\n    };\n\n    function parseRawOption(rawOption, optionPreprocessorFuncs, isNew) {\n        var timelineOptions = [];\n        var mediaList = [];\n        var mediaDefault;\n        var baseOption;\n\n        // Compatible with ec2.\n        var timelineOpt = rawOption.timeline;\n\n        if (rawOption.baseOption) {\n            baseOption = rawOption.baseOption;\n        }\n\n        // For timeline\n        if (timelineOpt || rawOption.options) {\n            baseOption = baseOption || {};\n            timelineOptions = (rawOption.options || []).slice();\n        }\n\n        // For media query\n        if (rawOption.media) {\n            baseOption = baseOption || {};\n            var media = rawOption.media;\n            each(media, function (singleMedia) {\n                if (singleMedia && singleMedia.option) {\n                    if (singleMedia.query) {\n                        mediaList.push(singleMedia);\n                    }\n                    else if (!mediaDefault) {\n                        // Use the first media default.\n                        mediaDefault = singleMedia;\n                    }\n                }\n            });\n        }\n\n        // For normal option\n        if (!baseOption) {\n            baseOption = rawOption;\n        }\n\n        // Set timelineOpt to baseOption in ec3,\n        // which is convenient for merge option.\n        if (!baseOption.timeline) {\n            baseOption.timeline = timelineOpt;\n        }\n\n        // Preprocess.\n        each([baseOption].concat(timelineOptions)\n            .concat(zrUtil.map(mediaList, function (media) {\n                return media.option;\n            })),\n            function (option) {\n                each(optionPreprocessorFuncs, function (preProcess) {\n                    preProcess(option, isNew);\n                });\n            }\n        );\n\n        return {\n            baseOption: baseOption,\n            timelineOptions: timelineOptions,\n            mediaDefault: mediaDefault,\n            mediaList: mediaList\n        };\n    }\n\n    /**\n     * @see <http://www.w3.org/TR/css3-mediaqueries/#media1>\n     * Support: width, height, aspectRatio\n     * Can use max or min as prefix.\n     */\n    function applyMediaQuery(query, ecWidth, ecHeight) {\n        var realMap = {\n            width: ecWidth,\n            height: ecHeight,\n            aspectratio: ecWidth / ecHeight // lowser case for convenientce.\n        };\n\n        var applicatable = true;\n\n        zrUtil.each(query, function (value, attr) {\n            var matched = attr.match(QUERY_REG);\n\n            if (!matched || !matched[1] || !matched[2]) {\n                return;\n            }\n\n            var operator = matched[1];\n            var realAttr = matched[2].toLowerCase();\n\n            if (!compare(realMap[realAttr], value, operator)) {\n                applicatable = false;\n            }\n        });\n\n        return applicatable;\n    }\n\n    function compare(real, expect, operator) {\n        if (operator === 'min') {\n            return real >= expect;\n        }\n        else if (operator === 'max') {\n            return real <= expect;\n        }\n        else { // Equals\n            return real === expect;\n        }\n    }\n\n    function indicesEquals(indices1, indices2) {\n        // indices is always order by asc and has only finite number.\n        return indices1.join(',') === indices2.join(',');\n    }\n\n    /**\n     * Consider case:\n     * `chart.setOption(opt1);`\n     * Then user do some interaction like dataZoom, dataView changing.\n     * `chart.setOption(opt2);`\n     * Then user press 'reset button' in toolbox.\n     *\n     * After doing that all of the interaction effects should be reset, the\n     * chart should be the same as the result of invoke\n     * `chart.setOption(opt1); chart.setOption(opt2);`.\n     *\n     * Although it is not able ensure that\n     * `chart.setOption(opt1); chart.setOption(opt2);` is equivalents to\n     * `chart.setOption(merge(opt1, opt2));` exactly,\n     * this might be the only simple way to implement that feature.\n     *\n     * MEMO: We've considered some other approaches:\n     * 1. Each model handle its self restoration but not uniform treatment.\n     *     (Too complex in logic and error-prone)\n     * 2. Use a shadow ecModel. (Performace expensive)\n     */\n    function mergeOption(oldOption, newOption) {\n        newOption = newOption || {};\n\n        each(newOption, function (newCptOpt, mainType) {\n            if (newCptOpt == null) {\n                return;\n            }\n\n            var oldCptOpt = oldOption[mainType];\n\n            if (!ComponentModel.hasClass(mainType)) {\n                oldOption[mainType] = merge(oldCptOpt, newCptOpt, true);\n            }\n            else {\n                newCptOpt = modelUtil.normalizeToArray(newCptOpt);\n                oldCptOpt = modelUtil.normalizeToArray(oldCptOpt);\n\n                var mapResult = modelUtil.mappingToExists(oldCptOpt, newCptOpt);\n\n                oldOption[mainType] = map(mapResult, function (item) {\n                    return (item.option && item.exist)\n                        ? merge(item.exist, item.option, true)\n                        : (item.exist || item.option);\n                });\n            }\n        });\n    }\n\n    module.exports = OptionManager;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/model/OptionManager.js\n// module id = 402\n// module chunks = 0 1 2 3 4","\n    var platform = '';\n    // Navigator not exists in node\n    if (typeof navigator !== 'undefined') {\n        platform = navigator.platform || '';\n    }\n    module.exports = {\n        // 全图默认背景\n        // backgroundColor: 'rgba(0,0,0,0)',\n\n        // https://dribbble.com/shots/1065960-Infographic-Pie-chart-visualization\n        // color: ['#5793f3', '#d14a61', '#fd9c35', '#675bba', '#fec42c', '#dd4444', '#d4df5a', '#cd4870'],\n        // 浅色\n        // color: ['#bcd3bb', '#e88f70', '#edc1a5', '#9dc5c8', '#e1e8c8', '#7b7c68', '#e5b5b5', '#f0b489', '#928ea8', '#bda29a'],\n        // color: ['#cc5664', '#9bd6ec', '#ea946e', '#8acaaa', '#f1ec64', '#ee8686', '#a48dc1', '#5da6bc', '#b9dcae'],\n        // 深色\n        color: ['#c23531','#2f4554', '#61a0a8', '#d48265', '#91c7ae','#749f83',  '#ca8622', '#bda29a','#6e7074', '#546570', '#c4ccd3'],\n\n        // 默认需要 Grid 配置项\n        // grid: {},\n        // 主题，主题\n        textStyle: {\n            // color: '#000',\n            // decoration: 'none',\n            // PENDING\n            fontFamily: platform.match(/^Win/) ? 'Microsoft YaHei' : 'sans-serif',\n            // fontFamily: 'Arial, Verdana, sans-serif',\n            fontSize: 12,\n            fontStyle: 'normal',\n            fontWeight: 'normal'\n        },\n\n        // http://blogs.adobe.com/webplatform/2014/02/24/using-blend-modes-in-html-canvas/\n        // https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation\n        // Default is source-over\n        blendMode: null,\n\n        animation: true,\n        animationDuration: 1000,\n        animationDurationUpdate: 300,\n        animationEasing: 'exponentialOut',\n        animationEasingUpdate: 'cubicOut',\n\n        animationThreshold: 2000,\n        // Configuration for progressive/incremental rendering\n        progressiveThreshold: 3000,\n        progressive: 400,\n\n        // Threshold of if use single hover layer to optimize.\n        // It is recommended that `hoverLayerThreshold` is equivalent to or less than\n        // `progressiveThreshold`, otherwise hover will cause restart of progressive,\n        // which is unexpected.\n        // see example <echarts/test/heatmap-large.html>.\n        hoverLayerThreshold: 3000\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/model/globalDefault.js\n// module id = 403\n// module chunks = 0 1 2 3 4","\n    module.exports = {\n        getAreaStyle: require('./makeStyleMapper')(\n            [\n                ['fill', 'color'],\n                ['shadowBlur'],\n                ['shadowOffsetX'],\n                ['shadowOffsetY'],\n                ['opacity'],\n                ['shadowColor']\n            ]\n        )\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/model/mixin/areaStyle.js\n// module id = 404\n// module chunks = 0 1 2 3 4","\n\n    module.exports = {\n        getBoxLayoutParams: function () {\n            return {\n                left: this.get('left'),\n                top: this.get('top'),\n                right: this.get('right'),\n                bottom: this.get('bottom'),\n                width: this.get('width'),\n                height: this.get('height')\n            };\n        }\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/model/mixin/boxLayout.js\n// module id = 405\n// module chunks = 0 1 2 3 4","\n    var getItemStyle = require('./makeStyleMapper')(\n        [\n            ['fill', 'color'],\n            ['stroke', 'borderColor'],\n            ['lineWidth', 'borderWidth'],\n            ['opacity'],\n            ['shadowBlur'],\n            ['shadowOffsetX'],\n            ['shadowOffsetY'],\n            ['shadowColor'],\n            ['textPosition'],\n            ['textAlign']\n        ]\n    );\n    module.exports = {\n        getItemStyle: function (excludes) {\n            var style = getItemStyle.call(this, excludes);\n            var lineDash = this.getBorderLineDash();\n            lineDash && (style.lineDash = lineDash);\n            return style;\n        },\n\n        getBorderLineDash: function () {\n            var lineType = this.get('borderType');\n            return (lineType === 'solid' || lineType == null) ? null\n                : (lineType === 'dashed' ? [5, 5] : [1, 1]);\n        }\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/model/mixin/itemStyle.js\n// module id = 406\n// module chunks = 0 1 2 3 4","\n    var getLineStyle = require('./makeStyleMapper')(\n        [\n            ['lineWidth', 'width'],\n            ['stroke', 'color'],\n            ['opacity'],\n            ['shadowBlur'],\n            ['shadowOffsetX'],\n            ['shadowOffsetY'],\n            ['shadowColor']\n        ]\n    );\n    module.exports = {\n        getLineStyle: function (excludes) {\n            var style = getLineStyle.call(this, excludes);\n            var lineDash = this.getLineDash(style.lineWidth);\n            lineDash && (style.lineDash = lineDash);\n            return style;\n        },\n\n        getLineDash: function (lineWidth) {\n            if (lineWidth == null) {\n                lineWidth = 1;\n            }\n            var lineType = this.get('type');\n            var dotSize = Math.max(lineWidth, 2);\n            var dashSize = lineWidth * 4;\n            return (lineType === 'solid' || lineType == null) ? null\n                : (lineType === 'dashed' ? [dashSize, dashSize] : [dotSize, dotSize]);\n        }\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/model/mixin/lineStyle.js\n// module id = 407\n// module chunks = 0 1 2 3 4","\n\n    var textContain = require('zrender/lib/contain/text');\n\n    function getShallow(model, path) {\n        return model && model.getShallow(path);\n    }\n\n    module.exports = {\n        /**\n         * Get color property or get color from option.textStyle.color\n         * @return {string}\n         */\n        getTextColor: function () {\n            var ecModel = this.ecModel;\n            return this.getShallow('color')\n                || (ecModel && ecModel.get('textStyle.color'));\n        },\n\n        /**\n         * Create font string from fontStyle, fontWeight, fontSize, fontFamily\n         * @return {string}\n         */\n        getFont: function () {\n            var ecModel = this.ecModel;\n            var gTextStyleModel = ecModel && ecModel.getModel('textStyle');\n            return [\n                // FIXME in node-canvas fontWeight is before fontStyle\n                this.getShallow('fontStyle') || getShallow(gTextStyleModel, 'fontStyle'),\n                this.getShallow('fontWeight') || getShallow(gTextStyleModel, 'fontWeight'),\n                (this.getShallow('fontSize') || getShallow(gTextStyleModel, 'fontSize') || 12) + 'px',\n                this.getShallow('fontFamily') || getShallow(gTextStyleModel, 'fontFamily') || 'sans-serif'\n            ].join(' ');\n        },\n\n        getTextRect: function (text) {\n            return textContain.getBoundingRect(\n                text,\n                this.getFont(),\n                this.getShallow('align'),\n                this.getShallow('baseline')\n            );\n        },\n\n        truncateText: function (text, containerWidth, ellipsis, options) {\n            return textContain.truncateText(\n                text, containerWidth, this.getFont(), ellipsis, options\n            );\n        }\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/model/mixin/textStyle.js\n// module id = 408\n// module chunks = 0 1 2 3 4","// Compatitable with 2.0\n\n\n    var zrUtil = require('zrender/lib/core/util');\n    var compatStyle = require('./helper/compatStyle');\n\n    function get(opt, path) {\n        path = path.split(',');\n        var obj = opt;\n        for (var i = 0; i < path.length; i++) {\n            obj = obj && obj[path[i]];\n            if (obj == null) {\n                break;\n            }\n        }\n        return obj;\n    }\n\n    function set(opt, path, val, overwrite) {\n        path = path.split(',');\n        var obj = opt;\n        var key;\n        for (var i = 0; i < path.length - 1; i++) {\n            key = path[i];\n            if (obj[key] == null) {\n                obj[key] = {};\n            }\n            obj = obj[key];\n        }\n        if (overwrite || obj[path[i]] == null) {\n            obj[path[i]] = val;\n        }\n    }\n\n    function compatLayoutProperties(option) {\n        each(LAYOUT_PROPERTIES, function (prop) {\n            if (prop[0] in option && !(prop[1] in option)) {\n                option[prop[1]] = option[prop[0]];\n            }\n        });\n    }\n\n    var LAYOUT_PROPERTIES = [\n        ['x', 'left'], ['y', 'top'], ['x2', 'right'], ['y2', 'bottom']\n    ];\n\n    var COMPATITABLE_COMPONENTS = [\n        'grid', 'geo', 'parallel', 'legend', 'toolbox', 'title', 'visualMap', 'dataZoom', 'timeline'\n    ];\n\n    var COMPATITABLE_SERIES = [\n        'bar', 'boxplot', 'candlestick', 'chord', 'effectScatter',\n        'funnel', 'gauge', 'lines', 'graph', 'heatmap', 'line', 'map', 'parallel',\n        'pie', 'radar', 'sankey', 'scatter', 'treemap'\n    ];\n\n    var each = zrUtil.each;\n\n    module.exports = function (option) {\n        each(option.series, function (seriesOpt) {\n            if (!zrUtil.isObject(seriesOpt)) {\n                return;\n            }\n\n            var seriesType = seriesOpt.type;\n\n            compatStyle(seriesOpt);\n\n            if (seriesType === 'pie' || seriesType === 'gauge') {\n                if (seriesOpt.clockWise != null) {\n                    seriesOpt.clockwise = seriesOpt.clockWise;\n                }\n            }\n            if (seriesType === 'gauge') {\n                var pointerColor = get(seriesOpt, 'pointer.color');\n                pointerColor != null\n                    && set(seriesOpt, 'itemStyle.normal.color', pointerColor);\n            }\n\n            for (var i = 0; i < COMPATITABLE_SERIES.length; i++) {\n                if (COMPATITABLE_SERIES[i] === seriesOpt.type) {\n                    compatLayoutProperties(seriesOpt);\n                    break;\n                }\n            }\n        });\n\n        // dataRange has changed to visualMap\n        if (option.dataRange) {\n            option.visualMap = option.dataRange;\n        }\n\n        each(COMPATITABLE_COMPONENTS, function (componentName) {\n            var options = option[componentName];\n            if (options) {\n                if (!zrUtil.isArray(options)) {\n                    options = [options];\n                }\n                each(options, function (option) {\n                    compatLayoutProperties(option);\n                });\n            }\n        });\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/preprocessor/backwardCompat.js\n// module id = 409\n// module chunks = 0 1 2 3 4","\n\n    var zrUtil = require('zrender/lib/core/util');\n\n    var POSSIBLE_STYLES = [\n        'areaStyle', 'lineStyle', 'nodeStyle', 'linkStyle',\n        'chordStyle', 'label', 'labelLine'\n    ];\n\n    function compatItemStyle(opt) {\n        var itemStyleOpt = opt && opt.itemStyle;\n        if (itemStyleOpt) {\n            zrUtil.each(POSSIBLE_STYLES, function (styleName) {\n                var normalItemStyleOpt = itemStyleOpt.normal;\n                var emphasisItemStyleOpt = itemStyleOpt.emphasis;\n                if (normalItemStyleOpt && normalItemStyleOpt[styleName]) {\n                    opt[styleName] = opt[styleName] || {};\n                    if (!opt[styleName].normal) {\n                        opt[styleName].normal = normalItemStyleOpt[styleName];\n                    }\n                    else {\n                        zrUtil.merge(opt[styleName].normal, normalItemStyleOpt[styleName]);\n                    }\n                    normalItemStyleOpt[styleName] = null;\n                }\n                if (emphasisItemStyleOpt && emphasisItemStyleOpt[styleName]) {\n                    opt[styleName] = opt[styleName] || {};\n                    if (!opt[styleName].emphasis) {\n                        opt[styleName].emphasis = emphasisItemStyleOpt[styleName];\n                    }\n                    else {\n                        zrUtil.merge(opt[styleName].emphasis, emphasisItemStyleOpt[styleName]);\n                    }\n                    emphasisItemStyleOpt[styleName] = null;\n                }\n            });\n        }\n    }\n\n    module.exports = function (seriesOpt) {\n        if (!seriesOpt) {\n            return;\n        }\n        compatItemStyle(seriesOpt);\n        compatItemStyle(seriesOpt.markPoint);\n        compatItemStyle(seriesOpt.markLine);\n        var data = seriesOpt.data;\n        if (data) {\n            for (var i = 0; i < data.length; i++) {\n                compatItemStyle(data[i]);\n            }\n            // mark point data\n            var markPoint = seriesOpt.markPoint;\n            if (markPoint && markPoint.data) {\n                var mpData = markPoint.data;\n                for (var i = 0; i < mpData.length; i++) {\n                    compatItemStyle(mpData[i]);\n                }\n            }\n            // mark line data\n            var markLine = seriesOpt.markLine;\n            if (markLine && markLine.data) {\n                var mlData = markLine.data;\n                for (var i = 0; i < mlData.length; i++) {\n                    if (zrUtil.isArray(mlData[i])) {\n                        compatItemStyle(mlData[i][0]);\n                        compatItemStyle(mlData[i][1]);\n                    }\n                    else {\n                        compatItemStyle(mlData[i]);\n                    }\n                }\n            }\n        }\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/preprocessor/helper/compatStyle.js\n// module id = 410\n// module chunks = 0 1 2 3 4","\n    var samplers = {\n        average: function (frame) {\n            var sum = 0;\n            var count = 0;\n            for (var i = 0; i < frame.length; i++) {\n                if (!isNaN(frame[i])) {\n                    sum += frame[i];\n                    count++;\n                }\n            }\n            // Return NaN if count is 0\n            return count === 0 ? NaN : sum / count;\n        },\n        sum: function (frame) {\n            var sum = 0;\n            for (var i = 0; i < frame.length; i++) {\n                // Ignore NaN\n                sum += frame[i] || 0;\n            }\n            return sum;\n        },\n        max: function (frame) {\n            var max = -Infinity;\n            for (var i = 0; i < frame.length; i++) {\n                frame[i] > max && (max = frame[i]);\n            }\n            return max;\n        },\n        min: function (frame) {\n            var min = Infinity;\n            for (var i = 0; i < frame.length; i++) {\n                frame[i] < min && (min = frame[i]);\n            }\n            return min;\n        },\n        // TODO\n        // Median\n        nearest: function (frame) {\n            return frame[0];\n        }\n    };\n\n    var indexSampler = function (frame, value) {\n        return Math.round(frame.length / 2);\n    };\n    module.exports = function (seriesType, ecModel, api) {\n        ecModel.eachSeriesByType(seriesType, function (seriesModel) {\n            var data = seriesModel.getData();\n            var sampling = seriesModel.get('sampling');\n            var coordSys = seriesModel.coordinateSystem;\n            // Only cartesian2d support down sampling\n            if (coordSys.type === 'cartesian2d' && sampling) {\n                var baseAxis = coordSys.getBaseAxis();\n                var valueAxis = coordSys.getOtherAxis(baseAxis);\n                var extent = baseAxis.getExtent();\n                // Coordinste system has been resized\n                var size = extent[1] - extent[0];\n                var rate = Math.round(data.count() / size);\n                if (rate > 1) {\n                    var sampler;\n                    if (typeof sampling === 'string') {\n                        sampler = samplers[sampling];\n                    }\n                    else if (typeof sampling === 'function') {\n                        sampler = sampling;\n                    }\n                    if (sampler) {\n                        data = data.downSample(\n                            valueAxis.dim, 1 / rate, sampler, indexSampler\n                        );\n                        seriesModel.setData(data);\n                    }\n                }\n            }\n        }, this);\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/processor/dataSample.js\n// module id = 411\n// module chunks = 0 1 2 3 4","/**\n * Log scale\n * @module echarts/scale/Log\n */\n\n\n    var zrUtil = require('zrender/lib/core/util');\n    var Scale = require('./Scale');\n    var numberUtil = require('../util/number');\n\n    // Use some method of IntervalScale\n    var IntervalScale = require('./Interval');\n\n    var scaleProto = Scale.prototype;\n    var intervalScaleProto = IntervalScale.prototype;\n\n    var getPrecisionSafe = numberUtil.getPrecisionSafe;\n    var roundingErrorFix = numberUtil.round;\n\n    var mathFloor = Math.floor;\n    var mathCeil = Math.ceil;\n    var mathPow = Math.pow;\n\n    var mathLog = Math.log;\n\n    var LogScale = Scale.extend({\n\n        type: 'log',\n\n        base: 10,\n\n        $constructor: function () {\n            Scale.apply(this, arguments);\n            this._originalScale = new IntervalScale();\n        },\n\n        /**\n         * @return {Array.<number>}\n         */\n        getTicks: function () {\n            var originalScale = this._originalScale;\n            var extent = this._extent;\n            var originalExtent = originalScale.getExtent();\n\n            return zrUtil.map(intervalScaleProto.getTicks.call(this), function (val) {\n                var powVal = numberUtil.round(mathPow(this.base, val));\n\n                // Fix #4158\n                powVal = (val === extent[0] && originalScale.__fixMin)\n                    ? fixRoundingError(powVal, originalExtent[0])\n                    : powVal;\n                powVal = (val === extent[1] && originalScale.__fixMax)\n                    ? fixRoundingError(powVal, originalExtent[1])\n                    : powVal;\n\n                return powVal;\n            }, this);\n        },\n\n        /**\n         * @param {number} val\n         * @return {string}\n         */\n        getLabel: intervalScaleProto.getLabel,\n\n        /**\n         * @param  {number} val\n         * @return {number}\n         */\n        scale: function (val) {\n            val = scaleProto.scale.call(this, val);\n            return mathPow(this.base, val);\n        },\n\n        /**\n         * @param {number} start\n         * @param {number} end\n         */\n        setExtent: function (start, end) {\n            var base = this.base;\n            start = mathLog(start) / mathLog(base);\n            end = mathLog(end) / mathLog(base);\n            intervalScaleProto.setExtent.call(this, start, end);\n        },\n\n        /**\n         * @return {number} end\n         */\n        getExtent: function () {\n            var base = this.base;\n            var extent = scaleProto.getExtent.call(this);\n            extent[0] = mathPow(base, extent[0]);\n            extent[1] = mathPow(base, extent[1]);\n\n            // Fix #4158\n            var originalScale = this._originalScale;\n            var originalExtent = originalScale.getExtent();\n            originalScale.__fixMin && (extent[0] = fixRoundingError(extent[0], originalExtent[0]));\n            originalScale.__fixMax && (extent[1] = fixRoundingError(extent[1], originalExtent[1]));\n\n            return extent;\n        },\n\n        /**\n         * @param  {Array.<number>} extent\n         */\n        unionExtent: function (extent) {\n            this._originalScale.unionExtent(extent);\n\n            var base = this.base;\n            extent[0] = mathLog(extent[0]) / mathLog(base);\n            extent[1] = mathLog(extent[1]) / mathLog(base);\n            scaleProto.unionExtent.call(this, extent);\n        },\n\n        /**\n         * @override\n         */\n        unionExtentFromData: function (data, dim) {\n            this.unionExtent(data.getDataExtent(dim, true, function (val) {\n                return val > 0;\n            }));\n        },\n\n        /**\n         * Update interval and extent of intervals for nice ticks\n         * @param  {number} [approxTickNum = 10] Given approx tick number\n         */\n        niceTicks: function (approxTickNum) {\n            approxTickNum = approxTickNum || 10;\n            var extent = this._extent;\n            var span = extent[1] - extent[0];\n            if (span === Infinity || span <= 0) {\n                return;\n            }\n\n            var interval = numberUtil.quantity(span);\n            var err = approxTickNum / span * interval;\n\n            // Filter ticks to get closer to the desired count.\n            if (err <= 0.5) {\n                interval *= 10;\n            }\n\n            // Interval should be integer\n            while (!isNaN(interval) && Math.abs(interval) < 1 && Math.abs(interval) > 0) {\n                interval *= 10;\n            }\n\n            var niceExtent = [\n                numberUtil.round(mathCeil(extent[0] / interval) * interval),\n                numberUtil.round(mathFloor(extent[1] / interval) * interval)\n            ];\n\n            this._interval = interval;\n            this._niceExtent = niceExtent;\n        },\n\n        /**\n         * Nice extent.\n         * @param {number} [approxTickNum = 10] Given approx tick number\n         * @param {boolean} [fixMin=false]\n         * @param {boolean} [fixMax=false]\n         */\n        niceExtent: function (splitNumber, fixMin, fixMax) {\n            intervalScaleProto.niceExtent.call(this, splitNumber, fixMin, fixMax);\n\n            var originalScale = this._originalScale;\n            originalScale.__fixMin = fixMin;\n            originalScale.__fixMax = fixMax;\n        }\n\n    });\n\n    zrUtil.each(['contain', 'normalize'], function (methodName) {\n        LogScale.prototype[methodName] = function (val) {\n            val = mathLog(val) / mathLog(this.base);\n            return scaleProto[methodName].call(this, val);\n        };\n    });\n\n    LogScale.create = function () {\n        return new LogScale();\n    };\n\n    function fixRoundingError(val, originalVal) {\n        return roundingErrorFix(val, getPrecisionSafe(originalVal));\n    }\n\n    module.exports = LogScale;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/scale/Log.js\n// module id = 412\n// module chunks = 0 1 2 3 4","/**\n * Linear continuous scale\n * @module echarts/coord/scale/Ordinal\n *\n * http://en.wikipedia.org/wiki/Level_of_measurement\n */\n\n// FIXME only one data\n\n\n    var zrUtil = require('zrender/lib/core/util');\n    var Scale = require('./Scale');\n\n    var scaleProto = Scale.prototype;\n\n    var OrdinalScale = Scale.extend({\n\n        type: 'ordinal',\n\n        init: function (data, extent) {\n            this._data = data;\n            this._extent = extent || [0, data.length - 1];\n        },\n\n        parse: function (val) {\n            return typeof val === 'string'\n                ? zrUtil.indexOf(this._data, val)\n                // val might be float.\n                : Math.round(val);\n        },\n\n        contain: function (rank) {\n            rank = this.parse(rank);\n            return scaleProto.contain.call(this, rank)\n                && this._data[rank] != null;\n        },\n\n        /**\n         * Normalize given rank or name to linear [0, 1]\n         * @param {number|string} [val]\n         * @return {number}\n         */\n        normalize: function (val) {\n            return scaleProto.normalize.call(this, this.parse(val));\n        },\n\n        scale: function (val) {\n            return Math.round(scaleProto.scale.call(this, val));\n        },\n\n        /**\n         * @return {Array}\n         */\n        getTicks: function () {\n            var ticks = [];\n            var extent = this._extent;\n            var rank = extent[0];\n\n            while (rank <= extent[1]) {\n                ticks.push(rank);\n                rank++;\n            }\n\n            return ticks;\n        },\n\n        /**\n         * Get item on rank n\n         * @param {number} n\n         * @return {string}\n         */\n        getLabel: function (n) {\n            return this._data[n];\n        },\n\n        /**\n         * @return {number}\n         */\n        count: function () {\n            return this._extent[1] - this._extent[0] + 1;\n        },\n\n        /**\n         * @override\n         */\n        unionExtentFromData: function (data, dim) {\n            this.unionExtent(data.getDataExtent(dim, false));\n        },\n\n        niceTicks: zrUtil.noop,\n        niceExtent: zrUtil.noop\n    });\n\n    /**\n     * @return {module:echarts/scale/Time}\n     */\n    OrdinalScale.create = function () {\n        return new OrdinalScale();\n    };\n\n    module.exports = OrdinalScale;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/scale/Ordinal.js\n// module id = 413\n// module chunks = 0 1 2 3 4","/**\n * Interval scale\n * @module echarts/coord/scale/Time\n */\n\n\n\n    var zrUtil = require('zrender/lib/core/util');\n    var numberUtil = require('../util/number');\n    var formatUtil = require('../util/format');\n\n    var IntervalScale = require('./Interval');\n\n    var intervalScaleProto = IntervalScale.prototype;\n\n    var mathCeil = Math.ceil;\n    var mathFloor = Math.floor;\n    var ONE_SECOND = 1000;\n    var ONE_MINUTE = ONE_SECOND * 60;\n    var ONE_HOUR = ONE_MINUTE * 60;\n    var ONE_DAY = ONE_HOUR * 24;\n\n    // FIXME 公用？\n    var bisect = function (a, x, lo, hi) {\n        while (lo < hi) {\n            var mid = lo + hi >>> 1;\n            if (a[mid][2] < x) {\n                lo = mid + 1;\n            }\n            else {\n                hi  = mid;\n            }\n        }\n        return lo;\n    };\n\n    /**\n     * @alias module:echarts/coord/scale/Time\n     * @constructor\n     */\n    var TimeScale = IntervalScale.extend({\n        type: 'time',\n\n        // Overwrite\n        getLabel: function (val) {\n            var stepLvl = this._stepLvl;\n\n            var date = new Date(val);\n\n            return formatUtil.formatTime(stepLvl[0], date);\n        },\n\n        // Overwrite\n        niceExtent: function (approxTickNum, fixMin, fixMax) {\n            var extent = this._extent;\n            // If extent start and end are same, expand them\n            if (extent[0] === extent[1]) {\n                // Expand extent\n                extent[0] -= ONE_DAY;\n                extent[1] += ONE_DAY;\n            }\n            // If there are no data and extent are [Infinity, -Infinity]\n            if (extent[1] === -Infinity && extent[0] === Infinity) {\n                var d = new Date();\n                extent[1] = new Date(d.getFullYear(), d.getMonth(), d.getDate());\n                extent[0] = extent[1] - ONE_DAY;\n            }\n\n            this.niceTicks(approxTickNum);\n\n            // var extent = this._extent;\n            var interval = this._interval;\n\n            if (!fixMin) {\n                extent[0] = numberUtil.round(mathFloor(extent[0] / interval) * interval);\n            }\n            if (!fixMax) {\n                extent[1] = numberUtil.round(mathCeil(extent[1] / interval) * interval);\n            }\n        },\n\n        // Overwrite\n        niceTicks: function (approxTickNum) {\n            approxTickNum = approxTickNum || 10;\n\n            var extent = this._extent;\n            var span = extent[1] - extent[0];\n            var approxInterval = span / approxTickNum;\n            var scaleLevelsLen = scaleLevels.length;\n            var idx = bisect(scaleLevels, approxInterval, 0, scaleLevelsLen);\n\n            var level = scaleLevels[Math.min(idx, scaleLevelsLen - 1)];\n            var interval = level[2];\n            // Same with interval scale if span is much larger than 1 year\n            if (level[0] === 'year') {\n                var yearSpan = span / interval;\n\n                // From \"Nice Numbers for Graph Labels\" of Graphic Gems\n                // var niceYearSpan = numberUtil.nice(yearSpan, false);\n                var yearStep = numberUtil.nice(yearSpan / approxTickNum, true);\n\n                interval *= yearStep;\n            }\n\n            var niceExtent = [\n                mathCeil(extent[0] / interval) * interval,\n                mathFloor(extent[1] / interval) * interval\n            ];\n\n            this._stepLvl = level;\n            // Interval will be used in getTicks\n            this._interval = interval;\n            this._niceExtent = niceExtent;\n        },\n\n        parse: function (val) {\n            // val might be float.\n            return +numberUtil.parseDate(val);\n        }\n    });\n\n    zrUtil.each(['contain', 'normalize'], function (methodName) {\n        TimeScale.prototype[methodName] = function (val) {\n            return intervalScaleProto[methodName].call(this, this.parse(val));\n        };\n    });\n\n    // Steps from d3\n    var scaleLevels = [\n        // Format       step    interval\n        ['hh:mm:ss',    1,      ONE_SECOND],           // 1s\n        ['hh:mm:ss',    5,      ONE_SECOND * 5],       // 5s\n        ['hh:mm:ss',    10,     ONE_SECOND * 10],      // 10s\n        ['hh:mm:ss',    15,     ONE_SECOND * 15],      // 15s\n        ['hh:mm:ss',    30,     ONE_SECOND * 30],      // 30s\n        ['hh:mm\\nMM-dd',1,      ONE_MINUTE],          // 1m\n        ['hh:mm\\nMM-dd',5,      ONE_MINUTE * 5],      // 5m\n        ['hh:mm\\nMM-dd',10,     ONE_MINUTE * 10],     // 10m\n        ['hh:mm\\nMM-dd',15,     ONE_MINUTE * 15],     // 15m\n        ['hh:mm\\nMM-dd',30,     ONE_MINUTE * 30],     // 30m\n        ['hh:mm\\nMM-dd',1,      ONE_HOUR],        // 1h\n        ['hh:mm\\nMM-dd',2,      ONE_HOUR * 2],    // 2h\n        ['hh:mm\\nMM-dd',6,      ONE_HOUR * 6],    // 6h\n        ['hh:mm\\nMM-dd',12,     ONE_HOUR * 12],   // 12h\n        ['MM-dd\\nyyyy', 1,      ONE_DAY],   // 1d\n        ['week',        7,      ONE_DAY * 7],        // 7d\n        ['month',       1,      ONE_DAY * 31],       // 1M\n        ['quarter',     3,      ONE_DAY * 380 / 4],  // 3M\n        ['half-year',   6,      ONE_DAY * 380 / 2],  // 6M\n        ['year',        1,      ONE_DAY * 380]       // 1Y\n    ];\n\n    /**\n     * @return {module:echarts/scale/Time}\n     */\n    TimeScale.create = function () {\n        return new TimeScale();\n    };\n\n    module.exports = TimeScale;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/scale/Time.js\n// module id = 414\n// module chunks = 0 1 2 3 4","\n    var Gradient = require('zrender/lib/graphic/Gradient');\n    module.exports = function (ecModel) {\n        function encodeColor(seriesModel) {\n            var colorAccessPath = (seriesModel.visualColorAccessPath || 'itemStyle.normal.color').split('.');\n            var data = seriesModel.getData();\n            var color = seriesModel.get(colorAccessPath) // Set in itemStyle\n                || seriesModel.getColorFromPalette(seriesModel.get('name'));  // Default color\n\n            // FIXME Set color function or use the platte color\n            data.setVisual('color', color);\n\n            // Only visible series has each data be visual encoded\n            if (!ecModel.isSeriesFiltered(seriesModel)) {\n                if (typeof color === 'function' && !(color instanceof Gradient)) {\n                    data.each(function (idx) {\n                        data.setItemVisual(\n                            idx, 'color', color(seriesModel.getDataParams(idx))\n                        );\n                    });\n                }\n\n                // itemStyle in each data item\n                data.each(function (idx) {\n                    var itemModel = data.getItemModel(idx);\n                    var color = itemModel.get(colorAccessPath, true);\n                    if (color != null) {\n                        data.setItemVisual(idx, 'color', color);\n                    }\n                });\n            }\n        }\n        ecModel.eachRawSeries(encodeColor);\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/visual/seriesColor.js\n// module id = 415\n// module chunks = 0 1 2 3 4","\n\n    module.exports = function (seriesType, defaultSymbolType, legendSymbol, ecModel, api) {\n\n        // Encoding visual for all series include which is filtered for legend drawing\n        ecModel.eachRawSeriesByType(seriesType, function (seriesModel) {\n            var data = seriesModel.getData();\n\n            var symbolType = seriesModel.get('symbol') || defaultSymbolType;\n            var symbolSize = seriesModel.get('symbolSize');\n\n            data.setVisual({\n                legendSymbol: legendSymbol || symbolType,\n                symbol: symbolType,\n                symbolSize: symbolSize\n            });\n\n            // Only visible series has each data be visual encoded\n            if (!ecModel.isSeriesFiltered(seriesModel)) {\n                if (typeof symbolSize === 'function') {\n                    data.each(function (idx) {\n                        var rawValue = seriesModel.getRawValue(idx);\n                        // FIXME\n                        var params = seriesModel.getDataParams(idx);\n                        data.setItemVisual(idx, 'symbolSize', symbolSize(rawValue, params));\n                    });\n                }\n                data.each(function (idx) {\n                    var itemModel = data.getItemModel(idx);\n                    var itemSymbolType = itemModel.getShallow('symbol', true);\n                    var itemSymbolSize = itemModel.getShallow('symbolSize', true);\n                    // If has item symbol\n                    if (itemSymbolType != null) {\n                        data.setItemVisual(idx, 'symbol', itemSymbolType);\n                    }\n                    if (itemSymbolSize != null) {\n                        // PENDING Transform symbolSize ?\n                        data.setItemVisual(idx, 'symbolSize', itemSymbolSize);\n                    }\n                });\n            }\n        });\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/visual/symbol.js\n// module id = 416\n// module chunks = 0 1 2 3 4","'use strict';\n/**\n * Handler\n * @module zrender/Handler\n * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)\n *         errorrik (errorrik@gmail.com)\n *         pissang (shenyi.914@gmail.com)\n */\n\n\n    var util = require('./core/util');\n    var Draggable = require('./mixin/Draggable');\n\n    var Eventful = require('./mixin/Eventful');\n\n    var SILENT = 'silent';\n\n    function makeEventPacket(eveType, targetInfo, event) {\n        return {\n            type: eveType,\n            event: event,\n            // target can only be an element that is not silent.\n            target: targetInfo.target,\n            // topTarget can be a silent element.\n            topTarget: targetInfo.topTarget,\n            cancelBubble: false,\n            offsetX: event.zrX,\n            offsetY: event.zrY,\n            gestureEvent: event.gestureEvent,\n            pinchX: event.pinchX,\n            pinchY: event.pinchY,\n            pinchScale: event.pinchScale,\n            wheelDelta: event.zrDelta,\n            zrByTouch: event.zrByTouch\n        };\n    }\n\n    function EmptyProxy () {}\n    EmptyProxy.prototype.dispose = function () {};\n\n    var handlerNames = [\n        'click', 'dblclick', 'mousewheel', 'mouseout',\n        'mouseup', 'mousedown', 'mousemove', 'contextmenu'\n    ];\n    /**\n     * @alias module:zrender/Handler\n     * @constructor\n     * @extends module:zrender/mixin/Eventful\n     * @param {module:zrender/Storage} storage Storage instance.\n     * @param {module:zrender/Painter} painter Painter instance.\n     * @param {module:zrender/dom/HandlerProxy} proxy HandlerProxy instance.\n     * @param {HTMLElement} painterRoot painter.root (not painter.getViewportRoot()).\n     */\n    var Handler = function(storage, painter, proxy, painterRoot) {\n        Eventful.call(this);\n\n        this.storage = storage;\n\n        this.painter = painter;\n\n        this.painterRoot = painterRoot;\n\n        proxy = proxy || new EmptyProxy();\n\n        /**\n         * Proxy of event. can be Dom, WebGLSurface, etc.\n         */\n        this.proxy = proxy;\n\n        // Attach handler\n        proxy.handler = this;\n\n        /**\n         * {target, topTarget}\n         * @private\n         * @type {Object}\n         */\n        this._hovered = {};\n\n        /**\n         * @private\n         * @type {Date}\n         */\n        this._lastTouchMoment;\n\n        /**\n         * @private\n         * @type {number}\n         */\n        this._lastX;\n\n        /**\n         * @private\n         * @type {number}\n         */\n        this._lastY;\n\n\n        Draggable.call(this);\n\n        util.each(handlerNames, function (name) {\n            proxy.on && proxy.on(name, this[name], this);\n        }, this);\n    };\n\n    Handler.prototype = {\n\n        constructor: Handler,\n\n        mousemove: function (event) {\n            var x = event.zrX;\n            var y = event.zrY;\n\n            var lastHovered = this._hovered;\n            var hovered = this._hovered = this.findHover(x, y);\n            var hoveredTarget = hovered.target;\n            var lastHoveredTarget = lastHovered.target;\n\n            var proxy = this.proxy;\n            proxy.setCursor && proxy.setCursor(hoveredTarget ? hoveredTarget.cursor : 'default');\n\n            // Mouse out on previous hovered element\n            if (lastHoveredTarget && hoveredTarget !== lastHoveredTarget && lastHoveredTarget.__zr) {\n                this.dispatchToElement(lastHovered, 'mouseout', event);\n            }\n\n            // Mouse moving on one element\n            this.dispatchToElement(hovered, 'mousemove', event);\n\n            // Mouse over on a new element\n            if (hoveredTarget && hoveredTarget !== lastHoveredTarget) {\n                this.dispatchToElement(hovered, 'mouseover', event);\n            }\n        },\n\n        mouseout: function (event) {\n            this.dispatchToElement(this._hovered, 'mouseout', event);\n\n            // There might be some doms created by upper layer application\n            // at the same level of painter.getViewportRoot() (e.g., tooltip\n            // dom created by echarts), where 'globalout' event should not\n            // be triggered when mouse enters these doms. (But 'mouseout'\n            // should be triggered at the original hovered element as usual).\n            var element = event.toElement || event.relatedTarget;\n            var innerDom;\n            do {\n                element = element && element.parentNode;\n            }\n            while (element && element.nodeType != 9 && !(\n                innerDom = element === this.painterRoot\n            ));\n\n            !innerDom && this.trigger('globalout', {event: event});\n        },\n\n        /**\n         * Resize\n         */\n        resize: function (event) {\n            this._hovered = {};\n        },\n\n        /**\n         * Dispatch event\n         * @param {string} eventName\n         * @param {event=} eventArgs\n         */\n        dispatch: function (eventName, eventArgs) {\n            var handler = this[eventName];\n            handler && handler.call(this, eventArgs);\n        },\n\n        /**\n         * Dispose\n         */\n        dispose: function () {\n\n            this.proxy.dispose();\n\n            this.storage =\n            this.proxy =\n            this.painter = null;\n        },\n\n        /**\n         * 设置默认的cursor style\n         * @param {string} [cursorStyle='default'] 例如 crosshair\n         */\n        setCursorStyle: function (cursorStyle) {\n            var proxy = this.proxy;\n            proxy.setCursor && proxy.setCursor(cursorStyle);\n        },\n\n        /**\n         * 事件分发代理\n         *\n         * @private\n         * @param {Object} targetInfo {target, topTarget} 目标图形元素\n         * @param {string} eventName 事件名称\n         * @param {Object} event 事件对象\n         */\n        dispatchToElement: function (targetInfo, eventName, event) {\n            targetInfo = targetInfo || {};\n            var eventHandler = 'on' + eventName;\n            var eventPacket = makeEventPacket(eventName, targetInfo, event);\n\n            var el = targetInfo.target;\n            while (el) {\n                el[eventHandler]\n                    && (eventPacket.cancelBubble = el[eventHandler].call(el, eventPacket));\n\n                el.trigger(eventName, eventPacket);\n\n                el = el.parent;\n\n                if (eventPacket.cancelBubble) {\n                    break;\n                }\n            }\n\n            if (!eventPacket.cancelBubble) {\n                // 冒泡到顶级 zrender 对象\n                this.trigger(eventName, eventPacket);\n                // 分发事件到用户自定义层\n                // 用户有可能在全局 click 事件中 dispose，所以需要判断下 painter 是否存在\n                this.painter && this.painter.eachOtherLayer(function (layer) {\n                    if (typeof(layer[eventHandler]) == 'function') {\n                        layer[eventHandler].call(layer, eventPacket);\n                    }\n                    if (layer.trigger) {\n                        layer.trigger(eventName, eventPacket);\n                    }\n                });\n            }\n        },\n\n        /**\n         * @private\n         * @param {number} x\n         * @param {number} y\n         * @param {module:zrender/graphic/Displayable} exclude\n         * @return {model:zrender/Element}\n         * @method\n         */\n        findHover: function(x, y, exclude) {\n            var list = this.storage.getDisplayList();\n            var out = {};\n\n            for (var i = list.length - 1; i >= 0 ; i--) {\n                var hoverCheckResult;\n                if (list[i] !== exclude\n                    // getDisplayList may include ignored item in VML mode\n                    && !list[i].ignore\n                    && (hoverCheckResult = isHover(list[i], x, y))\n                ) {\n                    !out.topTarget && (out.topTarget = list[i]);\n                    if (hoverCheckResult !== SILENT) {\n                        out.target = list[i];\n                        break;\n                    }\n                }\n            }\n\n            return out;\n        }\n    };\n\n    // Common handlers\n    util.each(['click', 'mousedown', 'mouseup', 'mousewheel', 'dblclick', 'contextmenu'], function (name) {\n        Handler.prototype[name] = function (event) {\n            // Find hover again to avoid click event is dispatched manually. Or click is triggered without mouseover\n            var hovered = this.findHover(event.zrX, event.zrY);\n            var hoveredTarget = hovered.target;\n\n            if (name === 'mousedown') {\n                this._downel = hoveredTarget;\n                // In case click triggered before mouseup\n                this._upel = hoveredTarget;\n            }\n            else if (name === 'mosueup') {\n                this._upel = hoveredTarget;\n            }\n            else if (name === 'click') {\n                if (this._downel !== this._upel) {\n                    return;\n                }\n            }\n\n            this.dispatchToElement(hovered, name, event);\n        };\n    });\n\n    function isHover(displayable, x, y) {\n        if (displayable[displayable.rectHover ? 'rectContain' : 'contain'](x, y)) {\n            var el = displayable;\n            var isSilent;\n            while (el) {\n                // If clipped by ancestor.\n                if (el.clipPath && !el.clipPath.contain(x, y))  {\n                    return false;\n                }\n                if (el.silent) {\n                    isSilent = true;\n                }\n                el = el.parent;\n            }\n            return isSilent ? SILENT : true;\n        }\n\n        return false;\n    }\n\n    util.mixin(Handler, Eventful);\n    util.mixin(Handler, Draggable);\n\n    module.exports = Handler;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/zrender/lib/Handler.js\n// module id = 417\n// module chunks = 0 1 2 3 4","/**\n * @module zrender/Layer\n * @author pissang(https://www.github.com/pissang)\n */\n\n\n    var util = require('./core/util');\n    var config = require('./config');\n    var Style = require('./graphic/Style');\n    var Pattern = require('./graphic/Pattern');\n\n    function returnFalse() {\n        return false;\n    }\n\n    /**\n     * 创建dom\n     *\n     * @inner\n     * @param {string} id dom id 待用\n     * @param {string} type dom type，such as canvas, div etc.\n     * @param {Painter} painter painter instance\n     * @param {number} number\n     */\n    function createDom(id, type, painter, dpr) {\n        var newDom = document.createElement(type);\n        var width = painter.getWidth();\n        var height = painter.getHeight();\n\n        var newDomStyle = newDom.style;\n        // 没append呢，请原谅我这样写，清晰~\n        newDomStyle.position = 'absolute';\n        newDomStyle.left = 0;\n        newDomStyle.top = 0;\n        newDomStyle.width = width + 'px';\n        newDomStyle.height = height + 'px';\n        newDom.width = width * dpr;\n        newDom.height = height * dpr;\n\n        // id不作为索引用，避免可能造成的重名，定义为私有属性\n        newDom.setAttribute('data-zr-dom-id', id);\n        return newDom;\n    }\n\n    /**\n     * @alias module:zrender/Layer\n     * @constructor\n     * @extends module:zrender/mixin/Transformable\n     * @param {string} id\n     * @param {module:zrender/Painter} painter\n     * @param {number} [dpr]\n     */\n    var Layer = function(id, painter, dpr) {\n        var dom;\n        dpr = dpr || config.devicePixelRatio;\n        if (typeof id === 'string') {\n            dom = createDom(id, 'canvas', painter, dpr);\n        }\n        // Not using isDom because in node it will return false\n        else if (util.isObject(id)) {\n            dom = id;\n            id = dom.id;\n        }\n        this.id = id;\n        this.dom = dom;\n\n        var domStyle = dom.style;\n        if (domStyle) { // Not in node\n            dom.onselectstart = returnFalse; // 避免页面选中的尴尬\n            domStyle['-webkit-user-select'] = 'none';\n            domStyle['user-select'] = 'none';\n            domStyle['-webkit-touch-callout'] = 'none';\n            domStyle['-webkit-tap-highlight-color'] = 'rgba(0,0,0,0)';\n            domStyle['padding'] = 0;\n            domStyle['margin'] = 0;\n            domStyle['border-width'] = 0;\n        }\n\n        this.domBack = null;\n        this.ctxBack = null;\n\n        this.painter = painter;\n\n        this.config = null;\n\n        // Configs\n        /**\n         * 每次清空画布的颜色\n         * @type {string}\n         * @default 0\n         */\n        this.clearColor = 0;\n        /**\n         * 是否开启动态模糊\n         * @type {boolean}\n         * @default false\n         */\n        this.motionBlur = false;\n        /**\n         * 在开启动态模糊的时候使用，与上一帧混合的alpha值，值越大尾迹越明显\n         * @type {number}\n         * @default 0.7\n         */\n        this.lastFrameAlpha = 0.7;\n\n        /**\n         * Layer dpr\n         * @type {number}\n         */\n        this.dpr = dpr;\n    };\n\n    Layer.prototype = {\n\n        constructor: Layer,\n\n        elCount: 0,\n\n        __dirty: true,\n\n        initContext: function () {\n            this.ctx = this.dom.getContext('2d');\n\n            this.ctx.dpr = this.dpr;\n        },\n\n        createBackBuffer: function () {\n            var dpr = this.dpr;\n\n            this.domBack = createDom('back-' + this.id, 'canvas', this.painter, dpr);\n            this.ctxBack = this.domBack.getContext('2d');\n\n            if (dpr != 1) {\n                this.ctxBack.scale(dpr, dpr);\n            }\n        },\n\n        /**\n         * @param  {number} width\n         * @param  {number} height\n         */\n        resize: function (width, height) {\n            var dpr = this.dpr;\n\n            var dom = this.dom;\n            var domStyle = dom.style;\n            var domBack = this.domBack;\n\n            domStyle.width = width + 'px';\n            domStyle.height = height + 'px';\n\n            dom.width = width * dpr;\n            dom.height = height * dpr;\n\n            if (domBack) {\n                domBack.width = width * dpr;\n                domBack.height = height * dpr;\n\n                if (dpr != 1) {\n                    this.ctxBack.scale(dpr, dpr);\n                }\n            }\n        },\n\n        /**\n         * 清空该层画布\n         * @param {boolean} clearAll Clear all with out motion blur\n         */\n        clear: function (clearAll) {\n            var dom = this.dom;\n            var ctx = this.ctx;\n            var width = dom.width;\n            var height = dom.height;\n\n            var clearColor = this.clearColor;\n            var haveMotionBLur = this.motionBlur && !clearAll;\n            var lastFrameAlpha = this.lastFrameAlpha;\n\n            var dpr = this.dpr;\n\n            if (haveMotionBLur) {\n                if (!this.domBack) {\n                    this.createBackBuffer();\n                }\n\n                this.ctxBack.globalCompositeOperation = 'copy';\n                this.ctxBack.drawImage(\n                    dom, 0, 0,\n                    width / dpr,\n                    height / dpr\n                );\n            }\n\n            ctx.clearRect(0, 0, width, height);\n            if (clearColor) {\n                var clearColorGradientOrPattern;\n                // Gradient\n                if (clearColor.colorStops) {\n                    // Cache canvas gradient\n                    clearColorGradientOrPattern = clearColor.__canvasGradient || Style.getGradient(ctx, clearColor, {\n                        x: 0,\n                        y: 0,\n                        width: width,\n                        height: height\n                    });\n\n                    clearColor.__canvasGradient = clearColorGradientOrPattern;\n                }\n                // Pattern\n                else if (clearColor.image) {\n                    clearColorGradientOrPattern = Pattern.prototype.getCanvasPattern.call(clearColor, ctx);\n                }\n                ctx.save();\n                ctx.fillStyle = clearColorGradientOrPattern || clearColor;\n                ctx.fillRect(0, 0, width, height);\n                ctx.restore();\n            }\n\n            if (haveMotionBLur) {\n                var domBack = this.domBack;\n                ctx.save();\n                ctx.globalAlpha = lastFrameAlpha;\n                ctx.drawImage(domBack, 0, 0, width, height);\n                ctx.restore();\n            }\n        }\n    };\n\n    module.exports = Layer;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/zrender/lib/Layer.js\n// module id = 418\n// module chunks = 0 1 2 3 4","'use strict';\n/**\n * Default canvas painter\n * @module zrender/Painter\n * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)\n *         errorrik (errorrik@gmail.com)\n *         pissang (https://www.github.com/pissang)\n */\n \n\n    var config = require('./config');\n    var util = require('./core/util');\n    var log = require('./core/log');\n    var BoundingRect = require('./core/BoundingRect');\n    var timsort = require('./core/timsort');\n\n    var Layer = require('./Layer');\n\n    var requestAnimationFrame = require('./animation/requestAnimationFrame');\n\n    // PENDIGN\n    // Layer exceeds MAX_PROGRESSIVE_LAYER_NUMBER may have some problem when flush directly second time.\n    //\n    // Maximum progressive layer. When exceeding this number. All elements will be drawed in the last layer.\n    var MAX_PROGRESSIVE_LAYER_NUMBER = 5;\n\n    function parseInt10(val) {\n        return parseInt(val, 10);\n    }\n\n    function isLayerValid(layer) {\n        if (!layer) {\n            return false;\n        }\n\n        if (layer.__builtin__) {\n            return true;\n        }\n\n        if (typeof(layer.resize) !== 'function'\n            || typeof(layer.refresh) !== 'function'\n        ) {\n            return false;\n        }\n\n        return true;\n    }\n\n    function preProcessLayer(layer) {\n        layer.__unusedCount++;\n    }\n\n    function postProcessLayer(layer) {\n        if (layer.__unusedCount == 1) {\n            layer.clear();\n        }\n    }\n\n    var tmpRect = new BoundingRect(0, 0, 0, 0);\n    var viewRect = new BoundingRect(0, 0, 0, 0);\n    function isDisplayableCulled(el, width, height) {\n        tmpRect.copy(el.getBoundingRect());\n        if (el.transform) {\n            tmpRect.applyTransform(el.transform);\n        }\n        viewRect.width = width;\n        viewRect.height = height;\n        return !tmpRect.intersect(viewRect);\n    }\n\n    function isClipPathChanged(clipPaths, prevClipPaths) {\n        if (clipPaths == prevClipPaths) { // Can both be null or undefined\n            return false;\n        }\n\n        if (!clipPaths || !prevClipPaths || (clipPaths.length !== prevClipPaths.length)) {\n            return true;\n        }\n        for (var i = 0; i < clipPaths.length; i++) {\n            if (clipPaths[i] !== prevClipPaths[i]) {\n                return true;\n            }\n        }\n    }\n\n    function doClip(clipPaths, ctx) {\n        for (var i = 0; i < clipPaths.length; i++) {\n            var clipPath = clipPaths[i];\n\n            clipPath.setTransform(ctx);\n            ctx.beginPath();\n            clipPath.buildPath(ctx, clipPath.shape);\n            ctx.clip();\n            // Transform back\n            clipPath.restoreTransform(ctx);\n        }\n    }\n\n    function createRoot(width, height) {\n        var domRoot = document.createElement('div');\n\n        // domRoot.onselectstart = returnFalse; // 避免页面选中的尴尬\n        domRoot.style.cssText = [\n            'position:relative',\n            'overflow:hidden',\n            'width:' + width + 'px',\n            'height:' + height + 'px',\n            'padding:0',\n            'margin:0',\n            'border-width:0'\n        ].join(';') + ';';\n\n        return domRoot;\n    }\n\n    /**\n     * @alias module:zrender/Painter\n     * @constructor\n     * @param {HTMLElement} root 绘图容器\n     * @param {module:zrender/Storage} storage\n     * @param {Ojbect} opts\n     */\n    var Painter = function (root, storage, opts) {\n        // In node environment using node-canvas\n        var singleCanvas = !root.nodeName // In node ?\n            || root.nodeName.toUpperCase() === 'CANVAS';\n\n        this._opts = opts = util.extend({}, opts || {});\n\n        /**\n         * @type {number}\n         */\n        this.dpr = opts.devicePixelRatio || config.devicePixelRatio;\n        /**\n         * @type {boolean}\n         * @private\n         */\n        this._singleCanvas = singleCanvas;\n        /**\n         * 绘图容器\n         * @type {HTMLElement}\n         */\n        this.root = root;\n\n        var rootStyle = root.style;\n\n        if (rootStyle) {\n            rootStyle['-webkit-tap-highlight-color'] = 'transparent';\n            rootStyle['-webkit-user-select'] =\n            rootStyle['user-select'] =\n            rootStyle['-webkit-touch-callout'] = 'none';\n\n            root.innerHTML = '';\n        }\n\n        /**\n         * @type {module:zrender/Storage}\n         */\n        this.storage = storage;\n\n        /**\n         * @type {Array.<number>}\n         * @private\n         */\n        var zlevelList = this._zlevelList = [];\n\n        /**\n         * @type {Object.<string, module:zrender/Layer>}\n         * @private\n         */\n        var layers = this._layers = {};\n\n        /**\n         * @type {Object.<string, Object>}\n         * @type {private}\n         */\n        this._layerConfig = {};\n\n        if (!singleCanvas) {\n            this._width = this._getSize(0);\n            this._height = this._getSize(1);\n\n            var domRoot = this._domRoot = createRoot(\n                this._width, this._height\n            );\n            root.appendChild(domRoot);\n        }\n        else {\n            if (opts.width != null) {\n                root.width = opts.width;\n            }\n            if (opts.height != null) {\n                root.height = opts.height;\n            }\n            // Use canvas width and height directly\n            var width = root.width;\n            var height = root.height;\n            this._width = width;\n            this._height = height;\n\n            // Create layer if only one given canvas\n            // Device pixel ratio is fixed to 1 because given canvas has its specified width and height\n            var mainLayer = new Layer(root, this, 1);\n            mainLayer.initContext();\n            // FIXME Use canvas width and height\n            // mainLayer.resize(width, height);\n            layers[0] = mainLayer;\n            zlevelList.push(0);\n\n            this._domRoot = root;\n        }\n\n        // Layers for progressive rendering\n        this._progressiveLayers = [];\n\n        /**\n         * @type {module:zrender/Layer}\n         * @private\n         */\n        this._hoverlayer;\n\n        this._hoverElements = [];\n    };\n\n    Painter.prototype = {\n\n        constructor: Painter,\n\n        /**\n         * If painter use a single canvas\n         * @return {boolean}\n         */\n        isSingleCanvas: function () {\n            return this._singleCanvas;\n        },\n        /**\n         * @return {HTMLDivElement}\n         */\n        getViewportRoot: function () {\n            return this._domRoot;\n        },\n\n        /**\n         * 刷新\n         * @param {boolean} [paintAll=false] 强制绘制所有displayable\n         */\n        refresh: function (paintAll) {\n\n            var list = this.storage.getDisplayList(true);\n\n            var zlevelList = this._zlevelList;\n\n            this._paintList(list, paintAll);\n\n            // Paint custum layers\n            for (var i = 0; i < zlevelList.length; i++) {\n                var z = zlevelList[i];\n                var layer = this._layers[z];\n                if (!layer.__builtin__ && layer.refresh) {\n                    layer.refresh();\n                }\n            }\n\n            this.refreshHover();\n\n            if (this._progressiveLayers.length) {\n                this._startProgessive();\n            }\n\n            return this;\n        },\n\n        addHover: function (el, hoverStyle) {\n            if (el.__hoverMir) {\n                return;\n            }\n            var elMirror = new el.constructor({\n                style: el.style,\n                shape: el.shape\n            });\n            elMirror.__from = el;\n            el.__hoverMir = elMirror;\n            elMirror.setStyle(hoverStyle);\n            this._hoverElements.push(elMirror);\n        },\n\n        removeHover: function (el) {\n            var elMirror = el.__hoverMir;\n            var hoverElements = this._hoverElements;\n            var idx = util.indexOf(hoverElements, elMirror);\n            if (idx >= 0) {\n                hoverElements.splice(idx, 1);\n            }\n            el.__hoverMir = null;\n        },\n\n        clearHover: function (el) {\n            var hoverElements = this._hoverElements;\n            for (var i = 0; i < hoverElements.length; i++) {\n                var from = hoverElements[i].__from;\n                if (from) {\n                    from.__hoverMir = null;\n                }\n            }\n            hoverElements.length = 0;\n        },\n\n        refreshHover: function () {\n            var hoverElements = this._hoverElements;\n            var len = hoverElements.length;\n            var hoverLayer = this._hoverlayer;\n            hoverLayer && hoverLayer.clear();\n\n            if (!len) {\n                return;\n            }\n            timsort(hoverElements, this.storage.displayableSortFunc);\n\n            // Use a extream large zlevel\n            // FIXME?\n            if (!hoverLayer) {\n                hoverLayer = this._hoverlayer = this.getLayer(1e5);\n            }\n\n            var scope = {};\n            hoverLayer.ctx.save();\n            for (var i = 0; i < len;) {\n                var el = hoverElements[i];\n                var originalEl = el.__from;\n                // Original el is removed\n                // PENDING\n                if (!(originalEl && originalEl.__zr)) {\n                    hoverElements.splice(i, 1);\n                    originalEl.__hoverMir = null;\n                    len--;\n                    continue;\n                }\n                i++;\n\n                // Use transform\n                // FIXME style and shape ?\n                if (!originalEl.invisible) {\n                    el.transform = originalEl.transform;\n                    el.invTransform = originalEl.invTransform;\n                    el.__clipPaths = originalEl.__clipPaths;\n                    // el.\n                    this._doPaintEl(el, hoverLayer, true, scope);\n                }\n            }\n            hoverLayer.ctx.restore();\n        },\n\n        _startProgessive: function () {\n            var self = this;\n\n            if (!self._furtherProgressive) {\n                return;\n            }\n\n            // Use a token to stop progress steps triggered by\n            // previous zr.refresh calling.\n            var token = self._progressiveToken = +new Date();\n\n            self._progress++;\n            requestAnimationFrame(step);\n\n            function step() {\n                // In case refreshed or disposed\n                if (token === self._progressiveToken && self.storage) {\n\n                    self._doPaintList(self.storage.getDisplayList());\n\n                    if (self._furtherProgressive) {\n                        self._progress++;\n                        requestAnimationFrame(step);\n                    }\n                    else {\n                        self._progressiveToken = -1;\n                    }\n                }\n            }\n        },\n\n        _clearProgressive: function () {\n            this._progressiveToken = -1;\n            this._progress = 0;\n            util.each(this._progressiveLayers, function (layer) {\n                layer.__dirty && layer.clear();\n            });\n        },\n\n        _paintList: function (list, paintAll) {\n\n            if (paintAll == null) {\n                paintAll = false;\n            }\n\n            this._updateLayerStatus(list);\n\n            this._clearProgressive();\n\n            this.eachBuiltinLayer(preProcessLayer);\n\n            this._doPaintList(list, paintAll);\n\n            this.eachBuiltinLayer(postProcessLayer);\n        },\n\n        _doPaintList: function (list, paintAll) {\n            var currentLayer;\n            var currentZLevel;\n            var ctx;\n\n            // var invTransform = [];\n            var scope;\n\n            var progressiveLayerIdx = 0;\n            var currentProgressiveLayer;\n\n            var width = this._width;\n            var height = this._height;\n            var layerProgress;\n            var frame = this._progress;\n            function flushProgressiveLayer(layer) {\n                var dpr = ctx.dpr || 1;\n                ctx.save();\n                ctx.globalAlpha = 1;\n                ctx.shadowBlur = 0;\n                // Avoid layer don't clear in next progressive frame\n                currentLayer.__dirty = true;\n                ctx.setTransform(1, 0, 0, 1, 0, 0);\n                ctx.drawImage(layer.dom, 0, 0, width * dpr, height * dpr);\n                ctx.restore();\n            }\n\n            for (var i = 0, l = list.length; i < l; i++) {\n                var el = list[i];\n                var elZLevel = this._singleCanvas ? 0 : el.zlevel;\n\n                var elFrame = el.__frame;\n\n                // Flush at current context\n                // PENDING\n                if (elFrame < 0 && currentProgressiveLayer) {\n                    flushProgressiveLayer(currentProgressiveLayer);\n                    currentProgressiveLayer = null;\n                }\n\n                // Change draw layer\n                if (currentZLevel !== elZLevel) {\n                    if (ctx) {\n                        ctx.restore();\n                    }\n\n                    // Reset scope\n                    scope = {};\n\n                    // Only 0 zlevel if only has one canvas\n                    currentZLevel = elZLevel;\n                    currentLayer = this.getLayer(currentZLevel);\n\n                    if (!currentLayer.__builtin__) {\n                        log(\n                            'ZLevel ' + currentZLevel\n                            + ' has been used by unkown layer ' + currentLayer.id\n                        );\n                    }\n\n                    ctx = currentLayer.ctx;\n                    ctx.save();\n\n                    // Reset the count\n                    currentLayer.__unusedCount = 0;\n\n                    if (currentLayer.__dirty || paintAll) {\n                        currentLayer.clear();\n                    }\n                }\n\n                if (!(currentLayer.__dirty || paintAll)) {\n                    continue;\n                }\n\n                if (elFrame >= 0) {\n                    // Progressive layer changed\n                    if (!currentProgressiveLayer) {\n                        currentProgressiveLayer = this._progressiveLayers[\n                            Math.min(progressiveLayerIdx++, MAX_PROGRESSIVE_LAYER_NUMBER - 1)\n                        ];\n\n                        currentProgressiveLayer.ctx.save();\n                        currentProgressiveLayer.renderScope = {};\n\n                        if (currentProgressiveLayer\n                            && (currentProgressiveLayer.__progress > currentProgressiveLayer.__maxProgress)\n                        ) {\n                            // flushProgressiveLayer(currentProgressiveLayer);\n                            // Quick jump all progressive elements\n                            // All progressive element are not dirty, jump over and flush directly\n                            i = currentProgressiveLayer.__nextIdxNotProg - 1;\n                            // currentProgressiveLayer = null;\n                            continue;\n                        }\n\n                        layerProgress = currentProgressiveLayer.__progress;\n\n                        if (!currentProgressiveLayer.__dirty) {\n                            // Keep rendering\n                            frame = layerProgress;\n                        }\n\n                        currentProgressiveLayer.__progress = frame + 1;\n                    }\n\n                    if (elFrame === frame) {\n                        this._doPaintEl(el, currentProgressiveLayer, true, currentProgressiveLayer.renderScope);\n                    }\n                }\n                else {\n                    this._doPaintEl(el, currentLayer, paintAll, scope);\n                }\n\n                el.__dirty = false;\n            }\n\n            if (currentProgressiveLayer) {\n                flushProgressiveLayer(currentProgressiveLayer);\n            }\n\n            // Restore the lastLayer ctx\n            ctx && ctx.restore();\n            // If still has clipping state\n            // if (scope.prevElClipPaths) {\n            //     ctx.restore();\n            // }\n\n            this._furtherProgressive = false;\n            util.each(this._progressiveLayers, function (layer) {\n                if (layer.__maxProgress >= layer.__progress) {\n                    this._furtherProgressive = true;\n                }\n            }, this);\n        },\n\n        _doPaintEl: function (el, currentLayer, forcePaint, scope) {\n            var ctx = currentLayer.ctx;\n            var m = el.transform;\n            if (\n                (currentLayer.__dirty || forcePaint)\n                // Ignore invisible element\n                && !el.invisible\n                // Ignore transparent element\n                && el.style.opacity !== 0\n                // Ignore scale 0 element, in some environment like node-canvas\n                // Draw a scale 0 element can cause all following draw wrong\n                // And setTransform with scale 0 will cause set back transform failed.\n                && !(m && !m[0] && !m[3])\n                // Ignore culled element\n                && !(el.culling && isDisplayableCulled(el, this._width, this._height))\n            ) {\n\n                var clipPaths = el.__clipPaths;\n\n                // Optimize when clipping on group with several elements\n                if (scope.prevClipLayer !== currentLayer\n                    || isClipPathChanged(clipPaths, scope.prevElClipPaths)\n                ) {\n                    // If has previous clipping state, restore from it\n                    if (scope.prevElClipPaths) {\n                        scope.prevClipLayer.ctx.restore();\n                        scope.prevClipLayer = scope.prevElClipPaths = null;\n\n                        // Reset prevEl since context has been restored\n                        scope.prevEl = null;\n                    }\n                    // New clipping state\n                    if (clipPaths) {\n                        ctx.save();\n                        doClip(clipPaths, ctx);\n                        scope.prevClipLayer = currentLayer;\n                        scope.prevElClipPaths = clipPaths;\n                    }\n                }\n                el.beforeBrush && el.beforeBrush(ctx);\n\n                el.brush(ctx, scope.prevEl || null);\n                scope.prevEl = el;\n\n                el.afterBrush && el.afterBrush(ctx);\n            }\n        },\n\n        /**\n         * 获取 zlevel 所在层，如果不存在则会创建一个新的层\n         * @param {number} zlevel\n         * @return {module:zrender/Layer}\n         */\n        getLayer: function (zlevel) {\n            if (this._singleCanvas) {\n                return this._layers[0];\n            }\n\n            var layer = this._layers[zlevel];\n            if (!layer) {\n                // Create a new layer\n                layer = new Layer('zr_' + zlevel, this, this.dpr);\n                layer.__builtin__ = true;\n\n                if (this._layerConfig[zlevel]) {\n                    util.merge(layer, this._layerConfig[zlevel], true);\n                }\n\n                this.insertLayer(zlevel, layer);\n\n                // Context is created after dom inserted to document\n                // Or excanvas will get 0px clientWidth and clientHeight\n                layer.initContext();\n            }\n\n            return layer;\n        },\n\n        insertLayer: function (zlevel, layer) {\n\n            var layersMap = this._layers;\n            var zlevelList = this._zlevelList;\n            var len = zlevelList.length;\n            var prevLayer = null;\n            var i = -1;\n            var domRoot = this._domRoot;\n\n            if (layersMap[zlevel]) {\n                log('ZLevel ' + zlevel + ' has been used already');\n                return;\n            }\n            // Check if is a valid layer\n            if (!isLayerValid(layer)) {\n                log('Layer of zlevel ' + zlevel + ' is not valid');\n                return;\n            }\n\n            if (len > 0 && zlevel > zlevelList[0]) {\n                for (i = 0; i < len - 1; i++) {\n                    if (\n                        zlevelList[i] < zlevel\n                        && zlevelList[i + 1] > zlevel\n                    ) {\n                        break;\n                    }\n                }\n                prevLayer = layersMap[zlevelList[i]];\n            }\n            zlevelList.splice(i + 1, 0, zlevel);\n\n            layersMap[zlevel] = layer;\n\n            // Vitual layer will not directly show on the screen.\n            // (It can be a WebGL layer and assigned to a ZImage element)\n            // But it still under management of zrender.\n            if (!layer.virtual) {\n                if (prevLayer) {\n                    var prevDom = prevLayer.dom;\n                    if (prevDom.nextSibling) {\n                        domRoot.insertBefore(\n                            layer.dom,\n                            prevDom.nextSibling\n                        );\n                    }\n                    else {\n                        domRoot.appendChild(layer.dom);\n                    }\n                }\n                else {\n                    if (domRoot.firstChild) {\n                        domRoot.insertBefore(layer.dom, domRoot.firstChild);\n                    }\n                    else {\n                        domRoot.appendChild(layer.dom);\n                    }\n                }\n            }\n        },\n\n        // Iterate each layer\n        eachLayer: function (cb, context) {\n            var zlevelList = this._zlevelList;\n            var z;\n            var i;\n            for (i = 0; i < zlevelList.length; i++) {\n                z = zlevelList[i];\n                cb.call(context, this._layers[z], z);\n            }\n        },\n\n        // Iterate each buildin layer\n        eachBuiltinLayer: function (cb, context) {\n            var zlevelList = this._zlevelList;\n            var layer;\n            var z;\n            var i;\n            for (i = 0; i < zlevelList.length; i++) {\n                z = zlevelList[i];\n                layer = this._layers[z];\n                if (layer.__builtin__) {\n                    cb.call(context, layer, z);\n                }\n            }\n        },\n\n        // Iterate each other layer except buildin layer\n        eachOtherLayer: function (cb, context) {\n            var zlevelList = this._zlevelList;\n            var layer;\n            var z;\n            var i;\n            for (i = 0; i < zlevelList.length; i++) {\n                z = zlevelList[i];\n                layer = this._layers[z];\n                if (!layer.__builtin__) {\n                    cb.call(context, layer, z);\n                }\n            }\n        },\n\n        /**\n         * 获取所有已创建的层\n         * @param {Array.<module:zrender/Layer>} [prevLayer]\n         */\n        getLayers: function () {\n            return this._layers;\n        },\n\n        _updateLayerStatus: function (list) {\n\n            var layers = this._layers;\n            var progressiveLayers = this._progressiveLayers;\n\n            var elCountsLastFrame = {};\n            var progressiveElCountsLastFrame = {};\n\n            this.eachBuiltinLayer(function (layer, z) {\n                elCountsLastFrame[z] = layer.elCount;\n                layer.elCount = 0;\n                layer.__dirty = false;\n            });\n\n            util.each(progressiveLayers, function (layer, idx) {\n                progressiveElCountsLastFrame[idx] = layer.elCount;\n                layer.elCount = 0;\n                layer.__dirty = false;\n            });\n\n            var progressiveLayerCount = 0;\n            var currentProgressiveLayer;\n            var lastProgressiveKey;\n            var frameCount = 0;\n            for (var i = 0, l = list.length; i < l; i++) {\n                var el = list[i];\n                var zlevel = this._singleCanvas ? 0 : el.zlevel;\n                var layer = layers[zlevel];\n                var elProgress = el.progressive;\n                if (layer) {\n                    layer.elCount++;\n                    layer.__dirty = layer.__dirty || el.__dirty;\n                }\n\n                /////// Update progressive\n                if (elProgress >= 0) {\n                    // Fix wrong progressive sequence problem.\n                    if (lastProgressiveKey !== elProgress) {\n                        lastProgressiveKey = elProgress;\n                        frameCount++;\n                    }\n                    var elFrame = el.__frame = frameCount - 1;\n                    if (!currentProgressiveLayer) {\n                        var idx = Math.min(progressiveLayerCount, MAX_PROGRESSIVE_LAYER_NUMBER - 1);\n                        currentProgressiveLayer = progressiveLayers[idx];\n                        if (!currentProgressiveLayer) {\n                            currentProgressiveLayer = progressiveLayers[idx] = new Layer(\n                                'progressive', this, this.dpr\n                            );\n                            currentProgressiveLayer.initContext();\n                        }\n                        currentProgressiveLayer.__maxProgress = 0;\n                    }\n                    currentProgressiveLayer.__dirty = currentProgressiveLayer.__dirty || el.__dirty;\n                    currentProgressiveLayer.elCount++;\n\n                    currentProgressiveLayer.__maxProgress = Math.max(\n                        currentProgressiveLayer.__maxProgress, elFrame\n                    );\n\n                    if (currentProgressiveLayer.__maxProgress >= currentProgressiveLayer.__progress) {\n                        // Should keep rendering this  layer because progressive rendering is not finished yet\n                        layer.__dirty = true;\n                    }\n                }\n                else {\n                    el.__frame = -1;\n\n                    if (currentProgressiveLayer) {\n                        currentProgressiveLayer.__nextIdxNotProg = i;\n                        progressiveLayerCount++;\n                        currentProgressiveLayer = null;\n                    }\n                }\n            }\n\n            if (currentProgressiveLayer) {\n                progressiveLayerCount++;\n                currentProgressiveLayer.__nextIdxNotProg = i;\n            }\n\n            // 层中的元素数量有发生变化\n            this.eachBuiltinLayer(function (layer, z) {\n                if (elCountsLastFrame[z] !== layer.elCount) {\n                    layer.__dirty = true;\n                }\n            });\n\n            progressiveLayers.length = Math.min(progressiveLayerCount, MAX_PROGRESSIVE_LAYER_NUMBER);\n            util.each(progressiveLayers, function (layer, idx) {\n                if (progressiveElCountsLastFrame[idx] !== layer.elCount) {\n                    el.__dirty = true;\n                }\n                if (layer.__dirty) {\n                    layer.__progress = 0;\n                }\n            });\n        },\n\n        /**\n         * 清除hover层外所有内容\n         */\n        clear: function () {\n            this.eachBuiltinLayer(this._clearLayer);\n            return this;\n        },\n\n        _clearLayer: function (layer) {\n            layer.clear();\n        },\n\n        /**\n         * 修改指定zlevel的绘制参数\n         *\n         * @param {string} zlevel\n         * @param {Object} config 配置对象\n         * @param {string} [config.clearColor=0] 每次清空画布的颜色\n         * @param {string} [config.motionBlur=false] 是否开启动态模糊\n         * @param {number} [config.lastFrameAlpha=0.7]\n         *                 在开启动态模糊的时候使用，与上一帧混合的alpha值，值越大尾迹越明显\n         */\n        configLayer: function (zlevel, config) {\n            if (config) {\n                var layerConfig = this._layerConfig;\n                if (!layerConfig[zlevel]) {\n                    layerConfig[zlevel] = config;\n                }\n                else {\n                    util.merge(layerConfig[zlevel], config, true);\n                }\n\n                var layer = this._layers[zlevel];\n\n                if (layer) {\n                    util.merge(layer, layerConfig[zlevel], true);\n                }\n            }\n        },\n\n        /**\n         * 删除指定层\n         * @param {number} zlevel 层所在的zlevel\n         */\n        delLayer: function (zlevel) {\n            var layers = this._layers;\n            var zlevelList = this._zlevelList;\n            var layer = layers[zlevel];\n            if (!layer) {\n                return;\n            }\n            layer.dom.parentNode.removeChild(layer.dom);\n            delete layers[zlevel];\n\n            zlevelList.splice(util.indexOf(zlevelList, zlevel), 1);\n        },\n\n        /**\n         * 区域大小变化后重绘\n         */\n        resize: function (width, height) {\n            var domRoot = this._domRoot;\n            // FIXME Why ?\n            domRoot.style.display = 'none';\n\n            // Save input w/h\n            var opts = this._opts;\n            width != null && (opts.width = width);\n            height != null && (opts.height = height);\n\n            width = this._getSize(0);\n            height = this._getSize(1);\n\n            domRoot.style.display = '';\n\n            // 优化没有实际改变的resize\n            if (this._width != width || height != this._height) {\n                domRoot.style.width = width + 'px';\n                domRoot.style.height = height + 'px';\n\n                for (var id in this._layers) {\n                    if (this._layers.hasOwnProperty(id)) {\n                        this._layers[id].resize(width, height);\n                    }\n                }\n                util.each(this._progressiveLayers, function (layer) {\n                    layer.resize(width, height);\n                });\n\n                this.refresh(true);\n            }\n\n            this._width = width;\n            this._height = height;\n\n            return this;\n        },\n\n        /**\n         * 清除单独的一个层\n         * @param {number} zlevel\n         */\n        clearLayer: function (zlevel) {\n            var layer = this._layers[zlevel];\n            if (layer) {\n                layer.clear();\n            }\n        },\n\n        /**\n         * 释放\n         */\n        dispose: function () {\n            this.root.innerHTML = '';\n\n            this.root =\n            this.storage =\n\n            this._domRoot =\n            this._layers = null;\n        },\n\n        /**\n         * Get canvas which has all thing rendered\n         * @param {Object} opts\n         * @param {string} [opts.backgroundColor]\n         */\n        getRenderedCanvas: function (opts) {\n            opts = opts || {};\n            if (this._singleCanvas) {\n                return this._layers[0].dom;\n            }\n\n            var imageLayer = new Layer('image', this, opts.pixelRatio || this.dpr);\n            imageLayer.initContext();\n\n            imageLayer.clearColor = opts.backgroundColor;\n            imageLayer.clear();\n\n            var displayList = this.storage.getDisplayList(true);\n\n            var scope = {};\n            for (var i = 0; i < displayList.length; i++) {\n                var el = displayList[i];\n                this._doPaintEl(el, imageLayer, true, scope);\n            }\n\n            return imageLayer.dom;\n        },\n        /**\n         * 获取绘图区域宽度\n         */\n        getWidth: function () {\n            return this._width;\n        },\n\n        /**\n         * 获取绘图区域高度\n         */\n        getHeight: function () {\n            return this._height;\n        },\n\n        _getSize: function (whIdx) {\n            var opts = this._opts;\n            var wh = ['width', 'height'][whIdx];\n            var cwh = ['clientWidth', 'clientHeight'][whIdx];\n            var plt = ['paddingLeft', 'paddingTop'][whIdx];\n            var prb = ['paddingRight', 'paddingBottom'][whIdx];\n\n            if (opts[wh] != null && opts[wh] !== 'auto') {\n                return parseFloat(opts[wh]);\n            }\n\n            var root = this.root;\n            var stl = document.defaultView.getComputedStyle(root);\n\n            return (\n                (root[cwh] || parseInt10(stl[wh]) || parseInt10(root.style[wh]))\n                - (parseInt10(stl[plt]) || 0)\n                - (parseInt10(stl[prb]) || 0)\n            ) | 0;\n        },\n\n        pathToImage: function (path, dpr) {\n            dpr = dpr || this.dpr;\n\n            var canvas = document.createElement('canvas');\n            var ctx = canvas.getContext('2d');\n            var rect = path.getBoundingRect();\n            var style = path.style;\n            var shadowBlurSize = style.shadowBlur;\n            var shadowOffsetX = style.shadowOffsetX;\n            var shadowOffsetY = style.shadowOffsetY;\n            var lineWidth = style.hasStroke() ? style.lineWidth : 0;\n\n            var leftMargin = Math.max(lineWidth / 2, -shadowOffsetX + shadowBlurSize);\n            var rightMargin = Math.max(lineWidth / 2, shadowOffsetX + shadowBlurSize);\n            var topMargin = Math.max(lineWidth / 2, -shadowOffsetY + shadowBlurSize);\n            var bottomMargin = Math.max(lineWidth / 2, shadowOffsetY + shadowBlurSize);\n            var width = rect.width + leftMargin + rightMargin;\n            var height = rect.height + topMargin + bottomMargin;\n\n            canvas.width = width * dpr;\n            canvas.height = height * dpr;\n\n            ctx.scale(dpr, dpr);\n            ctx.clearRect(0, 0, width, height);\n            ctx.dpr = dpr;\n\n            var pathTransform = {\n                position: path.position,\n                rotation: path.rotation,\n                scale: path.scale\n            };\n            path.position = [leftMargin - rect.x, topMargin - rect.y];\n            path.rotation = 0;\n            path.scale = [1, 1];\n            path.updateTransform();\n            if (path) {\n                path.brush(ctx);\n            }\n\n            var ImageShape = require('./graphic/Image');\n            var imgShape = new ImageShape({\n                style: {\n                    x: 0,\n                    y: 0,\n                    image: canvas\n                }\n            });\n\n            if (pathTransform.position != null) {\n                imgShape.position = path.position = pathTransform.position;\n            }\n\n            if (pathTransform.rotation != null) {\n                imgShape.rotation = path.rotation = pathTransform.rotation;\n            }\n\n            if (pathTransform.scale != null) {\n                imgShape.scale = path.scale = pathTransform.scale;\n            }\n\n            return imgShape;\n        }\n    };\n\n    module.exports = Painter;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/zrender/lib/Painter.js\n// module id = 419\n// module chunks = 0 1 2 3 4","'use strict';\n/**\n * Storage内容仓库模块\n * @module zrender/Storage\n * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)\n * @author errorrik (errorrik@gmail.com)\n * @author pissang (https://github.com/pissang/)\n */\n\n\n    var util = require('./core/util');\n    var env = require('./core/env');\n\n    var Group = require('./container/Group');\n\n    // Use timsort because in most case elements are partially sorted\n    // https://jsfiddle.net/pissang/jr4x7mdm/8/\n    var timsort = require('./core/timsort');\n\n    function shapeCompareFunc(a, b) {\n        if (a.zlevel === b.zlevel) {\n            if (a.z === b.z) {\n                // if (a.z2 === b.z2) {\n                //     // FIXME Slow has renderidx compare\n                //     // http://stackoverflow.com/questions/20883421/sorting-in-javascript-should-every-compare-function-have-a-return-0-statement\n                //     // https://github.com/v8/v8/blob/47cce544a31ed5577ffe2963f67acb4144ee0232/src/js/array.js#L1012\n                //     return a.__renderidx - b.__renderidx;\n                // }\n                return a.z2 - b.z2;\n            }\n            return a.z - b.z;\n        }\n        return a.zlevel - b.zlevel;\n    }\n    /**\n     * 内容仓库 (M)\n     * @alias module:zrender/Storage\n     * @constructor\n     */\n    var Storage = function () {\n        this._roots = [];\n\n        this._displayList = [];\n\n        this._displayListLen = 0;\n    };\n\n    Storage.prototype = {\n\n        constructor: Storage,\n\n        /**\n         * @param  {Function} cb\n         *\n         */\n        traverse: function (cb, context) {\n            for (var i = 0; i < this._roots.length; i++) {\n                this._roots[i].traverse(cb, context);\n            }\n        },\n\n        /**\n         * 返回所有图形的绘制队列\n         * @param {boolean} [update=false] 是否在返回前更新该数组\n         * @param {boolean} [includeIgnore=false] 是否包含 ignore 的数组, 在 update 为 true 的时候有效\n         *\n         * 详见{@link module:zrender/graphic/Displayable.prototype.updateDisplayList}\n         * @return {Array.<module:zrender/graphic/Displayable>}\n         */\n        getDisplayList: function (update, includeIgnore) {\n            includeIgnore = includeIgnore || false;\n            if (update) {\n                this.updateDisplayList(includeIgnore);\n            }\n            return this._displayList;\n        },\n\n        /**\n         * 更新图形的绘制队列。\n         * 每次绘制前都会调用，该方法会先深度优先遍历整个树，更新所有Group和Shape的变换并且把所有可见的Shape保存到数组中，\n         * 最后根据绘制的优先级（zlevel > z > 插入顺序）排序得到绘制队列\n         * @param {boolean} [includeIgnore=false] 是否包含 ignore 的数组\n         */\n        updateDisplayList: function (includeIgnore) {\n            this._displayListLen = 0;\n            var roots = this._roots;\n            var displayList = this._displayList;\n            for (var i = 0, len = roots.length; i < len; i++) {\n                this._updateAndAddDisplayable(roots[i], null, includeIgnore);\n            }\n            displayList.length = this._displayListLen;\n\n            // for (var i = 0, len = displayList.length; i < len; i++) {\n            //     displayList[i].__renderidx = i;\n            // }\n\n            // displayList.sort(shapeCompareFunc);\n            env.canvasSupported && timsort(displayList, shapeCompareFunc);\n        },\n\n        _updateAndAddDisplayable: function (el, clipPaths, includeIgnore) {\n\n            if (el.ignore && !includeIgnore) {\n                return;\n            }\n\n            el.beforeUpdate();\n\n            if (el.__dirty) {\n\n                el.update();\n\n            }\n\n            el.afterUpdate();\n\n            var userSetClipPath = el.clipPath;\n            if (userSetClipPath) {\n\n                // FIXME 效率影响\n                if (clipPaths) {\n                    clipPaths = clipPaths.slice();\n                }\n                else {\n                    clipPaths = [];\n                }\n\n                var currentClipPath = userSetClipPath;\n                var parentClipPath = el;\n                // Recursively add clip path\n                while (currentClipPath) {\n                    // clipPath 的变换是基于使用这个 clipPath 的元素\n                    currentClipPath.parent = parentClipPath;\n                    currentClipPath.updateTransform();\n\n                    clipPaths.push(currentClipPath);\n\n                    parentClipPath = currentClipPath;\n                    currentClipPath = currentClipPath.clipPath;\n                }\n            }\n\n            if (el.isGroup) {\n                var children = el._children;\n\n                for (var i = 0; i < children.length; i++) {\n                    var child = children[i];\n\n                    // Force to mark as dirty if group is dirty\n                    // FIXME __dirtyPath ?\n                    if (el.__dirty) {\n                        child.__dirty = true;\n                    }\n\n                    this._updateAndAddDisplayable(child, clipPaths, includeIgnore);\n                }\n\n                // Mark group clean here\n                el.__dirty = false;\n\n            }\n            else {\n                el.__clipPaths = clipPaths;\n\n                this._displayList[this._displayListLen++] = el;\n            }\n        },\n\n        /**\n         * 添加图形(Shape)或者组(Group)到根节点\n         * @param {module:zrender/Element} el\n         */\n        addRoot: function (el) {\n            if (el.__storage === this) {\n                return;\n            }\n\n            if (el instanceof Group) {\n                el.addChildrenToStorage(this);\n            }\n\n            this.addToStorage(el);\n            this._roots.push(el);\n        },\n\n        /**\n         * 删除指定的图形(Shape)或者组(Group)\n         * @param {string|Array.<string>} [el] 如果为空清空整个Storage\n         */\n        delRoot: function (el) {\n            if (el == null) {\n                // 不指定el清空\n                for (var i = 0; i < this._roots.length; i++) {\n                    var root = this._roots[i];\n                    if (root instanceof Group) {\n                        root.delChildrenFromStorage(this);\n                    }\n                }\n\n                this._roots = [];\n                this._displayList = [];\n                this._displayListLen = 0;\n\n                return;\n            }\n\n            if (el instanceof Array) {\n                for (var i = 0, l = el.length; i < l; i++) {\n                    this.delRoot(el[i]);\n                }\n                return;\n            }\n\n\n            var idx = util.indexOf(this._roots, el);\n            if (idx >= 0) {\n                this.delFromStorage(el);\n                this._roots.splice(idx, 1);\n                if (el instanceof Group) {\n                    el.delChildrenFromStorage(this);\n                }\n            }\n        },\n\n        addToStorage: function (el) {\n            el.__storage = this;\n            el.dirty(false);\n\n            return this;\n        },\n\n        delFromStorage: function (el) {\n            if (el) {\n                el.__storage = null;\n            }\n\n            return this;\n        },\n\n        /**\n         * 清空并且释放Storage\n         */\n        dispose: function () {\n            this._renderList =\n            this._roots = null;\n        },\n\n        displayableSortFunc: shapeCompareFunc\n    };\n\n    module.exports = Storage;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/zrender/lib/Storage.js\n// module id = 420\n// module chunks = 0 1 2 3 4","'use strict';\n/**\n * 动画主类, 调度和管理所有动画控制器\n *\n * @module zrender/animation/Animation\n * @author pissang(https://github.com/pissang)\n */\n// TODO Additive animation\n// http://iosoteric.com/additive-animations-animatewithduration-in-ios-8/\n// https://developer.apple.com/videos/wwdc2014/#236\n\n\n    var util = require('../core/util');\n    var Dispatcher = require('../core/event').Dispatcher;\n\n    var requestAnimationFrame = require('./requestAnimationFrame');\n\n    var Animator = require('./Animator');\n    /**\n     * @typedef {Object} IZRenderStage\n     * @property {Function} update\n     */\n\n    /**\n     * @alias module:zrender/animation/Animation\n     * @constructor\n     * @param {Object} [options]\n     * @param {Function} [options.onframe]\n     * @param {IZRenderStage} [options.stage]\n     * @example\n     *     var animation = new Animation();\n     *     var obj = {\n     *         x: 100,\n     *         y: 100\n     *     };\n     *     animation.animate(node.position)\n     *         .when(1000, {\n     *             x: 500,\n     *             y: 500\n     *         })\n     *         .when(2000, {\n     *             x: 100,\n     *             y: 100\n     *         })\n     *         .start('spline');\n     */\n    var Animation = function (options) {\n\n        options = options || {};\n\n        this.stage = options.stage || {};\n\n        this.onframe = options.onframe || function() {};\n\n        // private properties\n        this._clips = [];\n\n        this._running = false;\n\n        this._time;\n\n        this._pausedTime;\n\n        this._pauseStart;\n\n        this._paused = false;\n\n        Dispatcher.call(this);\n    };\n\n    Animation.prototype = {\n\n        constructor: Animation,\n        /**\n         * 添加 clip\n         * @param {module:zrender/animation/Clip} clip\n         */\n        addClip: function (clip) {\n            this._clips.push(clip);\n        },\n        /**\n         * 添加 animator\n         * @param {module:zrender/animation/Animator} animator\n         */\n        addAnimator: function (animator) {\n            animator.animation = this;\n            var clips = animator.getClips();\n            for (var i = 0; i < clips.length; i++) {\n                this.addClip(clips[i]);\n            }\n        },\n        /**\n         * 删除动画片段\n         * @param {module:zrender/animation/Clip} clip\n         */\n        removeClip: function(clip) {\n            var idx = util.indexOf(this._clips, clip);\n            if (idx >= 0) {\n                this._clips.splice(idx, 1);\n            }\n        },\n\n        /**\n         * 删除动画片段\n         * @param {module:zrender/animation/Animator} animator\n         */\n        removeAnimator: function (animator) {\n            var clips = animator.getClips();\n            for (var i = 0; i < clips.length; i++) {\n                this.removeClip(clips[i]);\n            }\n            animator.animation = null;\n        },\n\n        _update: function() {\n\n            var time = new Date().getTime() - this._pausedTime;\n            var delta = time - this._time;\n            var clips = this._clips;\n            var len = clips.length;\n\n            var deferredEvents = [];\n            var deferredClips = [];\n            for (var i = 0; i < len; i++) {\n                var clip = clips[i];\n                var e = clip.step(time, delta);\n                // Throw out the events need to be called after\n                // stage.update, like destroy\n                if (e) {\n                    deferredEvents.push(e);\n                    deferredClips.push(clip);\n                }\n            }\n\n            // Remove the finished clip\n            for (var i = 0; i < len;) {\n                if (clips[i]._needsRemove) {\n                    clips[i] = clips[len - 1];\n                    clips.pop();\n                    len--;\n                }\n                else {\n                    i++;\n                }\n            }\n\n            len = deferredEvents.length;\n            for (var i = 0; i < len; i++) {\n                deferredClips[i].fire(deferredEvents[i]);\n            }\n\n            this._time = time;\n\n            this.onframe(delta);\n\n            this.trigger('frame', delta);\n\n            if (this.stage.update) {\n                this.stage.update();\n            }\n        },\n\n        _startLoop: function () {\n            var self = this;\n\n            this._running = true;\n\n            function step() {\n                if (self._running) {\n\n                    requestAnimationFrame(step);\n\n                    !self._paused && self._update();\n                }\n            }\n\n            requestAnimationFrame(step);\n        },\n\n        /**\n         * 开始运行动画\n         */\n        start: function () {\n\n            this._time = new Date().getTime();\n            this._pausedTime = 0;\n\n            this._startLoop();\n        },\n        /**\n         * 停止运行动画\n         */\n        stop: function () {\n            this._running = false;\n        },\n\n        /**\n         * Pause\n         */\n        pause: function () {\n            if (!this._paused) {\n                this._pauseStart = new Date().getTime();\n                this._paused = true;\n            }\n        },\n\n        /**\n         * Resume\n         */\n        resume: function () {\n            if (this._paused) {\n                this._pausedTime += (new Date().getTime()) - this._pauseStart;\n                this._paused = false;\n            }\n        },\n\n        /**\n         * 清除所有动画片段\n         */\n        clear: function () {\n            this._clips = [];\n        },\n        /**\n         * 对一个目标创建一个animator对象，可以指定目标中的属性使用动画\n         * @param  {Object} target\n         * @param  {Object} options\n         * @param  {boolean} [options.loop=false] 是否循环播放动画\n         * @param  {Function} [options.getter=null]\n         *         如果指定getter函数，会通过getter函数取属性值\n         * @param  {Function} [options.setter=null]\n         *         如果指定setter函数，会通过setter函数设置属性值\n         * @return {module:zrender/animation/Animation~Animator}\n         */\n        // TODO Gap\n        animate: function (target, options) {\n            options = options || {};\n\n            var animator = new Animator(\n                target,\n                options.loop,\n                options.getter,\n                options.setter\n            );\n\n            this.addAnimator(animator);\n\n            return animator;\n        }\n    };\n\n    util.mixin(Animation, Dispatcher);\n\n    module.exports = Animation;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/zrender/lib/animation/Animation.js\n// module id = 421\n// module chunks = 0 1 2 3 4","/**\n * 动画主控制器\n * @config target 动画对象，可以是数组，如果是数组的话会批量分发onframe等事件\n * @config life(1000) 动画时长\n * @config delay(0) 动画延迟时间\n * @config loop(true)\n * @config gap(0) 循环的间隔时间\n * @config onframe\n * @config easing(optional)\n * @config ondestroy(optional)\n * @config onrestart(optional)\n *\n * TODO pause\n */\n\n\n    var easingFuncs = require('./easing');\n\n    function Clip(options) {\n\n        this._target = options.target;\n\n        // 生命周期\n        this._life = options.life || 1000;\n        // 延时\n        this._delay = options.delay || 0;\n        // 开始时间\n        // this._startTime = new Date().getTime() + this._delay;// 单位毫秒\n        this._initialized = false;\n\n        // 是否循环\n        this.loop = options.loop == null ? false : options.loop;\n\n        this.gap = options.gap || 0;\n\n        this.easing = options.easing || 'Linear';\n\n        this.onframe = options.onframe;\n        this.ondestroy = options.ondestroy;\n        this.onrestart = options.onrestart;\n\n        this._pausedTime = 0;\n        this._paused = false;\n    }\n\n    Clip.prototype = {\n\n        constructor: Clip,\n\n        step: function (globalTime, deltaTime) {\n            // Set startTime on first step, or _startTime may has milleseconds different between clips\n            // PENDING\n            if (!this._initialized) {\n                this._startTime = globalTime + this._delay;\n                this._initialized = true;\n            }\n\n            if (this._paused) {\n                this._pausedTime += deltaTime;\n                return;\n            }\n\n            var percent = (globalTime - this._startTime - this._pausedTime) / this._life;\n\n            // 还没开始\n            if (percent < 0) {\n                return;\n            }\n\n            percent = Math.min(percent, 1);\n\n            var easing = this.easing;\n            var easingFunc = typeof easing == 'string' ? easingFuncs[easing] : easing;\n            var schedule = typeof easingFunc === 'function'\n                ? easingFunc(percent)\n                : percent;\n\n            this.fire('frame', schedule);\n\n            // 结束\n            if (percent == 1) {\n                if (this.loop) {\n                    this.restart (globalTime);\n                    // 重新开始周期\n                    // 抛出而不是直接调用事件直到 stage.update 后再统一调用这些事件\n                    return 'restart';\n                }\n\n                // 动画完成将这个控制器标识为待删除\n                // 在Animation.update中进行批量删除\n                this._needsRemove = true;\n                return 'destroy';\n            }\n\n            return null;\n        },\n\n        restart: function (globalTime) {\n            var remainder = (globalTime - this._startTime - this._pausedTime) % this._life;\n            this._startTime = globalTime - remainder + this.gap;\n            this._pausedTime = 0;\n\n            this._needsRemove = false;\n        },\n\n        fire: function (eventType, arg) {\n            eventType = 'on' + eventType;\n            if (this[eventType]) {\n                this[eventType](this._target, arg);\n            }\n        },\n\n        pause: function () {\n            this._paused = true;\n        },\n\n        resume: function () {\n            this._paused = false;\n        }\n    };\n\n    module.exports = Clip;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/zrender/lib/animation/Clip.js\n// module id = 422\n// module chunks = 0 1 2 3 4","/**\n * 缓动代码来自 https://github.com/sole/tween.js/blob/master/src/Tween.js\n * @see http://sole.github.io/tween.js/examples/03_graphs.html\n * @exports zrender/animation/easing\n */\n\n    var easing = {\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        linear: function (k) {\n            return k;\n        },\n\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        quadraticIn: function (k) {\n            return k * k;\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        quadraticOut: function (k) {\n            return k * (2 - k);\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        quadraticInOut: function (k) {\n            if ((k *= 2) < 1) {\n                return 0.5 * k * k;\n            }\n            return -0.5 * (--k * (k - 2) - 1);\n        },\n\n        // 三次方的缓动（t^3）\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        cubicIn: function (k) {\n            return k * k * k;\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        cubicOut: function (k) {\n            return --k * k * k + 1;\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        cubicInOut: function (k) {\n            if ((k *= 2) < 1) {\n                return 0.5 * k * k * k;\n            }\n            return 0.5 * ((k -= 2) * k * k + 2);\n        },\n\n        // 四次方的缓动（t^4）\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        quarticIn: function (k) {\n            return k * k * k * k;\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        quarticOut: function (k) {\n            return 1 - (--k * k * k * k);\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        quarticInOut: function (k) {\n            if ((k *= 2) < 1) {\n                return 0.5 * k * k * k * k;\n            }\n            return -0.5 * ((k -= 2) * k * k * k - 2);\n        },\n\n        // 五次方的缓动（t^5）\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        quinticIn: function (k) {\n            return k * k * k * k * k;\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        quinticOut: function (k) {\n            return --k * k * k * k * k + 1;\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        quinticInOut: function (k) {\n            if ((k *= 2) < 1) {\n                return 0.5 * k * k * k * k * k;\n            }\n            return 0.5 * ((k -= 2) * k * k * k * k + 2);\n        },\n\n        // 正弦曲线的缓动（sin(t)）\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        sinusoidalIn: function (k) {\n            return 1 - Math.cos(k * Math.PI / 2);\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        sinusoidalOut: function (k) {\n            return Math.sin(k * Math.PI / 2);\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        sinusoidalInOut: function (k) {\n            return 0.5 * (1 - Math.cos(Math.PI * k));\n        },\n\n        // 指数曲线的缓动（2^t）\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        exponentialIn: function (k) {\n            return k === 0 ? 0 : Math.pow(1024, k - 1);\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        exponentialOut: function (k) {\n            return k === 1 ? 1 : 1 - Math.pow(2, -10 * k);\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        exponentialInOut: function (k) {\n            if (k === 0) {\n                return 0;\n            }\n            if (k === 1) {\n                return 1;\n            }\n            if ((k *= 2) < 1) {\n                return 0.5 * Math.pow(1024, k - 1);\n            }\n            return 0.5 * (-Math.pow(2, -10 * (k - 1)) + 2);\n        },\n\n        // 圆形曲线的缓动（sqrt(1-t^2)）\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        circularIn: function (k) {\n            return 1 - Math.sqrt(1 - k * k);\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        circularOut: function (k) {\n            return Math.sqrt(1 - (--k * k));\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        circularInOut: function (k) {\n            if ((k *= 2) < 1) {\n                return -0.5 * (Math.sqrt(1 - k * k) - 1);\n            }\n            return 0.5 * (Math.sqrt(1 - (k -= 2) * k) + 1);\n        },\n\n        // 创建类似于弹簧在停止前来回振荡的动画\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        elasticIn: function (k) {\n            var s;\n            var a = 0.1;\n            var p = 0.4;\n            if (k === 0) {\n                return 0;\n            }\n            if (k === 1) {\n                return 1;\n            }\n            if (!a || a < 1) {\n                a = 1; s = p / 4;\n            }\n            else {\n                s = p * Math.asin(1 / a) / (2 * Math.PI);\n            }\n            return -(a * Math.pow(2, 10 * (k -= 1)) *\n                        Math.sin((k - s) * (2 * Math.PI) / p));\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        elasticOut: function (k) {\n            var s;\n            var a = 0.1;\n            var p = 0.4;\n            if (k === 0) {\n                return 0;\n            }\n            if (k === 1) {\n                return 1;\n            }\n            if (!a || a < 1) {\n                a = 1; s = p / 4;\n            }\n            else {\n                s = p * Math.asin(1 / a) / (2 * Math.PI);\n            }\n            return (a * Math.pow(2, -10 * k) *\n                    Math.sin((k - s) * (2 * Math.PI) / p) + 1);\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        elasticInOut: function (k) {\n            var s;\n            var a = 0.1;\n            var p = 0.4;\n            if (k === 0) {\n                return 0;\n            }\n            if (k === 1) {\n                return 1;\n            }\n            if (!a || a < 1) {\n                a = 1; s = p / 4;\n            }\n            else {\n                s = p * Math.asin(1 / a) / (2 * Math.PI);\n            }\n            if ((k *= 2) < 1) {\n                return -0.5 * (a * Math.pow(2, 10 * (k -= 1))\n                    * Math.sin((k - s) * (2 * Math.PI) / p));\n            }\n            return a * Math.pow(2, -10 * (k -= 1))\n                    * Math.sin((k - s) * (2 * Math.PI) / p) * 0.5 + 1;\n\n        },\n\n        // 在某一动画开始沿指示的路径进行动画处理前稍稍收回该动画的移动\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        backIn: function (k) {\n            var s = 1.70158;\n            return k * k * ((s + 1) * k - s);\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        backOut: function (k) {\n            var s = 1.70158;\n            return --k * k * ((s + 1) * k + s) + 1;\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        backInOut: function (k) {\n            var s = 1.70158 * 1.525;\n            if ((k *= 2) < 1) {\n                return 0.5 * (k * k * ((s + 1) * k - s));\n            }\n            return 0.5 * ((k -= 2) * k * ((s + 1) * k + s) + 2);\n        },\n\n        // 创建弹跳效果\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        bounceIn: function (k) {\n            return 1 - easing.bounceOut(1 - k);\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        bounceOut: function (k) {\n            if (k < (1 / 2.75)) {\n                return 7.5625 * k * k;\n            }\n            else if (k < (2 / 2.75)) {\n                return 7.5625 * (k -= (1.5 / 2.75)) * k + 0.75;\n            }\n            else if (k < (2.5 / 2.75)) {\n                return 7.5625 * (k -= (2.25 / 2.75)) * k + 0.9375;\n            }\n            else {\n                return 7.5625 * (k -= (2.625 / 2.75)) * k + 0.984375;\n            }\n        },\n        /**\n        * @param {number} k\n        * @return {number}\n        */\n        bounceInOut: function (k) {\n            if (k < 0.5) {\n                return easing.bounceIn(k * 2) * 0.5;\n            }\n            return easing.bounceOut(k * 2 - 1) * 0.5 + 0.5;\n        }\n    };\n\n    module.exports = easing;\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/zrender/lib/animation/easing.js\n// module id = 423\n// module chunks = 0 1 2 3 4","\n\n    var normalizeRadian = require('./util').normalizeRadian;\n    var PI2 = Math.PI * 2;\n\n    module.exports = {\n        /**\n         * 圆弧描边包含判断\n         * @param  {number}  cx\n         * @param  {number}  cy\n         * @param  {number}  r\n         * @param  {number}  startAngle\n         * @param  {number}  endAngle\n         * @param  {boolean}  anticlockwise\n         * @param  {number} lineWidth\n         * @param  {number}  x\n         * @param  {number}  y\n         * @return {Boolean}\n         */\n        containStroke: function (\n            cx, cy, r, startAngle, endAngle, anticlockwise,\n            lineWidth, x, y\n        ) {\n\n            if (lineWidth === 0) {\n                return false;\n            }\n            var _l = lineWidth;\n\n            x -= cx;\n            y -= cy;\n            var d = Math.sqrt(x * x + y * y);\n\n            if ((d - _l > r) || (d + _l < r)) {\n                return false;\n            }\n            if (Math.abs(startAngle - endAngle) % PI2 < 1e-4) {\n                // Is a circle\n                return true;\n            }\n            if (anticlockwise) {\n                var tmp = startAngle;\n                startAngle = normalizeRadian(endAngle);\n                endAngle = normalizeRadian(tmp);\n            } else {\n                startAngle = normalizeRadian(startAngle);\n                endAngle = normalizeRadian(endAngle);\n            }\n            if (startAngle > endAngle) {\n                endAngle += PI2;\n            }\n\n            var angle = Math.atan2(y, x);\n            if (angle < 0) {\n                angle += PI2;\n            }\n            return (angle >= startAngle && angle <= endAngle)\n                || (angle + PI2 >= startAngle && angle + PI2 <= endAngle);\n        }\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/zrender/lib/contain/arc.js\n// module id = 424\n// module chunks = 0 1 2 3 4","\n\n    var curve = require('../core/curve');\n\n    module.exports = {\n        /**\n         * 三次贝塞尔曲线描边包含判断\n         * @param  {number}  x0\n         * @param  {number}  y0\n         * @param  {number}  x1\n         * @param  {number}  y1\n         * @param  {number}  x2\n         * @param  {number}  y2\n         * @param  {number}  x3\n         * @param  {number}  y3\n         * @param  {number}  lineWidth\n         * @param  {number}  x\n         * @param  {number}  y\n         * @return {boolean}\n         */\n        containStroke: function(x0, y0, x1, y1, x2, y2, x3, y3, lineWidth, x, y) {\n            if (lineWidth === 0) {\n                return false;\n            }\n            var _l = lineWidth;\n            // Quick reject\n            if (\n                (y > y0 + _l && y > y1 + _l && y > y2 + _l && y > y3 + _l)\n                || (y < y0 - _l && y < y1 - _l && y < y2 - _l && y < y3 - _l)\n                || (x > x0 + _l && x > x1 + _l && x > x2 + _l && x > x3 + _l)\n                || (x < x0 - _l && x < x1 - _l && x < x2 - _l && x < x3 - _l)\n            ) {\n                return false;\n            }\n            var d = curve.cubicProjectPoint(\n                x0, y0, x1, y1, x2, y2, x3, y3,\n                x, y, null\n            );\n            return d <= _l / 2;\n        }\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/zrender/lib/contain/cubic.js\n// module id = 425\n// module chunks = 0 1 2 3 4","\n    module.exports = {\n        /**\n         * 线段包含判断\n         * @param  {number}  x0\n         * @param  {number}  y0\n         * @param  {number}  x1\n         * @param  {number}  y1\n         * @param  {number}  lineWidth\n         * @param  {number}  x\n         * @param  {number}  y\n         * @return {boolean}\n         */\n        containStroke: function (x0, y0, x1, y1, lineWidth, x, y) {\n            if (lineWidth === 0) {\n                return false;\n            }\n            var _l = lineWidth;\n            var _a = 0;\n            var _b = x0;\n            // Quick reject\n            if (\n                (y > y0 + _l && y > y1 + _l)\n                || (y < y0 - _l && y < y1 - _l)\n                || (x > x0 + _l && x > x1 + _l)\n                || (x < x0 - _l && x < x1 - _l)\n            ) {\n                return false;\n            }\n\n            if (x0 !== x1) {\n                _a = (y0 - y1) / (x0 - x1);\n                _b = (x0 * y1 - x1 * y0) / (x0 - x1) ;\n            }\n            else {\n                return Math.abs(x - x0) <= _l / 2;\n            }\n            var tmp = _a * x - y + _b;\n            var _s = tmp * tmp / (_a * _a + 1);\n            return _s <= _l / 2 * _l / 2;\n        }\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/zrender/lib/contain/line.js\n// module id = 426\n// module chunks = 0 1 2 3 4","'use strict';\n\n\n    var CMD = require('../core/PathProxy').CMD;\n    var line = require('./line');\n    var cubic = require('./cubic');\n    var quadratic = require('./quadratic');\n    var arc = require('./arc');\n    var normalizeRadian = require('./util').normalizeRadian;\n    var curve = require('../core/curve');\n\n    var windingLine = require('./windingLine');\n\n    var containStroke = line.containStroke;\n\n    var PI2 = Math.PI * 2;\n\n    var EPSILON = 1e-4;\n\n    function isAroundEqual(a, b) {\n        return Math.abs(a - b) < EPSILON;\n    }\n\n    // 临时数组\n    var roots = [-1, -1, -1];\n    var extrema = [-1, -1];\n\n    function swapExtrema() {\n        var tmp = extrema[0];\n        extrema[0] = extrema[1];\n        extrema[1] = tmp;\n    }\n\n    function windingCubic(x0, y0, x1, y1, x2, y2, x3, y3, x, y) {\n        // Quick reject\n        if (\n            (y > y0 && y > y1 && y > y2 && y > y3)\n            || (y < y0 && y < y1 && y < y2 && y < y3)\n        ) {\n            return 0;\n        }\n        var nRoots = curve.cubicRootAt(y0, y1, y2, y3, y, roots);\n        if (nRoots === 0) {\n            return 0;\n        }\n        else {\n            var w = 0;\n            var nExtrema = -1;\n            var y0_, y1_;\n            for (var i = 0; i < nRoots; i++) {\n                var t = roots[i];\n\n                // Avoid winding error when intersection point is the connect point of two line of polygon\n                var unit = (t === 0 || t === 1) ? 0.5 : 1;\n\n                var x_ = curve.cubicAt(x0, x1, x2, x3, t);\n                if (x_ < x) { // Quick reject\n                    continue;\n                }\n                if (nExtrema < 0) {\n                    nExtrema = curve.cubicExtrema(y0, y1, y2, y3, extrema);\n                    if (extrema[1] < extrema[0] && nExtrema > 1) {\n                        swapExtrema();\n                    }\n                    y0_ = curve.cubicAt(y0, y1, y2, y3, extrema[0]);\n                    if (nExtrema > 1) {\n                        y1_ = curve.cubicAt(y0, y1, y2, y3, extrema[1]);\n                    }\n                }\n                if (nExtrema == 2) {\n                    // 分成三段单调函数\n                    if (t < extrema[0]) {\n                        w += y0_ < y0 ? unit : -unit;\n                    }\n                    else if (t < extrema[1]) {\n                        w += y1_ < y0_ ? unit : -unit;\n                    }\n                    else {\n                        w += y3 < y1_ ? unit : -unit;\n                    }\n                }\n                else {\n                    // 分成两段单调函数\n                    if (t < extrema[0]) {\n                        w += y0_ < y0 ? unit : -unit;\n                    }\n                    else {\n                        w += y3 < y0_ ? unit : -unit;\n                    }\n                }\n            }\n            return w;\n        }\n    }\n\n    function windingQuadratic(x0, y0, x1, y1, x2, y2, x, y) {\n        // Quick reject\n        if (\n            (y > y0 && y > y1 && y > y2)\n            || (y < y0 && y < y1 && y < y2)\n        ) {\n            return 0;\n        }\n        var nRoots = curve.quadraticRootAt(y0, y1, y2, y, roots);\n        if (nRoots === 0) {\n            return 0;\n        }\n        else {\n            var t = curve.quadraticExtremum(y0, y1, y2);\n            if (t >= 0 && t <= 1) {\n                var w = 0;\n                var y_ = curve.quadraticAt(y0, y1, y2, t);\n                for (var i = 0; i < nRoots; i++) {\n                    // Remove one endpoint.\n                    var unit = (roots[i] === 0 || roots[i] === 1) ? 0.5 : 1;\n\n                    var x_ = curve.quadraticAt(x0, x1, x2, roots[i]);\n                    if (x_ < x) {   // Quick reject\n                        continue;\n                    }\n                    if (roots[i] < t) {\n                        w += y_ < y0 ? unit : -unit;\n                    }\n                    else {\n                        w += y2 < y_ ? unit : -unit;\n                    }\n                }\n                return w;\n            }\n            else {\n                // Remove one endpoint.\n                var unit = (roots[0] === 0 || roots[0] === 1) ? 0.5 : 1;\n\n                var x_ = curve.quadraticAt(x0, x1, x2, roots[0]);\n                if (x_ < x) {   // Quick reject\n                    return 0;\n                }\n                return y2 < y0 ? unit : -unit;\n            }\n        }\n    }\n\n    // TODO\n    // Arc 旋转\n    function windingArc(\n        cx, cy, r, startAngle, endAngle, anticlockwise, x, y\n    ) {\n        y -= cy;\n        if (y > r || y < -r) {\n            return 0;\n        }\n        var tmp = Math.sqrt(r * r - y * y);\n        roots[0] = -tmp;\n        roots[1] = tmp;\n\n        var diff = Math.abs(startAngle - endAngle);\n        if (diff < 1e-4) {\n            return 0;\n        }\n        if (diff % PI2 < 1e-4) {\n            // Is a circle\n            startAngle = 0;\n            endAngle = PI2;\n            var dir = anticlockwise ? 1 : -1;\n            if (x >= roots[0] + cx && x <= roots[1] + cx) {\n                return dir;\n            } else {\n                return 0;\n            }\n        }\n\n        if (anticlockwise) {\n            var tmp = startAngle;\n            startAngle = normalizeRadian(endAngle);\n            endAngle = normalizeRadian(tmp);\n        }\n        else {\n            startAngle = normalizeRadian(startAngle);\n            endAngle = normalizeRadian(endAngle);\n        }\n        if (startAngle > endAngle) {\n            endAngle += PI2;\n        }\n\n        var w = 0;\n        for (var i = 0; i < 2; i++) {\n            var x_ = roots[i];\n            if (x_ + cx > x) {\n                var angle = Math.atan2(y, x_);\n                var dir = anticlockwise ? 1 : -1;\n                if (angle < 0) {\n                    angle = PI2 + angle;\n                }\n                if (\n                    (angle >= startAngle && angle <= endAngle)\n                    || (angle + PI2 >= startAngle && angle + PI2 <= endAngle)\n                ) {\n                    if (angle > Math.PI / 2 && angle < Math.PI * 1.5) {\n                        dir = -dir;\n                    }\n                    w += dir;\n                }\n            }\n        }\n        return w;\n    }\n\n    function containPath(data, lineWidth, isStroke, x, y) {\n        var w = 0;\n        var xi = 0;\n        var yi = 0;\n        var x0 = 0;\n        var y0 = 0;\n\n        for (var i = 0; i < data.length;) {\n            var cmd = data[i++];\n            // Begin a new subpath\n            if (cmd === CMD.M && i > 1) {\n                // Close previous subpath\n                if (!isStroke) {\n                    w += windingLine(xi, yi, x0, y0, x, y);\n                }\n                // 如果被任何一个 subpath 包含\n                // if (w !== 0) {\n                //     return true;\n                // }\n            }\n\n            if (i == 1) {\n                // 如果第一个命令是 L, C, Q\n                // 则 previous point 同绘制命令的第一个 point\n                //\n                // 第一个命令为 Arc 的情况下会在后面特殊处理\n                xi = data[i];\n                yi = data[i + 1];\n\n                x0 = xi;\n                y0 = yi;\n            }\n\n            switch (cmd) {\n                case CMD.M:\n                    // moveTo 命令重新创建一个新的 subpath, 并且更新新的起点\n                    // 在 closePath 的时候使用\n                    x0 = data[i++];\n                    y0 = data[i++];\n                    xi = x0;\n                    yi = y0;\n                    break;\n                case CMD.L:\n                    if (isStroke) {\n                        if (containStroke(xi, yi, data[i], data[i + 1], lineWidth, x, y)) {\n                            return true;\n                        }\n                    }\n                    else {\n                        // NOTE 在第一个命令为 L, C, Q 的时候会计算出 NaN\n                        w += windingLine(xi, yi, data[i], data[i + 1], x, y) || 0;\n                    }\n                    xi = data[i++];\n                    yi = data[i++];\n                    break;\n                case CMD.C:\n                    if (isStroke) {\n                        if (cubic.containStroke(xi, yi,\n                            data[i++], data[i++], data[i++], data[i++], data[i], data[i + 1],\n                            lineWidth, x, y\n                        )) {\n                            return true;\n                        }\n                    }\n                    else {\n                        w += windingCubic(\n                            xi, yi,\n                            data[i++], data[i++], data[i++], data[i++], data[i], data[i + 1],\n                            x, y\n                        ) || 0;\n                    }\n                    xi = data[i++];\n                    yi = data[i++];\n                    break;\n                case CMD.Q:\n                    if (isStroke) {\n                        if (quadratic.containStroke(xi, yi,\n                            data[i++], data[i++], data[i], data[i + 1],\n                            lineWidth, x, y\n                        )) {\n                            return true;\n                        }\n                    }\n                    else {\n                        w += windingQuadratic(\n                            xi, yi,\n                            data[i++], data[i++], data[i], data[i + 1],\n                            x, y\n                        ) || 0;\n                    }\n                    xi = data[i++];\n                    yi = data[i++];\n                    break;\n                case CMD.A:\n                    // TODO Arc 判断的开销比较大\n                    var cx = data[i++];\n                    var cy = data[i++];\n                    var rx = data[i++];\n                    var ry = data[i++];\n                    var theta = data[i++];\n                    var dTheta = data[i++];\n                    // TODO Arc 旋转\n                    var psi = data[i++];\n                    var anticlockwise = 1 - data[i++];\n                    var x1 = Math.cos(theta) * rx + cx;\n                    var y1 = Math.sin(theta) * ry + cy;\n                    // 不是直接使用 arc 命令\n                    if (i > 1) {\n                        w += windingLine(xi, yi, x1, y1, x, y);\n                    }\n                    else {\n                        // 第一个命令起点还未定义\n                        x0 = x1;\n                        y0 = y1;\n                    }\n                    // zr 使用scale来模拟椭圆, 这里也对x做一定的缩放\n                    var _x = (x - cx) * ry / rx + cx;\n                    if (isStroke) {\n                        if (arc.containStroke(\n                            cx, cy, ry, theta, theta + dTheta, anticlockwise,\n                            lineWidth, _x, y\n                        )) {\n                            return true;\n                        }\n                    }\n                    else {\n                        w += windingArc(\n                            cx, cy, ry, theta, theta + dTheta, anticlockwise,\n                            _x, y\n                        );\n                    }\n                    xi = Math.cos(theta + dTheta) * rx + cx;\n                    yi = Math.sin(theta + dTheta) * ry + cy;\n                    break;\n                case CMD.R:\n                    x0 = xi = data[i++];\n                    y0 = yi = data[i++];\n                    var width = data[i++];\n                    var height = data[i++];\n                    var x1 = x0 + width;\n                    var y1 = y0 + height;\n                    if (isStroke) {\n                        if (containStroke(x0, y0, x1, y0, lineWidth, x, y)\n                          || containStroke(x1, y0, x1, y1, lineWidth, x, y)\n                          || containStroke(x1, y1, x0, y1, lineWidth, x, y)\n                          || containStroke(x0, y1, x0, y0, lineWidth, x, y)\n                        ) {\n                            return true;\n                        }\n                    }\n                    else {\n                        // FIXME Clockwise ?\n                        w += windingLine(x1, y0, x1, y1, x, y);\n                        w += windingLine(x0, y1, x0, y0, x, y);\n                    }\n                    break;\n                case CMD.Z:\n                    if (isStroke) {\n                        if (containStroke(\n                            xi, yi, x0, y0, lineWidth, x, y\n                        )) {\n                            return true;\n                        }\n                    }\n                    else {\n                        // Close a subpath\n                        w += windingLine(xi, yi, x0, y0, x, y);\n                        // 如果被任何一个 subpath 包含\n                        // FIXME subpaths may overlap\n                        // if (w !== 0) {\n                        //     return true;\n                        // }\n                    }\n                    xi = x0;\n                    yi = y0;\n                    break;\n            }\n        }\n        if (!isStroke && !isAroundEqual(yi, y0)) {\n            w += windingLine(xi, yi, x0, y0, x, y) || 0;\n        }\n        return w !== 0;\n    }\n\n    module.exports = {\n        contain: function (pathData, x, y) {\n            return containPath(pathData, 0, false, x, y);\n        },\n\n        containStroke: function (pathData, lineWidth, x, y) {\n            return containPath(pathData, lineWidth, true, x, y);\n        }\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/zrender/lib/contain/path.js\n// module id = 427\n// module chunks = 0 1 2 3 4","\n\n    var curve = require('../core/curve');\n\n    module.exports = {\n        /**\n         * 二次贝塞尔曲线描边包含判断\n         * @param  {number}  x0\n         * @param  {number}  y0\n         * @param  {number}  x1\n         * @param  {number}  y1\n         * @param  {number}  x2\n         * @param  {number}  y2\n         * @param  {number}  lineWidth\n         * @param  {number}  x\n         * @param  {number}  y\n         * @return {boolean}\n         */\n        containStroke: function (x0, y0, x1, y1, x2, y2, lineWidth, x, y) {\n            if (lineWidth === 0) {\n                return false;\n            }\n            var _l = lineWidth;\n            // Quick reject\n            if (\n                (y > y0 + _l && y > y1 + _l && y > y2 + _l)\n                || (y < y0 - _l && y < y1 - _l && y < y2 - _l)\n                || (x > x0 + _l && x > x1 + _l && x > x2 + _l)\n                || (x < x0 - _l && x < x1 - _l && x < x2 - _l)\n            ) {\n                return false;\n            }\n            var d = curve.quadraticProjectPoint(\n                x0, y0, x1, y1, x2, y2,\n                x, y, null\n            );\n            return d <= _l / 2;\n        }\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/zrender/lib/contain/quadratic.js\n// module id = 428\n// module chunks = 0 1 2 3 4","\n    module.exports = function windingLine(x0, y0, x1, y1, x, y) {\n        if ((y > y0 && y > y1) || (y < y0 && y < y1)) {\n            return 0;\n        }\n        // Ignore horizontal line\n        if (y1 === y0) {\n            return 0;\n        }\n        var dir = y1 < y0 ? 1 : -1;\n        var t = (y - y0) / (y1 - y0);\n\n        // Avoid winding error when intersection point is the connect point of two line of polygon\n        if (t === 1 || t === 0) {\n            dir = y1 < y0 ? 0.5 : -0.5;\n        }\n\n        var x_ = t * (x1 - x0) + x0;\n\n        return x_ > x ? dir : 0;\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/zrender/lib/contain/windingLine.js\n// module id = 429\n// module chunks = 0 1 2 3 4","'use strict';\n/**\n * Only implements needed gestures for mobile.\n */\n\n\n    var eventUtil = require('./event');\n\n    var GestureMgr = function () {\n\n        /**\n         * @private\n         * @type {Array.<Object>}\n         */\n        this._track = [];\n    };\n\n    GestureMgr.prototype = {\n\n        constructor: GestureMgr,\n\n        recognize: function (event, target, root) {\n            this._doTrack(event, target, root);\n            return this._recognize(event);\n        },\n\n        clear: function () {\n            this._track.length = 0;\n            return this;\n        },\n\n        _doTrack: function (event, target, root) {\n            var touches = event.touches;\n\n            if (!touches) {\n                return;\n            }\n\n            var trackItem = {\n                points: [],\n                touches: [],\n                target: target,\n                event: event\n            };\n\n            for (var i = 0, len = touches.length; i < len; i++) {\n                var touch = touches[i];\n                var pos = eventUtil.clientToLocal(root, touch, {});\n                trackItem.points.push([pos.zrX, pos.zrY]);\n                trackItem.touches.push(touch);\n            }\n\n            this._track.push(trackItem);\n        },\n\n        _recognize: function (event) {\n            for (var eventName in recognizers) {\n                if (recognizers.hasOwnProperty(eventName)) {\n                    var gestureInfo = recognizers[eventName](this._track, event);\n                    if (gestureInfo) {\n                        return gestureInfo;\n                    }\n                }\n            }\n        }\n    };\n\n    function dist(pointPair) {\n        var dx = pointPair[1][0] - pointPair[0][0];\n        var dy = pointPair[1][1] - pointPair[0][1];\n\n        return Math.sqrt(dx * dx + dy * dy);\n    }\n\n    function center(pointPair) {\n        return [\n            (pointPair[0][0] + pointPair[1][0]) / 2,\n            (pointPair[0][1] + pointPair[1][1]) / 2\n        ];\n    }\n\n    var recognizers = {\n\n        pinch: function (track, event) {\n            var trackLen = track.length;\n\n            if (!trackLen) {\n                return;\n            }\n\n            var pinchEnd = (track[trackLen - 1] || {}).points;\n            var pinchPre = (track[trackLen - 2] || {}).points || pinchEnd;\n\n            if (pinchPre\n                && pinchPre.length > 1\n                && pinchEnd\n                && pinchEnd.length > 1\n            ) {\n                var pinchScale = dist(pinchEnd) / dist(pinchPre);\n                !isFinite(pinchScale) && (pinchScale = 1);\n\n                event.pinchScale = pinchScale;\n\n                var pinchCenter = center(pinchEnd);\n                event.pinchX = pinchCenter[0];\n                event.pinchY = pinchCenter[1];\n\n                return {\n                    type: 'pinch',\n                    target: track[0].target,\n                    event: event\n                };\n            }\n        }\n\n        // Only pinch currently.\n    };\n\n    module.exports = GestureMgr;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/zrender/lib/core/GestureMgr.js\n// module id = 430\n// module chunks = 0 1 2 3 4","/**\n * @author Yi Shen(https://github.com/pissang)\n */\n\n\n    var vec2 = require('./vector');\n    var curve = require('./curve');\n\n    var bbox = {};\n    var mathMin = Math.min;\n    var mathMax = Math.max;\n    var mathSin = Math.sin;\n    var mathCos = Math.cos;\n\n    var start = vec2.create();\n    var end = vec2.create();\n    var extremity = vec2.create();\n\n    var PI2 = Math.PI * 2;\n    /**\n     * 从顶点数组中计算出最小包围盒，写入`min`和`max`中\n     * @module zrender/core/bbox\n     * @param {Array<Object>} points 顶点数组\n     * @param {number} min\n     * @param {number} max\n     */\n    bbox.fromPoints = function(points, min, max) {\n        if (points.length === 0) {\n            return;\n        }\n        var p = points[0];\n        var left = p[0];\n        var right = p[0];\n        var top = p[1];\n        var bottom = p[1];\n        var i;\n\n        for (i = 1; i < points.length; i++) {\n            p = points[i];\n            left = mathMin(left, p[0]);\n            right = mathMax(right, p[0]);\n            top = mathMin(top, p[1]);\n            bottom = mathMax(bottom, p[1]);\n        }\n\n        min[0] = left;\n        min[1] = top;\n        max[0] = right;\n        max[1] = bottom;\n    };\n\n    /**\n     * @memberOf module:zrender/core/bbox\n     * @param {number} x0\n     * @param {number} y0\n     * @param {number} x1\n     * @param {number} y1\n     * @param {Array.<number>} min\n     * @param {Array.<number>} max\n     */\n    bbox.fromLine = function (x0, y0, x1, y1, min, max) {\n        min[0] = mathMin(x0, x1);\n        min[1] = mathMin(y0, y1);\n        max[0] = mathMax(x0, x1);\n        max[1] = mathMax(y0, y1);\n    };\n\n    var xDim = [];\n    var yDim = [];\n    /**\n     * 从三阶贝塞尔曲线(p0, p1, p2, p3)中计算出最小包围盒，写入`min`和`max`中\n     * @memberOf module:zrender/core/bbox\n     * @param {number} x0\n     * @param {number} y0\n     * @param {number} x1\n     * @param {number} y1\n     * @param {number} x2\n     * @param {number} y2\n     * @param {number} x3\n     * @param {number} y3\n     * @param {Array.<number>} min\n     * @param {Array.<number>} max\n     */\n    bbox.fromCubic = function(\n        x0, y0, x1, y1, x2, y2, x3, y3, min, max\n    ) {\n        var cubicExtrema = curve.cubicExtrema;\n        var cubicAt = curve.cubicAt;\n        var i;\n        var n = cubicExtrema(x0, x1, x2, x3, xDim);\n        min[0] = Infinity;\n        min[1] = Infinity;\n        max[0] = -Infinity;\n        max[1] = -Infinity;\n\n        for (i = 0; i < n; i++) {\n            var x = cubicAt(x0, x1, x2, x3, xDim[i]);\n            min[0] = mathMin(x, min[0]);\n            max[0] = mathMax(x, max[0]);\n        }\n        n = cubicExtrema(y0, y1, y2, y3, yDim);\n        for (i = 0; i < n; i++) {\n            var y = cubicAt(y0, y1, y2, y3, yDim[i]);\n            min[1] = mathMin(y, min[1]);\n            max[1] = mathMax(y, max[1]);\n        }\n\n        min[0] = mathMin(x0, min[0]);\n        max[0] = mathMax(x0, max[0]);\n        min[0] = mathMin(x3, min[0]);\n        max[0] = mathMax(x3, max[0]);\n\n        min[1] = mathMin(y0, min[1]);\n        max[1] = mathMax(y0, max[1]);\n        min[1] = mathMin(y3, min[1]);\n        max[1] = mathMax(y3, max[1]);\n    };\n\n    /**\n     * 从二阶贝塞尔曲线(p0, p1, p2)中计算出最小包围盒，写入`min`和`max`中\n     * @memberOf module:zrender/core/bbox\n     * @param {number} x0\n     * @param {number} y0\n     * @param {number} x1\n     * @param {number} y1\n     * @param {number} x2\n     * @param {number} y2\n     * @param {Array.<number>} min\n     * @param {Array.<number>} max\n     */\n    bbox.fromQuadratic = function(x0, y0, x1, y1, x2, y2, min, max) {\n        var quadraticExtremum = curve.quadraticExtremum;\n        var quadraticAt = curve.quadraticAt;\n        // Find extremities, where derivative in x dim or y dim is zero\n        var tx =\n            mathMax(\n                mathMin(quadraticExtremum(x0, x1, x2), 1), 0\n            );\n        var ty =\n            mathMax(\n                mathMin(quadraticExtremum(y0, y1, y2), 1), 0\n            );\n\n        var x = quadraticAt(x0, x1, x2, tx);\n        var y = quadraticAt(y0, y1, y2, ty);\n\n        min[0] = mathMin(x0, x2, x);\n        min[1] = mathMin(y0, y2, y);\n        max[0] = mathMax(x0, x2, x);\n        max[1] = mathMax(y0, y2, y);\n    };\n\n    /**\n     * 从圆弧中计算出最小包围盒，写入`min`和`max`中\n     * @method\n     * @memberOf module:zrender/core/bbox\n     * @param {number} x\n     * @param {number} y\n     * @param {number} rx\n     * @param {number} ry\n     * @param {number} startAngle\n     * @param {number} endAngle\n     * @param {number} anticlockwise\n     * @param {Array.<number>} min\n     * @param {Array.<number>} max\n     */\n    bbox.fromArc = function (\n        x, y, rx, ry, startAngle, endAngle, anticlockwise, min, max\n    ) {\n        var vec2Min = vec2.min;\n        var vec2Max = vec2.max;\n\n        var diff = Math.abs(startAngle - endAngle);\n\n\n        if (diff % PI2 < 1e-4 && diff > 1e-4) {\n            // Is a circle\n            min[0] = x - rx;\n            min[1] = y - ry;\n            max[0] = x + rx;\n            max[1] = y + ry;\n            return;\n        }\n\n        start[0] = mathCos(startAngle) * rx + x;\n        start[1] = mathSin(startAngle) * ry + y;\n\n        end[0] = mathCos(endAngle) * rx + x;\n        end[1] = mathSin(endAngle) * ry + y;\n\n        vec2Min(min, start, end);\n        vec2Max(max, start, end);\n\n        // Thresh to [0, Math.PI * 2]\n        startAngle = startAngle % (PI2);\n        if (startAngle < 0) {\n            startAngle = startAngle + PI2;\n        }\n        endAngle = endAngle % (PI2);\n        if (endAngle < 0) {\n            endAngle = endAngle + PI2;\n        }\n\n        if (startAngle > endAngle && !anticlockwise) {\n            endAngle += PI2;\n        }\n        else if (startAngle < endAngle && anticlockwise) {\n            startAngle += PI2;\n        }\n        if (anticlockwise) {\n            var tmp = endAngle;\n            endAngle = startAngle;\n            startAngle = tmp;\n        }\n\n        // var number = 0;\n        // var step = (anticlockwise ? -Math.PI : Math.PI) / 2;\n        for (var angle = 0; angle < endAngle; angle += Math.PI / 2) {\n            if (angle > startAngle) {\n                extremity[0] = mathCos(angle) * rx + x;\n                extremity[1] = mathSin(angle) * ry + y;\n\n                vec2Min(min, extremity, min);\n                vec2Max(max, extremity, max);\n            }\n        }\n    };\n\n    module.exports = bbox;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/zrender/lib/core/bbox.js\n// module id = 431\n// module chunks = 0 1 2 3 4","\n\n    var eventTool = require('../core/event');\n    var zrUtil = require('../core/util');\n    var Eventful = require('../mixin/Eventful');\n    var env = require('../core/env');\n    var GestureMgr = require('../core/GestureMgr');\n\n    var addEventListener = eventTool.addEventListener;\n    var removeEventListener = eventTool.removeEventListener;\n    var normalizeEvent = eventTool.normalizeEvent;\n\n    var TOUCH_CLICK_DELAY = 300;\n\n    var mouseHandlerNames = [\n        'click', 'dblclick', 'mousewheel', 'mouseout',\n        'mouseup', 'mousedown', 'mousemove', 'contextmenu'\n    ];\n\n    var touchHandlerNames = [\n        'touchstart', 'touchend', 'touchmove'\n    ];\n\n    var pointerEventNames = {\n        pointerdown: 1, pointerup: 1, pointermove: 1, pointerout: 1\n    };\n\n    var pointerHandlerNames = zrUtil.map(mouseHandlerNames, function (name) {\n        var nm = name.replace('mouse', 'pointer');\n        return pointerEventNames[nm] ? nm : name;\n    });\n\n    function eventNameFix(name) {\n        return (name === 'mousewheel' && env.browser.firefox) ? 'DOMMouseScroll' : name;\n    }\n\n    function processGesture(proxy, event, stage) {\n        var gestureMgr = proxy._gestureMgr;\n\n        stage === 'start' && gestureMgr.clear();\n\n        var gestureInfo = gestureMgr.recognize(\n            event,\n            proxy.handler.findHover(event.zrX, event.zrY, null).target,\n            proxy.dom\n        );\n\n        stage === 'end' && gestureMgr.clear();\n\n        // Do not do any preventDefault here. Upper application do that if necessary.\n        if (gestureInfo) {\n            var type = gestureInfo.type;\n            event.gestureEvent = type;\n\n            proxy.handler.dispatchToElement({target: gestureInfo.target}, type, gestureInfo.event);\n        }\n    }\n\n    // function onMSGestureChange(proxy, event) {\n    //     if (event.translationX || event.translationY) {\n    //         // mousemove is carried by MSGesture to reduce the sensitivity.\n    //         proxy.handler.dispatchToElement(event.target, 'mousemove', event);\n    //     }\n    //     if (event.scale !== 1) {\n    //         event.pinchX = event.offsetX;\n    //         event.pinchY = event.offsetY;\n    //         event.pinchScale = event.scale;\n    //         proxy.handler.dispatchToElement(event.target, 'pinch', event);\n    //     }\n    // }\n\n    /**\n     * Prevent mouse event from being dispatched after Touch Events action\n     * @see <https://github.com/deltakosh/handjs/blob/master/src/hand.base.js>\n     * 1. Mobile browsers dispatch mouse events 300ms after touchend.\n     * 2. Chrome for Android dispatch mousedown for long-touch about 650ms\n     * Result: Blocking Mouse Events for 700ms.\n     */\n    function setTouchTimer(instance) {\n        instance._touching = true;\n        clearTimeout(instance._touchTimer);\n        instance._touchTimer = setTimeout(function () {\n            instance._touching = false;\n        }, 700);\n    }\n\n\n    var domHandlers = {\n        /**\n         * Mouse move handler\n         * @inner\n         * @param {Event} event\n         */\n        mousemove: function (event) {\n            event = normalizeEvent(this.dom, event);\n\n            this.trigger('mousemove', event);\n        },\n\n        /**\n         * Mouse out handler\n         * @inner\n         * @param {Event} event\n         */\n        mouseout: function (event) {\n            event = normalizeEvent(this.dom, event);\n\n            var element = event.toElement || event.relatedTarget;\n            if (element != this.dom) {\n                while (element && element.nodeType != 9) {\n                    // 忽略包含在root中的dom引起的mouseOut\n                    if (element === this.dom) {\n                        return;\n                    }\n\n                    element = element.parentNode;\n                }\n            }\n\n            this.trigger('mouseout', event);\n        },\n\n        /**\n         * Touch开始响应函数\n         * @inner\n         * @param {Event} event\n         */\n        touchstart: function (event) {\n            // Default mouse behaviour should not be disabled here.\n            // For example, page may needs to be slided.\n            event = normalizeEvent(this.dom, event);\n\n            // Mark touch, which is useful in distinguish touch and\n            // mouse event in upper applicatoin.\n            event.zrByTouch = true;\n\n            this._lastTouchMoment = new Date();\n\n            processGesture(this, event, 'start');\n\n            // In touch device, trigger `mousemove`(`mouseover`) should\n            // be triggered, and must before `mousedown` triggered.\n            domHandlers.mousemove.call(this, event);\n\n            domHandlers.mousedown.call(this, event);\n\n            setTouchTimer(this);\n        },\n\n        /**\n         * Touch移动响应函数\n         * @inner\n         * @param {Event} event\n         */\n        touchmove: function (event) {\n\n            event = normalizeEvent(this.dom, event);\n\n            // Mark touch, which is useful in distinguish touch and\n            // mouse event in upper applicatoin.\n            event.zrByTouch = true;\n\n            processGesture(this, event, 'change');\n\n            // Mouse move should always be triggered no matter whether\n            // there is gestrue event, because mouse move and pinch may\n            // be used at the same time.\n            domHandlers.mousemove.call(this, event);\n\n            setTouchTimer(this);\n        },\n\n        /**\n         * Touch结束响应函数\n         * @inner\n         * @param {Event} event\n         */\n        touchend: function (event) {\n\n            event = normalizeEvent(this.dom, event);\n\n            // Mark touch, which is useful in distinguish touch and\n            // mouse event in upper applicatoin.\n            event.zrByTouch = true;\n\n            processGesture(this, event, 'end');\n\n            domHandlers.mouseup.call(this, event);\n\n            // Do not trigger `mouseout` here, in spite of `mousemove`(`mouseover`) is\n            // triggered in `touchstart`. This seems to be illogical, but by this mechanism,\n            // we can conveniently implement \"hover style\" in both PC and touch device just\n            // by listening to `mouseover` to add \"hover style\" and listening to `mouseout`\n            // to remove \"hover style\" on an element, without any additional code for\n            // compatibility. (`mouseout` will not be triggered in `touchend`, so \"hover\n            // style\" will remain for user view)\n\n            // click event should always be triggered no matter whether\n            // there is gestrue event. System click can not be prevented.\n            if (+new Date() - this._lastTouchMoment < TOUCH_CLICK_DELAY) {\n                domHandlers.click.call(this, event);\n            }\n\n            setTouchTimer(this);\n        },\n\n        pointerdown: function (event) {\n            domHandlers.mousedown.call(this, event);\n\n            // if (useMSGuesture(this, event)) {\n            //     this._msGesture.addPointer(event.pointerId);\n            // }\n        },\n\n        pointermove: function (event) {\n            // FIXME\n            // pointermove is so sensitive that it always triggered when\n            // tap(click) on touch screen, which affect some judgement in\n            // upper application. So, we dont support mousemove on MS touch\n            // device yet.\n            if (!isPointerFromTouch(event)) {\n                domHandlers.mousemove.call(this, event);\n            }\n        },\n\n        pointerup: function (event) {\n            domHandlers.mouseup.call(this, event);\n        },\n\n        pointerout: function (event) {\n            // pointerout will be triggered when tap on touch screen\n            // (IE11+/Edge on MS Surface) after click event triggered,\n            // which is inconsistent with the mousout behavior we defined\n            // in touchend. So we unify them.\n            // (check domHandlers.touchend for detailed explanation)\n            if (!isPointerFromTouch(event)) {\n                domHandlers.mouseout.call(this, event);\n            }\n        }\n    };\n\n    function isPointerFromTouch(event) {\n        var pointerType = event.pointerType;\n        return pointerType === 'pen' || pointerType === 'touch';\n    }\n\n    // function useMSGuesture(handlerProxy, event) {\n    //     return isPointerFromTouch(event) && !!handlerProxy._msGesture;\n    // }\n\n    // Common handlers\n    zrUtil.each(['click', 'mousedown', 'mouseup', 'mousewheel', 'dblclick', 'contextmenu'], function (name) {\n        domHandlers[name] = function (event) {\n            event = normalizeEvent(this.dom, event);\n            this.trigger(name, event);\n        };\n    });\n\n    /**\n     * 为控制类实例初始化dom 事件处理函数\n     *\n     * @inner\n     * @param {module:zrender/Handler} instance 控制类实例\n     */\n    function initDomHandler(instance) {\n        zrUtil.each(touchHandlerNames, function (name) {\n            instance._handlers[name] = zrUtil.bind(domHandlers[name], instance);\n        });\n\n        zrUtil.each(pointerHandlerNames, function (name) {\n            instance._handlers[name] = zrUtil.bind(domHandlers[name], instance);\n        });\n\n        zrUtil.each(mouseHandlerNames, function (name) {\n            instance._handlers[name] = makeMouseHandler(domHandlers[name], instance);\n        });\n\n        function makeMouseHandler(fn, instance) {\n            return function () {\n                if (instance._touching) {\n                    return;\n                }\n                return fn.apply(instance, arguments);\n            };\n        }\n    }\n\n\n    function HandlerDomProxy(dom) {\n        Eventful.call(this);\n\n        this.dom = dom;\n\n        /**\n         * @private\n         * @type {boolean}\n         */\n        this._touching = false;\n\n        /**\n         * @private\n         * @type {number}\n         */\n        this._touchTimer;\n\n        /**\n         * @private\n         * @type {module:zrender/core/GestureMgr}\n         */\n        this._gestureMgr = new GestureMgr();\n\n        this._handlers = {};\n\n        initDomHandler(this);\n\n        if (env.pointerEventsSupported) { // Only IE11+/Edge\n            // 1. On devices that both enable touch and mouse (e.g., MS Surface and lenovo X240),\n            // IE11+/Edge do not trigger touch event, but trigger pointer event and mouse event\n            // at the same time.\n            // 2. On MS Surface, it probablely only trigger mousedown but no mouseup when tap on\n            // screen, which do not occurs in pointer event.\n            // So we use pointer event to both detect touch gesture and mouse behavior.\n            mountHandlers(pointerHandlerNames, this);\n\n            // FIXME\n            // Note: MS Gesture require CSS touch-action set. But touch-action is not reliable,\n            // which does not prevent defuault behavior occasionally (which may cause view port\n            // zoomed in but use can not zoom it back). And event.preventDefault() does not work.\n            // So we have to not to use MSGesture and not to support touchmove and pinch on MS\n            // touch screen. And we only support click behavior on MS touch screen now.\n\n            // MS Gesture Event is only supported on IE11+/Edge and on Windows 8+.\n            // We dont support touch on IE on win7.\n            // See <https://msdn.microsoft.com/en-us/library/dn433243(v=vs.85).aspx>\n            // if (typeof MSGesture === 'function') {\n            //     (this._msGesture = new MSGesture()).target = dom; // jshint ignore:line\n            //     dom.addEventListener('MSGestureChange', onMSGestureChange);\n            // }\n        }\n        else {\n            if (env.touchEventsSupported) {\n                mountHandlers(touchHandlerNames, this);\n                // Handler of 'mouseout' event is needed in touch mode, which will be mounted below.\n                // addEventListener(root, 'mouseout', this._mouseoutHandler);\n            }\n\n            // 1. Considering some devices that both enable touch and mouse event (like on MS Surface\n            // and lenovo X240, @see #2350), we make mouse event be always listened, otherwise\n            // mouse event can not be handle in those devices.\n            // 2. On MS Surface, Chrome will trigger both touch event and mouse event. How to prevent\n            // mouseevent after touch event triggered, see `setTouchTimer`.\n            mountHandlers(mouseHandlerNames, this);\n        }\n\n        function mountHandlers(handlerNames, instance) {\n            zrUtil.each(handlerNames, function (name) {\n                addEventListener(dom, eventNameFix(name), instance._handlers[name]);\n            }, instance);\n        }\n    }\n\n    var handlerDomProxyProto = HandlerDomProxy.prototype;\n    handlerDomProxyProto.dispose = function () {\n        var handlerNames = mouseHandlerNames.concat(touchHandlerNames);\n\n        for (var i = 0; i < handlerNames.length; i++) {\n            var name = handlerNames[i];\n            removeEventListener(this.dom, eventNameFix(name), this._handlers[name]);\n        }\n    };\n\n    handlerDomProxyProto.setCursor = function (cursorStyle) {\n        this.dom.style.cursor = cursorStyle || 'default';\n    };\n\n    zrUtil.mixin(HandlerDomProxy, Eventful);\n\n    module.exports = HandlerDomProxy;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/zrender/lib/dom/HandlerProxy.js\n// module id = 432\n// module chunks = 0 1 2 3 4","// CompoundPath to improve performance\n\n\n    var Path = require('./Path');\n\n    module.exports = Path.extend({\n\n        type: 'compound',\n\n        shape: {\n\n            paths: null\n        },\n\n        _updatePathDirty: function () {\n            var dirtyPath = this.__dirtyPath;\n            var paths = this.shape.paths;\n            for (var i = 0; i < paths.length; i++) {\n                // Mark as dirty if any subpath is dirty\n                dirtyPath = dirtyPath || paths[i].__dirtyPath;\n            }\n            this.__dirtyPath = dirtyPath;\n            this.__dirty = this.__dirty || dirtyPath;\n        },\n\n        beforeBrush: function () {\n            this._updatePathDirty();\n            var paths = this.shape.paths || [];\n            var scale = this.getGlobalScale();\n            // Update path scale\n            for (var i = 0; i < paths.length; i++) {\n                if (!paths[i].path) {\n                    paths[i].createPathProxy();\n                }\n                paths[i].path.setScale(scale[0], scale[1]);\n            }\n        },\n\n        buildPath: function (ctx, shape) {\n            var paths = shape.paths || [];\n            for (var i = 0; i < paths.length; i++) {\n                paths[i].buildPath(ctx, paths[i].shape, true);\n            }\n        },\n\n        afterBrush: function () {\n            var paths = this.shape.paths;\n            for (var i = 0; i < paths.length; i++) {\n                paths[i].__dirtyPath = false;\n            }\n        },\n\n        getBoundingRect: function () {\n            this._updatePathDirty();\n            return Path.prototype.getBoundingRect.call(this);\n        }\n    });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/zrender/lib/graphic/CompoundPath.js\n// module id = 433\n// module chunks = 0 1 2 3 4","'use strict';\n\n\n    var zrUtil = require('../core/util');\n\n    var Gradient = require('./Gradient');\n\n    /**\n     * x, y, r are all percent from 0 to 1\n     * @param {number} [x=0.5]\n     * @param {number} [y=0.5]\n     * @param {number} [r=0.5]\n     * @param {Array.<Object>} [colorStops]\n     * @param {boolean} [globalCoord=false]\n     */\n    var RadialGradient = function (x, y, r, colorStops, globalCoord) {\n        // Should do nothing more in this constructor. Because gradient can be\n        // declard by `color: {type: 'radial', colorStops: ...}`, where\n        // this constructor will not be called.\n\n        this.x = x == null ? 0.5 : x;\n\n        this.y = y == null ? 0.5 : y;\n\n        this.r = r == null ? 0.5 : r;\n\n        // Can be cloned\n        this.type = 'radial';\n\n        // If use global coord\n        this.global = globalCoord || false;\n\n        Gradient.call(this, colorStops);\n    };\n\n    RadialGradient.prototype = {\n\n        constructor: RadialGradient\n    };\n\n    zrUtil.inherits(RadialGradient, Gradient);\n\n    module.exports = RadialGradient;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/zrender/lib/graphic/RadialGradient.js\n// module id = 434\n// module chunks = 0 1 2 3 4","/**\n * Text element\n * @module zrender/graphic/Text\n *\n * TODO Wrapping\n *\n * Text not support gradient\n */\n\n\n\n    var Displayable = require('./Displayable');\n    var zrUtil = require('../core/util');\n    var textContain = require('../contain/text');\n\n    /**\n     * @alias zrender/graphic/Text\n     * @extends module:zrender/graphic/Displayable\n     * @constructor\n     * @param {Object} opts\n     */\n    var Text = function (opts) {\n        Displayable.call(this, opts);\n    };\n\n    Text.prototype = {\n\n        constructor: Text,\n\n        type: 'text',\n\n        brush: function (ctx, prevEl) {\n            var style = this.style;\n            var x = style.x || 0;\n            var y = style.y || 0;\n            // Convert to string\n            var text = style.text;\n\n            // Convert to string\n            text != null && (text += '');\n\n            // Always bind style\n            style.bind(ctx, this, prevEl);\n\n            if (text) {\n\n                this.setTransform(ctx);\n\n                var textBaseline;\n                var textAlign = style.textAlign;\n                var font = style.textFont || style.font;\n                if (style.textVerticalAlign) {\n                    var rect = textContain.getBoundingRect(\n                        text, font, style.textAlign, 'top'\n                    );\n                    // Ignore textBaseline\n                    textBaseline = 'middle';\n                    switch (style.textVerticalAlign) {\n                        case 'middle':\n                            y -= rect.height / 2 - rect.lineHeight / 2;\n                            break;\n                        case 'bottom':\n                            y -= rect.height - rect.lineHeight / 2;\n                            break;\n                        default:\n                            y += rect.lineHeight / 2;\n                    }\n                }\n                else {\n                    textBaseline = style.textBaseline;\n                }\n\n                // TODO Invalid font\n                ctx.font = font || '12px sans-serif';\n                ctx.textAlign = textAlign || 'left';\n                // Use canvas default left textAlign. Giving invalid value will cause state not change\n                if (ctx.textAlign !== textAlign) {\n                    ctx.textAlign = 'left';\n                }\n                // FIXME in text contain default is top\n                ctx.textBaseline = textBaseline || 'alphabetic';\n                // Use canvas default alphabetic baseline\n                if (ctx.textBaseline !== textBaseline) {\n                    ctx.textBaseline = 'alphabetic';\n                }\n\n                var lineHeight = textContain.measureText('国', ctx.font).width;\n\n                var textLines = text.split('\\n');\n                for (var i = 0; i < textLines.length; i++) {\n                    // Fill after stroke so the outline will not cover the main part.\n                    style.hasStroke() && ctx.strokeText(textLines[i], x, y);\n                    style.hasFill() && ctx.fillText(textLines[i], x, y);\n                    y += lineHeight;\n                }\n\n                this.restoreTransform(ctx);\n            }\n        },\n\n        getBoundingRect: function () {\n            var style = this.style;\n            if (!this._rect) {\n                var textVerticalAlign = style.textVerticalAlign;\n                var rect = textContain.getBoundingRect(\n                    style.text + '', style.textFont || style.font, style.textAlign,\n                    textVerticalAlign ? 'top' : style.textBaseline\n                );\n                switch (textVerticalAlign) {\n                    case 'middle':\n                        rect.y -= rect.height / 2;\n                        break;\n                    case 'bottom':\n                        rect.y -= rect.height;\n                        break;\n                }\n                rect.x += style.x || 0;\n                rect.y += style.y || 0;\n                if (style.hasStroke()) {\n                    var w = style.lineWidth;\n                    rect.x -= w / 2;\n                    rect.y -= w / 2;\n                    rect.width += w;\n                    rect.height += w;\n                }\n                this._rect = rect;\n            }\n\n            return this._rect;\n        }\n    };\n\n    zrUtil.inherits(Text, Displayable);\n\n    module.exports = Text;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/zrender/lib/graphic/Text.js\n// module id = 435\n// module chunks = 0 1 2 3 4","\n\n    module.exports = {\n        buildPath: function (ctx, shape) {\n            var x = shape.x;\n            var y = shape.y;\n            var width = shape.width;\n            var height = shape.height;\n            var r = shape.r;\n            var r1;\n            var r2;\n            var r3;\n            var r4;\n\n            // Convert width and height to positive for better borderRadius\n            if (width < 0) {\n                x = x + width;\n                width = -width;\n            }\n            if (height < 0) {\n                y = y + height;\n                height = -height;\n            }\n\n            if (typeof r === 'number') {\n                r1 = r2 = r3 = r4 = r;\n            }\n            else if (r instanceof Array) {\n                if (r.length === 1) {\n                    r1 = r2 = r3 = r4 = r[0];\n                }\n                else if (r.length === 2) {\n                    r1 = r3 = r[0];\n                    r2 = r4 = r[1];\n                }\n                else if (r.length === 3) {\n                    r1 = r[0];\n                    r2 = r4 = r[1];\n                    r3 = r[2];\n                }\n                else {\n                    r1 = r[0];\n                    r2 = r[1];\n                    r3 = r[2];\n                    r4 = r[3];\n                }\n            }\n            else {\n                r1 = r2 = r3 = r4 = 0;\n            }\n\n            var total;\n            if (r1 + r2 > width) {\n                total = r1 + r2;\n                r1 *= width / total;\n                r2 *= width / total;\n            }\n            if (r3 + r4 > width) {\n                total = r3 + r4;\n                r3 *= width / total;\n                r4 *= width / total;\n            }\n            if (r2 + r3 > height) {\n                total = r2 + r3;\n                r2 *= height / total;\n                r3 *= height / total;\n            }\n            if (r1 + r4 > height) {\n                total = r1 + r4;\n                r1 *= height / total;\n                r4 *= height / total;\n            }\n            ctx.moveTo(x + r1, y);\n            ctx.lineTo(x + width - r2, y);\n            r2 !== 0 && ctx.quadraticCurveTo(\n                x + width, y, x + width, y + r2\n            );\n            ctx.lineTo(x + width, y + height - r3);\n            r3 !== 0 && ctx.quadraticCurveTo(\n                x + width, y + height, x + width - r3, y + height\n            );\n            ctx.lineTo(x + r4, y + height);\n            r4 !== 0 && ctx.quadraticCurveTo(\n                x, y + height, x, y + height - r4\n            );\n            ctx.lineTo(x, y + r1);\n            r1 !== 0 && ctx.quadraticCurveTo(x, y, x + r1, y);\n        }\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/zrender/lib/graphic/helper/roundRect.js\n// module id = 436\n// module chunks = 0 1 2 3 4","/**\n * 贝塞尔平滑曲线\n * @module zrender/shape/util/smoothBezier\n * @author pissang (https://www.github.com/pissang)\n *         Kener (@Kener-林峰, kener.linfeng@gmail.com)\n *         errorrik (errorrik@gmail.com)\n */\n\n\n    var vec2 = require('../../core/vector');\n    var v2Min = vec2.min;\n    var v2Max = vec2.max;\n    var v2Scale = vec2.scale;\n    var v2Distance = vec2.distance;\n    var v2Add = vec2.add;\n\n    /**\n     * 贝塞尔平滑曲线\n     * @alias module:zrender/shape/util/smoothBezier\n     * @param {Array} points 线段顶点数组\n     * @param {number} smooth 平滑等级, 0-1\n     * @param {boolean} isLoop\n     * @param {Array} constraint 将计算出来的控制点约束在一个包围盒内\n     *                           比如 [[0, 0], [100, 100]], 这个包围盒会与\n     *                           整个折线的包围盒做一个并集用来约束控制点。\n     * @param {Array} 计算出来的控制点数组\n     */\n    module.exports = function (points, smooth, isLoop, constraint) {\n        var cps = [];\n\n        var v = [];\n        var v1 = [];\n        var v2 = [];\n        var prevPoint;\n        var nextPoint;\n\n        var min, max;\n        if (constraint) {\n            min = [Infinity, Infinity];\n            max = [-Infinity, -Infinity];\n            for (var i = 0, len = points.length; i < len; i++) {\n                v2Min(min, min, points[i]);\n                v2Max(max, max, points[i]);\n            }\n            // 与指定的包围盒做并集\n            v2Min(min, min, constraint[0]);\n            v2Max(max, max, constraint[1]);\n        }\n\n        for (var i = 0, len = points.length; i < len; i++) {\n            var point = points[i];\n\n            if (isLoop) {\n                prevPoint = points[i ? i - 1 : len - 1];\n                nextPoint = points[(i + 1) % len];\n            }\n            else {\n                if (i === 0 || i === len - 1) {\n                    cps.push(vec2.clone(points[i]));\n                    continue;\n                }\n                else {\n                    prevPoint = points[i - 1];\n                    nextPoint = points[i + 1];\n                }\n            }\n\n            vec2.sub(v, nextPoint, prevPoint);\n\n            // use degree to scale the handle length\n            v2Scale(v, v, smooth);\n\n            var d0 = v2Distance(point, prevPoint);\n            var d1 = v2Distance(point, nextPoint);\n            var sum = d0 + d1;\n            if (sum !== 0) {\n                d0 /= sum;\n                d1 /= sum;\n            }\n\n            v2Scale(v1, v, -d0);\n            v2Scale(v2, v, d1);\n            var cp0 = v2Add([], point, v1);\n            var cp1 = v2Add([], point, v2);\n            if (constraint) {\n                v2Max(cp0, cp0, min);\n                v2Min(cp0, cp0, max);\n                v2Max(cp1, cp1, min);\n                v2Min(cp1, cp1, max);\n            }\n            cps.push(cp0);\n            cps.push(cp1);\n        }\n\n        if (isLoop) {\n            cps.push(cps.shift());\n        }\n\n        return cps;\n    };\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/zrender/lib/graphic/helper/smoothBezier.js\n// module id = 437\n// module chunks = 0 1 2 3 4","/**\n * Catmull-Rom spline 插值折线\n * @module zrender/shape/util/smoothSpline\n * @author pissang (https://www.github.com/pissang)\n *         Kener (@Kener-林峰, kener.linfeng@gmail.com)\n *         errorrik (errorrik@gmail.com)\n */\n\n    var vec2 = require('../../core/vector');\n\n    /**\n     * @inner\n     */\n    function interpolate(p0, p1, p2, p3, t, t2, t3) {\n        var v0 = (p2 - p0) * 0.5;\n        var v1 = (p3 - p1) * 0.5;\n        return (2 * (p1 - p2) + v0 + v1) * t3\n                + (-3 * (p1 - p2) - 2 * v0 - v1) * t2\n                + v0 * t + p1;\n    }\n\n    /**\n     * @alias module:zrender/shape/util/smoothSpline\n     * @param {Array} points 线段顶点数组\n     * @param {boolean} isLoop\n     * @return {Array}\n     */\n    module.exports = function (points, isLoop) {\n        var len = points.length;\n        var ret = [];\n\n        var distance = 0;\n        for (var i = 1; i < len; i++) {\n            distance += vec2.distance(points[i - 1], points[i]);\n        }\n\n        var segs = distance / 2;\n        segs = segs < len ? len : segs;\n        for (var i = 0; i < segs; i++) {\n            var pos = i / (segs - 1) * (isLoop ? len : len - 1);\n            var idx = Math.floor(pos);\n\n            var w = pos - idx;\n\n            var p0;\n            var p1 = points[idx % len];\n            var p2;\n            var p3;\n            if (!isLoop) {\n                p0 = points[idx === 0 ? idx : idx - 1];\n                p2 = points[idx > len - 2 ? len - 1 : idx + 1];\n                p3 = points[idx > len - 3 ? len - 1 : idx + 2];\n            }\n            else {\n                p0 = points[(idx - 1 + len) % len];\n                p2 = points[(idx + 1) % len];\n                p3 = points[(idx + 2) % len];\n            }\n\n            var w2 = w * w;\n            var w3 = w * w2;\n\n            ret.push([\n                interpolate(p0[0], p1[0], p2[0], p3[0], w, w2, w3),\n                interpolate(p0[1], p1[1], p2[1], p3[1], w, w2, w3)\n            ]);\n        }\n        return ret;\n    };\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/zrender/lib/graphic/helper/smoothSpline.js\n// module id = 438\n// module chunks = 0 1 2 3 4","/**\n * Mixin for drawing text in a element bounding rect\n * @module zrender/mixin/RectText\n */\n\n\n\n    var textContain = require('../../contain/text');\n    var BoundingRect = require('../../core/BoundingRect');\n\n    var tmpRect = new BoundingRect();\n\n    var RectText = function () {};\n\n    function parsePercent(value, maxValue) {\n        if (typeof value === 'string') {\n            if (value.lastIndexOf('%') >= 0) {\n                return parseFloat(value) / 100 * maxValue;\n            }\n            return parseFloat(value);\n        }\n        return value;\n    }\n\n    RectText.prototype = {\n\n        constructor: RectText,\n\n        /**\n         * Draw text in a rect with specified position.\n         * @param  {CanvasRenderingContext} ctx\n         * @param  {Object} rect Displayable rect\n         * @return {Object} textRect Alternative precalculated text bounding rect\n         */\n        drawRectText: function (ctx, rect, textRect) {\n            var style = this.style;\n            var text = style.text;\n            // Convert to string\n            text != null && (text += '');\n            if (!text) {\n                return;\n            }\n\n            // FIXME\n            ctx.save();\n\n            var x;\n            var y;\n            var textPosition = style.textPosition;\n            var textOffset = style.textOffset;\n            var distance = style.textDistance;\n            var align = style.textAlign;\n            var font = style.textFont || style.font;\n            var baseline = style.textBaseline;\n            var verticalAlign = style.textVerticalAlign;\n\n            textRect = textRect || textContain.getBoundingRect(text, font, align, baseline);\n\n            // Transform rect to view space\n            var transform = this.transform;\n            if (!style.textTransform) {\n                if (transform) {\n                    tmpRect.copy(rect);\n                    tmpRect.applyTransform(transform);\n                    rect = tmpRect;\n                }\n            }\n            else {\n                this.setTransform(ctx);\n            }\n\n            // Text position represented by coord\n            if (textPosition instanceof Array) {\n                // Percent\n                x = rect.x + parsePercent(textPosition[0], rect.width);\n                y = rect.y + parsePercent(textPosition[1], rect.height);\n                align = align || 'left';\n                baseline = baseline || 'top';\n\n                if (verticalAlign) {\n                    switch (verticalAlign) {\n                        case 'middle':\n                            y -= textRect.height / 2 - textRect.lineHeight / 2;\n                            break;\n                        case 'bottom':\n                            y -= textRect.height - textRect.lineHeight / 2;\n                            break;\n                        default:\n                            y += textRect.lineHeight / 2;\n                    }\n                    // Force bseline to be middle\n                    baseline = 'middle';\n                }\n            }\n            else {\n                var res = textContain.adjustTextPositionOnRect(\n                    textPosition, rect, textRect, distance\n                );\n                x = res.x;\n                y = res.y;\n                // Default align and baseline when has textPosition\n                align = align || res.textAlign;\n                baseline = baseline || res.textBaseline;\n            }\n\n            if (textOffset) {\n                x += textOffset[0];\n                y += textOffset[1];\n            }\n\n            // Use canvas default left textAlign. Giving invalid value will cause state not change\n            ctx.textAlign = align || 'left';\n            // Use canvas default alphabetic baseline\n            ctx.textBaseline = baseline || 'alphabetic';\n\n            var textFill = style.textFill;\n            var textStroke = style.textStroke;\n            textFill && (ctx.fillStyle = textFill);\n            textStroke && (ctx.strokeStyle = textStroke);\n\n            // TODO Invalid font\n            ctx.font = font || '12px sans-serif';\n\n            // Text shadow\n            // Always set shadowBlur and shadowOffset to avoid leak from displayable\n            ctx.shadowBlur = style.textShadowBlur;\n            ctx.shadowColor = style.textShadowColor || 'transparent';\n            ctx.shadowOffsetX = style.textShadowOffsetX;\n            ctx.shadowOffsetY = style.textShadowOffsetY;\n\n            var textLines = text.split('\\n');\n\n            if (style.textRotation) {\n                transform && ctx.translate(transform[4], transform[5]);\n                ctx.rotate(style.textRotation);\n                transform && ctx.translate(-transform[4], -transform[5]);\n            }\n\n            for (var i = 0; i < textLines.length; i++) {\n                    // Fill after stroke so the outline will not cover the main part.\n                textStroke && ctx.strokeText(textLines[i], x, y);\n                textFill && ctx.fillText(textLines[i], x, y);\n                y += textRect.lineHeight;\n            }\n\n            ctx.restore();\n        }\n    };\n\n    module.exports = RectText;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/zrender/lib/graphic/mixin/RectText.js\n// module id = 439\n// module chunks = 0 1 2 3 4","/**\n * 圆弧\n * @module zrender/graphic/shape/Arc\n */\n \n\n    module.exports = require('../Path').extend({\n\n        type: 'arc',\n\n        shape: {\n\n            cx: 0,\n\n            cy: 0,\n\n            r: 0,\n\n            startAngle: 0,\n\n            endAngle: Math.PI * 2,\n\n            clockwise: true\n        },\n\n        style: {\n\n            stroke: '#000',\n\n            fill: null\n        },\n\n        buildPath: function (ctx, shape) {\n\n            var x = shape.cx;\n            var y = shape.cy;\n            var r = Math.max(shape.r, 0);\n            var startAngle = shape.startAngle;\n            var endAngle = shape.endAngle;\n            var clockwise = shape.clockwise;\n\n            var unitX = Math.cos(startAngle);\n            var unitY = Math.sin(startAngle);\n\n            ctx.moveTo(unitX * r + x, unitY * r + y);\n            ctx.arc(x, y, r, startAngle, endAngle, !clockwise);\n        }\n    });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/zrender/lib/graphic/shape/Arc.js\n// module id = 440\n// module chunks = 0 1 2 3 4","'use strict';\n/**\n * 贝塞尔曲线\n * @module zrender/shape/BezierCurve\n */\n\n\n    var curveTool = require('../../core/curve');\n    var vec2 = require('../../core/vector');\n    var quadraticSubdivide = curveTool.quadraticSubdivide;\n    var cubicSubdivide = curveTool.cubicSubdivide;\n    var quadraticAt = curveTool.quadraticAt;\n    var cubicAt = curveTool.cubicAt;\n    var quadraticDerivativeAt = curveTool.quadraticDerivativeAt;\n    var cubicDerivativeAt = curveTool.cubicDerivativeAt;\n\n    var out = [];\n\n    function someVectorAt(shape, t, isTangent) {\n        var cpx2 = shape.cpx2;\n        var cpy2 = shape.cpy2;\n        if (cpx2 === null || cpy2 === null) {\n            return [\n                (isTangent ? cubicDerivativeAt : cubicAt)(shape.x1, shape.cpx1, shape.cpx2, shape.x2, t),\n                (isTangent ? cubicDerivativeAt : cubicAt)(shape.y1, shape.cpy1, shape.cpy2, shape.y2, t)\n            ];\n        }\n        else {\n            return [\n                (isTangent ? quadraticDerivativeAt : quadraticAt)(shape.x1, shape.cpx1, shape.x2, t),\n                (isTangent ? quadraticDerivativeAt : quadraticAt)(shape.y1, shape.cpy1, shape.y2, t)\n            ];\n        }\n    }\n    module.exports = require('../Path').extend({\n\n        type: 'bezier-curve',\n\n        shape: {\n            x1: 0,\n            y1: 0,\n            x2: 0,\n            y2: 0,\n            cpx1: 0,\n            cpy1: 0,\n            // cpx2: 0,\n            // cpy2: 0\n\n            // Curve show percent, for animating\n            percent: 1\n        },\n\n        style: {\n            stroke: '#000',\n            fill: null\n        },\n\n        buildPath: function (ctx, shape) {\n            var x1 = shape.x1;\n            var y1 = shape.y1;\n            var x2 = shape.x2;\n            var y2 = shape.y2;\n            var cpx1 = shape.cpx1;\n            var cpy1 = shape.cpy1;\n            var cpx2 = shape.cpx2;\n            var cpy2 = shape.cpy2;\n            var percent = shape.percent;\n            if (percent === 0) {\n                return;\n            }\n\n            ctx.moveTo(x1, y1);\n\n            if (cpx2 == null || cpy2 == null) {\n                if (percent < 1) {\n                    quadraticSubdivide(\n                        x1, cpx1, x2, percent, out\n                    );\n                    cpx1 = out[1];\n                    x2 = out[2];\n                    quadraticSubdivide(\n                        y1, cpy1, y2, percent, out\n                    );\n                    cpy1 = out[1];\n                    y2 = out[2];\n                }\n\n                ctx.quadraticCurveTo(\n                    cpx1, cpy1,\n                    x2, y2\n                );\n            }\n            else {\n                if (percent < 1) {\n                    cubicSubdivide(\n                        x1, cpx1, cpx2, x2, percent, out\n                    );\n                    cpx1 = out[1];\n                    cpx2 = out[2];\n                    x2 = out[3];\n                    cubicSubdivide(\n                        y1, cpy1, cpy2, y2, percent, out\n                    );\n                    cpy1 = out[1];\n                    cpy2 = out[2];\n                    y2 = out[3];\n                }\n                ctx.bezierCurveTo(\n                    cpx1, cpy1,\n                    cpx2, cpy2,\n                    x2, y2\n                );\n            }\n        },\n\n        /**\n         * Get point at percent\n         * @param  {number} t\n         * @return {Array.<number>}\n         */\n        pointAt: function (t) {\n            return someVectorAt(this.shape, t, false);\n        },\n\n        /**\n         * Get tangent at percent\n         * @param  {number} t\n         * @return {Array.<number>}\n         */\n        tangentAt: function (t) {\n            var p = someVectorAt(this.shape, t, true);\n            return vec2.normalize(p, p);\n        }\n    });\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/zrender/lib/graphic/shape/BezierCurve.js\n// module id = 441\n// module chunks = 0 1 2 3 4","'use strict';\n/**\n * 圆形\n * @module zrender/shape/Circle\n */\n\n\n\n    module.exports = require('../Path').extend({\n\n        type: 'circle',\n\n        shape: {\n            cx: 0,\n            cy: 0,\n            r: 0\n        },\n\n\n        buildPath : function (ctx, shape, inBundle) {\n            // Better stroking in ShapeBundle\n            // Always do it may have performence issue ( fill may be 2x more cost)\n            if (inBundle) {\n                ctx.moveTo(shape.cx + shape.r, shape.cy);\n            }\n            // else {\n            //     if (ctx.allocate && !ctx.data.length) {\n            //         ctx.allocate(ctx.CMD_MEM_SIZE.A);\n            //     }\n            // }\n            // Better stroking in ShapeBundle\n            // ctx.moveTo(shape.cx + shape.r, shape.cy);\n            ctx.arc(shape.cx, shape.cy, shape.r, 0, Math.PI * 2, true);\n        }\n    });\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/zrender/lib/graphic/shape/Circle.js\n// module id = 442\n// module chunks = 0 1 2 3 4","/**\n * 直线\n * @module zrender/graphic/shape/Line\n */\n\n    module.exports = require('../Path').extend({\n\n        type: 'line',\n\n        shape: {\n            // Start point\n            x1: 0,\n            y1: 0,\n            // End point\n            x2: 0,\n            y2: 0,\n\n            percent: 1\n        },\n\n        style: {\n            stroke: '#000',\n            fill: null\n        },\n\n        buildPath: function (ctx, shape) {\n            var x1 = shape.x1;\n            var y1 = shape.y1;\n            var x2 = shape.x2;\n            var y2 = shape.y2;\n            var percent = shape.percent;\n\n            if (percent === 0) {\n                return;\n            }\n\n            ctx.moveTo(x1, y1);\n\n            if (percent < 1) {\n                x2 = x1 * (1 - percent) + x2 * percent;\n                y2 = y1 * (1 - percent) + y2 * percent;\n            }\n            ctx.lineTo(x2, y2);\n        },\n\n        /**\n         * Get point at percent\n         * @param  {number} percent\n         * @return {Array.<number>}\n         */\n        pointAt: function (p) {\n            var shape = this.shape;\n            return [\n                shape.x1 * (1 - p) + shape.x2 * p,\n                shape.y1 * (1 - p) + shape.y2 * p\n            ];\n        }\n    });\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/zrender/lib/graphic/shape/Line.js\n// module id = 443\n// module chunks = 0 1 2 3 4","/**\n * 多边形\n * @module zrender/shape/Polygon\n */\n\n\n    var polyHelper = require('../helper/poly');\n\n    module.exports = require('../Path').extend({\n        \n        type: 'polygon',\n\n        shape: {\n            points: null,\n\n            smooth: false,\n\n            smoothConstraint: null\n        },\n\n        buildPath: function (ctx, shape) {\n            polyHelper.buildPath(ctx, shape, true);\n        }\n    });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/zrender/lib/graphic/shape/Polygon.js\n// module id = 444\n// module chunks = 0 1 2 3 4","/**\n * @module zrender/graphic/shape/Polyline\n */\n\n\n    var polyHelper = require('../helper/poly');\n\n    module.exports = require('../Path').extend({\n        \n        type: 'polyline',\n\n        shape: {\n            points: null,\n\n            smooth: false,\n\n            smoothConstraint: null\n        },\n\n        style: {\n            stroke: '#000',\n\n            fill: null\n        },\n\n        buildPath: function (ctx, shape) {\n            polyHelper.buildPath(ctx, shape, false);\n        }\n    });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/zrender/lib/graphic/shape/Polyline.js\n// module id = 445\n// module chunks = 0 1 2 3 4","/**\n * 矩形\n * @module zrender/graphic/shape/Rect\n */\n\n\n    var roundRectHelper = require('../helper/roundRect');\n\n    module.exports = require('../Path').extend({\n\n        type: 'rect',\n\n        shape: {\n            // 左上、右上、右下、左下角的半径依次为r1、r2、r3、r4\n            // r缩写为1         相当于 [1, 1, 1, 1]\n            // r缩写为[1]       相当于 [1, 1, 1, 1]\n            // r缩写为[1, 2]    相当于 [1, 2, 1, 2]\n            // r缩写为[1, 2, 3] 相当于 [1, 2, 3, 2]\n            r: 0,\n\n            x: 0,\n            y: 0,\n            width: 0,\n            height: 0\n        },\n\n        buildPath: function (ctx, shape) {\n            var x = shape.x;\n            var y = shape.y;\n            var width = shape.width;\n            var height = shape.height;\n            if (!shape.r) {\n                ctx.rect(x, y, width, height);\n            }\n            else {\n                roundRectHelper.buildPath(ctx, shape);\n            }\n            ctx.closePath();\n            return;\n        }\n    });\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/zrender/lib/graphic/shape/Rect.js\n// module id = 446\n// module chunks = 0 1 2 3 4","/**\n * 圆环\n * @module zrender/graphic/shape/Ring\n */\n\n\n    module.exports = require('../Path').extend({\n\n        type: 'ring',\n\n        shape: {\n            cx: 0,\n            cy: 0,\n            r: 0,\n            r0: 0\n        },\n\n        buildPath: function (ctx, shape) {\n            var x = shape.cx;\n            var y = shape.cy;\n            var PI2 = Math.PI * 2;\n            ctx.moveTo(x + shape.r, y);\n            ctx.arc(x, y, shape.r, 0, PI2, false);\n            ctx.moveTo(x + shape.r0, y);\n            ctx.arc(x, y, shape.r0, 0, PI2, true);\n        }\n    });\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/zrender/lib/graphic/shape/Ring.js\n// module id = 447\n// module chunks = 0 1 2 3 4","/**\n * 扇形\n * @module zrender/graphic/shape/Sector\n */\n\n\n\n    var env = require('../../core/env');\n    var Path = require('../Path');\n\n    var shadowTemp = [\n        ['shadowBlur', 0],\n        ['shadowColor', '#000'],\n        ['shadowOffsetX', 0],\n        ['shadowOffsetY', 0]\n    ];\n\n    module.exports = Path.extend({\n\n        type: 'sector',\n\n        shape: {\n\n            cx: 0,\n\n            cy: 0,\n\n            r0: 0,\n\n            r: 0,\n\n            startAngle: 0,\n\n            endAngle: Math.PI * 2,\n\n            clockwise: true\n        },\n\n        brush: (env.browser.ie && env.browser.version >= 11) // version: '11.0'\n            // Fix weird bug in some version of IE11 (like 11.0.9600.17801),\n            // where exception \"unexpected call to method or property access\"\n            // might be thrown when calling ctx.fill after a path whose area size\n            // is zero is drawn and ctx.clip() is called and shadowBlur is set.\n            // (e.g.,\n            //  ctx.moveTo(10, 10);\n            //  ctx.lineTo(20, 10);\n            //  ctx.closePath();\n            //  ctx.clip();\n            //  ctx.shadowBlur = 10;\n            //  ...\n            //  ctx.fill();\n            // )\n            ? function () {\n                var clipPaths = this.__clipPaths;\n                var style = this.style;\n                var modified;\n\n                if (clipPaths) {\n                    for (var i = 0; i < clipPaths.length; i++) {\n                        var shape = clipPaths[i] && clipPaths[i].shape;\n                        if (shape && shape.startAngle === shape.endAngle) {\n                            for (var j = 0; j < shadowTemp.length; j++) {\n                                shadowTemp[j][2] = style[shadowTemp[j][0]];\n                                style[shadowTemp[j][0]] = shadowTemp[j][1];\n                            }\n                            modified = true;\n                            break;\n                        }\n                    }\n                }\n\n                Path.prototype.brush.apply(this, arguments);\n\n                if (modified) {\n                    for (var j = 0; j < shadowTemp.length; j++) {\n                        style[shadowTemp[j][0]] = shadowTemp[j][2];\n                    }\n                }\n            }\n            : Path.prototype.brush,\n\n        buildPath: function (ctx, shape) {\n\n            var x = shape.cx;\n            var y = shape.cy;\n            var r0 = Math.max(shape.r0 || 0, 0);\n            var r = Math.max(shape.r, 0);\n            var startAngle = shape.startAngle;\n            var endAngle = shape.endAngle;\n            var clockwise = shape.clockwise;\n\n            var unitX = Math.cos(startAngle);\n            var unitY = Math.sin(startAngle);\n\n            ctx.moveTo(unitX * r0 + x, unitY * r0 + y);\n\n            ctx.lineTo(unitX * r + x, unitY * r + y);\n\n            ctx.arc(x, y, r, startAngle, endAngle, !clockwise);\n\n            ctx.lineTo(\n                Math.cos(endAngle) * r0 + x,\n                Math.sin(endAngle) * r0 + y\n            );\n\n            if (r0 !== 0) {\n                ctx.arc(x, y, r0, endAngle, startAngle, clockwise);\n            }\n\n            ctx.closePath();\n        }\n    });\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/zrender/lib/graphic/shape/Sector.js\n// module id = 448\n// module chunks = 0 1 2 3 4","'use strict';\n/**\n * @module zrender/mixin/Animatable\n */\n\n\n    var Animator = require('../animation/Animator');\n    var util = require('../core/util');\n    var isString = util.isString;\n    var isFunction = util.isFunction;\n    var isObject = util.isObject;\n    var log = require('../core/log');\n\n    /**\n     * @alias modue:zrender/mixin/Animatable\n     * @constructor\n     */\n    var Animatable = function () {\n\n        /**\n         * @type {Array.<module:zrender/animation/Animator>}\n         * @readOnly\n         */\n        this.animators = [];\n    };\n\n    Animatable.prototype = {\n\n        constructor: Animatable,\n\n        /**\n         * 动画\n         *\n         * @param {string} path 需要添加动画的属性获取路径，可以通过a.b.c来获取深层的属性\n         * @param {boolean} [loop] 动画是否循环\n         * @return {module:zrender/animation/Animator}\n         * @example:\n         *     el.animate('style', false)\n         *         .when(1000, {x: 10} )\n         *         .done(function(){ // Animation done })\n         *         .start()\n         */\n        animate: function (path, loop) {\n            var target;\n            var animatingShape = false;\n            var el = this;\n            var zr = this.__zr;\n            if (path) {\n                var pathSplitted = path.split('.');\n                var prop = el;\n                // If animating shape\n                animatingShape = pathSplitted[0] === 'shape';\n                for (var i = 0, l = pathSplitted.length; i < l; i++) {\n                    if (!prop) {\n                        continue;\n                    }\n                    prop = prop[pathSplitted[i]];\n                }\n                if (prop) {\n                    target = prop;\n                }\n            }\n            else {\n                target = el;\n            }\n\n            if (!target) {\n                log(\n                    'Property \"'\n                    + path\n                    + '\" is not existed in element '\n                    + el.id\n                );\n                return;\n            }\n\n            var animators = el.animators;\n\n            var animator = new Animator(target, loop);\n\n            animator.during(function (target) {\n                el.dirty(animatingShape);\n            })\n            .done(function () {\n                // FIXME Animator will not be removed if use `Animator#stop` to stop animation\n                animators.splice(util.indexOf(animators, animator), 1);\n            });\n\n            animators.push(animator);\n\n            // If animate after added to the zrender\n            if (zr) {\n                zr.animation.addAnimator(animator);\n            }\n\n            return animator;\n        },\n\n        /**\n         * 停止动画\n         * @param {boolean} forwardToLast If move to last frame before stop\n         */\n        stopAnimation: function (forwardToLast) {\n            var animators = this.animators;\n            var len = animators.length;\n            for (var i = 0; i < len; i++) {\n                animators[i].stop(forwardToLast);\n            }\n            animators.length = 0;\n\n            return this;\n        },\n\n        /**\n         * @param {Object} target\n         * @param {number} [time=500] Time in ms\n         * @param {string} [easing='linear']\n         * @param {number} [delay=0]\n         * @param {Function} [callback]\n         *\n         * @example\n         *  // Animate position\n         *  el.animateTo({\n         *      position: [10, 10]\n         *  }, function () { // done })\n         *\n         *  // Animate shape, style and position in 100ms, delayed 100ms, with cubicOut easing\n         *  el.animateTo({\n         *      shape: {\n         *          width: 500\n         *      },\n         *      style: {\n         *          fill: 'red'\n         *      }\n         *      position: [10, 10]\n         *  }, 100, 100, 'cubicOut', function () { // done })\n         */\n         // TODO Return animation key\n        animateTo: function (target, time, delay, easing, callback) {\n            // animateTo(target, time, easing, callback);\n            if (isString(delay)) {\n                callback = easing;\n                easing = delay;\n                delay = 0;\n            }\n            // animateTo(target, time, delay, callback);\n            else if (isFunction(easing)) {\n                callback = easing;\n                easing = 'linear';\n                delay = 0;\n            }\n            // animateTo(target, time, callback);\n            else if (isFunction(delay)) {\n                callback = delay;\n                delay = 0;\n            }\n            // animateTo(target, callback)\n            else if (isFunction(time)) {\n                callback = time;\n                time = 500;\n            }\n            // animateTo(target)\n            else if (!time) {\n                time = 500;\n            }\n            // Stop all previous animations\n            this.stopAnimation();\n            this._animateToShallow('', this, target, time, delay, easing, callback);\n\n            // Animators may be removed immediately after start\n            // if there is nothing to animate\n            var animators = this.animators.slice();\n            var count = animators.length;\n            function done() {\n                count--;\n                if (!count) {\n                    callback && callback();\n                }\n            }\n\n            // No animators. This should be checked before animators[i].start(),\n            // because 'done' may be executed immediately if no need to animate.\n            if (!count) {\n                callback && callback();\n            }\n            // Start after all animators created\n            // Incase any animator is done immediately when all animation properties are not changed\n            for (var i = 0; i < animators.length; i++) {\n                animators[i]\n                    .done(done)\n                    .start(easing);\n            }\n        },\n\n        /**\n         * @private\n         * @param {string} path=''\n         * @param {Object} source=this\n         * @param {Object} target\n         * @param {number} [time=500]\n         * @param {number} [delay=0]\n         *\n         * @example\n         *  // Animate position\n         *  el._animateToShallow({\n         *      position: [10, 10]\n         *  })\n         *\n         *  // Animate shape, style and position in 100ms, delayed 100ms\n         *  el._animateToShallow({\n         *      shape: {\n         *          width: 500\n         *      },\n         *      style: {\n         *          fill: 'red'\n         *      }\n         *      position: [10, 10]\n         *  }, 100, 100)\n         */\n        _animateToShallow: function (path, source, target, time, delay) {\n            var objShallow = {};\n            var propertyCount = 0;\n            for (var name in target) {\n                if (!target.hasOwnProperty(name)) {\n                    continue;\n                }\n\n                if (source[name] != null) {\n                    if (isObject(target[name]) && !util.isArrayLike(target[name])) {\n                        this._animateToShallow(\n                            path ? path + '.' + name : name,\n                            source[name],\n                            target[name],\n                            time,\n                            delay\n                        );\n                    }\n                    else {\n                        objShallow[name] = target[name];\n                        propertyCount++;\n                    }\n                }\n                else if (target[name] != null) {\n                    // Attr directly if not has property\n                    // FIXME, if some property not needed for element ?\n                    if (!path) {\n                        this.attr(name, target[name]);\n                    }\n                    else {  // Shape or style\n                        var props = {};\n                        props[path] = {};\n                        props[path][name] = target[name];\n                        this.attr(props);\n                    }\n                }\n            }\n\n            if (propertyCount > 0) {\n                this.animate(path, false)\n                    .when(time == null ? 500 : time, objShallow)\n                    .delay(delay || 0);\n            }\n\n            return this;\n        }\n    };\n\n    module.exports = Animatable;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/zrender/lib/mixin/Animatable.js\n// module id = 449\n// module chunks = 0 1 2 3 4","// TODO Draggable for group\n// FIXME Draggable on element which has parent rotation or scale\n\n    function Draggable() {\n\n        this.on('mousedown', this._dragStart, this);\n        this.on('mousemove', this._drag, this);\n        this.on('mouseup', this._dragEnd, this);\n        this.on('globalout', this._dragEnd, this);\n        // this._dropTarget = null;\n        // this._draggingTarget = null;\n\n        // this._x = 0;\n        // this._y = 0;\n    }\n\n    Draggable.prototype = {\n\n        constructor: Draggable,\n\n        _dragStart: function (e) {\n            var draggingTarget = e.target;\n            if (draggingTarget && draggingTarget.draggable) {\n                this._draggingTarget = draggingTarget;\n                draggingTarget.dragging = true;\n                this._x = e.offsetX;\n                this._y = e.offsetY;\n\n                this.dispatchToElement(param(draggingTarget, e), 'dragstart', e.event);\n            }\n        },\n\n        _drag: function (e) {\n            var draggingTarget = this._draggingTarget;\n            if (draggingTarget) {\n\n                var x = e.offsetX;\n                var y = e.offsetY;\n\n                var dx = x - this._x;\n                var dy = y - this._y;\n                this._x = x;\n                this._y = y;\n\n                draggingTarget.drift(dx, dy, e);\n                this.dispatchToElement(param(draggingTarget, e), 'drag', e.event);\n\n                var dropTarget = this.findHover(x, y, draggingTarget).target;\n                var lastDropTarget = this._dropTarget;\n                this._dropTarget = dropTarget;\n\n                if (draggingTarget !== dropTarget) {\n                    if (lastDropTarget && dropTarget !== lastDropTarget) {\n                        this.dispatchToElement(param(lastDropTarget, e), 'dragleave', e.event);\n                    }\n                    if (dropTarget && dropTarget !== lastDropTarget) {\n                        this.dispatchToElement(param(dropTarget, e), 'dragenter', e.event);\n                    }\n                }\n            }\n        },\n\n        _dragEnd: function (e) {\n            var draggingTarget = this._draggingTarget;\n\n            if (draggingTarget) {\n                draggingTarget.dragging = false;\n            }\n\n            this.dispatchToElement(param(draggingTarget, e), 'dragend', e.event);\n\n            if (this._dropTarget) {\n                this.dispatchToElement(param(this._dropTarget, e), 'drop', e.event);\n            }\n\n            this._draggingTarget = null;\n            this._dropTarget = null;\n        }\n\n    };\n\n    function param(target, e) {\n        return {target: target, topTarget: e && e.topTarget};\n    }\n\n    module.exports = Draggable;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/zrender/lib/mixin/Draggable.js\n// module id = 450\n// module chunks = 0 1 2 3 4","'use strict';\n/**\n * 提供变换扩展\n * @module zrender/mixin/Transformable\n * @author pissang (https://www.github.com/pissang)\n */\n\n\n    var matrix = require('../core/matrix');\n    var vector = require('../core/vector');\n    var mIdentity = matrix.identity;\n\n    var EPSILON = 5e-5;\n\n    function isNotAroundZero(val) {\n        return val > EPSILON || val < -EPSILON;\n    }\n\n    /**\n     * @alias module:zrender/mixin/Transformable\n     * @constructor\n     */\n    var Transformable = function (opts) {\n        opts = opts || {};\n        // If there are no given position, rotation, scale\n        if (!opts.position) {\n            /**\n             * 平移\n             * @type {Array.<number>}\n             * @default [0, 0]\n             */\n            this.position = [0, 0];\n        }\n        if (opts.rotation == null) {\n            /**\n             * 旋转\n             * @type {Array.<number>}\n             * @default 0\n             */\n            this.rotation = 0;\n        }\n        if (!opts.scale) {\n            /**\n             * 缩放\n             * @type {Array.<number>}\n             * @default [1, 1]\n             */\n            this.scale = [1, 1];\n        }\n        /**\n         * 旋转和缩放的原点\n         * @type {Array.<number>}\n         * @default null\n         */\n        this.origin = this.origin || null;\n    };\n\n    var transformableProto = Transformable.prototype;\n    transformableProto.transform = null;\n\n    /**\n     * 判断是否需要有坐标变换\n     * 如果有坐标变换, 则从position, rotation, scale以及父节点的transform计算出自身的transform矩阵\n     */\n    transformableProto.needLocalTransform = function () {\n        return isNotAroundZero(this.rotation)\n            || isNotAroundZero(this.position[0])\n            || isNotAroundZero(this.position[1])\n            || isNotAroundZero(this.scale[0] - 1)\n            || isNotAroundZero(this.scale[1] - 1);\n    };\n\n    transformableProto.updateTransform = function () {\n        var parent = this.parent;\n        var parentHasTransform = parent && parent.transform;\n        var needLocalTransform = this.needLocalTransform();\n\n        var m = this.transform;\n        if (!(needLocalTransform || parentHasTransform)) {\n            m && mIdentity(m);\n            return;\n        }\n\n        m = m || matrix.create();\n\n        if (needLocalTransform) {\n            this.getLocalTransform(m);\n        }\n        else {\n            mIdentity(m);\n        }\n\n        // 应用父节点变换\n        if (parentHasTransform) {\n            if (needLocalTransform) {\n                matrix.mul(m, parent.transform, m);\n            }\n            else {\n                matrix.copy(m, parent.transform);\n            }\n        }\n        // 保存这个变换矩阵\n        this.transform = m;\n\n        this.invTransform = this.invTransform || matrix.create();\n        matrix.invert(this.invTransform, m);\n    };\n\n    transformableProto.getLocalTransform = function (m) {\n        return Transformable.getLocalTransform(this, m);\n    };\n\n    /**\n     * 将自己的transform应用到context上\n     * @param {Context2D} ctx\n     */\n    transformableProto.setTransform = function (ctx) {\n        var m = this.transform;\n        var dpr = ctx.dpr || 1;\n        if (m) {\n            ctx.setTransform(dpr * m[0], dpr * m[1], dpr * m[2], dpr * m[3], dpr * m[4], dpr * m[5]);\n        }\n        else {\n            ctx.setTransform(dpr, 0, 0, dpr, 0, 0);\n        }\n    };\n\n    transformableProto.restoreTransform = function (ctx) {\n        var dpr = ctx.dpr || 1;\n        ctx.setTransform(dpr, 0, 0, dpr, 0, 0);\n    };\n\n    var tmpTransform = [];\n\n    /**\n     * 分解`transform`矩阵到`position`, `rotation`, `scale`\n     */\n    transformableProto.decomposeTransform = function () {\n        if (!this.transform) {\n            return;\n        }\n        var parent = this.parent;\n        var m = this.transform;\n        if (parent && parent.transform) {\n            // Get local transform and decompose them to position, scale, rotation\n            matrix.mul(tmpTransform, parent.invTransform, m);\n            m = tmpTransform;\n        }\n        var sx = m[0] * m[0] + m[1] * m[1];\n        var sy = m[2] * m[2] + m[3] * m[3];\n        var position = this.position;\n        var scale = this.scale;\n        if (isNotAroundZero(sx - 1)) {\n            sx = Math.sqrt(sx);\n        }\n        if (isNotAroundZero(sy - 1)) {\n            sy = Math.sqrt(sy);\n        }\n        if (m[0] < 0) {\n            sx = -sx;\n        }\n        if (m[3] < 0) {\n            sy = -sy;\n        }\n        position[0] = m[4];\n        position[1] = m[5];\n        scale[0] = sx;\n        scale[1] = sy;\n        this.rotation = Math.atan2(-m[1] / sy, m[0] / sx);\n    };\n\n    /**\n     * Get global scale\n     * @return {Array.<number>}\n     */\n    transformableProto.getGlobalScale = function () {\n        var m = this.transform;\n        if (!m) {\n            return [1, 1];\n        }\n        var sx = Math.sqrt(m[0] * m[0] + m[1] * m[1]);\n        var sy = Math.sqrt(m[2] * m[2] + m[3] * m[3]);\n        if (m[0] < 0) {\n            sx = -sx;\n        }\n        if (m[3] < 0) {\n            sy = -sy;\n        }\n        return [sx, sy];\n    };\n    /**\n     * 变换坐标位置到 shape 的局部坐标空间\n     * @method\n     * @param {number} x\n     * @param {number} y\n     * @return {Array.<number>}\n     */\n    transformableProto.transformCoordToLocal = function (x, y) {\n        var v2 = [x, y];\n        var invTransform = this.invTransform;\n        if (invTransform) {\n            vector.applyTransform(v2, v2, invTransform);\n        }\n        return v2;\n    };\n\n    /**\n     * 变换局部坐标位置到全局坐标空间\n     * @method\n     * @param {number} x\n     * @param {number} y\n     * @return {Array.<number>}\n     */\n    transformableProto.transformCoordToGlobal = function (x, y) {\n        var v2 = [x, y];\n        var transform = this.transform;\n        if (transform) {\n            vector.applyTransform(v2, v2, transform);\n        }\n        return v2;\n    };\n\n    /**\n     * @static\n     * @param {Object} target\n     * @param {Array.<number>} target.origin\n     * @param {number} target.rotation\n     * @param {Array.<number>} target.position\n     * @param {Array.<number>} [m]\n     */\n    Transformable.getLocalTransform = function (target, m) {\n        m = m || [];\n        mIdentity(m);\n\n        var origin = target.origin;\n        var scale = target.scale || [1, 1];\n        var rotation = target.rotation || 0;\n        var position = target.position || [0, 0];\n\n        if (origin) {\n            // Translate to origin\n            m[4] -= origin[0];\n            m[5] -= origin[1];\n        }\n        matrix.scale(m, m, scale);\n        if (rotation) {\n            matrix.rotate(m, m, rotation);\n        }\n        if (origin) {\n            // Translate back from origin\n            m[4] += origin[0];\n            m[5] += origin[1];\n        }\n\n        m[4] += position[0];\n        m[5] += position[1];\n\n        return m;\n    };\n\n    module.exports = Transformable;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/zrender/lib/mixin/Transformable.js\n// module id = 451\n// module chunks = 0 1 2 3 4","\n\n    var Path = require('../graphic/Path');\n    var PathProxy = require('../core/PathProxy');\n    var transformPath = require('./transformPath');\n\n    // command chars\n    var cc = [\n        'm', 'M', 'l', 'L', 'v', 'V', 'h', 'H', 'z', 'Z',\n        'c', 'C', 'q', 'Q', 't', 'T', 's', 'S', 'a', 'A'\n    ];\n\n    var mathSqrt = Math.sqrt;\n    var mathSin = Math.sin;\n    var mathCos = Math.cos;\n    var PI = Math.PI;\n\n    var vMag = function(v) {\n        return Math.sqrt(v[0] * v[0] + v[1] * v[1]);\n    };\n    var vRatio = function(u, v) {\n        return (u[0] * v[0] + u[1] * v[1]) / (vMag(u) * vMag(v));\n    };\n    var vAngle = function(u, v) {\n        return (u[0] * v[1] < u[1] * v[0] ? -1 : 1)\n                * Math.acos(vRatio(u, v));\n    };\n\n    function processArc(x1, y1, x2, y2, fa, fs, rx, ry, psiDeg, cmd, path) {\n        var psi = psiDeg * (PI / 180.0);\n        var xp = mathCos(psi) * (x1 - x2) / 2.0\n                 + mathSin(psi) * (y1 - y2) / 2.0;\n        var yp = -1 * mathSin(psi) * (x1 - x2) / 2.0\n                 + mathCos(psi) * (y1 - y2) / 2.0;\n\n        var lambda = (xp * xp) / (rx * rx) + (yp * yp) / (ry * ry);\n\n        if (lambda > 1) {\n            rx *= mathSqrt(lambda);\n            ry *= mathSqrt(lambda);\n        }\n\n        var f = (fa === fs ? -1 : 1)\n            * mathSqrt((((rx * rx) * (ry * ry))\n                    - ((rx * rx) * (yp * yp))\n                    - ((ry * ry) * (xp * xp))) / ((rx * rx) * (yp * yp)\n                    + (ry * ry) * (xp * xp))\n                ) || 0;\n\n        var cxp = f * rx * yp / ry;\n        var cyp = f * -ry * xp / rx;\n\n        var cx = (x1 + x2) / 2.0\n                 + mathCos(psi) * cxp\n                 - mathSin(psi) * cyp;\n        var cy = (y1 + y2) / 2.0\n                + mathSin(psi) * cxp\n                + mathCos(psi) * cyp;\n\n        var theta = vAngle([ 1, 0 ], [ (xp - cxp) / rx, (yp - cyp) / ry ]);\n        var u = [ (xp - cxp) / rx, (yp - cyp) / ry ];\n        var v = [ (-1 * xp - cxp) / rx, (-1 * yp - cyp) / ry ];\n        var dTheta = vAngle(u, v);\n\n        if (vRatio(u, v) <= -1) {\n            dTheta = PI;\n        }\n        if (vRatio(u, v) >= 1) {\n            dTheta = 0;\n        }\n        if (fs === 0 && dTheta > 0) {\n            dTheta = dTheta - 2 * PI;\n        }\n        if (fs === 1 && dTheta < 0) {\n            dTheta = dTheta + 2 * PI;\n        }\n\n        path.addData(cmd, cx, cy, rx, ry, theta, dTheta, psi, fs);\n    }\n\n    function createPathProxyFromString(data) {\n        if (!data) {\n            return [];\n        }\n\n        // command string\n        var cs = data.replace(/-/g, ' -')\n            .replace(/  /g, ' ')\n            .replace(/ /g, ',')\n            .replace(/,,/g, ',');\n\n        var n;\n        // create pipes so that we can split the data\n        for (n = 0; n < cc.length; n++) {\n            cs = cs.replace(new RegExp(cc[n], 'g'), '|' + cc[n]);\n        }\n\n        // create array\n        var arr = cs.split('|');\n        // init context point\n        var cpx = 0;\n        var cpy = 0;\n\n        var path = new PathProxy();\n        var CMD = PathProxy.CMD;\n\n        var prevCmd;\n        for (n = 1; n < arr.length; n++) {\n            var str = arr[n];\n            var c = str.charAt(0);\n            var off = 0;\n            var p = str.slice(1).replace(/e,-/g, 'e-').split(',');\n            var cmd;\n\n            if (p.length > 0 && p[0] === '') {\n                p.shift();\n            }\n\n            for (var i = 0; i < p.length; i++) {\n                p[i] = parseFloat(p[i]);\n            }\n            while (off < p.length && !isNaN(p[off])) {\n                if (isNaN(p[0])) {\n                    break;\n                }\n                var ctlPtx;\n                var ctlPty;\n\n                var rx;\n                var ry;\n                var psi;\n                var fa;\n                var fs;\n\n                var x1 = cpx;\n                var y1 = cpy;\n\n                // convert l, H, h, V, and v to L\n                switch (c) {\n                    case 'l':\n                        cpx += p[off++];\n                        cpy += p[off++];\n                        cmd = CMD.L;\n                        path.addData(cmd, cpx, cpy);\n                        break;\n                    case 'L':\n                        cpx = p[off++];\n                        cpy = p[off++];\n                        cmd = CMD.L;\n                        path.addData(cmd, cpx, cpy);\n                        break;\n                    case 'm':\n                        cpx += p[off++];\n                        cpy += p[off++];\n                        cmd = CMD.M;\n                        path.addData(cmd, cpx, cpy);\n                        c = 'l';\n                        break;\n                    case 'M':\n                        cpx = p[off++];\n                        cpy = p[off++];\n                        cmd = CMD.M;\n                        path.addData(cmd, cpx, cpy);\n                        c = 'L';\n                        break;\n                    case 'h':\n                        cpx += p[off++];\n                        cmd = CMD.L;\n                        path.addData(cmd, cpx, cpy);\n                        break;\n                    case 'H':\n                        cpx = p[off++];\n                        cmd = CMD.L;\n                        path.addData(cmd, cpx, cpy);\n                        break;\n                    case 'v':\n                        cpy += p[off++];\n                        cmd = CMD.L;\n                        path.addData(cmd, cpx, cpy);\n                        break;\n                    case 'V':\n                        cpy = p[off++];\n                        cmd = CMD.L;\n                        path.addData(cmd, cpx, cpy);\n                        break;\n                    case 'C':\n                        cmd = CMD.C;\n                        path.addData(\n                            cmd, p[off++], p[off++], p[off++], p[off++], p[off++], p[off++]\n                        );\n                        cpx = p[off - 2];\n                        cpy = p[off - 1];\n                        break;\n                    case 'c':\n                        cmd = CMD.C;\n                        path.addData(\n                            cmd,\n                            p[off++] + cpx, p[off++] + cpy,\n                            p[off++] + cpx, p[off++] + cpy,\n                            p[off++] + cpx, p[off++] + cpy\n                        );\n                        cpx += p[off - 2];\n                        cpy += p[off - 1];\n                        break;\n                    case 'S':\n                        ctlPtx = cpx;\n                        ctlPty = cpy;\n                        var len = path.len();\n                        var pathData = path.data;\n                        if (prevCmd === CMD.C) {\n                            ctlPtx += cpx - pathData[len - 4];\n                            ctlPty += cpy - pathData[len - 3];\n                        }\n                        cmd = CMD.C;\n                        x1 = p[off++];\n                        y1 = p[off++];\n                        cpx = p[off++];\n                        cpy = p[off++];\n                        path.addData(cmd, ctlPtx, ctlPty, x1, y1, cpx, cpy);\n                        break;\n                    case 's':\n                        ctlPtx = cpx;\n                        ctlPty = cpy;\n                        var len = path.len();\n                        var pathData = path.data;\n                        if (prevCmd === CMD.C) {\n                            ctlPtx += cpx - pathData[len - 4];\n                            ctlPty += cpy - pathData[len - 3];\n                        }\n                        cmd = CMD.C;\n                        x1 = cpx + p[off++];\n                        y1 = cpy + p[off++];\n                        cpx += p[off++];\n                        cpy += p[off++];\n                        path.addData(cmd, ctlPtx, ctlPty, x1, y1, cpx, cpy);\n                        break;\n                    case 'Q':\n                        x1 = p[off++];\n                        y1 = p[off++];\n                        cpx = p[off++];\n                        cpy = p[off++];\n                        cmd = CMD.Q;\n                        path.addData(cmd, x1, y1, cpx, cpy);\n                        break;\n                    case 'q':\n                        x1 = p[off++] + cpx;\n                        y1 = p[off++] + cpy;\n                        cpx += p[off++];\n                        cpy += p[off++];\n                        cmd = CMD.Q;\n                        path.addData(cmd, x1, y1, cpx, cpy);\n                        break;\n                    case 'T':\n                        ctlPtx = cpx;\n                        ctlPty = cpy;\n                        var len = path.len();\n                        var pathData = path.data;\n                        if (prevCmd === CMD.Q) {\n                            ctlPtx += cpx - pathData[len - 4];\n                            ctlPty += cpy - pathData[len - 3];\n                        }\n                        cpx = p[off++];\n                        cpy = p[off++];\n                        cmd = CMD.Q;\n                        path.addData(cmd, ctlPtx, ctlPty, cpx, cpy);\n                        break;\n                    case 't':\n                        ctlPtx = cpx;\n                        ctlPty = cpy;\n                        var len = path.len();\n                        var pathData = path.data;\n                        if (prevCmd === CMD.Q) {\n                            ctlPtx += cpx - pathData[len - 4];\n                            ctlPty += cpy - pathData[len - 3];\n                        }\n                        cpx += p[off++];\n                        cpy += p[off++];\n                        cmd = CMD.Q;\n                        path.addData(cmd, ctlPtx, ctlPty, cpx, cpy);\n                        break;\n                    case 'A':\n                        rx = p[off++];\n                        ry = p[off++];\n                        psi = p[off++];\n                        fa = p[off++];\n                        fs = p[off++];\n\n                        x1 = cpx, y1 = cpy;\n                        cpx = p[off++];\n                        cpy = p[off++];\n                        cmd = CMD.A;\n                        processArc(\n                            x1, y1, cpx, cpy, fa, fs, rx, ry, psi, cmd, path\n                        );\n                        break;\n                    case 'a':\n                        rx = p[off++];\n                        ry = p[off++];\n                        psi = p[off++];\n                        fa = p[off++];\n                        fs = p[off++];\n\n                        x1 = cpx, y1 = cpy;\n                        cpx += p[off++];\n                        cpy += p[off++];\n                        cmd = CMD.A;\n                        processArc(\n                            x1, y1, cpx, cpy, fa, fs, rx, ry, psi, cmd, path\n                        );\n                        break;\n                }\n            }\n\n            if (c === 'z' || c === 'Z') {\n                cmd = CMD.Z;\n                path.addData(cmd);\n            }\n\n            prevCmd = cmd;\n        }\n\n        path.toStatic();\n\n        return path;\n    }\n\n    // TODO Optimize double memory cost problem\n    function createPathOptions(str, opts) {\n        var pathProxy = createPathProxyFromString(str);\n        opts = opts || {};\n        opts.buildPath = function (path) {\n            if (path.setData) {\n                path.setData(pathProxy.data);\n                // Svg and vml renderer don't have context\n                var ctx = path.getContext();\n                if (ctx) {\n                    path.rebuildPath(ctx);\n                }\n            }\n            else {\n                var ctx = path;\n                pathProxy.rebuildPath(ctx);\n            }\n        };\n\n        opts.applyTransform = function (m) {\n            transformPath(pathProxy, m);\n\n            this.dirty(true);\n        };\n\n        return opts;\n    }\n\n    module.exports = {\n        /**\n         * Create a Path object from path string data\n         * http://www.w3.org/TR/SVG/paths.html#PathData\n         * @param  {Object} opts Other options\n         */\n        createFromString: function (str, opts) {\n            return new Path(createPathOptions(str, opts));\n        },\n\n        /**\n         * Create a Path class from path string data\n         * @param  {string} str\n         * @param  {Object} opts Other options\n         */\n        extendFromString: function (str, opts) {\n            return Path.extend(createPathOptions(str, opts));\n        },\n\n        /**\n         * Merge multiple paths\n         */\n        // TODO Apply transform\n        // TODO stroke dash\n        // TODO Optimize double memory cost problem\n        mergePath: function (pathEls, opts) {\n            var pathList = [];\n            var len = pathEls.length;\n            for (var i = 0; i < len; i++) {\n                var pathEl = pathEls[i];\n                if (!pathEl.path) {\n                    pathEl.createPathProxy();\n                }\n                if (pathEl.__dirtyPath) {\n                    pathEl.buildPath(pathEl.path, pathEl.shape, true);\n                }\n                pathList.push(pathEl.path);\n            }\n\n            var pathBundle = new Path(opts);\n            // Need path proxy.\n            pathBundle.createPathProxy();\n            pathBundle.buildPath = function (path) {\n                path.appendPath(pathList);\n                // Svg and vml renderer don't have context\n                var ctx = path.getContext();\n                if (ctx) {\n                    path.rebuildPath(ctx);\n                }\n            };\n\n            return pathBundle;\n        }\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/zrender/lib/tool/path.js\n// module id = 452\n// module chunks = 0 1 2 3 4","\n\n    var CMD = require('../core/PathProxy').CMD;\n    var vec2 = require('../core/vector');\n    var v2ApplyTransform = vec2.applyTransform;\n\n    var points = [[], [], []];\n    var mathSqrt = Math.sqrt;\n    var mathAtan2 = Math.atan2;\n    function transformPath(path, m) {\n        var data = path.data;\n        var cmd;\n        var nPoint;\n        var i;\n        var j;\n        var k;\n        var p;\n\n        var M = CMD.M;\n        var C = CMD.C;\n        var L = CMD.L;\n        var R = CMD.R;\n        var A = CMD.A;\n        var Q = CMD.Q;\n\n        for (i = 0, j = 0; i < data.length;) {\n            cmd = data[i++];\n            j = i;\n            nPoint = 0;\n\n            switch (cmd) {\n                case M:\n                    nPoint = 1;\n                    break;\n                case L:\n                    nPoint = 1;\n                    break;\n                case C:\n                    nPoint = 3;\n                    break;\n                case Q:\n                    nPoint = 2;\n                    break;\n                case A:\n                    var x = m[4];\n                    var y = m[5];\n                    var sx = mathSqrt(m[0] * m[0] + m[1] * m[1]);\n                    var sy = mathSqrt(m[2] * m[2] + m[3] * m[3]);\n                    var angle = mathAtan2(-m[1] / sy, m[0] / sx);\n                    // cx\n                    data[i] *= sx;\n                    data[i++] += x;\n                    // cy\n                    data[i] *= sy;\n                    data[i++] += y;\n                    // Scale rx and ry\n                    // FIXME Assume psi is 0 here\n                    data[i++] *= sx;\n                    data[i++] *= sy;\n\n                    // Start angle\n                    data[i++] += angle;\n                    // end angle\n                    data[i++] += angle;\n                    // FIXME psi\n                    i += 2;\n                    j = i;\n                    break;\n                case R:\n                    // x0, y0\n                    p[0] = data[i++];\n                    p[1] = data[i++];\n                    v2ApplyTransform(p, p, m);\n                    data[j++] = p[0];\n                    data[j++] = p[1];\n                    // x1, y1\n                    p[0] += data[i++];\n                    p[1] += data[i++];\n                    v2ApplyTransform(p, p, m);\n                    data[j++] = p[0];\n                    data[j++] = p[1];\n            }\n\n            for (k = 0; k < nPoint; k++) {\n                var p = points[k];\n                p[0] = data[i++];\n                p[1] = data[i++];\n\n                v2ApplyTransform(p, p, m);\n                // Write back\n                data[j++] = p[0];\n                data[j++] = p[1];\n            }\n        }\n    }\n\n    module.exports = transformPath;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/zrender/lib/tool/transformPath.js\n// module id = 453\n// module chunks = 0 1 2 3 4","/*!\n * ZRender, a high performance 2d drawing library.\n *\n * Copyright (c) 2013, Baidu Inc.\n * All rights reserved.\n *\n * LICENSE\n * https://github.com/ecomfe/zrender/blob/master/LICENSE.txt\n */\n// Global defines\n\n    var guid = require('./core/guid');\n    var env = require('./core/env');\n    var zrUtil = require('./core/util');\n\n    var Handler = require('./Handler');\n    var Storage = require('./Storage');\n    var Animation = require('./animation/Animation');\n    var HandlerProxy = require('./dom/HandlerProxy');\n\n    var useVML = !env.canvasSupported;\n\n    var painterCtors = {\n        canvas: require('./Painter')\n    };\n\n    var instances = {};    // ZRender实例map索引\n\n    var zrender = {};\n\n    /**\n     * @type {string}\n     */\n    zrender.version = '3.4.4';\n\n    /**\n     * Initializing a zrender instance\n     * @param {HTMLElement} dom\n     * @param {Object} opts\n     * @param {string} [opts.renderer='canvas'] 'canvas' or 'svg'\n     * @param {number} [opts.devicePixelRatio]\n     * @param {number|string} [opts.width] Can be 'auto' (the same as null/undefined)\n     * @param {number|string} [opts.height] Can be 'auto' (the same as null/undefined)\n     * @return {module:zrender/ZRender}\n     */\n    zrender.init = function(dom, opts) {\n        var zr = new ZRender(guid(), dom, opts);\n        instances[zr.id] = zr;\n        return zr;\n    };\n\n    /**\n     * Dispose zrender instance\n     * @param {module:zrender/ZRender} zr\n     */\n    zrender.dispose = function (zr) {\n        if (zr) {\n            zr.dispose();\n        }\n        else {\n            for (var key in instances) {\n                if (instances.hasOwnProperty(key)) {\n                    instances[key].dispose();\n                }\n            }\n            instances = {};\n        }\n\n        return zrender;\n    };\n\n    /**\n     * Get zrender instance by id\n     * @param {string} id zrender instance id\n     * @return {module:zrender/ZRender}\n     */\n    zrender.getInstance = function (id) {\n        return instances[id];\n    };\n\n    zrender.registerPainter = function (name, Ctor) {\n        painterCtors[name] = Ctor;\n    };\n\n    function delInstance(id) {\n        delete instances[id];\n    }\n\n    /**\n     * @module zrender/ZRender\n     */\n    /**\n     * @constructor\n     * @alias module:zrender/ZRender\n     * @param {string} id\n     * @param {HTMLDomElement} dom\n     * @param {Object} opts\n     * @param {string} [opts.renderer='canvas'] 'canvas' or 'svg'\n     * @param {number} [opts.devicePixelRatio]\n     * @param {number} [opts.width] Can be 'auto' (the same as null/undefined)\n     * @param {number} [opts.height] Can be 'auto' (the same as null/undefined)\n     */\n    var ZRender = function(id, dom, opts) {\n\n        opts = opts || {};\n\n        /**\n         * @type {HTMLDomElement}\n         */\n        this.dom = dom;\n\n        /**\n         * @type {string}\n         */\n        this.id = id;\n\n        var self = this;\n        var storage = new Storage();\n\n        var rendererType = opts.renderer;\n        // TODO WebGL\n        if (useVML) {\n            if (!painterCtors.vml) {\n                throw new Error('You need to require \\'zrender/vml/vml\\' to support IE8');\n            }\n            rendererType = 'vml';\n        }\n        else if (!rendererType || !painterCtors[rendererType]) {\n            rendererType = 'canvas';\n        }\n        var painter = new painterCtors[rendererType](dom, storage, opts);\n\n        this.storage = storage;\n        this.painter = painter;\n\n        var handerProxy = !env.node ? new HandlerProxy(painter.getViewportRoot()) : null;\n        this.handler = new Handler(storage, painter, handerProxy, painter.root);\n\n        /**\n         * @type {module:zrender/animation/Animation}\n         */\n        this.animation = new Animation({\n            stage: {\n                update: zrUtil.bind(this.flush, this)\n            }\n        });\n        this.animation.start();\n\n        /**\n         * @type {boolean}\n         * @private\n         */\n        this._needsRefresh;\n\n        // 修改 storage.delFromStorage, 每次删除元素之前删除动画\n        // FIXME 有点ugly\n        var oldDelFromStorage = storage.delFromStorage;\n        var oldAddToStorage = storage.addToStorage;\n\n        storage.delFromStorage = function (el) {\n            oldDelFromStorage.call(storage, el);\n\n            el && el.removeSelfFromZr(self);\n        };\n\n        storage.addToStorage = function (el) {\n            oldAddToStorage.call(storage, el);\n\n            el.addSelfToZr(self);\n        };\n    };\n\n    ZRender.prototype = {\n\n        constructor: ZRender,\n        /**\n         * 获取实例唯一标识\n         * @return {string}\n         */\n        getId: function () {\n            return this.id;\n        },\n\n        /**\n         * 添加元素\n         * @param  {module:zrender/Element} el\n         */\n        add: function (el) {\n            this.storage.addRoot(el);\n            this._needsRefresh = true;\n        },\n\n        /**\n         * 删除元素\n         * @param  {module:zrender/Element} el\n         */\n        remove: function (el) {\n            this.storage.delRoot(el);\n            this._needsRefresh = true;\n        },\n\n        /**\n         * Change configuration of layer\n         * @param {string} zLevel\n         * @param {Object} config\n         * @param {string} [config.clearColor=0] Clear color\n         * @param {string} [config.motionBlur=false] If enable motion blur\n         * @param {number} [config.lastFrameAlpha=0.7] Motion blur factor. Larger value cause longer trailer\n        */\n        configLayer: function (zLevel, config) {\n            this.painter.configLayer(zLevel, config);\n            this._needsRefresh = true;\n        },\n\n        /**\n         * Repaint the canvas immediately\n         */\n        refreshImmediately: function () {\n            // Clear needsRefresh ahead to avoid something wrong happens in refresh\n            // Or it will cause zrender refreshes again and again.\n            this._needsRefresh = false;\n            this.painter.refresh();\n            /**\n             * Avoid trigger zr.refresh in Element#beforeUpdate hook\n             */\n            this._needsRefresh = false;\n        },\n\n        /**\n         * Mark and repaint the canvas in the next frame of browser\n         */\n        refresh: function() {\n            this._needsRefresh = true;\n        },\n\n        /**\n         * Perform all refresh\n         */\n        flush: function () {\n            if (this._needsRefresh) {\n                this.refreshImmediately();\n            }\n            if (this._needsRefreshHover) {\n                this.refreshHoverImmediately();\n            }\n        },\n\n        /**\n         * Add element to hover layer\n         * @param  {module:zrender/Element} el\n         * @param {Object} style\n         */\n        addHover: function (el, style) {\n            if (this.painter.addHover) {\n                this.painter.addHover(el, style);\n                this.refreshHover();\n            }\n        },\n\n        /**\n         * Add element from hover layer\n         * @param  {module:zrender/Element} el\n         */\n        removeHover: function (el) {\n            if (this.painter.removeHover) {\n                this.painter.removeHover(el);\n                this.refreshHover();\n            }\n        },\n\n        /**\n         * Clear all hover elements in hover layer\n         * @param  {module:zrender/Element} el\n         */\n        clearHover: function () {\n            if (this.painter.clearHover) {\n                this.painter.clearHover();\n                this.refreshHover();\n            }\n        },\n\n        /**\n         * Refresh hover in next frame\n         */\n        refreshHover: function () {\n            this._needsRefreshHover = true;\n        },\n\n        /**\n         * Refresh hover immediately\n         */\n        refreshHoverImmediately: function () {\n            this._needsRefreshHover = false;\n            this.painter.refreshHover && this.painter.refreshHover();\n        },\n\n        /**\n         * Resize the canvas.\n         * Should be invoked when container size is changed\n         * @param {Object} [opts]\n         * @param {number|string} [opts.width] Can be 'auto' (the same as null/undefined)\n         * @param {number|string} [opts.height] Can be 'auto' (the same as null/undefined)\n         */\n        resize: function(opts) {\n            opts = opts || {};\n            this.painter.resize(opts.width, opts.height);\n            this.handler.resize();\n        },\n\n        /**\n         * Stop and clear all animation immediately\n         */\n        clearAnimation: function () {\n            this.animation.clear();\n        },\n\n        /**\n         * Get container width\n         */\n        getWidth: function() {\n            return this.painter.getWidth();\n        },\n\n        /**\n         * Get container height\n         */\n        getHeight: function() {\n            return this.painter.getHeight();\n        },\n\n        /**\n         * Export the canvas as Base64 URL\n         * @param {string} type\n         * @param {string} [backgroundColor='#fff']\n         * @return {string} Base64 URL\n         */\n        // toDataURL: function(type, backgroundColor) {\n        //     return this.painter.getRenderedCanvas({\n        //         backgroundColor: backgroundColor\n        //     }).toDataURL(type);\n        // },\n\n        /**\n         * Converting a path to image.\n         * It has much better performance of drawing image rather than drawing a vector path.\n         * @param {module:zrender/graphic/Path} e\n         * @param {number} width\n         * @param {number} height\n         */\n        pathToImage: function(e, dpr) {\n            return this.painter.pathToImage(e, dpr);\n        },\n\n        /**\n         * Set default cursor\n         * @param {string} [cursorStyle='default'] 例如 crosshair\n         */\n        setCursorStyle: function (cursorStyle) {\n            this.handler.setCursorStyle(cursorStyle);\n        },\n\n        /**\n         * Find hovered element\n         * @param {number} x\n         * @param {number} y\n         * @return {Object} {target, topTarget}\n         */\n        findHover: function (x, y) {\n            return this.handler.findHover(x, y);\n        },\n\n        /**\n         * Bind event\n         *\n         * @param {string} eventName Event name\n         * @param {Function} eventHandler Handler function\n         * @param {Object} [context] Context object\n         */\n        on: function(eventName, eventHandler, context) {\n            this.handler.on(eventName, eventHandler, context);\n        },\n\n        /**\n         * Unbind event\n         * @param {string} eventName Event name\n         * @param {Function} [eventHandler] Handler function\n         */\n        off: function(eventName, eventHandler) {\n            this.handler.off(eventName, eventHandler);\n        },\n\n        /**\n         * Trigger event manually\n         *\n         * @param {string} eventName Event name\n         * @param {event=} event Event object\n         */\n        trigger: function (eventName, event) {\n            this.handler.trigger(eventName, event);\n        },\n\n\n        /**\n         * Clear all objects and the canvas.\n         */\n        clear: function () {\n            this.storage.delRoot();\n            this.painter.clear();\n        },\n\n        /**\n         * Dispose self.\n         */\n        dispose: function () {\n            this.animation.stop();\n\n            this.clear();\n            this.storage.dispose();\n            this.painter.dispose();\n            this.handler.dispose();\n\n            this.animation =\n            this.storage =\n            this.painter =\n            this.handler = null;\n\n            delInstance(this.id);\n        }\n    };\n\n    module.exports = zrender;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/zrender/lib/zrender.js\n// module id = 454\n// module chunks = 0 1 2 3 4","\n\n    var zrUtil = require('zrender/lib/core/util');\n\n    require('../coord/cartesian/Grid');\n\n    require('./bar/BarSeries');\n    require('./bar/BarView');\n\n    var barLayoutGrid = require('../layout/barGrid');\n    var echarts = require('../echarts');\n\n    echarts.registerLayout(zrUtil.curry(barLayoutGrid, 'bar'));\n    // Visual coding for legend\n    echarts.registerVisual(function (ecModel) {\n        ecModel.eachSeriesByType('bar', function (seriesModel) {\n            var data = seriesModel.getData();\n            data.setVisual('legendSymbol', 'roundRect');\n        });\n    });\n\n    // In case developer forget to include grid component\n    require('../component/grid');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/chart/bar.js\n// module id = 456\n// module chunks = 0 1 2 3","\n\n    module.exports = require('./BaseBarSeries').extend({\n\n        type: 'series.bar',\n\n        dependencies: ['grid', 'polar'],\n\n        brushSelector: 'rect'\n    });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/chart/bar/BarSeries.js\n// module id = 457\n// module chunks = 0 1 2 3","'use strict';\n\n\n    var zrUtil = require('zrender/lib/core/util');\n    var graphic = require('../../util/graphic');\n    var helper = require('./helper');\n\n    var BAR_BORDER_WIDTH_QUERY = ['itemStyle', 'normal', 'barBorderWidth'];\n\n    // FIXME\n    // Just for compatible with ec2.\n    zrUtil.extend(require('../../model/Model').prototype, require('./barItemStyle'));\n\n    var BarView = require('../../echarts').extendChartView({\n\n        type: 'bar',\n\n        render: function (seriesModel, ecModel, api) {\n            var coordinateSystemType = seriesModel.get('coordinateSystem');\n\n            if (coordinateSystemType === 'cartesian2d') {\n                this._renderOnCartesian(seriesModel, ecModel, api);\n            }\n\n            return this.group;\n        },\n\n        dispose: zrUtil.noop,\n\n        _renderOnCartesian: function (seriesModel, ecModel, api) {\n            var group = this.group;\n            var data = seriesModel.getData();\n            var oldData = this._data;\n\n            var cartesian = seriesModel.coordinateSystem;\n            var baseAxis = cartesian.getBaseAxis();\n            var isHorizontal = baseAxis.isHorizontal();\n            var animationModel = seriesModel.isAnimationEnabled() ? seriesModel : null;\n\n            data.diff(oldData)\n                .add(function (dataIndex) {\n                    if (!data.hasValue(dataIndex)) {\n                        return;\n                    }\n\n                    var itemModel = data.getItemModel(dataIndex);\n                    var layout = getRectItemLayout(data, dataIndex, itemModel);\n                    var el = createRect(data, dataIndex, itemModel, layout, isHorizontal, animationModel);\n                    data.setItemGraphicEl(dataIndex, el);\n                    group.add(el);\n\n                    updateStyle(el, data, dataIndex, itemModel, layout, seriesModel, isHorizontal);\n                })\n                .update(function (newIndex, oldIndex) {\n                    var el = oldData.getItemGraphicEl(oldIndex);\n\n                    if (!data.hasValue(newIndex)) {\n                        group.remove(el);\n                        return;\n                    }\n\n                    var itemModel = data.getItemModel(newIndex);\n                    var layout = getRectItemLayout(data, newIndex, itemModel);\n\n                    if (el) {\n                        graphic.updateProps(el, {shape: layout}, animationModel, newIndex);\n                    }\n                    else {\n                        el = createRect(data, newIndex, itemModel, layout, isHorizontal, animationModel, true);\n                    }\n\n                    data.setItemGraphicEl(newIndex, el);\n                    // Add back\n                    group.add(el);\n\n                    updateStyle(el, data, newIndex, itemModel, layout, seriesModel, isHorizontal);\n                })\n                .remove(function (dataIndex) {\n                    var el = oldData.getItemGraphicEl(dataIndex);\n                    el && removeRect(dataIndex, animationModel, el);\n                })\n                .execute();\n\n            this._data = data;\n        },\n\n        remove: function (ecModel, api) {\n            var group = this.group;\n            var data = this._data;\n            if (ecModel.get('animation')) {\n                if (data) {\n                    data.eachItemGraphicEl(function (el) {\n                        removeRect(el.dataIndex, ecModel, el);\n                    });\n                }\n            }\n            else {\n                group.removeAll();\n            }\n        }\n    });\n\n    function createRect(data, dataIndex, itemModel, layout, isHorizontal, animationModel, isUpdate) {\n        var rect = new graphic.Rect({shape: zrUtil.extend({}, layout)});\n\n        // Animation\n        if (animationModel) {\n            var rectShape = rect.shape;\n            var animateProperty = isHorizontal ? 'height' : 'width';\n            var animateTarget = {};\n            rectShape[animateProperty] = 0;\n            animateTarget[animateProperty] = layout[animateProperty];\n            graphic[isUpdate ? 'updateProps' : 'initProps'](rect, {\n                shape: animateTarget\n            }, animationModel, dataIndex);\n        }\n\n        return rect;\n    }\n\n    function removeRect(dataIndex, animationModel, el) {\n        // Not show text when animating\n        el.style.text = '';\n        graphic.updateProps(el, {\n            shape: {\n                width: 0\n            }\n        }, animationModel, dataIndex, function () {\n            el.parent && el.parent.remove(el);\n        });\n    }\n\n    function getRectItemLayout(data, dataIndex, itemModel) {\n        var layout = data.getItemLayout(dataIndex);\n        var fixedLineWidth = getLineWidth(itemModel, layout);\n\n        // fix layout with lineWidth\n        var signX = layout.width > 0 ? 1 : -1;\n        var signY = layout.height > 0 ? 1 : -1;\n        return {\n            x: layout.x + signX * fixedLineWidth / 2,\n            y: layout.y + signY * fixedLineWidth / 2,\n            width: layout.width - signX * fixedLineWidth,\n            height: layout.height - signY * fixedLineWidth\n        };\n    }\n\n    function updateStyle(el, data, dataIndex, itemModel, layout, seriesModel, isHorizontal) {\n        var color = data.getItemVisual(dataIndex, 'color');\n        var opacity = data.getItemVisual(dataIndex, 'opacity');\n        var itemStyleModel = itemModel.getModel('itemStyle.normal');\n        var hoverStyle = itemModel.getModel('itemStyle.emphasis').getBarItemStyle();\n\n        el.setShape('r', itemStyleModel.get('barBorderRadius') || 0);\n\n        el.useStyle(zrUtil.defaults(\n            {\n                fill: color,\n                opacity: opacity\n            },\n            itemStyleModel.getBarItemStyle()\n        ));\n\n        var labelPositionOutside = isHorizontal\n            ? (layout.height > 0 ? 'bottom' : 'top')\n            : (layout.width > 0 ? 'left' : 'right');\n\n        helper.setLabel(\n            el.style, hoverStyle, itemModel, color,\n            seriesModel, dataIndex, labelPositionOutside\n        );\n\n        graphic.setHoverStyle(el, hoverStyle);\n    }\n\n    // In case width or height are too small.\n    function getLineWidth(itemModel, rawLayout) {\n        var lineWidth = itemModel.get(BAR_BORDER_WIDTH_QUERY) || 0;\n        return Math.min(lineWidth, Math.abs(rawLayout.width), Math.abs(rawLayout.height));\n    }\n\n    module.exports = BarView;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/chart/bar/BarView.js\n// module id = 458\n// module chunks = 0 1 2 3","'use strict';\n\n\n    var SeriesModel = require('../../model/Series');\n    var createListFromArray = require('../helper/createListFromArray');\n\n    module.exports = SeriesModel.extend({\n\n        type: 'series.__base_bar__',\n\n        getInitialData: function (option, ecModel) {\n            if (__DEV__) {\n                var coordSys = option.coordinateSystem;\n                if (coordSys !== 'cartesian2d') {\n                    throw new Error('Bar only support cartesian2d coordinateSystem');\n                }\n            }\n            return createListFromArray(option.data, this, ecModel);\n        },\n\n        getMarkerPosition: function (value) {\n            var coordSys = this.coordinateSystem;\n            if (coordSys) {\n                // PENDING if clamp ?\n                var pt = coordSys.dataToPoint(value, true);\n                var data = this.getData();\n                var offset = data.getLayout('offset');\n                var size = data.getLayout('size');\n                var offsetIndex = coordSys.getBaseAxis().isHorizontal() ? 0 : 1;\n                pt[offsetIndex] += offset + size / 2;\n                return pt;\n            }\n            return [NaN, NaN];\n        },\n\n        defaultOption: {\n            zlevel: 0,                  // 一级层叠\n            z: 2,                       // 二级层叠\n            coordinateSystem: 'cartesian2d',\n            legendHoverLink: true,\n            // stack: null\n\n            // Cartesian coordinate system\n            // xAxisIndex: 0,\n            // yAxisIndex: 0,\n\n            // 最小高度改为0\n            barMinHeight: 0,\n\n            // barMaxWidth: null,\n            // 默认自适应\n            // barWidth: null,\n            // 柱间距离，默认为柱形宽度的30%，可设固定值\n            // barGap: '30%',\n            // 类目间柱形距离，默认为类目间距的20%，可设固定值\n            // barCategoryGap: '20%',\n            // label: {\n            //     normal: {\n            //         show: false\n            //     }\n            // },\n            itemStyle: {\n                normal: {\n                    // color: '各异'\n                },\n                emphasis: {}\n            }\n        }\n    });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/chart/bar/BaseBarSeries.js\n// module id = 459\n// module chunks = 0 1 2 3","\n\n\n    var getBarItemStyle = require('../../model/mixin/makeStyleMapper')(\n        [\n            ['fill', 'color'],\n            ['stroke', 'borderColor'],\n            ['lineWidth', 'borderWidth'],\n            // Compatitable with 2\n            ['stroke', 'barBorderColor'],\n            ['lineWidth', 'barBorderWidth'],\n            ['opacity'],\n            ['shadowBlur'],\n            ['shadowOffsetX'],\n            ['shadowOffsetY'],\n            ['shadowColor']\n        ]\n    );\n    module.exports = {\n        getBarItemStyle: function (excludes) {\n            var style = getBarItemStyle.call(this, excludes);\n            if (this.getBorderLineDash) {\n                var lineDash = this.getBorderLineDash();\n                lineDash && (style.lineDash = lineDash);\n            }\n            return style;\n        }\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/chart/bar/barItemStyle.js\n// module id = 460\n// module chunks = 0 1 2 3","\n\n    var zrUtil = require('zrender/lib/core/util');\n    var graphic = require('../../util/graphic');\n\n    var helper = {};\n\n    helper.setLabel = function (\n        normalStyle, hoverStyle, itemModel, color, seriesModel, dataIndex, labelPositionOutside\n    ) {\n        var labelModel = itemModel.getModel('label.normal');\n        var hoverLabelModel = itemModel.getModel('label.emphasis');\n\n        if (labelModel.get('show')) {\n            setLabel(\n                normalStyle, labelModel, color,\n                zrUtil.retrieve(\n                    seriesModel.getFormattedLabel(dataIndex, 'normal'),\n                    seriesModel.getRawValue(dataIndex)\n                ),\n                labelPositionOutside\n            );\n        }\n        else {\n            normalStyle.text = '';\n        }\n\n        if (hoverLabelModel.get('show')) {\n            setLabel(\n                hoverStyle, hoverLabelModel, color,\n                zrUtil.retrieve(\n                    seriesModel.getFormattedLabel(dataIndex, 'emphasis'),\n                    seriesModel.getRawValue(dataIndex)\n                ),\n                labelPositionOutside\n            );\n        }\n        else {\n            hoverStyle.text = '';\n        }\n    };\n\n    function setLabel(style, model, color, labelText, labelPositionOutside) {\n        graphic.setText(style, model, color);\n        style.text = labelText;\n        if (style.textPosition === 'outside') {\n            style.textPosition = labelPositionOutside;\n        }\n    }\n\n    module.exports = helper;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/chart/bar/helper.js\n// module id = 461\n// module chunks = 0 1 2 3","'use strict';\n\n\n    var echarts = require('../echarts');\n    var graphic = require('../util/graphic');\n    var layout = require('../util/layout');\n\n    // Model\n    echarts.extendComponentModel({\n\n        type: 'title',\n\n        layoutMode: {type: 'box', ignoreSize: true},\n\n        defaultOption: {\n            // 一级层叠\n            zlevel: 0,\n            // 二级层叠\n            z: 6,\n            show: true,\n\n            text: '',\n            // 超链接跳转\n            // link: null,\n            // 仅支持self | blank\n            target: 'blank',\n            subtext: '',\n\n            // 超链接跳转\n            // sublink: null,\n            // 仅支持self | blank\n            subtarget: 'blank',\n\n            // 'center' ¦ 'left' ¦ 'right'\n            // ¦ {number}（x坐标，单位px）\n            left: 0,\n            // 'top' ¦ 'bottom' ¦ 'center'\n            // ¦ {number}（y坐标，单位px）\n            top: 0,\n\n            // 水平对齐\n            // 'auto' | 'left' | 'right' | 'center'\n            // 默认根据 left 的位置判断是左对齐还是右对齐\n            // textAlign: null\n            //\n            // 垂直对齐\n            // 'auto' | 'top' | 'bottom' | 'middle'\n            // 默认根据 top 位置判断是上对齐还是下对齐\n            // textBaseline: null\n\n            backgroundColor: 'rgba(0,0,0,0)',\n\n            // 标题边框颜色\n            borderColor: '#ccc',\n\n            // 标题边框线宽，单位px，默认为0（无边框）\n            borderWidth: 0,\n\n            // 标题内边距，单位px，默认各方向内边距为5，\n            // 接受数组分别设定上右下左边距，同css\n            padding: 5,\n\n            // 主副标题纵向间隔，单位px，默认为10，\n            itemGap: 10,\n            textStyle: {\n                fontSize: 18,\n                fontWeight: 'bolder',\n                color: '#333'\n            },\n            subtextStyle: {\n                color: '#aaa'\n            }\n        }\n    });\n\n    // View\n    echarts.extendComponentView({\n\n        type: 'title',\n\n        render: function (titleModel, ecModel, api) {\n            this.group.removeAll();\n\n            if (!titleModel.get('show')) {\n                return;\n            }\n\n            var group = this.group;\n\n            var textStyleModel = titleModel.getModel('textStyle');\n            var subtextStyleModel = titleModel.getModel('subtextStyle');\n\n            var textAlign = titleModel.get('textAlign');\n            var textBaseline = titleModel.get('textBaseline');\n\n            var textEl = new graphic.Text({\n                style: {\n                    text: titleModel.get('text'),\n                    textFont: textStyleModel.getFont(),\n                    fill: textStyleModel.getTextColor()\n                },\n                z2: 10\n            });\n\n            var textRect = textEl.getBoundingRect();\n\n            var subText = titleModel.get('subtext');\n            var subTextEl = new graphic.Text({\n                style: {\n                    text: subText,\n                    textFont: subtextStyleModel.getFont(),\n                    fill: subtextStyleModel.getTextColor(),\n                    y: textRect.height + titleModel.get('itemGap'),\n                    textBaseline: 'top'\n                },\n                z2: 10\n            });\n\n            var link = titleModel.get('link');\n            var sublink = titleModel.get('sublink');\n\n            textEl.silent = !link;\n            subTextEl.silent = !sublink;\n\n            if (link) {\n                textEl.on('click', function () {\n                    window.open(link, '_' + titleModel.get('target'));\n                });\n            }\n            if (sublink) {\n                subTextEl.on('click', function () {\n                    window.open(sublink, '_' + titleModel.get('subtarget'));\n                });\n            }\n\n            group.add(textEl);\n            subText && group.add(subTextEl);\n            // If no subText, but add subTextEl, there will be an empty line.\n\n            var groupRect = group.getBoundingRect();\n            var layoutOption = titleModel.getBoxLayoutParams();\n            layoutOption.width = groupRect.width;\n            layoutOption.height = groupRect.height;\n            var layoutRect = layout.getLayoutRect(\n                layoutOption, {\n                    width: api.getWidth(),\n                    height: api.getHeight()\n                }, titleModel.get('padding')\n            );\n            // Adjust text align based on position\n            if (!textAlign) {\n                // Align left if title is on the left. center and right is same\n                textAlign = titleModel.get('left') || titleModel.get('right');\n                if (textAlign === 'middle') {\n                    textAlign = 'center';\n                }\n                // Adjust layout by text align\n                if (textAlign === 'right') {\n                    layoutRect.x += layoutRect.width;\n                }\n                else if (textAlign === 'center') {\n                    layoutRect.x += layoutRect.width / 2;\n                }\n            }\n            if (!textBaseline) {\n                textBaseline = titleModel.get('top') || titleModel.get('bottom');\n                if (textBaseline === 'center') {\n                    textBaseline = 'middle';\n                }\n                if (textBaseline === 'bottom') {\n                    layoutRect.y += layoutRect.height;\n                }\n                else if (textBaseline === 'middle') {\n                    layoutRect.y += layoutRect.height / 2;\n                }\n\n                textBaseline = textBaseline || 'top';\n            }\n\n            group.attr('position', [layoutRect.x, layoutRect.y]);\n            var alignStyle = {\n                textAlign: textAlign,\n                textVerticalAlign: textBaseline\n            };\n            textEl.setStyle(alignStyle);\n            subTextEl.setStyle(alignStyle);\n\n            // Render background\n            // Get groupRect again because textAlign has been changed\n            groupRect = group.getBoundingRect();\n            var padding = layoutRect.margin;\n            var style = titleModel.getItemStyle(['color', 'opacity']);\n            style.fill = titleModel.get('backgroundColor');\n            var rect = new graphic.Rect({\n                shape: {\n                    x: groupRect.x - padding[3],\n                    y: groupRect.y - padding[0],\n                    width: groupRect.width + padding[1] + padding[3],\n                    height: groupRect.height + padding[0] + padding[2]\n                },\n                style: style,\n                silent: true\n            });\n            graphic.subPixelOptimizeRect(rect);\n\n            group.add(rect);\n        }\n    });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/component/title.js\n// module id = 462\n// module chunks = 1 2 3 4","'use strict';\n\n\n    var zrUtil = require('zrender/lib/core/util');\n    var numberUtil = require('../util/number');\n    var parsePercent = numberUtil.parsePercent;\n\n    function getSeriesStackId(seriesModel) {\n        return seriesModel.get('stack') || '__ec_stack_' + seriesModel.seriesIndex;\n    }\n\n    function getAxisKey(axis) {\n        return axis.dim + axis.index;\n    }\n\n    function calBarWidthAndOffset(barSeries, api) {\n        // Columns info on each category axis. Key is cartesian name\n        var columnsMap = {};\n\n        zrUtil.each(barSeries, function (seriesModel, idx) {\n            var data = seriesModel.getData();\n            var cartesian = seriesModel.coordinateSystem;\n\n            var baseAxis = cartesian.getBaseAxis();\n            var axisExtent = baseAxis.getExtent();\n            var bandWidth = baseAxis.type === 'category'\n                ? baseAxis.getBandWidth()\n                : (Math.abs(axisExtent[1] - axisExtent[0]) / data.count());\n\n            var columnsOnAxis = columnsMap[getAxisKey(baseAxis)] || {\n                bandWidth: bandWidth,\n                remainedWidth: bandWidth,\n                autoWidthCount: 0,\n                categoryGap: '20%',\n                gap: '30%',\n                stacks: {}\n            };\n            var stacks = columnsOnAxis.stacks;\n            columnsMap[getAxisKey(baseAxis)] = columnsOnAxis;\n\n            var stackId = getSeriesStackId(seriesModel);\n\n            if (!stacks[stackId]) {\n                columnsOnAxis.autoWidthCount++;\n            }\n            stacks[stackId] = stacks[stackId] || {\n                width: 0,\n                maxWidth: 0\n            };\n\n            var barWidth = parsePercent(\n                seriesModel.get('barWidth'), bandWidth\n            );\n            var barMaxWidth = parsePercent(\n                seriesModel.get('barMaxWidth'), bandWidth\n            );\n            var barGap = seriesModel.get('barGap');\n            var barCategoryGap = seriesModel.get('barCategoryGap');\n\n            // Caution: In a single coordinate system, these barGrid attributes\n            // will be shared by series. Consider that they have default values,\n            // only the attributes set on the last series will work.\n            // Do not change this fact unless there will be a break change.\n\n            // TODO\n            if (barWidth && !stacks[stackId].width) {\n                barWidth = Math.min(columnsOnAxis.remainedWidth, barWidth);\n                stacks[stackId].width = barWidth;\n                columnsOnAxis.remainedWidth -= barWidth;\n            }\n\n            barMaxWidth && (stacks[stackId].maxWidth = barMaxWidth);\n            (barGap != null) && (columnsOnAxis.gap = barGap);\n            (barCategoryGap != null) && (columnsOnAxis.categoryGap = barCategoryGap);\n        });\n\n        var result = {};\n\n        zrUtil.each(columnsMap, function (columnsOnAxis, coordSysName) {\n\n            result[coordSysName] = {};\n\n            var stacks = columnsOnAxis.stacks;\n            var bandWidth = columnsOnAxis.bandWidth;\n            var categoryGap = parsePercent(columnsOnAxis.categoryGap, bandWidth);\n            var barGapPercent = parsePercent(columnsOnAxis.gap, 1);\n\n            var remainedWidth = columnsOnAxis.remainedWidth;\n            var autoWidthCount = columnsOnAxis.autoWidthCount;\n            var autoWidth = (remainedWidth - categoryGap)\n                / (autoWidthCount + (autoWidthCount - 1) * barGapPercent);\n            autoWidth = Math.max(autoWidth, 0);\n\n            // Find if any auto calculated bar exceeded maxBarWidth\n            zrUtil.each(stacks, function (column, stack) {\n                var maxWidth = column.maxWidth;\n                if (!column.width && maxWidth && maxWidth < autoWidth) {\n                    maxWidth = Math.min(maxWidth, remainedWidth);\n                    remainedWidth -= maxWidth;\n                    column.width = maxWidth;\n                    autoWidthCount--;\n                }\n            });\n\n            // Recalculate width again\n            autoWidth = (remainedWidth - categoryGap)\n                / (autoWidthCount + (autoWidthCount - 1) * barGapPercent);\n            autoWidth = Math.max(autoWidth, 0);\n\n            var widthSum = 0;\n            var lastColumn;\n            zrUtil.each(stacks, function (column, idx) {\n                if (!column.width) {\n                    column.width = autoWidth;\n                }\n                lastColumn = column;\n                widthSum += column.width * (1 + barGapPercent);\n            });\n            if (lastColumn) {\n                widthSum -= lastColumn.width * barGapPercent;\n            }\n\n            var offset = -widthSum / 2;\n            zrUtil.each(stacks, function (column, stackId) {\n                result[coordSysName][stackId] = result[coordSysName][stackId] || {\n                    offset: offset,\n                    width: column.width\n                };\n\n                offset += column.width * (1 + barGapPercent);\n            });\n        });\n\n        return result;\n    }\n\n    /**\n     * @param {string} seriesType\n     * @param {module:echarts/model/Global} ecModel\n     * @param {module:echarts/ExtensionAPI} api\n     */\n    function barLayoutGrid(seriesType, ecModel, api) {\n\n        var barWidthAndOffset = calBarWidthAndOffset(\n            zrUtil.filter(\n                ecModel.getSeriesByType(seriesType),\n                function (seriesModel) {\n                    return !ecModel.isSeriesFiltered(seriesModel)\n                        && seriesModel.coordinateSystem\n                        && seriesModel.coordinateSystem.type === 'cartesian2d';\n                }\n            )\n        );\n\n        var lastStackCoords = {};\n        var lastStackCoordsOrigin = {};\n\n        ecModel.eachSeriesByType(seriesType, function (seriesModel) {\n\n            var data = seriesModel.getData();\n            var cartesian = seriesModel.coordinateSystem;\n            var baseAxis = cartesian.getBaseAxis();\n\n            var stackId = getSeriesStackId(seriesModel);\n            var columnLayoutInfo = barWidthAndOffset[getAxisKey(baseAxis)][stackId];\n            var columnOffset = columnLayoutInfo.offset;\n            var columnWidth = columnLayoutInfo.width;\n            var valueAxis = cartesian.getOtherAxis(baseAxis);\n\n            var barMinHeight = seriesModel.get('barMinHeight') || 0;\n\n            var valueAxisStart = baseAxis.onZero\n                ? valueAxis.toGlobalCoord(valueAxis.dataToCoord(0))\n                : valueAxis.getGlobalExtent()[0];\n\n            var coords = cartesian.dataToPoints(data, true);\n            lastStackCoords[stackId] = lastStackCoords[stackId] || [];\n            lastStackCoordsOrigin[stackId] = lastStackCoordsOrigin[stackId] || []; // Fix #4243\n\n            data.setLayout({\n                offset: columnOffset,\n                size: columnWidth\n            });\n\n            data.each(valueAxis.dim, function (value, idx) {\n                if (isNaN(value)) {\n                    return;\n                }\n\n                if (!lastStackCoords[stackId][idx]) {\n                    lastStackCoords[stackId][idx] = {\n                        p: valueAxisStart, // Positive stack\n                        n: valueAxisStart  // Negative stack\n                    };\n                    lastStackCoordsOrigin[stackId][idx] = {\n                        p: valueAxisStart, // Positive stack\n                        n: valueAxisStart  // Negative stack\n                    };\n                }\n                var sign = value >= 0 ? 'p' : 'n';\n                var coord = coords[idx];\n                var lastCoord = lastStackCoords[stackId][idx][sign];\n                var lastCoordOrigin = lastStackCoordsOrigin[stackId][idx][sign];\n                var x;\n                var y;\n                var width;\n                var height;\n\n                if (valueAxis.isHorizontal()) {\n                    x = lastCoord;\n                    y = coord[1] + columnOffset;\n                    width = coord[0] - lastCoordOrigin;\n                    height = columnWidth;\n\n                    lastStackCoordsOrigin[stackId][idx][sign] += width;\n                    if (Math.abs(width) < barMinHeight) {\n                        width = (width < 0 ? -1 : 1) * barMinHeight;\n                    }\n                    lastStackCoords[stackId][idx][sign] += width;\n                }\n                else {\n                    x = coord[0] + columnOffset;\n                    y = lastCoord;\n                    width = columnWidth;\n                    height = coord[1] - lastCoordOrigin;\n\n                    lastStackCoordsOrigin[stackId][idx][sign] += height;\n                    if (Math.abs(height) < barMinHeight) {\n                        // Include zero to has a positive bar\n                        height = (height <= 0 ? -1 : 1) * barMinHeight;\n                    }\n                    lastStackCoords[stackId][idx][sign] += height;\n                }\n\n                data.setItemLayout(idx, {\n                    x: x,\n                    y: y,\n                    width: width,\n                    height: height\n                });\n            }, true);\n\n        }, this);\n    }\n\n    module.exports = barLayoutGrid;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/layout/barGrid.js\n// module id = 463\n// module chunks = 0 1 2 3","\n\n    /**\n     * Calculate slider move result.\n     *\n     * @param {number} delta Move length.\n     * @param {Array.<number>} handleEnds handleEnds[0] and be bigger then handleEnds[1].\n     *                                    handleEnds will be modified in this method.\n     * @param {Array.<number>} extent handleEnds is restricted by extent.\n     *                                extent[0] should less or equals than extent[1].\n     * @param {string} mode 'rigid': Math.abs(handleEnds[0] - handleEnds[1]) remain unchanged,\n     *                      'cross' handleEnds[0] can be bigger then handleEnds[1],\n     *                      'push' handleEnds[0] can not be bigger then handleEnds[1],\n     *                              when they touch, one push other.\n     * @param {number} handleIndex If mode is 'rigid', handleIndex is not required.\n     * @param {Array.<number>} The input handleEnds.\n     */\n    module.exports = function (delta, handleEnds, extent, mode, handleIndex) {\n        if (!delta) {\n            return handleEnds;\n        }\n\n        if (mode === 'rigid') {\n            delta = getRealDelta(delta, handleEnds, extent);\n            handleEnds[0] += delta;\n            handleEnds[1] += delta;\n        }\n        else {\n            delta = getRealDelta(delta, handleEnds[handleIndex], extent);\n            handleEnds[handleIndex] += delta;\n\n            if (mode === 'push' && handleEnds[0] > handleEnds[1]) {\n                handleEnds[1 - handleIndex] = handleEnds[handleIndex];\n            }\n        }\n\n        return handleEnds;\n\n        function getRealDelta(delta, handleEnds, extent) {\n            var handleMinMax = !handleEnds.length\n                ? [handleEnds, handleEnds]\n                : handleEnds.slice();\n            handleEnds[0] > handleEnds[1] && handleMinMax.reverse();\n\n            if (delta < 0 && handleMinMax[0] + delta < extent[0]) {\n                delta = extent[0] - handleMinMax[0];\n            }\n            if (delta > 0 && handleMinMax[1] + delta > extent[1]) {\n                delta = extent[1] - handleMinMax[1];\n            }\n            return delta;\n        }\n    };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/component/helper/sliderMove.js\n// module id = 464\n// module chunks = 1 2 3","/**\n * @file Controller visual map model\n */\n\n\n    var echarts = require('../../echarts');\n    var zrUtil = require('zrender/lib/core/util');\n    var env = require('zrender/lib/core/env');\n    var visualDefault = require('../../visual/visualDefault');\n    var VisualMapping = require('../../visual/VisualMapping');\n    var visualSolution = require('../../visual/visualSolution');\n    var mapVisual = VisualMapping.mapVisual;\n    var modelUtil = require('../../util/model');\n    var eachVisual = VisualMapping.eachVisual;\n    var numberUtil = require('../../util/number');\n    var isArray = zrUtil.isArray;\n    var each = zrUtil.each;\n    var asc = numberUtil.asc;\n    var linearMap = numberUtil.linearMap;\n    var noop = zrUtil.noop;\n\n    var DEFAULT_COLOR = ['#f6efa6', '#d88273', '#bf444c'];\n\n    var VisualMapModel = echarts.extendComponentModel({\n\n        type: 'visualMap',\n\n        dependencies: ['series'],\n\n        /**\n         * @readOnly\n         * @type {Array.<string>}\n         */\n        stateList: ['inRange', 'outOfRange'],\n\n        /**\n         * @readOnly\n         * @type {Array.<string>}\n         */\n        replacableOptionKeys: [\n            'inRange', 'outOfRange', 'target', 'controller', 'color'\n        ],\n\n        /**\n         * [lowerBound, upperBound]\n         *\n         * @readOnly\n         * @type {Array.<number>}\n         */\n        dataBound: [-Infinity, Infinity],\n\n        /**\n         * @readOnly\n         * @type {string|Object}\n         */\n        layoutMode: {type: 'box', ignoreSize: true},\n\n        /**\n         * @protected\n         */\n        defaultOption: {\n            show: true,\n\n            zlevel: 0,\n            z: 4,\n\n            seriesIndex: null,       // 所控制的series indices，默认所有有value的series.\n\n                                    // set min: 0, max: 200, only for campatible with ec2.\n                                    // In fact min max should not have default value.\n            min: 0,                 // min value, must specified if pieces is not specified.\n            max: 200,               // max value, must specified if pieces is not specified.\n\n            dimension: null,\n            inRange: null,          // 'color', 'colorHue', 'colorSaturation', 'colorLightness', 'colorAlpha',\n                                    // 'symbol', 'symbolSize'\n            outOfRange: null,       // 'color', 'colorHue', 'colorSaturation',\n                                    // 'colorLightness', 'colorAlpha',\n                                    // 'symbol', 'symbolSize'\n\n            left: 0,                // 'center' ¦ 'left' ¦ 'right' ¦ {number} (px)\n            right: null,            // The same as left.\n            top: null,              // 'top' ¦ 'bottom' ¦ 'center' ¦ {number} (px)\n            bottom: 0,              // The same as top.\n\n            itemWidth: null,\n            itemHeight: null,\n            inverse: false,\n            orient: 'vertical',        // 'horizontal' ¦ 'vertical'\n\n            backgroundColor: 'rgba(0,0,0,0)',\n            borderColor: '#ccc',       // 值域边框颜色\n            contentColor: '#5793f3',\n            inactiveColor: '#aaa',\n            borderWidth: 0,            // 值域边框线宽，单位px，默认为0（无边框）\n            padding: 5,                // 值域内边距，单位px，默认各方向内边距为5，\n                                       // 接受数组分别设定上右下左边距，同css\n            textGap: 10,               //\n            precision: 0,              // 小数精度，默认为0，无小数点\n            color: null,               //颜色（deprecated，兼容ec2，顺序同pieces，不同于inRange/outOfRange）\n\n            formatter: null,\n            text: null,                // 文本，如['高', '低']，兼容ec2，text[0]对应高值，text[1]对应低值\n            textStyle: {\n                color: '#333'          // 值域文字颜色\n            }\n        },\n\n        /**\n         * @protected\n         */\n        init: function (option, parentModel, ecModel) {\n\n            /**\n             * @private\n             * @type {Array.<number>}\n             */\n            this._dataExtent;\n\n            /**\n             * @readOnly\n             */\n            this.targetVisuals = {};\n\n            /**\n             * @readOnly\n             */\n            this.controllerVisuals = {};\n\n            /**\n             * @readOnly\n             */\n            this.textStyleModel;\n\n            /**\n             * [width, height]\n             * @readOnly\n             * @type {Array.<number>}\n             */\n            this.itemSize;\n\n            this.mergeDefaultAndTheme(option, ecModel);\n        },\n\n        /**\n         * @protected\n         */\n        optionUpdated: function (newOption, isInit) {\n            var thisOption = this.option;\n\n            // FIXME\n            // necessary?\n            // Disable realtime view update if canvas is not supported.\n            if (!env.canvasSupported) {\n                thisOption.realtime = false;\n            }\n\n            !isInit && visualSolution.replaceVisualOption(\n                thisOption, newOption, this.replacableOptionKeys\n            );\n\n            this.textStyleModel = this.getModel('textStyle');\n\n            this.resetItemSize();\n\n            this.completeVisualOption();\n        },\n\n        /**\n         * @protected\n         */\n        resetVisual: function (supplementVisualOption) {\n            var stateList = this.stateList;\n            supplementVisualOption = zrUtil.bind(supplementVisualOption, this);\n\n            this.controllerVisuals = visualSolution.createVisualMappings(\n                this.option.controller, stateList, supplementVisualOption\n            );\n            this.targetVisuals = visualSolution.createVisualMappings(\n                this.option.target, stateList, supplementVisualOption\n            );\n        },\n\n\n        /**\n         * @protected\n         */\n        resetTargetSeries: function () {\n            var thisOption = this.option;\n            var allSeriesIndex = thisOption.seriesIndex == null;\n            thisOption.seriesIndex = allSeriesIndex\n                ? [] : modelUtil.normalizeToArray(thisOption.seriesIndex);\n\n            allSeriesIndex && this.ecModel.eachSeries(function (seriesModel, index) {\n                thisOption.seriesIndex.push(index);\n            });\n        },\n\n        /**\n         * @public\n         */\n        eachTargetSeries: function (callback, context) {\n            zrUtil.each(this.option.seriesIndex, function (seriesIndex) {\n                callback.call(context, this.ecModel.getSeriesByIndex(seriesIndex));\n            }, this);\n        },\n\n        /**\n         * @pubilc\n         */\n        isTargetSeries: function (seriesModel) {\n            var is = false;\n            this.eachTargetSeries(function (model) {\n                model === seriesModel && (is = true);\n            });\n            return is;\n        },\n\n        /**\n         * @example\n         * this.formatValueText(someVal); // format single numeric value to text.\n         * this.formatValueText(someVal, true); // format single category value to text.\n         * this.formatValueText([min, max]); // format numeric min-max to text.\n         * this.formatValueText([this.dataBound[0], max]); // using data lower bound.\n         * this.formatValueText([min, this.dataBound[1]]); // using data upper bound.\n         *\n         * @param {number|Array.<number>} value Real value, or this.dataBound[0 or 1].\n         * @param {boolean} [isCategory=false] Only available when value is number.\n         * @param {Array.<string>} edgeSymbols Open-close symbol when value is interval.\n         * @return {string}\n         * @protected\n         */\n        formatValueText: function(value, isCategory, edgeSymbols) {\n            var option = this.option;\n            var precision = option.precision;\n            var dataBound = this.dataBound;\n            var formatter = option.formatter;\n            var isMinMax;\n            var textValue;\n            edgeSymbols = edgeSymbols || ['<', '>'];\n\n            if (zrUtil.isArray(value)) {\n                value = value.slice();\n                isMinMax = true;\n            }\n\n            textValue = isCategory\n                ? value\n                : (isMinMax\n                    ? [toFixed(value[0]), toFixed(value[1])]\n                    : toFixed(value)\n                );\n\n            if (zrUtil.isString(formatter)) {\n                return formatter\n                    .replace('{value}', isMinMax ? textValue[0] : textValue)\n                    .replace('{value2}', isMinMax ? textValue[1] : textValue);\n            }\n            else if (zrUtil.isFunction(formatter)) {\n                return isMinMax\n                    ? formatter(value[0], value[1])\n                    : formatter(value);\n            }\n\n            if (isMinMax) {\n                if (value[0] === dataBound[0]) {\n                    return edgeSymbols[0] + ' ' + textValue[1];\n                }\n                else if (value[1] === dataBound[1]) {\n                    return edgeSymbols[1] + ' ' + textValue[0];\n                }\n                else {\n                    return textValue[0] + ' - ' + textValue[1];\n                }\n            }\n            else { // Format single value (includes category case).\n                return textValue;\n            }\n\n            function toFixed(val) {\n                return val === dataBound[0]\n                    ? 'min'\n                    : val === dataBound[1]\n                    ? 'max'\n                    : (+val).toFixed(precision);\n            }\n        },\n\n        /**\n         * @protected\n         */\n        resetExtent: function () {\n            var thisOption = this.option;\n\n            // Can not calculate data extent by data here.\n            // Because series and data may be modified in processing stage.\n            // So we do not support the feature \"auto min/max\".\n\n            var extent = asc([thisOption.min, thisOption.max]);\n\n            this._dataExtent = extent;\n        },\n\n        /**\n         * @public\n         * @param {module:echarts/data/List} list\n         * @return {string} Concrete dimention. If return null/undefined,\n         *                  no dimension used.\n         */\n        getDataDimension: function (list) {\n            var optDim = this.option.dimension;\n            return optDim != null\n                ? optDim : list.dimensions.length - 1;\n        },\n\n        /**\n         * @public\n         * @override\n         */\n        getExtent: function () {\n            return this._dataExtent.slice();\n        },\n\n        /**\n         * @protected\n         */\n        completeVisualOption: function () {\n            var thisOption = this.option;\n            var base = {inRange: thisOption.inRange, outOfRange: thisOption.outOfRange};\n\n            var target = thisOption.target || (thisOption.target = {});\n            var controller = thisOption.controller || (thisOption.controller = {});\n\n            zrUtil.merge(target, base); // Do not override\n            zrUtil.merge(controller, base); // Do not override\n\n            var isCategory = this.isCategory();\n\n            completeSingle.call(this, target);\n            completeSingle.call(this, controller);\n            completeInactive.call(this, target, 'inRange', 'outOfRange');\n            // completeInactive.call(this, target, 'outOfRange', 'inRange');\n            completeController.call(this, controller);\n\n            function completeSingle(base) {\n                // Compatible with ec2 dataRange.color.\n                // The mapping order of dataRange.color is: [high value, ..., low value]\n                // whereas inRange.color and outOfRange.color is [low value, ..., high value]\n                // Notice: ec2 has no inverse.\n                if (isArray(thisOption.color)\n                    // If there has been inRange: {symbol: ...}, adding color is a mistake.\n                    // So adding color only when no inRange defined.\n                    && !base.inRange\n                ) {\n                    base.inRange = {color: thisOption.color.slice().reverse()};\n                }\n\n                // Compatible with previous logic, always give a defautl color, otherwise\n                // simple config with no inRange and outOfRange will not work.\n                // Originally we use visualMap.color as the default color, but setOption at\n                // the second time the default color will be erased. So we change to use\n                // constant DEFAULT_COLOR.\n                // If user do not want the defualt color, set inRange: {color: null}.\n                base.inRange = base.inRange || {color: DEFAULT_COLOR};\n\n                // If using shortcut like: {inRange: 'symbol'}, complete default value.\n                each(this.stateList, function (state) {\n                    var visualType = base[state];\n\n                    if (zrUtil.isString(visualType)) {\n                        var defa = visualDefault.get(visualType, 'active', isCategory);\n                        if (defa) {\n                            base[state] = {};\n                            base[state][visualType] = defa;\n                        }\n                        else {\n                            // Mark as not specified.\n                            delete base[state];\n                        }\n                    }\n                }, this);\n            }\n\n            function completeInactive(base, stateExist, stateAbsent) {\n                var optExist = base[stateExist];\n                var optAbsent = base[stateAbsent];\n\n                if (optExist && !optAbsent) {\n                    optAbsent = base[stateAbsent] = {};\n                    each(optExist, function (visualData, visualType) {\n                        if (!VisualMapping.isValidType(visualType)) {\n                            return;\n                        }\n\n                        var defa = visualDefault.get(visualType, 'inactive', isCategory);\n\n                        if (defa != null) {\n                            optAbsent[visualType] = defa;\n\n                            // Compatibable with ec2:\n                            // Only inactive color to rgba(0,0,0,0) can not\n                            // make label transparent, so use opacity also.\n                            if (visualType === 'color'\n                                && !optAbsent.hasOwnProperty('opacity')\n                                && !optAbsent.hasOwnProperty('colorAlpha')\n                            ) {\n                                optAbsent.opacity = [0, 0];\n                            }\n                        }\n                    });\n                }\n            }\n\n            function completeController(controller) {\n                var symbolExists = (controller.inRange || {}).symbol\n                    || (controller.outOfRange || {}).symbol;\n                var symbolSizeExists = (controller.inRange || {}).symbolSize\n                    || (controller.outOfRange || {}).symbolSize;\n                var inactiveColor = this.get('inactiveColor');\n\n                each(this.stateList, function (state) {\n\n                    var itemSize = this.itemSize;\n                    var visuals = controller[state];\n\n                    // Set inactive color for controller if no other color\n                    // attr (like colorAlpha) specified.\n                    if (!visuals) {\n                        visuals = controller[state] = {\n                            color: isCategory ? inactiveColor : [inactiveColor]\n                        };\n                    }\n\n                    // Consistent symbol and symbolSize if not specified.\n                    if (visuals.symbol == null) {\n                        visuals.symbol = symbolExists\n                            && zrUtil.clone(symbolExists)\n                            || (isCategory ? 'roundRect' : ['roundRect']);\n                    }\n                    if (visuals.symbolSize == null) {\n                        visuals.symbolSize = symbolSizeExists\n                            && zrUtil.clone(symbolSizeExists)\n                            || (isCategory ? itemSize[0] : [itemSize[0], itemSize[0]]);\n                    }\n\n                    // Filter square and none.\n                    visuals.symbol = mapVisual(visuals.symbol, function (symbol) {\n                        return (symbol === 'none' || symbol === 'square') ? 'roundRect' : symbol;\n                    });\n\n                    // Normalize symbolSize\n                    var symbolSize = visuals.symbolSize;\n\n                    if (symbolSize != null) {\n                        var max = -Infinity;\n                        // symbolSize can be object when categories defined.\n                        eachVisual(symbolSize, function (value) {\n                            value > max && (max = value);\n                        });\n                        visuals.symbolSize = mapVisual(symbolSize, function (value) {\n                            return linearMap(value, [0, max], [0, itemSize[0]], true);\n                        });\n                    }\n\n                }, this);\n            }\n        },\n\n        /**\n         * @protected\n         */\n        resetItemSize: function () {\n            this.itemSize = [\n                parseFloat(this.get('itemWidth')),\n                parseFloat(this.get('itemHeight'))\n            ];\n        },\n\n        /**\n         * @public\n         */\n        isCategory: function () {\n            return !!this.option.categories;\n        },\n\n        /**\n         * @public\n         * @abstract\n         */\n        setSelected: noop,\n\n        /**\n         * @public\n         * @abstract\n         * @param {*|module:echarts/data/List} valueOrData\n         * @param {number} dataIndex\n         * @return {string} state See this.stateList\n         */\n        getValueState: noop,\n\n        /**\n         * FIXME\n         * Do not publish to thirt-part-dev temporarily\n         * util the interface is stable. (Should it return\n         * a function but not visual meta?)\n         *\n         * @pubilc\n         * @abstract\n         * @param {Function} getColorVisual\n         *        params: value, valueState\n         *        return: color\n         * @return {Object} visualMeta\n         *        should includes {stops, outerColors}\n         *        outerColor means [colorBeyondMinValue, colorBeyondMaxValue]\n         */\n        getVisualMeta: noop\n\n    });\n\n    module.exports = VisualMapModel;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/component/visualMap/VisualMapModel.js\n// module id = 469\n// module chunks = 2 3","\n\n    var zrUtil = require('zrender/lib/core/util');\n    var graphic = require('../../util/graphic');\n    var formatUtil = require('../../util/format');\n    var layout = require('../../util/layout');\n    var echarts = require('../../echarts');\n    var VisualMapping = require('../../visual/VisualMapping');\n\n    module.exports = echarts.extendComponentView({\n\n        type: 'visualMap',\n\n        /**\n         * @readOnly\n         * @type {Object}\n         */\n        autoPositionValues: {left: 1, right: 1, top: 1, bottom: 1},\n\n        init: function (ecModel, api) {\n            /**\n             * @readOnly\n             * @type {module:echarts/model/Global}\n             */\n            this.ecModel = ecModel;\n\n            /**\n             * @readOnly\n             * @type {module:echarts/ExtensionAPI}\n             */\n            this.api = api;\n\n            /**\n             * @readOnly\n             * @type {module:echarts/component/visualMap/visualMapModel}\n             */\n            this.visualMapModel;\n        },\n\n        /**\n         * @protected\n         */\n        render: function (visualMapModel, ecModel, api, payload) {\n            this.visualMapModel = visualMapModel;\n\n            if (visualMapModel.get('show') === false) {\n                this.group.removeAll();\n                return;\n            }\n\n            this.doRender.apply(this, arguments);\n        },\n\n        /**\n         * @protected\n         */\n        renderBackground: function (group) {\n            var visualMapModel = this.visualMapModel;\n            var padding = formatUtil.normalizeCssArray(visualMapModel.get('padding') || 0);\n            var rect = group.getBoundingRect();\n\n            group.add(new graphic.Rect({\n                z2: -1, // Lay background rect on the lowest layer.\n                silent: true,\n                shape: {\n                    x: rect.x - padding[3],\n                    y: rect.y - padding[0],\n                    width: rect.width + padding[3] + padding[1],\n                    height: rect.height + padding[0] + padding[2]\n                },\n                style: {\n                    fill: visualMapModel.get('backgroundColor'),\n                    stroke: visualMapModel.get('borderColor'),\n                    lineWidth: visualMapModel.get('borderWidth')\n                }\n            }));\n        },\n\n        /**\n         * @protected\n         * @param {number} targetValue can be Infinity or -Infinity\n         * @param {string=} visualCluster Only can be 'color' 'opacity' 'symbol' 'symbolSize'\n         * @param {Object} [opts]\n         * @param {string=} [opts.forceState] Specify state, instead of using getValueState method.\n         * @param {string=} [opts.convertOpacityToAlpha=false] For color gradient in controller widget.\n         * @return {*} Visual value.\n         */\n        getControllerVisual: function (targetValue, visualCluster, opts) {\n            opts = opts || {};\n\n            var forceState = opts.forceState;\n            var visualMapModel = this.visualMapModel;\n            var visualObj = {};\n\n            // Default values.\n            if (visualCluster === 'symbol') {\n                visualObj.symbol = visualMapModel.get('itemSymbol');\n            }\n            if (visualCluster === 'color') {\n                var defaultColor = visualMapModel.get('contentColor');\n                visualObj.color = defaultColor;\n            }\n\n            function getter(key) {\n                return visualObj[key];\n            }\n\n            function setter(key, value) {\n                visualObj[key] = value;\n            }\n\n            var mappings = visualMapModel.controllerVisuals[\n                forceState || visualMapModel.getValueState(targetValue)\n            ];\n            var visualTypes = VisualMapping.prepareVisualTypes(mappings);\n\n            zrUtil.each(visualTypes, function (type) {\n                var visualMapping = mappings[type];\n                if (opts.convertOpacityToAlpha && type === 'opacity') {\n                    type = 'colorAlpha';\n                    visualMapping = mappings.__alphaForOpacity;\n                }\n                if (VisualMapping.dependsOn(type, visualCluster)) {\n                    visualMapping && visualMapping.applyVisual(\n                        targetValue, getter, setter\n                    );\n                }\n            });\n\n            return visualObj[visualCluster];\n        },\n\n        /**\n         * @protected\n         */\n        positionGroup: function (group) {\n            var model = this.visualMapModel;\n            var api = this.api;\n\n            layout.positionElement(\n                group,\n                model.getBoxLayoutParams(),\n                {width: api.getWidth(), height: api.getHeight()}\n            );\n        },\n\n        /**\n         * @protected\n         * @abstract\n         */\n        doRender: zrUtil.noop\n\n    });\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/component/visualMap/VisualMapView.js\n// module id = 470\n// module chunks = 2 3","\n\n    var zrUtil = require('zrender/lib/core/util');\n    var layout = require('../../util/layout');\n\n    var helper = {\n\n        /**\n         * @param {module:echarts/component/visualMap/VisualMapModel} visualMapModel\\\n         * @param {module:echarts/ExtensionAPI} api\n         * @param {Array.<number>} itemSize always [short, long]\n         * @return {string} 'left' or 'right' or 'top' or 'bottom'\n         */\n        getItemAlign: function (visualMapModel, api, itemSize) {\n            var modelOption = visualMapModel.option;\n            var itemAlign = modelOption.align;\n\n            if (itemAlign != null && itemAlign !== 'auto') {\n                return itemAlign;\n            }\n\n            // Auto decision align.\n            var ecSize = {width: api.getWidth(), height: api.getHeight()};\n            var realIndex = modelOption.orient === 'horizontal' ? 1 : 0;\n\n            var paramsSet = [\n                ['left', 'right', 'width'],\n                ['top', 'bottom', 'height']\n            ];\n            var reals = paramsSet[realIndex];\n            var fakeValue = [0, null, 10];\n\n            var layoutInput = {};\n            for (var i = 0; i < 3; i++) {\n                layoutInput[paramsSet[1 - realIndex][i]] = fakeValue[i];\n                layoutInput[reals[i]] = i === 2 ? itemSize[0] : modelOption[reals[i]];\n            }\n\n            var rParam = [['x', 'width', 3], ['y', 'height', 0]][realIndex];\n            var rect = layout.getLayoutRect(layoutInput, ecSize, modelOption.padding);\n\n            return reals[\n                (rect.margin[rParam[2]] || 0) + rect[rParam[0]] + rect[rParam[1]] * 0.5\n                    < ecSize[rParam[1]] * 0.5 ? 0 : 1\n            ];\n        },\n\n        /**\n         * Prepare dataIndex for outside usage, where dataIndex means rawIndex, and\n         * dataIndexInside means filtered index.\n         */\n        convertDataIndex: function (batch) {\n            zrUtil.each(batch || [], function (batchItem) {\n                if (batch.dataIndex != null) {\n                    batch.dataIndexInside = batch.dataIndex;\n                    batch.dataIndex = null;\n                }\n            });\n            return batch;\n        }\n\n    };\n\n\n    module.exports = helper;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/component/visualMap/helper.js\n// module id = 471\n// module chunks = 2 3","/**\n * @file VisualMap preprocessor\n */\n\n\n    var zrUtil = require('zrender/lib/core/util');\n    var each = zrUtil.each;\n\n    module.exports = function (option) {\n        var visualMap = option && option.visualMap;\n\n        if (!zrUtil.isArray(visualMap)) {\n            visualMap = visualMap ? [visualMap] : [];\n        }\n\n        each(visualMap, function (opt) {\n            if (!opt) {\n                return;\n            }\n\n            // rename splitList to pieces\n            if (has(opt, 'splitList') && !has(opt, 'pieces')) {\n                opt.pieces = opt.splitList;\n                delete opt.splitList;\n            }\n\n            var pieces = opt.pieces;\n            if (pieces && zrUtil.isArray(pieces)) {\n                each(pieces, function (piece) {\n                    if (zrUtil.isObject(piece)) {\n                        if (has(piece, 'start') && !has(piece, 'min')) {\n                            piece.min = piece.start;\n                        }\n                        if (has(piece, 'end') && !has(piece, 'max')) {\n                            piece.max = piece.end;\n                        }\n                    }\n                });\n            }\n        });\n    };\n\n    function has(obj, name) {\n        return obj && obj.hasOwnProperty && obj.hasOwnProperty(name);\n    }\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/component/visualMap/preprocessor.js\n// module id = 472\n// module chunks = 2 3","\n\n    require('../../model/Component').registerSubTypeDefaulter('visualMap', function (option) {\n        // Compatible with ec2, when splitNumber === 0, continuous visualMap will be used.\n        return (\n                !option.categories\n                && (\n                    !(\n                        option.pieces\n                            ? option.pieces.length > 0\n                            : option.splitNumber > 0\n                    )\n                    || option.calculable\n                )\n            )\n            ? 'continuous' : 'piecewise';\n    });\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/component/visualMap/typeDefaulter.js\n// module id = 473\n// module chunks = 2 3","/**\n * @file Data range visual coding.\n */\n\n\n    var echarts = require('../../echarts');\n    var visualSolution = require('../../visual/visualSolution');\n    var VisualMapping = require('../../visual/VisualMapping');\n    var zrUtil = require('zrender/lib/core/util');\n\n    echarts.registerVisual(echarts.PRIORITY.VISUAL.COMPONENT, function (ecModel) {\n        ecModel.eachComponent('visualMap', function (visualMapModel) {\n            processSingleVisualMap(visualMapModel, ecModel);\n        });\n\n        prepareVisualMeta(ecModel);\n    });\n\n    function processSingleVisualMap(visualMapModel, ecModel) {\n        visualMapModel.eachTargetSeries(function (seriesModel) {\n            var data = seriesModel.getData();\n\n            visualSolution.applyVisual(\n                visualMapModel.stateList,\n                visualMapModel.targetVisuals,\n                data,\n                visualMapModel.getValueState,\n                visualMapModel,\n                visualMapModel.getDataDimension(data)\n            );\n        });\n    }\n\n    // Only support color.\n    function prepareVisualMeta(ecModel) {\n        ecModel.eachSeries(function (seriesModel) {\n            var data = seriesModel.getData();\n            var visualMetaList = [];\n\n            ecModel.eachComponent('visualMap', function (visualMapModel) {\n                if (visualMapModel.isTargetSeries(seriesModel)) {\n                    var visualMeta = visualMapModel.getVisualMeta(\n                        zrUtil.bind(getColorVisual, null, seriesModel, visualMapModel)\n                    ) || {stops: [], outerColors: []};\n                    visualMeta.dimension = visualMapModel.getDataDimension(data);\n                    visualMetaList.push(visualMeta);\n                }\n            });\n\n            // console.log(JSON.stringify(visualMetaList.map(a => a.stops)));\n            seriesModel.getData().setVisual('visualMeta', visualMetaList);\n        });\n    }\n\n    // FIXME\n    // performance and export for heatmap?\n    // value can be Infinity or -Infinity\n    function getColorVisual(seriesModel, visualMapModel, value, valueState) {\n        var mappings = visualMapModel.targetVisuals[valueState];\n        var visualTypes = VisualMapping.prepareVisualTypes(mappings);\n        var resultVisual = {\n            color: seriesModel.getData().getVisual('color') // default color.\n        };\n\n        for (var i = 0, len = visualTypes.length; i < len; i++) {\n            var type = visualTypes[i];\n            var mapping = mappings[\n                type === 'opacity' ? '__alphaForOpacity' : type\n            ];\n            mapping && mapping.applyVisual(value, getVisual, setVisual);\n        }\n\n        return resultVisual.color;\n\n        function getVisual(key) {\n            return resultVisual[key];\n        }\n\n        function setVisual(key, value) {\n            resultVisual[key] = value;\n        }\n    }\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/component/visualMap/visualEncoding.js\n// module id = 474\n// module chunks = 2 3","/**\n * @file Data range action\n */\n\n\n    var echarts = require('../../echarts');\n\n    var actionInfo = {\n        type: 'selectDataRange',\n        event: 'dataRangeSelected',\n        // FIXME use updateView appears wrong\n        update: 'update'\n    };\n\n    echarts.registerAction(actionInfo, function (payload, ecModel) {\n\n        ecModel.eachComponent({mainType: 'visualMap', query: payload}, function (model) {\n            model.setSelected(payload.selected);\n        });\n\n    });\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/component/visualMap/visualMapAction.js\n// module id = 475\n// module chunks = 2 3","/**\n * @file Visual mapping.\n */\n\n\n    var zrUtil = require('zrender/lib/core/util');\n\n    var visualDefault = {\n\n        /**\n         * @public\n         */\n        get: function (visualType, key, isCategory) {\n            var value = zrUtil.clone(\n                (defaultOption[visualType] || {})[key]\n            );\n\n            return isCategory\n                ? (zrUtil.isArray(value) ? value[value.length - 1] : value)\n                : value;\n        }\n\n    };\n\n    var defaultOption = {\n\n        color: {\n            active: ['#006edd', '#e0ffff'],\n            inactive: ['rgba(0,0,0,0)']\n        },\n\n        colorHue: {\n            active: [0, 360],\n            inactive: [0, 0]\n        },\n\n        colorSaturation: {\n            active: [0.3, 1],\n            inactive: [0, 0]\n        },\n\n        colorLightness: {\n            active: [0.9, 0.5],\n            inactive: [0, 0]\n        },\n\n        colorAlpha: {\n            active: [0.3, 1],\n            inactive: [0, 0]\n        },\n\n        opacity: {\n            active: [0.3, 1],\n            inactive: [0, 0]\n        },\n\n        symbol: {\n            active: ['circle', 'roundRect', 'diamond'],\n            inactive: ['none']\n        },\n\n        symbolSize: {\n            active: [10, 50],\n            inactive: [0, 0]\n        }\n    };\n\n    module.exports = visualDefault;\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/visual/visualDefault.js\n// module id = 476\n// module chunks = 2 3","/**\n * @file Visual solution, for consistent option specification.\n */\n\n\n    var zrUtil = require('zrender/lib/core/util');\n    var VisualMapping = require('./VisualMapping');\n    var each = zrUtil.each;\n\n    function hasKeys(obj) {\n        if (obj) {\n            for (var name in obj){\n                if (obj.hasOwnProperty(name)) {\n                    return true;\n                }\n            }\n        }\n    }\n\n    var visualSolution = {\n\n        /**\n         * @param {Object} option\n         * @param {Array.<string>} stateList\n         * @param {Function} [supplementVisualOption]\n         * @return {Object} visualMappings <state, <visualType, module:echarts/visual/VisualMapping>>\n         */\n        createVisualMappings: function (option, stateList, supplementVisualOption) {\n            var visualMappings = {};\n\n            each(stateList, function (state) {\n                var mappings = visualMappings[state] = createMappings();\n\n                each(option[state], function (visualData, visualType) {\n                    if (!VisualMapping.isValidType(visualType)) {\n                        return;\n                    }\n                    var mappingOption = {\n                        type: visualType,\n                        visual: visualData\n                    };\n                    supplementVisualOption && supplementVisualOption(mappingOption, state);\n                    mappings[visualType] = new VisualMapping(mappingOption);\n\n                    // Prepare a alpha for opacity, for some case that opacity\n                    // is not supported, such as rendering using gradient color.\n                    if (visualType === 'opacity') {\n                        mappingOption = zrUtil.clone(mappingOption);\n                        mappingOption.type = 'colorAlpha';\n                        mappings.__hidden.__alphaForOpacity = new VisualMapping(mappingOption);\n                    }\n                });\n            });\n\n            return visualMappings;\n\n            function createMappings() {\n                var Creater = function () {};\n                // Make sure hidden fields will not be visited by\n                // object iteration (with hasOwnProperty checking).\n                Creater.prototype.__hidden = Creater.prototype;\n                var obj = new Creater();\n                return obj;\n            }\n        },\n\n        /**\n         * @param {Object} thisOption\n         * @param {Object} newOption\n         * @param {Array.<string>} keys\n         */\n        replaceVisualOption: function (thisOption, newOption, keys) {\n            // Visual attributes merge is not supported, otherwise it\n            // brings overcomplicated merge logic. See #2853. So if\n            // newOption has anyone of these keys, all of these keys\n            // will be reset. Otherwise, all keys remain.\n            var has;\n            zrUtil.each(keys, function (key) {\n                if (newOption.hasOwnProperty(key) && hasKeys(newOption[key])) {\n                    has = true;\n                }\n            });\n            has && zrUtil.each(keys, function (key) {\n                if (newOption.hasOwnProperty(key) && hasKeys(newOption[key])) {\n                    thisOption[key] = zrUtil.clone(newOption[key]);\n                }\n                else {\n                    delete thisOption[key];\n                }\n            });\n        },\n\n        /**\n         * @param {Array.<string>} stateList\n         * @param {Object} visualMappings <state, Object.<visualType, module:echarts/visual/VisualMapping>>\n         * @param {module:echarts/data/List} list\n         * @param {Function} getValueState param: valueOrIndex, return: state.\n         * @param {object} [scope] Scope for getValueState\n         * @param {string} [dimension] Concrete dimension, if used.\n         */\n        applyVisual: function (stateList, visualMappings, data, getValueState, scope, dimension) {\n            var visualTypesMap = {};\n            zrUtil.each(stateList, function (state) {\n                var visualTypes = VisualMapping.prepareVisualTypes(visualMappings[state]);\n                visualTypesMap[state] = visualTypes;\n            });\n\n            var dataIndex;\n\n            function getVisual(key) {\n                return data.getItemVisual(dataIndex, key);\n            }\n\n            function setVisual(key, value) {\n                data.setItemVisual(dataIndex, key, value);\n            }\n\n            if (dimension == null) {\n                data.each(eachItem, true);\n            }\n            else {\n                data.each([dimension], eachItem, true);\n            }\n\n            function eachItem(valueOrIndex, index) {\n                dataIndex = dimension == null ? valueOrIndex : index;\n\n                var rawDataItem = data.getRawDataItem(dataIndex);\n                // Consider performance\n                if (rawDataItem && rawDataItem.visualMap === false) {\n                    return;\n                }\n\n                var valueState = getValueState.call(scope, valueOrIndex);\n                var mappings = visualMappings[valueState];\n                var visualTypes = visualTypesMap[valueState];\n\n                for (var i = 0, len = visualTypes.length; i < len; i++) {\n                    var type = visualTypes[i];\n                    mappings[type] && mappings[type].applyVisual(\n                        valueOrIndex, getVisual, setVisual\n                    );\n                }\n            }\n        }\n    };\n\n    module.exports = visualSolution;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/visual/visualSolution.js\n// module id = 477\n// module chunks = 2 3","/**\n * visualMap component entry\n */\n\n\n    require('./visualMapContinuous');\n    require('./visualMapPiecewise');\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/component/visualMap.js\n// module id = 505\n// module chunks = 2 3","/**\n * @file Data zoom model\n */\n\n\n    var VisualMapModel = require('./VisualMapModel');\n    var zrUtil = require('zrender/lib/core/util');\n    var numberUtil = require('../../util/number');\n\n    // Constant\n    var DEFAULT_BAR_BOUND = [20, 140];\n\n    var ContinuousModel = VisualMapModel.extend({\n\n        type: 'visualMap.continuous',\n\n        /**\n         * @protected\n         */\n        defaultOption: {\n            align: 'auto',          // 'auto', 'left', 'right', 'top', 'bottom'\n            calculable: false,      // This prop effect default component type determine,\n                                    // See echarts/component/visualMap/typeDefaulter.\n            range: null,            // selected range. In default case `range` is [min, max]\n                                    // and can auto change along with modification of min max,\n                                    // util use specifid a range.\n            realtime: true,         // Whether realtime update.\n            itemHeight: null,       // The length of the range control edge.\n            itemWidth: null,        // The length of the other side.\n            hoverLink: true,        // Enable hover highlight.\n            hoverLinkDataSize: null,// The size of hovered data.\n            hoverLinkOnHandle: true // Whether trigger hoverLink when hover handle.\n        },\n\n        /**\n         * @override\n         */\n        optionUpdated: function (newOption, isInit) {\n            ContinuousModel.superApply(this, 'optionUpdated', arguments);\n\n            this.resetTargetSeries();\n            this.resetExtent();\n\n            this.resetVisual(function (mappingOption) {\n                mappingOption.mappingMethod = 'linear';\n                mappingOption.dataExtent = this.getExtent();\n            });\n\n            this._resetRange();\n        },\n\n        /**\n         * @protected\n         * @override\n         */\n        resetItemSize: function () {\n            ContinuousModel.superApply(this, 'resetItemSize', arguments);\n\n            var itemSize = this.itemSize;\n\n            this._orient === 'horizontal' && itemSize.reverse();\n\n            (itemSize[0] == null || isNaN(itemSize[0])) && (itemSize[0] = DEFAULT_BAR_BOUND[0]);\n            (itemSize[1] == null || isNaN(itemSize[1])) && (itemSize[1] = DEFAULT_BAR_BOUND[1]);\n        },\n\n        /**\n         * @private\n         */\n        _resetRange: function () {\n            var dataExtent = this.getExtent();\n            var range = this.option.range;\n\n            if (!range || range.auto) {\n                // `range` should always be array (so we dont use other\n                // value like 'auto') for user-friend. (consider getOption).\n                dataExtent.auto = 1;\n                this.option.range = dataExtent;\n            }\n            else if (zrUtil.isArray(range)) {\n                if (range[0] > range[1]) {\n                    range.reverse();\n                }\n                range[0] = Math.max(range[0], dataExtent[0]);\n                range[1] = Math.min(range[1], dataExtent[1]);\n            }\n        },\n\n        /**\n         * @protected\n         * @override\n         */\n        completeVisualOption: function () {\n            VisualMapModel.prototype.completeVisualOption.apply(this, arguments);\n\n            zrUtil.each(this.stateList, function (state) {\n                var symbolSize = this.option.controller[state].symbolSize;\n                if (symbolSize && symbolSize[0] !== symbolSize[1]) {\n                    symbolSize[0] = 0; // For good looking.\n                }\n            }, this);\n        },\n\n        /**\n         * @override\n         */\n        setSelected: function (selected) {\n            this.option.range = selected.slice();\n            this._resetRange();\n        },\n\n        /**\n         * @public\n         */\n        getSelected: function () {\n            var dataExtent = this.getExtent();\n\n            var dataInterval = numberUtil.asc(\n                (this.get('range') || []).slice()\n            );\n\n            // Clamp\n            dataInterval[0] > dataExtent[1] && (dataInterval[0] = dataExtent[1]);\n            dataInterval[1] > dataExtent[1] && (dataInterval[1] = dataExtent[1]);\n            dataInterval[0] < dataExtent[0] && (dataInterval[0] = dataExtent[0]);\n            dataInterval[1] < dataExtent[0] && (dataInterval[1] = dataExtent[0]);\n\n            return dataInterval;\n        },\n\n        /**\n         * @override\n         */\n        getValueState: function (value) {\n            var range = this.option.range;\n            var dataExtent = this.getExtent();\n\n            // When range[0] === dataExtent[0], any value larger than dataExtent[0] maps to 'inRange'.\n            // range[1] is processed likewise.\n            return (\n                (range[0] <= dataExtent[0] || range[0] <= value)\n                && (range[1] >= dataExtent[1] || value <= range[1])\n            ) ? 'inRange' : 'outOfRange';\n        },\n\n        /**\n         * @params {Array.<number>} range target value: range[0] <= value && value <= range[1]\n         * @return {Array.<Object>} [{seriesId, dataIndices: <Array.<number>>}, ...]\n         */\n        findTargetDataIndices: function (range) {\n            var result = [];\n\n            this.eachTargetSeries(function (seriesModel) {\n                var dataIndices = [];\n                var data = seriesModel.getData();\n\n                data.each(this.getDataDimension(data), function (value, dataIndex) {\n                    range[0] <= value && value <= range[1] && dataIndices.push(dataIndex);\n                }, true, this);\n\n                result.push({seriesId: seriesModel.id, dataIndex: dataIndices});\n            }, this);\n\n            return result;\n        },\n\n        /**\n         * @implement\n         */\n        getVisualMeta: function (getColorVisual) {\n            var oVals = getColorStopValues(this, 'outOfRange', this.getExtent());\n            var iVals = getColorStopValues(this, 'inRange', this.option.range.slice());\n            var stops = [];\n\n            function setStop(value, valueState) {\n                stops.push({\n                    value: value,\n                    color: getColorVisual(value, valueState)\n                });\n            }\n\n            // Format to: outOfRange -- inRange -- outOfRange.\n            var iIdx = 0;\n            var oIdx = 0;\n            var iLen = iVals.length;\n            var oLen = oVals.length;\n\n            for (; oIdx < oLen && (!iVals.length || oVals[oIdx] <= iVals[0]); oIdx++) {\n                // If oVal[oIdx] === iVals[iIdx], oVal[oIdx] should be ignored.\n                if (oVals[oIdx] < iVals[iIdx]) {\n                    setStop(oVals[oIdx], 'outOfRange');\n                }\n            }\n            for (var first = 1; iIdx < iLen; iIdx++, first = 0) {\n                // If range is full, value beyond min, max will be clamped.\n                // make a singularity\n                first && stops.length && setStop(iVals[iIdx], 'outOfRange');\n                setStop(iVals[iIdx], 'inRange');\n            }\n            for (var first = 1; oIdx < oLen; oIdx++) {\n                if (!iVals.length || iVals[iVals.length - 1] < oVals[oIdx]) {\n                    // make a singularity\n                    if (first) {\n                        stops.length && setStop(stops[stops.length - 1].value, 'outOfRange');\n                        first = 0;\n                    }\n                    setStop(oVals[oIdx], 'outOfRange');\n                }\n            }\n\n            var stopsLen = stops.length;\n\n            return {\n                stops: stops,\n                outerColors: [\n                    stopsLen ? stops[0].color : 'transparent',\n                    stopsLen ? stops[stopsLen - 1].color : 'transparent'\n                ]\n            };\n        }\n\n    });\n\n    function getColorStopValues(visualMapModel, valueState, dataExtent) {\n        if (dataExtent[0] === dataExtent[1]) {\n            return dataExtent.slice();\n        }\n\n        // When using colorHue mapping, it is not linear color any more.\n        // Moreover, canvas gradient seems not to be accurate linear.\n        // FIXME\n        // Should be arbitrary value 100? or based on pixel size?\n        var count = 200;\n        var step = (dataExtent[1] - dataExtent[0]) / count;\n\n        var value = dataExtent[0];\n        var stopValues = [];\n        for (var i = 0; i <= count && value < dataExtent[1]; i++) {\n            stopValues.push(value);\n            value += step;\n        }\n        stopValues.push(dataExtent[1]);\n\n        return stopValues;\n    }\n\n    module.exports = ContinuousModel;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/component/visualMap/ContinuousModel.js\n// module id = 506\n// module chunks = 2 3","\n\n    var VisualMapView = require('./VisualMapView');\n    var graphic = require('../../util/graphic');\n    var zrUtil = require('zrender/lib/core/util');\n    var numberUtil = require('../../util/number');\n    var sliderMove = require('../helper/sliderMove');\n    var LinearGradient = require('zrender/lib/graphic/LinearGradient');\n    var helper = require('./helper');\n    var modelUtil = require('../../util/model');\n\n    var linearMap = numberUtil.linearMap;\n    var each = zrUtil.each;\n    var mathMin = Math.min;\n    var mathMax = Math.max;\n\n    // Arbitrary value\n    var HOVER_LINK_SIZE = 12;\n    var HOVER_LINK_OUT = 6;\n\n    // Notice:\n    // Any \"interval\" should be by the order of [low, high].\n    // \"handle0\" (handleIndex === 0) maps to\n    // low data value: this._dataInterval[0] and has low coord.\n    // \"handle1\" (handleIndex === 1) maps to\n    // high data value: this._dataInterval[1] and has high coord.\n    // The logic of transform is implemented in this._createBarGroup.\n\n    var ContinuousView = VisualMapView.extend({\n\n        type: 'visualMap.continuous',\n\n        /**\n         * @override\n         */\n        init: function () {\n\n            ContinuousView.superApply(this, 'init', arguments);\n\n            /**\n             * @private\n             */\n            this._shapes = {};\n\n            /**\n             * @private\n             */\n            this._dataInterval = [];\n\n            /**\n             * @private\n             */\n            this._handleEnds = [];\n\n            /**\n             * @private\n             */\n            this._orient;\n\n            /**\n             * @private\n             */\n            this._useHandle;\n\n            /**\n             * @private\n             */\n            this._hoverLinkDataIndices = [];\n\n            /**\n             * @private\n             */\n            this._dragging;\n\n            /**\n             * @private\n             */\n            this._hovering;\n        },\n\n        /**\n         * @protected\n         * @override\n         */\n        doRender: function (visualMapModel, ecModel, api, payload) {\n            if (!payload || payload.type !== 'selectDataRange' || payload.from !== this.uid) {\n                this._buildView();\n            }\n        },\n\n        /**\n         * @private\n         */\n        _buildView: function () {\n            this.group.removeAll();\n\n            var visualMapModel = this.visualMapModel;\n            var thisGroup = this.group;\n\n            this._orient = visualMapModel.get('orient');\n            this._useHandle = visualMapModel.get('calculable');\n\n            this._resetInterval();\n\n            this._renderBar(thisGroup);\n\n            var dataRangeText = visualMapModel.get('text');\n            this._renderEndsText(thisGroup, dataRangeText, 0);\n            this._renderEndsText(thisGroup, dataRangeText, 1);\n\n            // Do this for background size calculation.\n            this._updateView(true);\n\n            // After updating view, inner shapes is built completely,\n            // and then background can be rendered.\n            this.renderBackground(thisGroup);\n\n            // Real update view\n            this._updateView();\n\n            this._enableHoverLinkToSeries();\n            this._enableHoverLinkFromSeries();\n\n            this.positionGroup(thisGroup);\n        },\n\n        /**\n         * @private\n         */\n        _renderEndsText: function (group, dataRangeText, endsIndex) {\n            if (!dataRangeText) {\n                return;\n            }\n\n            // Compatible with ec2, text[0] map to high value, text[1] map low value.\n            var text = dataRangeText[1 - endsIndex];\n            text = text != null ? text + '' : '';\n\n            var visualMapModel = this.visualMapModel;\n            var textGap = visualMapModel.get('textGap');\n            var itemSize = visualMapModel.itemSize;\n\n            var barGroup = this._shapes.barGroup;\n            var position = this._applyTransform(\n                [\n                    itemSize[0] / 2,\n                    endsIndex === 0 ? -textGap : itemSize[1] + textGap\n                ],\n                barGroup\n            );\n            var align = this._applyTransform(\n                endsIndex === 0 ? 'bottom' : 'top',\n                barGroup\n            );\n            var orient = this._orient;\n            var textStyleModel = this.visualMapModel.textStyleModel;\n\n            this.group.add(new graphic.Text({\n                style: {\n                    x: position[0],\n                    y: position[1],\n                    textVerticalAlign: orient === 'horizontal' ? 'middle' : align,\n                    textAlign: orient === 'horizontal' ? align : 'center',\n                    text: text,\n                    textFont: textStyleModel.getFont(),\n                    fill: textStyleModel.getTextColor()\n                }\n            }));\n        },\n\n        /**\n         * @private\n         */\n        _renderBar: function (targetGroup) {\n            var visualMapModel = this.visualMapModel;\n            var shapes = this._shapes;\n            var itemSize = visualMapModel.itemSize;\n            var orient = this._orient;\n            var useHandle = this._useHandle;\n            var itemAlign = helper.getItemAlign(visualMapModel, this.api, itemSize);\n            var barGroup = shapes.barGroup = this._createBarGroup(itemAlign);\n\n            // Bar\n            barGroup.add(shapes.outOfRange = createPolygon());\n            barGroup.add(shapes.inRange = createPolygon(\n                null,\n                useHandle ? 'move' : null,\n                zrUtil.bind(this._dragHandle, this, 'all', false),\n                zrUtil.bind(this._dragHandle, this, 'all', true)\n            ));\n\n            var textRect = visualMapModel.textStyleModel.getTextRect('国');\n            var textSize = mathMax(textRect.width, textRect.height);\n\n            // Handle\n            if (useHandle) {\n                shapes.handleThumbs = [];\n                shapes.handleLabels = [];\n                shapes.handleLabelPoints = [];\n\n                this._createHandle(barGroup, 0, itemSize, textSize, orient, itemAlign);\n                this._createHandle(barGroup, 1, itemSize, textSize, orient, itemAlign);\n            }\n\n            this._createIndicator(barGroup, itemSize, textSize, orient);\n\n            targetGroup.add(barGroup);\n        },\n\n        /**\n         * @private\n         */\n        _createHandle: function (barGroup, handleIndex, itemSize, textSize, orient) {\n            var onDrift = zrUtil.bind(this._dragHandle, this, handleIndex, false);\n            var onDragEnd = zrUtil.bind(this._dragHandle, this, handleIndex, true);\n            var handleThumb = createPolygon(\n                createHandlePoints(handleIndex, textSize),\n                'move',\n                onDrift,\n                onDragEnd\n            );\n            handleThumb.position[0] = itemSize[0];\n            barGroup.add(handleThumb);\n\n            // Text is always horizontal layout but should not be effected by\n            // transform (orient/inverse). So label is built separately but not\n            // use zrender/graphic/helper/RectText, and is located based on view\n            // group (according to handleLabelPoint) but not barGroup.\n            var textStyleModel = this.visualMapModel.textStyleModel;\n            var handleLabel = new graphic.Text({\n                draggable: true,\n                drift: onDrift,\n                ondragend: onDragEnd,\n                style: {\n                    x: 0, y: 0, text: '',\n                    textFont: textStyleModel.getFont(),\n                    fill: textStyleModel.getTextColor()\n                }\n            });\n            this.group.add(handleLabel);\n\n            var handleLabelPoint = [\n                orient === 'horizontal'\n                    ? textSize / 2\n                    : textSize * 1.5,\n                orient === 'horizontal'\n                    ? (handleIndex === 0 ? -(textSize * 1.5) : (textSize * 1.5))\n                    : (handleIndex === 0 ? -textSize / 2 : textSize / 2)\n            ];\n\n            var shapes = this._shapes;\n            shapes.handleThumbs[handleIndex] = handleThumb;\n            shapes.handleLabelPoints[handleIndex] = handleLabelPoint;\n            shapes.handleLabels[handleIndex] = handleLabel;\n        },\n\n        /**\n         * @private\n         */\n        _createIndicator: function (barGroup, itemSize, textSize, orient) {\n            var indicator = createPolygon([[0, 0]], 'move');\n            indicator.position[0] = itemSize[0];\n            indicator.attr({invisible: true, silent: true});\n            barGroup.add(indicator);\n\n            var textStyleModel = this.visualMapModel.textStyleModel;\n            var indicatorLabel = new graphic.Text({\n                silent: true,\n                invisible: true,\n                style: {\n                    x: 0, y: 0, text: '',\n                    textFont: textStyleModel.getFont(),\n                    fill: textStyleModel.getTextColor()\n                }\n            });\n            this.group.add(indicatorLabel);\n\n            var indicatorLabelPoint = [\n                orient === 'horizontal' ? textSize / 2 : HOVER_LINK_OUT + 3,\n                0\n            ];\n\n            var shapes = this._shapes;\n            shapes.indicator = indicator;\n            shapes.indicatorLabel = indicatorLabel;\n            shapes.indicatorLabelPoint = indicatorLabelPoint;\n        },\n\n        /**\n         * @private\n         */\n        _dragHandle: function (handleIndex, isEnd, dx, dy) {\n            if (!this._useHandle) {\n                return;\n            }\n\n            this._dragging = !isEnd;\n\n            if (!isEnd) {\n                // Transform dx, dy to bar coordination.\n                var vertex = this._applyTransform([dx, dy], this._shapes.barGroup, true);\n                this._updateInterval(handleIndex, vertex[1]);\n\n                // Considering realtime, update view should be executed\n                // before dispatch action.\n                this._updateView();\n            }\n\n            // dragEnd do not dispatch action when realtime.\n            if (isEnd === !this.visualMapModel.get('realtime')) { // jshint ignore:line\n                this.api.dispatchAction({\n                    type: 'selectDataRange',\n                    from: this.uid,\n                    visualMapId: this.visualMapModel.id,\n                    selected: this._dataInterval.slice()\n                });\n            }\n\n            if (isEnd) {\n                !this._hovering && this._clearHoverLinkToSeries();\n            }\n            else if (useHoverLinkOnHandle(this.visualMapModel)) {\n                this._doHoverLinkToSeries(this._handleEnds[handleIndex], false);\n            }\n        },\n\n        /**\n         * @private\n         */\n        _resetInterval: function () {\n            var visualMapModel = this.visualMapModel;\n\n            var dataInterval = this._dataInterval = visualMapModel.getSelected();\n            var dataExtent = visualMapModel.getExtent();\n            var sizeExtent = [0, visualMapModel.itemSize[1]];\n\n            this._handleEnds = [\n                linearMap(dataInterval[0], dataExtent, sizeExtent, true),\n                linearMap(dataInterval[1], dataExtent, sizeExtent, true)\n            ];\n        },\n\n        /**\n         * @private\n         * @param {(number|string)} handleIndex 0 or 1 or 'all'\n         * @param {number} dx\n         * @param {number} dy\n         */\n        _updateInterval: function (handleIndex, delta) {\n            delta = delta || 0;\n            var visualMapModel = this.visualMapModel;\n            var handleEnds = this._handleEnds;\n\n            sliderMove(\n                delta,\n                handleEnds,\n                [0, visualMapModel.itemSize[1]],\n                handleIndex === 'all' ? 'rigid' : 'push',\n                handleIndex\n            );\n            var dataExtent = visualMapModel.getExtent();\n            var sizeExtent = [0, visualMapModel.itemSize[1]];\n            // Update data interval.\n            this._dataInterval = [\n                linearMap(handleEnds[0], sizeExtent, dataExtent, true),\n                linearMap(handleEnds[1], sizeExtent, dataExtent, true)\n            ];\n        },\n\n        /**\n         * @private\n         */\n        _updateView: function (forSketch) {\n            var visualMapModel = this.visualMapModel;\n            var dataExtent = visualMapModel.getExtent();\n            var shapes = this._shapes;\n\n            var outOfRangeHandleEnds = [0, visualMapModel.itemSize[1]];\n            var inRangeHandleEnds = forSketch ? outOfRangeHandleEnds : this._handleEnds;\n\n            var visualInRange = this._createBarVisual(\n                this._dataInterval, dataExtent, inRangeHandleEnds, 'inRange'\n            );\n            var visualOutOfRange = this._createBarVisual(\n                dataExtent, dataExtent, outOfRangeHandleEnds, 'outOfRange'\n            );\n\n            shapes.inRange\n                .setStyle({\n                    fill: visualInRange.barColor,\n                    opacity: visualInRange.opacity\n                })\n                .setShape('points', visualInRange.barPoints);\n            shapes.outOfRange\n                .setStyle({\n                    fill: visualOutOfRange.barColor,\n                    opacity: visualOutOfRange.opacity\n                })\n                .setShape('points', visualOutOfRange.barPoints);\n\n            this._updateHandle(inRangeHandleEnds, visualInRange);\n        },\n\n        /**\n         * @private\n         */\n        _createBarVisual: function (dataInterval, dataExtent, handleEnds, forceState) {\n            var opts = {\n                forceState: forceState,\n                convertOpacityToAlpha: true\n            };\n            var colorStops = this._makeColorGradient(dataInterval, opts);\n\n            var symbolSizes = [\n                this.getControllerVisual(dataInterval[0], 'symbolSize', opts),\n                this.getControllerVisual(dataInterval[1], 'symbolSize', opts)\n            ];\n            var barPoints = this._createBarPoints(handleEnds, symbolSizes);\n\n            return {\n                barColor: new LinearGradient(0, 0, 0, 1, colorStops),\n                barPoints: barPoints,\n                handlesColor: [\n                    colorStops[0].color,\n                    colorStops[colorStops.length - 1].color\n                ]\n            };\n        },\n\n        /**\n         * @private\n         */\n        _makeColorGradient: function (dataInterval, opts) {\n            // Considering colorHue, which is not linear, so we have to sample\n            // to calculate gradient color stops, but not only caculate head\n            // and tail.\n            var sampleNumber = 100; // Arbitrary value.\n            var colorStops = [];\n            var step = (dataInterval[1] - dataInterval[0]) / sampleNumber;\n\n            colorStops.push({\n                color: this.getControllerVisual(dataInterval[0], 'color', opts),\n                offset: 0\n            });\n\n            for (var i = 1; i < sampleNumber; i++) {\n                var currValue = dataInterval[0] + step * i;\n                if (currValue > dataInterval[1]) {\n                    break;\n                }\n                colorStops.push({\n                    color: this.getControllerVisual(currValue, 'color', opts),\n                    offset: i / sampleNumber\n                });\n            }\n\n            colorStops.push({\n                color: this.getControllerVisual(dataInterval[1], 'color', opts),\n                offset: 1\n            });\n\n            return colorStops;\n        },\n\n        /**\n         * @private\n         */\n        _createBarPoints: function (handleEnds, symbolSizes) {\n            var itemSize = this.visualMapModel.itemSize;\n\n            return [\n                [itemSize[0] - symbolSizes[0], handleEnds[0]],\n                [itemSize[0], handleEnds[0]],\n                [itemSize[0], handleEnds[1]],\n                [itemSize[0] - symbolSizes[1], handleEnds[1]]\n            ];\n        },\n\n        /**\n         * @private\n         */\n        _createBarGroup: function (itemAlign) {\n            var orient = this._orient;\n            var inverse = this.visualMapModel.get('inverse');\n\n            return new graphic.Group(\n                (orient === 'horizontal' && !inverse)\n                ? {scale: itemAlign === 'bottom' ? [1, 1] : [-1, 1], rotation: Math.PI / 2}\n                : (orient === 'horizontal' && inverse)\n                ? {scale: itemAlign === 'bottom' ? [-1, 1] : [1, 1], rotation: -Math.PI / 2}\n                : (orient === 'vertical' && !inverse)\n                ? {scale: itemAlign === 'left' ? [1, -1] : [-1, -1]}\n                : {scale: itemAlign === 'left' ? [1, 1] : [-1, 1]}\n            );\n        },\n\n        /**\n         * @private\n         */\n        _updateHandle: function (handleEnds, visualInRange) {\n            if (!this._useHandle) {\n                return;\n            }\n\n            var shapes = this._shapes;\n            var visualMapModel = this.visualMapModel;\n            var handleThumbs = shapes.handleThumbs;\n            var handleLabels = shapes.handleLabels;\n\n            each([0, 1], function (handleIndex) {\n                var handleThumb = handleThumbs[handleIndex];\n                handleThumb.setStyle('fill', visualInRange.handlesColor[handleIndex]);\n                handleThumb.position[1] = handleEnds[handleIndex];\n\n                // Update handle label position.\n                var textPoint = graphic.applyTransform(\n                    shapes.handleLabelPoints[handleIndex],\n                    graphic.getTransform(handleThumb, this.group)\n                );\n                handleLabels[handleIndex].setStyle({\n                    x: textPoint[0],\n                    y: textPoint[1],\n                    text: visualMapModel.formatValueText(this._dataInterval[handleIndex]),\n                    textVerticalAlign: 'middle',\n                    textAlign: this._applyTransform(\n                        this._orient === 'horizontal'\n                            ? (handleIndex === 0 ? 'bottom' : 'top')\n                            : 'left',\n                        shapes.barGroup\n                    )\n                });\n            }, this);\n        },\n\n        /**\n         * @private\n         * @param {number} cursorValue\n         * @param {number} textValue\n         * @param {string} [rangeSymbol]\n         * @param {number} [halfHoverLinkSize]\n         */\n        _showIndicator: function (cursorValue, textValue, rangeSymbol, halfHoverLinkSize) {\n            var visualMapModel = this.visualMapModel;\n            var dataExtent = visualMapModel.getExtent();\n            var itemSize = visualMapModel.itemSize;\n            var sizeExtent = [0, itemSize[1]];\n            var pos = linearMap(cursorValue, dataExtent, sizeExtent, true);\n\n            var shapes = this._shapes;\n            var indicator = shapes.indicator;\n            if (!indicator) {\n                return;\n            }\n\n            indicator.position[1] = pos;\n            indicator.attr('invisible', false);\n            indicator.setShape('points', createIndicatorPoints(\n                !!rangeSymbol, halfHoverLinkSize, pos, itemSize[1]\n            ));\n\n            var opts = {convertOpacityToAlpha: true};\n            var color = this.getControllerVisual(cursorValue, 'color', opts);\n            indicator.setStyle('fill', color);\n\n            // Update handle label position.\n            var textPoint = graphic.applyTransform(\n                shapes.indicatorLabelPoint,\n                graphic.getTransform(indicator, this.group)\n            );\n\n            var indicatorLabel = shapes.indicatorLabel;\n            indicatorLabel.attr('invisible', false);\n            var align = this._applyTransform('left', shapes.barGroup);\n            var orient = this._orient;\n            indicatorLabel.setStyle({\n                text: (rangeSymbol ? rangeSymbol : '') + visualMapModel.formatValueText(textValue),\n                textVerticalAlign: orient === 'horizontal' ? align : 'middle',\n                textAlign: orient === 'horizontal' ? 'center' : align,\n                x: textPoint[0],\n                y: textPoint[1]\n            });\n        },\n\n        /**\n         * @private\n         */\n        _enableHoverLinkToSeries: function () {\n            var self = this;\n            this._shapes.barGroup\n\n                .on('mousemove', function (e) {\n                    self._hovering = true;\n\n                    if (!self._dragging) {\n                        var itemSize = self.visualMapModel.itemSize;\n                        var pos = self._applyTransform(\n                            [e.offsetX, e.offsetY], self._shapes.barGroup, true, true\n                        );\n                        // For hover link show when hover handle, which might be\n                        // below or upper than sizeExtent.\n                        pos[1] = mathMin(mathMax(0, pos[1]), itemSize[1]);\n\n                        self._doHoverLinkToSeries(\n                            pos[1],\n                            0 <= pos[0] && pos[0] <= itemSize[0]\n                        );\n                    }\n                })\n\n                .on('mouseout', function () {\n                    // When mouse is out of handle, hoverLink still need\n                    // to be displayed when realtime is set as false.\n                    self._hovering = false;\n                    !self._dragging && self._clearHoverLinkToSeries();\n                });\n        },\n\n        /**\n         * @private\n         */\n        _enableHoverLinkFromSeries: function () {\n            var zr = this.api.getZr();\n\n            if (this.visualMapModel.option.hoverLink) {\n                zr.on('mouseover', this._hoverLinkFromSeriesMouseOver, this);\n                zr.on('mouseout', this._hideIndicator, this);\n            }\n            else {\n                this._clearHoverLinkFromSeries();\n            }\n        },\n\n        /**\n         * @private\n         */\n        _doHoverLinkToSeries: function (cursorPos, hoverOnBar) {\n            var visualMapModel = this.visualMapModel;\n            var itemSize = visualMapModel.itemSize;\n\n            if (!visualMapModel.option.hoverLink) {\n                return;\n            }\n\n            var sizeExtent = [0, itemSize[1]];\n            var dataExtent = visualMapModel.getExtent();\n\n            // For hover link show when hover handle, which might be below or upper than sizeExtent.\n            cursorPos = mathMin(mathMax(sizeExtent[0], cursorPos), sizeExtent[1]);\n\n            var halfHoverLinkSize = getHalfHoverLinkSize(visualMapModel, dataExtent, sizeExtent);\n            var hoverRange = [cursorPos - halfHoverLinkSize, cursorPos + halfHoverLinkSize];\n            var cursorValue = linearMap(cursorPos, sizeExtent, dataExtent, true);\n            var valueRange = [\n                linearMap(hoverRange[0], sizeExtent, dataExtent, true),\n                linearMap(hoverRange[1], sizeExtent, dataExtent, true)\n            ];\n            // Consider data range is out of visualMap range, see test/visualMap-continuous.html,\n            // where china and india has very large population.\n            hoverRange[0] < sizeExtent[0] && (valueRange[0] = -Infinity);\n            hoverRange[1] > sizeExtent[1] && (valueRange[1] = Infinity);\n\n            // Do not show indicator when mouse is over handle,\n            // otherwise labels overlap, especially when dragging.\n            if (hoverOnBar) {\n                if (valueRange[0] === -Infinity) {\n                    this._showIndicator(cursorValue, valueRange[1], '< ', halfHoverLinkSize);\n                }\n                else if (valueRange[1] === Infinity) {\n                    this._showIndicator(cursorValue, valueRange[0], '> ', halfHoverLinkSize);\n                }\n                else {\n                    this._showIndicator(cursorValue, cursorValue, '≈ ', halfHoverLinkSize);\n                }\n            }\n\n            // When realtime is set as false, handles, which are in barGroup,\n            // also trigger hoverLink, which help user to realize where they\n            // focus on when dragging. (see test/heatmap-large.html)\n            // When realtime is set as true, highlight will not show when hover\n            // handle, because the label on handle, which displays a exact value\n            // but not range, might mislead users.\n            var oldBatch = this._hoverLinkDataIndices;\n            var newBatch = [];\n            if (hoverOnBar || useHoverLinkOnHandle(visualMapModel)) {\n                newBatch = this._hoverLinkDataIndices = visualMapModel.findTargetDataIndices(valueRange);\n            }\n\n            var resultBatches = modelUtil.compressBatches(oldBatch, newBatch);\n            this._dispatchHighDown('downplay', helper.convertDataIndex(resultBatches[0]));\n            this._dispatchHighDown('highlight', helper.convertDataIndex(resultBatches[1]));\n        },\n\n        /**\n         * @private\n         */\n        _hoverLinkFromSeriesMouseOver: function (e) {\n            var el = e.target;\n\n            if (!el || el.dataIndex == null) {\n                return;\n            }\n\n            var dataModel = el.dataModel || this.ecModel.getSeriesByIndex(el.seriesIndex);\n            var data = dataModel.getData(el.dataType);\n            var dim = data.getDimension(this.visualMapModel.getDataDimension(data));\n            var value = data.get(dim, el.dataIndex, true);\n\n            if (!isNaN(value)) {\n                this._showIndicator(value, value);\n            }\n        },\n\n        /**\n         * @private\n         */\n        _hideIndicator: function () {\n            var shapes = this._shapes;\n            shapes.indicator && shapes.indicator.attr('invisible', true);\n            shapes.indicatorLabel && shapes.indicatorLabel.attr('invisible', true);\n        },\n\n        /**\n         * @private\n         */\n        _clearHoverLinkToSeries: function () {\n            this._hideIndicator();\n\n            var indices = this._hoverLinkDataIndices;\n\n            this._dispatchHighDown('downplay', helper.convertDataIndex(indices));\n\n            indices.length = 0;\n        },\n\n        /**\n         * @private\n         */\n        _clearHoverLinkFromSeries: function () {\n            this._hideIndicator();\n\n            var zr = this.api.getZr();\n            zr.off('mouseover', this._hoverLinkFromSeriesMouseOver);\n            zr.off('mouseout', this._hideIndicator);\n        },\n\n        /**\n         * @private\n         */\n        _applyTransform: function (vertex, element, inverse, global) {\n            var transform = graphic.getTransform(element, global ? null : this.group);\n\n            return graphic[\n                zrUtil.isArray(vertex) ? 'applyTransform' : 'transformDirection'\n            ](vertex, transform, inverse);\n        },\n\n        /**\n         * @private\n         */\n        _dispatchHighDown: function (type, batch) {\n            batch && batch.length && this.api.dispatchAction({\n                type: type,\n                batch: batch\n            });\n        },\n\n        /**\n         * @override\n         */\n        dispose: function () {\n            this._clearHoverLinkFromSeries();\n            this._clearHoverLinkToSeries();\n        },\n\n        /**\n         * @override\n         */\n        remove: function () {\n            this._clearHoverLinkFromSeries();\n            this._clearHoverLinkToSeries();\n        }\n\n    });\n\n    function createPolygon(points, cursor, onDrift, onDragEnd) {\n        return new graphic.Polygon({\n            shape: {points: points},\n            draggable: !!onDrift,\n            cursor: cursor,\n            drift: onDrift,\n            ondragend: onDragEnd\n        });\n    }\n\n    function createHandlePoints(handleIndex, textSize) {\n        return handleIndex === 0\n            ? [[0, 0], [textSize, 0], [textSize, -textSize]]\n            : [[0, 0], [textSize, 0], [textSize, textSize]];\n    }\n\n    function createIndicatorPoints(isRange, halfHoverLinkSize, pos, extentMax) {\n        return isRange\n            ? [ // indicate range\n                [0, -mathMin(halfHoverLinkSize, mathMax(pos, 0))],\n                [HOVER_LINK_OUT, 0],\n                [0, mathMin(halfHoverLinkSize, mathMax(extentMax - pos, 0))]\n            ]\n            : [ // indicate single value\n                [0, 0], [5, -5], [5, 5]\n            ];\n    }\n\n    function getHalfHoverLinkSize(visualMapModel, dataExtent, sizeExtent) {\n        var halfHoverLinkSize = HOVER_LINK_SIZE / 2;\n        var hoverLinkDataSize = visualMapModel.get('hoverLinkDataSize');\n        if (hoverLinkDataSize) {\n            halfHoverLinkSize = linearMap(hoverLinkDataSize, dataExtent, sizeExtent, true) / 2;\n        }\n        return halfHoverLinkSize;\n    }\n\n    function useHoverLinkOnHandle(visualMapModel) {\n        return !visualMapModel.get('realtime') && visualMapModel.get('hoverLinkOnHandle');\n    }\n\n    module.exports = ContinuousView;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/component/visualMap/ContinuousView.js\n// module id = 507\n// module chunks = 2 3","\n\n    var VisualMapModel = require('./VisualMapModel');\n    var zrUtil = require('zrender/lib/core/util');\n    var VisualMapping = require('../../visual/VisualMapping');\n    var visualDefault = require('../../visual/visualDefault');\n    var reformIntervals = require('../../util/number').reformIntervals;\n\n    var PiecewiseModel = VisualMapModel.extend({\n\n        type: 'visualMap.piecewise',\n\n        /**\n         * Order Rule:\n         *\n         * option.categories / option.pieces / option.text / option.selected:\n         *     If !option.inverse,\n         *     Order when vertical: ['top', ..., 'bottom'].\n         *     Order when horizontal: ['left', ..., 'right'].\n         *     If option.inverse, the meaning of\n         *     the order should be reversed.\n         *\n         * this._pieceList:\n         *     The order is always [low, ..., high].\n         *\n         * Mapping from location to low-high:\n         *     If !option.inverse\n         *     When vertical, top is high.\n         *     When horizontal, right is high.\n         *     If option.inverse, reverse.\n         */\n\n        /**\n         * @protected\n         */\n        defaultOption: {\n            selected: null,             // Object. If not specified, means selected.\n                                        // When pieces and splitNumber: {'0': true, '5': true}\n                                        // When categories: {'cate1': false, 'cate3': true}\n                                        // When selected === false, means all unselected.\n\n            minOpen: false,             // Whether include values that smaller than `min`.\n            maxOpen: false,             // Whether include values that bigger than `max`.\n\n            align: 'auto',              // 'auto', 'left', 'right'\n            itemWidth: 20,              // When put the controller vertically, it is the length of\n                                        // horizontal side of each item. Otherwise, vertical side.\n            itemHeight: 14,             // When put the controller vertically, it is the length of\n                                        // vertical side of each item. Otherwise, horizontal side.\n            itemSymbol: 'roundRect',\n            pieceList: null,            // Each item is Object, with some of those attrs:\n                                        // {min, max, lt, gt, lte, gte, value,\n                                        // color, colorSaturation, colorAlpha, opacity,\n                                        // symbol, symbolSize}, which customize the range or visual\n                                        // coding of the certain piece. Besides, see \"Order Rule\".\n            categories: null,           // category names, like: ['some1', 'some2', 'some3'].\n                                        // Attr min/max are ignored when categories set. See \"Order Rule\"\n            splitNumber: 5,             // If set to 5, auto split five pieces equally.\n                                        // If set to 0 and component type not set, component type will be\n                                        // determined as \"continuous\". (It is less reasonable but for ec2\n                                        // compatibility, see echarts/component/visualMap/typeDefaulter)\n            selectedMode: 'multiple',   // Can be 'multiple' or 'single'.\n            itemGap: 10,                // The gap between two items, in px.\n            hoverLink: true,            // Enable hover highlight.\n\n            showLabel: null             // By default, when text is used, label will hide (the logic\n                                        // is remained for compatibility reason)\n        },\n\n        /**\n         * @override\n         */\n        optionUpdated: function (newOption, isInit) {\n            PiecewiseModel.superApply(this, 'optionUpdated', arguments);\n\n            /**\n             * The order is always [low, ..., high].\n             * [{text: string, interval: Array.<number>}, ...]\n             * @private\n             * @type {Array.<Object>}\n             */\n            this._pieceList = [];\n\n            this.resetTargetSeries();\n            this.resetExtent();\n\n            /**\n             * 'pieces', 'categories', 'splitNumber'\n             * @type {string}\n             */\n            var mode = this._mode = this._determineMode();\n\n            resetMethods[this._mode].call(this);\n\n            this._resetSelected(newOption, isInit);\n\n            var categories = this.option.categories;\n\n            this.resetVisual(function (mappingOption, state) {\n                if (mode === 'categories') {\n                    mappingOption.mappingMethod = 'category';\n                    mappingOption.categories = zrUtil.clone(categories);\n                }\n                else {\n                    mappingOption.dataExtent = this.getExtent();\n                    mappingOption.mappingMethod = 'piecewise';\n                    mappingOption.pieceList = zrUtil.map(this._pieceList, function (piece) {\n                        var piece = zrUtil.clone(piece);\n                        if (state !== 'inRange') {\n                            // FIXME\n                            // outOfRange do not support special visual in pieces.\n                            piece.visual = null;\n                        }\n                        return piece;\n                    });\n                }\n            });\n        },\n\n        /**\n         * @protected\n         * @override\n         */\n        completeVisualOption: function () {\n            // Consider this case:\n            // visualMap: {\n            //      pieces: [{symbol: 'circle', lt: 0}, {symbol: 'rect', gte: 0}]\n            // }\n            // where no inRange/outOfRange set but only pieces. So we should make\n            // default inRange/outOfRange for this case, otherwise visuals that only\n            // appear in `pieces` will not be taken into account in visual encoding.\n\n            var option = this.option;\n            var visualTypesInPieces = {};\n            var visualTypes = VisualMapping.listVisualTypes();\n            var isCategory = this.isCategory();\n\n            zrUtil.each(option.pieces, function (piece) {\n                zrUtil.each(visualTypes, function (visualType) {\n                    if (piece.hasOwnProperty(visualType)) {\n                        visualTypesInPieces[visualType] = 1;\n                    }\n                });\n            });\n\n            zrUtil.each(visualTypesInPieces, function (v, visualType) {\n                var exists = 0;\n                zrUtil.each(this.stateList, function (state) {\n                    exists |= has(option, state, visualType)\n                        || has(option.target, state, visualType);\n                }, this);\n\n                !exists && zrUtil.each(this.stateList, function (state) {\n                    (option[state] || (option[state] = {}))[visualType] = visualDefault.get(\n                        visualType, state === 'inRange' ? 'active' : 'inactive', isCategory\n                    );\n                });\n            }, this);\n\n            function has(obj, state, visualType) {\n                return obj && obj[state] && (\n                    zrUtil.isObject(obj[state])\n                        ? obj[state].hasOwnProperty(visualType)\n                        : obj[state] === visualType // e.g., inRange: 'symbol'\n                );\n            }\n\n            VisualMapModel.prototype.completeVisualOption.apply(this, arguments);\n        },\n\n        _resetSelected: function (newOption, isInit) {\n            var thisOption = this.option;\n            var pieceList = this._pieceList;\n\n            // Selected do not merge but all override.\n            var selected = (isInit ? thisOption : newOption).selected || {};\n            thisOption.selected = selected;\n\n            // Consider 'not specified' means true.\n            zrUtil.each(pieceList, function (piece, index) {\n                var key = this.getSelectedMapKey(piece);\n                if (!selected.hasOwnProperty(key)) {\n                    selected[key] = true;\n                }\n            }, this);\n\n            if (thisOption.selectedMode === 'single') {\n                // Ensure there is only one selected.\n                var hasSel = false;\n\n                zrUtil.each(pieceList, function (piece, index) {\n                    var key = this.getSelectedMapKey(piece);\n                    if (selected[key]) {\n                        hasSel\n                            ? (selected[key] = false)\n                            : (hasSel = true);\n                    }\n                }, this);\n            }\n            // thisOption.selectedMode === 'multiple', default: all selected.\n        },\n\n        /**\n         * @public\n         */\n        getSelectedMapKey: function (piece) {\n            return this._mode === 'categories'\n                ? piece.value + '' : piece.index + '';\n        },\n\n        /**\n         * @public\n         */\n        getPieceList: function () {\n            return this._pieceList;\n        },\n\n        /**\n         * @private\n         * @return {string}\n         */\n        _determineMode: function () {\n            var option = this.option;\n\n            return option.pieces && option.pieces.length > 0\n                ? 'pieces'\n                : this.option.categories\n                ? 'categories'\n                : 'splitNumber';\n        },\n\n        /**\n         * @public\n         * @override\n         */\n        setSelected: function (selected) {\n            this.option.selected = zrUtil.clone(selected);\n        },\n\n        /**\n         * @public\n         * @override\n         */\n        getValueState: function (value) {\n            var index = VisualMapping.findPieceIndex(value, this._pieceList);\n\n            return index != null\n                ? (this.option.selected[this.getSelectedMapKey(this._pieceList[index])]\n                    ? 'inRange' : 'outOfRange'\n                )\n                : 'outOfRange';\n        },\n\n        /**\n         * @public\n         * @params {number} pieceIndex piece index in visualMapModel.getPieceList()\n         * @return {Array.<Object>} [{seriesId, dataIndices: <Array.<number>>}, ...]\n         */\n        findTargetDataIndices: function (pieceIndex) {\n            var result = [];\n\n            this.eachTargetSeries(function (seriesModel) {\n                var dataIndices = [];\n                var data = seriesModel.getData();\n\n                data.each(this.getDataDimension(data), function (value, dataIndex) {\n                    // Should always base on model pieceList, because it is order sensitive.\n                    var pIdx = VisualMapping.findPieceIndex(value, this._pieceList);\n                    pIdx === pieceIndex && dataIndices.push(dataIndex);\n                }, true, this);\n\n                result.push({seriesId: seriesModel.id, dataIndex: dataIndices});\n            }, this);\n\n            return result;\n        },\n\n        /**\n         * @private\n         * @param {Object} piece piece.value or piece.interval is required.\n         * @return {number} Can be Infinity or -Infinity\n         */\n        getRepresentValue: function (piece) {\n            var representValue;\n            if (this.isCategory()) {\n                representValue = piece.value;\n            }\n            else {\n                if (piece.value != null) {\n                    representValue = piece.value;\n                }\n                else {\n                    var pieceInterval = piece.interval || [];\n                    representValue = (pieceInterval[0] === -Infinity && pieceInterval[1] === Infinity)\n                        ? 0\n                        : (pieceInterval[0] + pieceInterval[1]) / 2;\n                }\n            }\n            return representValue;\n        },\n\n        getVisualMeta: function (getColorVisual) {\n            // Do not support category. (category axis is ordinal, numerical)\n            if (this.isCategory()) {\n                return;\n            }\n\n            var stops = [];\n            var outerColors = [];\n            var visualMapModel = this;\n\n            function setStop(interval, valueState) {\n                var representValue = visualMapModel.getRepresentValue({interval: interval});\n                if (!valueState) {\n                    valueState = visualMapModel.getValueState(representValue);\n                }\n                var color = getColorVisual(representValue, valueState);\n                if (interval[0] === -Infinity) {\n                    outerColors[0] = color;\n                }\n                else if (interval[1] === Infinity) {\n                    outerColors[1] = color;\n                }\n                else {\n                    stops.push(\n                        {value: interval[0], color: color},\n                        {value: interval[1], color: color}\n                    );\n                }\n            }\n\n            // Suplement\n            var pieceList = this._pieceList.slice();\n            if (!pieceList.length) {\n                pieceList.push({interval: [-Infinity, Infinity]});\n            }\n            else {\n                var edge = pieceList[0].interval[0];\n                edge !== -Infinity && pieceList.unshift({interval: [-Infinity, edge]});\n                edge = pieceList[pieceList.length - 1].interval[1];\n                edge !== Infinity && pieceList.push({interval: [edge, Infinity]});\n            }\n\n            var curr = -Infinity;\n            zrUtil.each(pieceList, function (piece) {\n                var interval = piece.interval;\n                if (interval) {\n                    // Fulfill gap.\n                    interval[0] > curr && setStop([curr, interval[0]], 'outOfRange');\n                    setStop(interval.slice());\n                    curr = interval[1];\n                }\n            }, this);\n\n            return {stops: stops, outerColors: outerColors};\n        }\n\n    });\n\n    /**\n     * Key is this._mode\n     * @type {Object}\n     * @this {module:echarts/component/viusalMap/PiecewiseMode}\n     */\n    var resetMethods = {\n\n        splitNumber: function () {\n            var thisOption = this.option;\n            var pieceList = this._pieceList;\n            var precision = thisOption.precision;\n            var dataExtent = this.getExtent();\n            var splitNumber = thisOption.splitNumber;\n            splitNumber = Math.max(parseInt(splitNumber, 10), 1);\n            thisOption.splitNumber = splitNumber;\n\n            var splitStep = (dataExtent[1] - dataExtent[0]) / splitNumber;\n            // Precision auto-adaption\n            while (+splitStep.toFixed(precision) !== splitStep && precision < 5) {\n                precision++;\n            }\n            thisOption.precision = precision;\n            splitStep = +splitStep.toFixed(precision);\n\n            var index = 0;\n\n            if (thisOption.minOpen) {\n                pieceList.push({\n                    index: index++,\n                    interval: [-Infinity, dataExtent[0]],\n                    close: [0, 0]\n                });\n            }\n\n            for (\n                var curr = dataExtent[0], len = index + splitNumber;\n                index < len;\n                curr += splitStep\n            ) {\n                var max = index === splitNumber - 1 ? dataExtent[1] : (curr + splitStep);\n\n                pieceList.push({\n                    index: index++,\n                    interval: [curr, max],\n                    close: [1, 1]\n                });\n            }\n\n            if (thisOption.maxOpen) {\n                pieceList.push({\n                    index: index++,\n                    interval: [dataExtent[1], Infinity],\n                    close: [0, 0]\n                });\n            }\n\n            reformIntervals(pieceList);\n\n            zrUtil.each(pieceList, function (piece) {\n                piece.text = this.formatValueText(piece.interval);\n            }, this);\n        },\n\n        categories: function () {\n            var thisOption = this.option;\n            zrUtil.each(thisOption.categories, function (cate) {\n                // FIXME category模式也使用pieceList，但在visualMapping中不是使用pieceList。\n                // 是否改一致。\n                this._pieceList.push({\n                    text: this.formatValueText(cate, true),\n                    value: cate\n                });\n            }, this);\n\n            // See \"Order Rule\".\n            normalizeReverse(thisOption, this._pieceList);\n        },\n\n        pieces: function () {\n            var thisOption = this.option;\n            var pieceList = this._pieceList;\n\n            zrUtil.each(thisOption.pieces, function (pieceListItem, index) {\n\n                if (!zrUtil.isObject(pieceListItem)) {\n                    pieceListItem = {value: pieceListItem};\n                }\n\n                var item = {text: '', index: index};\n\n                if (pieceListItem.label != null) {\n                    item.text = pieceListItem.label;\n                }\n\n                if (pieceListItem.hasOwnProperty('value')) {\n                    var value = item.value = pieceListItem.value;\n                    item.interval = [value, value];\n                    item.close = [1, 1];\n                }\n                else {\n                    // `min` `max` is legacy option.\n                    // `lt` `gt` `lte` `gte` is recommanded.\n                    var interval = item.interval = [];\n                    var close = item.close = [0, 0];\n\n                    var closeList = [1, 0, 1];\n                    var infinityList = [-Infinity, Infinity];\n\n                    var useMinMax = [];\n                    for (var lg = 0; lg < 2; lg++) {\n                        var names = [['gte', 'gt', 'min'], ['lte', 'lt', 'max']][lg];\n                        for (var i = 0; i < 3 && interval[lg] == null; i++) {\n                            interval[lg] = pieceListItem[names[i]];\n                            close[lg] = closeList[i];\n                            useMinMax[lg] = i === 2;\n                        }\n                        interval[lg] == null && (interval[lg] = infinityList[lg]);\n                    }\n                    useMinMax[0] && interval[1] === Infinity && (close[0] = 0);\n                    useMinMax[1] && interval[0] === -Infinity && (close[1] = 0);\n\n                    if (__DEV__) {\n                        if (interval[0] > interval[1]) {\n                            console.warn(\n                                'Piece ' + index + 'is illegal: ' + interval\n                                + ' lower bound should not greater then uppper bound.'\n                            );\n                        }\n                    }\n\n                    if (interval[0] === interval[1] && close[0] && close[1]) {\n                        // Consider: [{min: 5, max: 5, visual: {...}}, {min: 0, max: 5}],\n                        // we use value to lift the priority when min === max\n                        item.value = interval[0];\n                    }\n                }\n\n                item.visual = VisualMapping.retrieveVisuals(pieceListItem);\n\n                pieceList.push(item);\n\n            }, this);\n\n            // See \"Order Rule\".\n            normalizeReverse(thisOption, pieceList);\n            // Only pieces\n            reformIntervals(pieceList);\n\n            zrUtil.each(pieceList, function (piece) {\n                var close = piece.close;\n                var edgeSymbols = [['<', '≤'][close[1]], ['>', '≥'][close[0]]];\n                piece.text = piece.text || this.formatValueText(\n                    piece.value != null ? piece.value : piece.interval,\n                    false,\n                    edgeSymbols\n                );\n            }, this);\n        }\n    };\n\n    function normalizeReverse(thisOption, pieceList) {\n        var inverse = thisOption.inverse;\n        if (thisOption.orient === 'vertical' ? !inverse : inverse) {\n             pieceList.reverse();\n        }\n    }\n\n    module.exports = PiecewiseModel;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/component/visualMap/PiecewiseModel.js\n// module id = 508\n// module chunks = 2 3","\n\n    var VisualMapView = require('./VisualMapView');\n    var zrUtil = require('zrender/lib/core/util');\n    var graphic = require('../../util/graphic');\n    var symbolCreators = require('../../util/symbol');\n    var layout = require('../../util/layout');\n    var helper = require('./helper');\n\n    var PiecewiseVisualMapView = VisualMapView.extend({\n\n        type: 'visualMap.piecewise',\n\n        /**\n         * @protected\n         * @override\n         */\n        doRender: function () {\n            var thisGroup = this.group;\n\n            thisGroup.removeAll();\n\n            var visualMapModel = this.visualMapModel;\n            var textGap = visualMapModel.get('textGap');\n            var textStyleModel = visualMapModel.textStyleModel;\n            var textFont = textStyleModel.getFont();\n            var textFill = textStyleModel.getTextColor();\n            var itemAlign = this._getItemAlign();\n            var itemSize = visualMapModel.itemSize;\n            var viewData = this._getViewData();\n            var endsText = viewData.endsText;\n            var showLabel = zrUtil.retrieve(visualMapModel.get('showLabel', true), !endsText);\n\n            endsText && this._renderEndsText(\n                thisGroup, endsText[0], itemSize, showLabel, itemAlign\n            );\n\n            zrUtil.each(viewData.viewPieceList, renderItem, this);\n\n            endsText && this._renderEndsText(\n                thisGroup, endsText[1], itemSize, showLabel, itemAlign\n            );\n\n            layout.box(\n                visualMapModel.get('orient'), thisGroup, visualMapModel.get('itemGap')\n            );\n\n            this.renderBackground(thisGroup);\n\n            this.positionGroup(thisGroup);\n\n            function renderItem(item) {\n                var piece = item.piece;\n\n                var itemGroup = new graphic.Group();\n                itemGroup.onclick = zrUtil.bind(this._onItemClick, this, piece);\n\n                this._enableHoverLink(itemGroup, item.indexInModelPieceList);\n\n                var representValue = visualMapModel.getRepresentValue(piece);\n\n                this._createItemSymbol(\n                    itemGroup, representValue, [0, 0, itemSize[0], itemSize[1]]\n                );\n\n                if (showLabel) {\n                    var visualState = this.visualMapModel.getValueState(representValue);\n\n                    itemGroup.add(new graphic.Text({\n                        style: {\n                            x: itemAlign === 'right' ? -textGap : itemSize[0] + textGap,\n                            y: itemSize[1] / 2,\n                            text: piece.text,\n                            textVerticalAlign: 'middle',\n                            textAlign: itemAlign,\n                            textFont: textFont,\n                            fill: textFill,\n                            opacity: visualState === 'outOfRange' ? 0.5 : 1\n                        }\n                    }));\n                }\n\n                thisGroup.add(itemGroup);\n            }\n        },\n\n        /**\n         * @private\n         */\n        _enableHoverLink: function (itemGroup, pieceIndex) {\n            itemGroup\n                .on('mouseover', zrUtil.bind(onHoverLink, this, 'highlight'))\n                .on('mouseout', zrUtil.bind(onHoverLink, this, 'downplay'));\n\n            function onHoverLink(method) {\n                var visualMapModel = this.visualMapModel;\n\n                visualMapModel.option.hoverLink && this.api.dispatchAction({\n                    type: method,\n                    batch: helper.convertDataIndex(\n                        visualMapModel.findTargetDataIndices(pieceIndex)\n                    )\n                });\n            }\n        },\n\n        /**\n         * @private\n         */\n        _getItemAlign: function () {\n            var visualMapModel = this.visualMapModel;\n            var modelOption = visualMapModel.option;\n\n            if (modelOption.orient === 'vertical') {\n                return helper.getItemAlign(\n                    visualMapModel, this.api, visualMapModel.itemSize\n                );\n            }\n            else { // horizontal, most case left unless specifying right.\n                var align = modelOption.align;\n                if (!align || align === 'auto') {\n                    align = 'left';\n                }\n                return align;\n            }\n        },\n\n        /**\n         * @private\n         */\n        _renderEndsText: function (group, text, itemSize, showLabel, itemAlign) {\n            if (!text) {\n                return;\n            }\n\n            var itemGroup = new graphic.Group();\n            var textStyleModel = this.visualMapModel.textStyleModel;\n\n            itemGroup.add(new graphic.Text({\n                style: {\n                    x: showLabel ? (itemAlign === 'right' ? itemSize[0] : 0) : itemSize[0] / 2,\n                    y: itemSize[1] / 2,\n                    textVerticalAlign: 'middle',\n                    textAlign: showLabel ? itemAlign : 'center',\n                    text: text,\n                    textFont: textStyleModel.getFont(),\n                    fill: textStyleModel.getTextColor()\n                }\n            }));\n\n            group.add(itemGroup);\n        },\n\n        /**\n         * @private\n         * @return {Object} {peiceList, endsText} The order is the same as screen pixel order.\n         */\n        _getViewData: function () {\n            var visualMapModel = this.visualMapModel;\n\n            var viewPieceList = zrUtil.map(visualMapModel.getPieceList(), function (piece, index) {\n                return {piece: piece, indexInModelPieceList: index};\n            });\n            var endsText = visualMapModel.get('text');\n\n            // Consider orient and inverse.\n            var orient = visualMapModel.get('orient');\n            var inverse = visualMapModel.get('inverse');\n\n            // Order of model pieceList is always [low, ..., high]\n            if (orient === 'horizontal' ? inverse : !inverse) {\n                viewPieceList.reverse();\n            }\n            // Origin order of endsText is [high, low]\n            else if (endsText) {\n                endsText = endsText.slice().reverse();\n            }\n\n            return {viewPieceList: viewPieceList, endsText: endsText};\n        },\n\n        /**\n         * @private\n         */\n        _createItemSymbol: function (group, representValue, shapeParam) {\n            group.add(symbolCreators.createSymbol(\n                this.getControllerVisual(representValue, 'symbol'),\n                shapeParam[0], shapeParam[1], shapeParam[2], shapeParam[3],\n                this.getControllerVisual(representValue, 'color')\n            ));\n        },\n\n        /**\n         * @private\n         */\n        _onItemClick: function (piece) {\n            var visualMapModel = this.visualMapModel;\n            var option = visualMapModel.option;\n            var selected = zrUtil.clone(option.selected);\n            var newKey = visualMapModel.getSelectedMapKey(piece);\n\n            if (option.selectedMode === 'single') {\n                selected[newKey] = true;\n                zrUtil.each(selected, function (o, key) {\n                    selected[key] = key === newKey;\n                });\n            }\n            else {\n                selected[newKey] = !selected[newKey];\n            }\n\n            this.api.dispatchAction({\n                type: 'selectDataRange',\n                from: this.uid,\n                visualMapId: this.visualMapModel.id,\n                selected: selected\n            });\n        }\n    });\n\n    module.exports = PiecewiseVisualMapView;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/component/visualMap/PiecewiseView.js\n// module id = 509\n// module chunks = 2 3","/**\n * DataZoom component entry\n */\n\n\n    require('../echarts').registerPreprocessor(\n        require('./visualMap/preprocessor')\n    );\n\n    require('./visualMap/typeDefaulter');\n    require('./visualMap/visualEncoding');\n    require('./visualMap/ContinuousModel');\n    require('./visualMap/ContinuousView');\n    require('./visualMap/visualMapAction');\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/component/visualMapContinuous.js\n// module id = 510\n// module chunks = 2 3","/**\n * DataZoom component entry\n */\n\n\n    require('../echarts').registerPreprocessor(\n        require('./visualMap/preprocessor')\n    );\n\n    require('./visualMap/typeDefaulter');\n    require('./visualMap/visualEncoding');\n    require('./visualMap/PiecewiseModel');\n    require('./visualMap/PiecewiseView');\n    require('./visualMap/visualMapAction');\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts/lib/component/visualMapPiecewise.js\n// module id = 511\n// module chunks = 2 3","<template>\n    <div :class=\"className\" :id=\"id\" :style=\"{height:height,width:width}\"></div>\n</template>\n<script>\n    // 引入 ECharts 主模块\n    const echarts = require('echarts/lib/echarts');\n    // 引入柱状图\n    require('echarts/lib/chart/bar');\n    require('echarts/lib/chart/line');\n    // 引入提示框和标题组件\n    require('echarts/lib/component/tooltip');\n    require('echarts/lib/component/title');\n\n    require('echarts/lib/component/visualMap');\n    export default {\n      name: 'barPercent',\n      props: {\n        className: {\n          type: String,\n          default: 'chart'\n        },\n        id: {\n          type: String,\n          default: 'chart'\n        },\n        width: {\n          type: String,\n          default: '200px'\n        },\n        height: {\n          type: String,\n          default: '200px'\n        }\n      },\n      data() {\n        return {};\n      },\n      mounted() {\n        this.initBar();\n      },\n      methods: {\n        initBar() {\n          this.chart = echarts.init(document.getElementById(this.id));\n\n          const xAxisData = [];\n          const data = [];\n          for (let i = 0; i < 30; i++) {\n            xAxisData.push(i + '号');\n            data.push(Math.round(Math.random() * 2 + 3))\n          }\n\n          this.chart.setOption(\n            {\n              backgroundColor: '#08263a',\n              tooltip: {\n                trigger: 'axis'\n              },\n              xAxis: {\n                show: false,\n                data: xAxisData\n              },\n              visualMap: {\n                show: false,\n                min: 0,\n                max: 50,\n                dimension: 0,\n                inRange: {\n                  color: ['#4a657a', '#308e92', '#b1cfa5', '#f5d69f', '#f5898b', '#ef5055']\n                }\n              },\n              yAxis: {\n                axisLine: {\n                  show: false\n                },\n                axisLabel: {\n                  textStyle: {\n                    color: '#4a657a'\n                  }\n                },\n                splitLine: {\n                  show: true,\n                  lineStyle: {\n                    color: '#08263f'\n                  }\n                },\n                axisTick: {}\n              },\n              series: [{\n                type: 'bar',\n                data,\n                name: '撸文数',\n                itemStyle: {\n                  normal: {\n                    barBorderRadius: 5,\n                    shadowBlur: 10,\n                    shadowColor: '#111'\n                  }\n                },\n                animationEasing: 'elasticOut',\n                animationEasingUpdate: 'elasticOut',\n                animationDelay(idx) {\n                  return idx * 20;\n                },\n                animationDelayUpdate(idx) {\n                  return idx * 20;\n                }\n              }]\n            })\n        }\n      }\n    }\n</script>\n\n\n\n// WEBPACK FOOTER //\n// keyboard.vue?e26d7ee0","<template>\n  <div class=\"components-container\" style='height:100vh'>\n    <div class='chart-container'>\n       <keyboardChart height='100%' width='100%' />\n    </div>\n\n  </div>\n</template>\n<script>\n    import keyboardChart from 'components/Charts/keyboard';\n\n    export default {\n      components: { keyboardChart }\n    };\n</script>\n\n<style scoped>\n.chart-container{\n    position: relative;\n    width: 100%;\n    height: 90%;\n}\n</style>\n\n\n\n\n// WEBPACK FOOTER //\n// keyboard.vue?3d128aa6","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")(true);\n// imports\n\n\n// module\nexports.push([module.id, \".chart-container[data-v-cc70f942]{position:relative;width:100%;height:90%}\", \"\", {\"version\":3,\"sources\":[\"/Volumes/Work/Code/vue/vue-element-admin/src/views/charts/keyboard.vue\"],\"names\":[],\"mappings\":\"AACA,kCACI,kBAAmB,AACnB,WAAY,AACZ,UAAY,CACf\",\"file\":\"keyboard.vue\",\"sourcesContent\":[\"\\n.chart-container[data-v-cc70f942]{\\n    position: relative;\\n    width: 100%;\\n    height: 90%;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader?{\"minimize\":true,\"sourceMap\":true}!./~/vue-loader/lib/style-compiler?{\"vue\":true,\"id\":\"data-v-cc70f942\",\"scoped\":true,\"hasInlineConfig\":false}!./~/vue-loader/lib/selector.js?type=styles&index=0!./src/views/charts/keyboard.vue\n// module id = 634\n// module chunks = 3","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../node_modules/css-loader/index.js?{\\\"minimize\\\":true,\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-cc70f942\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./keyboard.vue\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = require(\"!../../../node_modules/vue-style-loader/lib/addStylesClient.js\")(\"777ca470\", content, true);\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/extract-text-webpack-plugin/loader.js?{\"omit\":1,\"remove\":true}!./~/vue-style-loader!./~/css-loader?{\"minimize\":true,\"sourceMap\":true}!./~/vue-loader/lib/style-compiler?{\"vue\":true,\"id\":\"data-v-cc70f942\",\"scoped\":true,\"hasInlineConfig\":false}!./~/vue-loader/lib/selector.js?type=styles&index=0!./src/views/charts/keyboard.vue\n// module id = 692\n// module chunks = 3","var Component = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")(\n  /* script */\n  require(\"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./keyboard.vue\"),\n  /* template */\n  require(\"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-6f601039\\\"}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./keyboard.vue\"),\n  /* styles */\n  null,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/Charts/keyboard.vue\n// module id = 710\n// module chunks = 3","module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    class: _vm.className,\n    style: ({\n      height: _vm.height,\n      width: _vm.width\n    }),\n    attrs: {\n      \"id\": _vm.id\n    }\n  })\n},staticRenderFns: []}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader/lib/template-compiler?{\"id\":\"data-v-6f601039\"}!./~/vue-loader/lib/selector.js?type=template&index=0!./src/components/Charts/keyboard.vue\n// module id = 761\n// module chunks = 3","module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"components-container\",\n    staticStyle: {\n      \"height\": \"100vh\"\n    }\n  }, [_c('div', {\n    staticClass: \"chart-container\"\n  }, [_c('keyboardChart', {\n    attrs: {\n      \"height\": \"100%\",\n      \"width\": \"100%\"\n    }\n  })], 1)])\n},staticRenderFns: []}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader/lib/template-compiler?{\"id\":\"data-v-cc70f942\"}!./~/vue-loader/lib/selector.js?type=template&index=0!./src/views/charts/keyboard.vue\n// module id = 774\n// module chunks = 3"],"sourceRoot":""}